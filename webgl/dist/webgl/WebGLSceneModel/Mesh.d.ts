import { math } from "../../viewer/index";
import type { Pickable } from "../Pickable";
import type { WebGLSceneObject } from "./WebGLSceneObject";
import type { RenderContext } from "../RenderContext";
import type { Layer } from "./Layer";
declare class Mesh implements Pickable {
    id: string;
    pickId: number;
    viewerObject: WebGLSceneObject | null;
    aabb: math.FloatArrayParam;
    layer: Layer;
    meshId: any;
    color: math.FloatArrayParam;
    colorize: math.FloatArrayParam;
    colorizing: boolean;
    transparent: boolean;
    constructor(params: {
        id: string;
        color: math.FloatArrayParam;
        opacity: number;
        layer: Layer;
    });
    setSceneObject(viewerObject: WebGLSceneObject): void;
    build(flags: number): void;
    finalize2(): void;
    setVisible(flags: any): void;
    setColor(color: math.FloatArrayParam): void;
    setColorize(colorize: math.FloatArrayParam | null): void;
    setOpacity(opacity: number, flags: number): void;
    setOffset(offset: math.FloatArrayParam): void;
    setHighlighted(flags: number): void;
    setXRayed(flags: number): void;
    setSelected(flags: number): void;
    setEdges(flags: number): void;
    setClippable(flags: number): void;
    setCollidable(flags: number): void;
    setPickable(flags: number): void;
    setCulled(flags: number): void;
    canPickTriangle(): boolean;
    drawPickTriangles(drawFlags: any, renderContext: any): void;
    pickTriangleSurface(pickResult: any): void;
    canPickWorldPos(): boolean;
    drawPickNormals(renderContext: RenderContext): void;
    delegatePickedEntity(): WebGLSceneObject;
    destroy(): void;
}
export { Mesh };
