{"version":3,"file":"index.js","sources":["../src/KTX2TextureTranscoder.ts","../../constants/dist/index.es"],"sourcesContent":["import {\n    LinearEncoding,\n    LinearFilter,\n    LinearMipmapLinearFilter,\n    RGB_ETC1_Format,\n    RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format,\n    RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGBAFormat,\n    sRGBEncoding\n} from \"@xeokit/constants\";\nimport {FileLoader, WorkerPool} from \"@xeokit/utils\";\nimport type {Capabilities, TextureCompressedParams, TextureTranscoder} from \"@xeokit/core\";\n\nconst KTX2TransferSRGB = 2;\nconst KTX2_ALPHA_PREMULTIPLIED = 1;\n\nlet activeTranscoders = 0;\n\nconst BasisFormat = {\n    ETC1S: 0,\n    UASTC_4x4: 1\n};\n\nconst TranscoderFormat = {\n    ETC1: 0,\n    ETC2: 1,\n    BC1: 2,\n    BC3: 3,\n    BC4: 4,\n    BC5: 5,\n    BC7_M6_OPAQUE_ONLY: 6,\n    BC7_M5: 7,\n    PVRTC1_4_RGB: 8,\n    PVRTC1_4_RGBA: 9,\n    ASTC_4x4: 10,\n    ATC_RGB: 11,\n    ATC_RGBA_INTERPOLATED_ALPHA: 12,\n    RGBA32: 13,\n    RGB565: 14,\n    BGR565: 15,\n    RGBA4444: 16\n};\n\nconst EngineFormat = {\n    RGBAFormat: RGBAFormat,\n    RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format: RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n    RGB_ETC1_Format: RGB_ETC1_Format,\n    RGB_ETC2_Format: RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n\n/**\n * KTX2 texture decompression strategy.\n *\n * See {@link @xeokit/ktx2} for usage.\n */\nexport class KTX2TextureTranscoder implements TextureTranscoder {\n\n    #transcoderPath: string;\n    #transcoderBinary: any;\n    #transcoderPending: null | Promise<void>;\n    #workerPool: WorkerPool;\n    #workerSourceURL: string;\n    #workerConfig: null | { astcSupported: any; etc1Supported: any; pvrtcSupported: any; etc2Supported: any; dxtSupported: any; bptcSupported: any };\n    #supportedFileTypes: string[];\n    #withCredentials: boolean;\n\n    /**\n     * Creates a new KTX2TextureTranscoder.\n     *\n     * @param {String} [params.transcoderPath=\"https://cdn.jsdelivr.net/npm/@xeokit/sdk/dist/basis/\"] Path to the Basis\n     * transcoder module that internally does the heavy lifting for our KTX2TextureTranscoder. If we omit this configuration,\n     * then our KTX2TextureTranscoder will load it from ````https://cdn.jsdelivr.net/npm/@xeokit/sdk/dist/basis/```` by\n     * default. Therefore, make sure your application is connected to the internet if you wish to use the default transcoder path.\n     * @param {Number} [params.workerLimit] The maximum number of Workers to use for transcoding.\n     */\n    constructor(params: { transcoderPath?: string, workerLimit?: number }) {\n\n        this.#transcoderPath = params.transcoderPath || \"https://cdn.jsdelivr.net/npm/@xeokit/sdk/dist/basis/\";\n        this.#transcoderBinary = null;\n        this.#transcoderPending = null;\n        this.#workerPool = new WorkerPool();\n        this.#workerSourceURL = '';\n\n        if (params.workerLimit) {\n            this.#workerPool.setWorkerLimit(params.workerLimit);\n        }\n\n        this.#workerConfig = null;\n        this.#withCredentials = false;\n        this.#supportedFileTypes = [\"xkt2\"];\n    }\n\n    /**\n     * Initializes this transcoder.\n     *\n     * @param capabilities A set of flags indicating the capabilities of this TextureTranscoder.\n     */\n    init(capabilities: Capabilities) {\n        this.#workerConfig = {\n            astcSupported: capabilities.astcSupported,\n            etc1Supported: capabilities.etc1Supported,\n            etc2Supported: capabilities.etc2Supported,\n            dxtSupported: capabilities.dxtSupported,\n            bptcSupported: capabilities.bptcSupported,\n            pvrtcSupported: capabilities.pvrtcSupported\n        };\n    }\n\n    /**\n     * Transcodes texture data from transcoded buffers.\n     *\n     * @param {ArrayBuffer[]} buffers Transcoded input texture data. Given as an array of buffers so that we can support multi-image textures, such as cube maps.\n     * @param {*} config Transcoding options.\n     * @returns {Promise<TextureCompressedParams>} Transcoded output texture data.\n     */\n    transcode(buffers: ArrayBuffer[], config = {}): Promise<TextureCompressedParams> {\n        return new Promise<TextureCompressedParams>((resolve, reject) => {\n            const taskConfig = config;\n            this.#initTranscoder().then(() => {\n                return this.#workerPool.postMessage({\n                    type: 'transcode',\n                    buffers,\n                    taskConfig: taskConfig\n                }, buffers);\n            }).then((e) => {\n                // @ts-ignore\n                const transcodeResult = e.data;\n                const {mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags} = transcodeResult;\n                if (type === 'error') {\n                    return reject(error);\n                }\n                resolve(<TextureCompressedParams>{\n                    mipmaps,\n                    props: {\n                        format,\n                        minFilter: mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter,\n                        magFilter: mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter,\n                        encoding: dfdTransferFn === KTX2TransferSRGB ? sRGBEncoding : LinearEncoding,\n                        premultiplyAlpha: !!(dfdFlags & KTX2_ALPHA_PREMULTIPLIED)\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * Destroys this KTX2TextureTranscoder\n     */\n    destroy() {\n        URL.revokeObjectURL(this.#workerSourceURL);\n        this.#workerPool.destroy();\n        activeTranscoders--;\n    }\n\n    #initTranscoder() {\n        if (!this.#transcoderPending) {\n            const jsLoader = new FileLoader();\n            jsLoader.setPath(this.#transcoderPath);\n            jsLoader.setWithCredentials(this.#withCredentials);\n            // @ts-ignore\n            const jsContent = jsLoader.loadAsync('basis_transcoder.js');\n            const binaryLoader = new FileLoader();\n            binaryLoader.setPath(this.#transcoderPath);\n            binaryLoader.setResponseType('arraybuffer');\n            binaryLoader.setWithCredentials(this.#withCredentials);\n            // @ts-ignore\n            const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n            this.#transcoderPending = Promise.all([jsContent, binaryContent])\n                .then(([jsContent, binaryContent]) => {\n                    const fn = BasisWorker.toString();\n                    const body = [\n                        '/* constants */',\n                        'let _EngineFormat = ' + JSON.stringify(EngineFormat),\n                        'let _TranscoderFormat = ' + JSON.stringify(TranscoderFormat),\n                        'let _BasisFormat = ' + JSON.stringify(BasisFormat),\n                        '/* basis_transcoder.js */',\n                        jsContent,\n                        '/* worker */',\n                        fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n                    ].join('\\n');\n                    this.#workerSourceURL = URL.createObjectURL(new Blob([body]));\n                    this.#transcoderBinary = binaryContent;\n                    this.#workerPool.setWorkerCreator(() => {\n                        const worker = new Worker(this.#workerSourceURL);\n                        const transcoderBinary = this.#transcoderBinary.slice(0);\n                        worker.postMessage({\n                            type: 'init',\n                            config: this.#workerConfig,\n                            transcoderBinary\n                        }, [transcoderBinary]);\n                        return worker;\n                    });\n                });\n            if (activeTranscoders > 0) {\n                console.warn('KTX2TextureTranscoder: Multiple active KTX2TextureTranscoder may cause performance issues.' + ' Use a single KTX2TextureTranscoder instance, or call .dispose() on old instances.');\n            }\n            activeTranscoders++;\n        }\n        return this.#transcoderPending;\n    }\n}\n\n\nconst BasisWorker = function () {\n\n    let config: { [x: string]: any; };\n    let transcoderPending: Promise<any>;\n    let BasisModule: any;\n\n    // @ts-ignore\n    const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n    // @ts-ignore\n    const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n    // @ts-ignore\n    const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n    self.addEventListener('message', function (e) {\n        const message = e.data;\n        switch (message.type) {\n            case 'init':\n                config = message.config;\n                init(message.transcoderBinary);\n                break;\n            case 'transcode':\n                transcoderPending.then(() => {\n                    try {\n                        const {\n                            width,\n                            height,\n                            hasAlpha,\n                            mipmaps,\n                            format,\n                            dfdTransferFn,\n                            dfdFlags\n                        } = transcode(message.buffers[0]);\n                        const buffers = [];\n                        for (let i = 0; i < mipmaps.length; ++i) {\n                            buffers.push(mipmaps[i].data.buffer);\n                        }\n                        self.postMessage({\n                            type: 'transcode',\n                            id: message.id,\n                            width,\n                            height,\n                            hasAlpha,\n                            mipmaps,\n                            format,\n                            dfdTransferFn,\n                            dfdFlags\n                            // @ts-ignore\n                        }, buffers);\n                    } catch (error) {\n                        console.error(`[BasisWorker]: ${error}`);\n                        // @ts-ignore\n                        self.postMessage({type: 'error', id: message.id, error: error.message});\n                    }\n                });\n                break;\n        }\n    });\n\n    function init(wasmBinary: any) {\n        transcoderPending = new Promise(resolve => {\n            BasisModule = {\n                wasmBinary,\n                onRuntimeInitialized: resolve\n            };\n            // @ts-ignore\n            BASIS(BasisModule); // eslint-disable-line no-undef\n        }).then(() => {\n            BasisModule.initializeBasis();\n            if (BasisModule.KTX2File === undefined) {\n                console.warn('KTX2TextureTranscoder: Please update Basis Universal transcoder.');\n            }\n        });\n    }\n\n    function transcode(buffer: Iterable<number>) {\n        const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n        function cleanup() {\n            ktx2File.close();\n            ktx2File.delete();\n        }\n\n        if (!ktx2File.isValid()) {\n            cleanup();\n            throw new Error('KTX2TextureTranscoder: Invalid or unsupported .ktx2 file');\n        }\n        const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n        const width = ktx2File.getWidth();\n        const height = ktx2File.getHeight();\n        const levels = ktx2File.getLevels();\n        const hasAlpha = ktx2File.getHasAlpha();\n        const dfdTransferFn = ktx2File.getDFDTransferFunc();\n        const dfdFlags = ktx2File.getDFDFlags();\n        const {transcoderFormat, engineFormat} = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n        if (!width || !height || !levels) {\n            cleanup();\n            throw new Error('KTX2TextureTranscoder: Invalid texture');\n        }\n        if (!ktx2File.startTranscoding()) {\n            cleanup();\n            throw new Error('KTX2TextureTranscoder: .startTranscoding failed');\n        }\n        const mipmaps = [];\n        for (let mip = 0; mip < levels; mip++) {\n            const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n            const mipWidth = levelInfo.origWidth;\n            const mipHeight = levelInfo.origHeight;\n            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n            const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n            if (!status) {\n                cleanup();\n                throw new Error('KTX2TextureTranscoder: .transcodeImage failed.');\n            }\n            mipmaps.push({data: dst, width: mipWidth, height: mipHeight});\n        }\n        cleanup();\n        return {width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags};\n    }\n\n    // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n    // device capabilities, and texture dimensions. The list below ranks the formats separately\n    // for ETC1S and UASTC.\n    //\n    // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n    // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n    // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n    const FORMAT_OPTIONS = [{\n        if: 'astcSupported',\n        basisFormat: [BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n        engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n        priorityETC1S: Infinity,\n        priorityUASTC: 1,\n        needsPowerOfTwo: false\n    }, {\n        if: 'bptcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n        engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n        priorityETC1S: 3,\n        priorityUASTC: 2,\n        needsPowerOfTwo: false\n    }, {\n        if: 'dxtSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n        engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n        priorityETC1S: 4,\n        priorityUASTC: 5,\n        needsPowerOfTwo: false\n    }, {\n        if: 'etc2Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n        engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n        priorityETC1S: 1,\n        priorityUASTC: 3,\n        needsPowerOfTwo: false\n    }, {\n        if: 'etc1Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1],\n        engineFormat: [EngineFormat.RGB_ETC1_Format],\n        priorityETC1S: 2,\n        priorityUASTC: 4,\n        needsPowerOfTwo: false\n    }, {\n        if: 'pvrtcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n        engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n        priorityETC1S: 5,\n        priorityUASTC: 6,\n        needsPowerOfTwo: true\n    }];\n    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n        return a.priorityETC1S - b.priorityETC1S;\n    });\n    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n        return a.priorityUASTC - b.priorityUASTC;\n    });\n\n    function getTranscoderFormat(basisFormat: number, width: number, height: number, hasAlpha: any) {\n        let transcoderFormat;\n        let engineFormat;\n        const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n        for (let i = 0; i < options.length; i++) {\n            const opt = options[i];\n            if (!config[opt.if]) continue;\n            if (!opt.basisFormat.includes(basisFormat)) continue;\n            if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n            if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n            transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n            engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n            return {\n                transcoderFormat,\n                engineFormat\n            };\n        }\n        console.warn('KTX2TextureTranscoder: No suitable compressed texture format found. Decoding to RGBA32.');\n        transcoderFormat = TranscoderFormat.RGBA32;\n        engineFormat = EngineFormat.RGBAFormat;\n        return {\n            transcoderFormat,\n            engineFormat\n        };\n    }\n\n    function isPowerOfTwo(value: number) {\n        if (value <= 2) return true;\n        return (value & value - 1) === 0 && value !== 0;\n    }\n};\n\n","var e=1e3,r=1001,a=1002,o=1003,p=1004,t=1004,v=1005,x=1005,b=1006,c=1007,d=1007,f=1008,g=1008,h=1009,i=1010,j=1011,k=1012,l=1013,m=1014,n=1015,q=1016,s=1017,u=1018,w=1020,y=1021,z=1022,A=1023,B=1024,C=1025,D=1026,E=1027,F=1028,G=1029,H=1030,I=1031,J=1033,K=33776,L=33777,M=33778,N=33779,O=35840,P=35841,Q=35842,R=35843,S=36196,T=37492,U=37496,V=37808,W=37809,X=37810,Y=37811,Z=37812,$=37813,_=37814,ee=37815,re=37816,ae=37817,oe=37818,pe=37819,te=37820,ve=37821,xe=36492,be=3e3,ce=3001,de=1e4,fe=10001,ge=10002,he=2e4,ie=20001,je=20002,ke=20003,le=20004,me=3e4,ne=300001,qe=4e5,se=400001,ue=400002,we=400003,ye=400004,ze=400005,Ae=5e5,Be=500001,Ce=500002,De=500003;export{y as AlphaFormat,i as ByteType,se as CentimetersUnit,r as ClampToEdgeWrapping,De as CustomProjectionType,D as DepthFormat,E as DepthStencilFormat,ne as FastRender,ye as FeetUnit,n as FloatType,Ce as FrustumProjectionType,de as GIFMediaType,q as HalfFloatType,ze as InchesUnit,l as IntType,fe as JPEGMediaType,be as LinearEncoding,b as LinearFilter,g as LinearMipMapLinearFilter,d as LinearMipMapNearestFilter,f as LinearMipmapLinearFilter,c as LinearMipmapNearestFilter,ie as LinesPrimitive,C as LuminanceAlphaFormat,B as LuminanceFormat,qe as MetersUnit,ue as MillimetersUnit,a as MirroredRepeatWrapping,o as NearestFilter,x as NearestMipMapLinearFilter,p as NearestMipMapNearestFilter,v as NearestMipmapLinearFilter,t as NearestMipmapNearestFilter,Be as OrthoProjectionType,ge as PNGMediaType,Ae as PerspectiveProjectionType,he as PointsPrimitive,me as QualityRender,A as RGBAFormat,J as RGBAIntegerFormat,pe as RGBA_ASTC_10x10_Format,re as RGBA_ASTC_10x5_Format,ae as RGBA_ASTC_10x6_Format,oe as RGBA_ASTC_10x8_Format,te as RGBA_ASTC_12x10_Format,ve as RGBA_ASTC_12x12_Format,V as RGBA_ASTC_4x4_Format,W as RGBA_ASTC_5x4_Format,X as RGBA_ASTC_5x5_Format,Y as RGBA_ASTC_6x5_Format,Z as RGBA_ASTC_6x6_Format,$ as RGBA_ASTC_8x5_Format,_ as RGBA_ASTC_8x6_Format,ee as RGBA_ASTC_8x8_Format,xe as RGBA_BPTC_Format,U as RGBA_ETC2_EAC_Format,R as RGBA_PVRTC_2BPPV1_Format,Q as RGBA_PVRTC_4BPPV1_Format,L as RGBA_S3TC_DXT1_Format,M as RGBA_S3TC_DXT3_Format,N as RGBA_S3TC_DXT5_Format,z as RGBFormat,S as RGB_ETC1_Format,T as RGB_ETC2_Format,P as RGB_PVRTC_2BPPV1_Format,O as RGB_PVRTC_4BPPV1_Format,K as RGB_S3TC_DXT1_Format,H as RGFormat,I as RGIntegerFormat,F as RedFormat,G as RedIntegerFormat,e as RepeatWrapping,j as ShortType,ke as SolidPrimitive,le as SurfacePrimitive,je as TrianglesPrimitive,h as UnsignedByteType,w as UnsignedInt248Type,m as UnsignedIntType,s as UnsignedShort4444Type,u as UnsignedShort5551Type,k as UnsignedShortType,we as YardsUnit,ce as sRGBEncoding};\n//# sourceMappingURL=index.es.map\n"],"names":["activeTranscoders","BasisFormat","ETC1S","UASTC_4x4","TranscoderFormat","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","EngineFormat","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_transcoderPath","_classPrivateFieldLooseKey","_transcoderBinary","_transcoderPending","_workerPool","_workerSourceURL","_workerConfig","_supportedFileTypes","_withCredentials","_initTranscoder","_initTranscoder2","_this2","_classPrivateFieldLooseBase","this","jsLoader","FileLoader","setPath","setWithCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","_ref","fn","BasisWorker","toString","body","JSON","stringify","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","transcoderBinary","slice","postMessage","type","config","console","warn","transcoderPending","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","e","wasmBinary","message","data","resolve","onRuntimeInitialized","BASIS","initializeBasis","undefined","KTX2File","_transcode","buffer","ktx2File","Uint8Array","cleanup","close","isValid","Error","basisFormat","isUASTC","width","getWidth","height","getHeight","levels","getLevels","hasAlpha","getHasAlpha","dfdTransferFn","getDFDTransferFunc","dfdFlags","getDFDFlags","_getTranscoderFormat","options","ETC1S_OPTIONS","UASTC_OPTIONS","i","length","opt","includes","transcoderFormat","needsPowerOfTwo","isPowerOfTwo","engineFormat","getTranscoderFormat","startTranscoding","mipmaps","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","push","format","transcode","buffers","id","error","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","sort","a","b","value","KTX2TextureTranscoder","params","Object","defineProperty","writable","transcoderPath","WorkerPool","workerLimit","setWorkerLimit","_proto","prototype","init","capabilities","astcSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","_this","reject","taskConfig","transcodeResult","props","minFilter","magFilter","encoding","premultiplyAlpha","destroy","revokeObjectURL"],"mappings":"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"}