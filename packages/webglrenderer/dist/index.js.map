{"version":3,"file":"index.js","sources":["../../utils/dist/utils.js","../../ktx2/dist/index.es","../src/RenderContext.ts","../src/RENDER_PASSES.ts","../src/LayerRenderer.ts","../src/FastColorTrianglesRenderer.ts","../src/DataTextureSet.ts","../src/MeshCounts.ts","../src/SCENE_OBJECT_FLAGS.ts","../src/float16.ts","../src/dataTextures.ts","../src/DataTextureBuffer.ts","../src/Layer.ts","../src/RendererGeometryImpl.ts","../src/RendererTextureImpl.ts","../src/RendererObjectImpl.ts","../src/RendererMeshImpl.ts","../src/RendererTextureSetImpl.ts","../src/RendererModelImpl.ts","../../rtc/src/index.ts","../src/TileManager.ts","../src/WebGLRenderer.ts"],"sourcesContent":["function t(e,r){return t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},t(e,r)}var e=0;function r(t){return\"__private_\"+e+++\"_\"+t}function n(t,e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new TypeError(\"attempted to use private field on non-instance\");return t}var i=/*#__PURE__*/r(\"items\"),o=/*#__PURE__*/r(\"lastUniqueId\"),s=/*#__PURE__*/function(){function t(t,e){Object.defineProperty(this,i,{writable:!0,value:void 0}),Object.defineProperty(this,o,{writable:!0,value:void 0}),n(this,i)[i]=t||[],n(this,o)[o]=(e||0)+1}var e=t.prototype;return e.addItem=function(){var t;if(2===arguments.length){var e=arguments[0];if(t=arguments[1],n(this,i)[i][e])throw\"ID clash: '\"+e+\"'\";return n(this,i)[i][e]=t,e}for(t=arguments[0]||{};;){var r=n(this,o)[o]++;if(!n(this,i)[i][r])return n(this,i)[i][r]=t,r}},e.removeItem=function(t){var e=n(this,i)[i][t];return delete n(this,i)[i][t],e},t}(),a=/*#__PURE__*/function(){function t(){this._head=void 0,this._headLength=void 0,this._tail=void 0,this._index=void 0,this._length=void 0,this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0}var e,r,n=t.prototype;return n.shift=function(){if(this._index>=this._headLength){var t=this._head;if(t.length=0,this._head=this._tail,this._tail=t,this._index=0,this._headLength=this._head.length,!this._headLength)return}var e=this._head[this._index];return this._index<0?delete this._head[this._index++]:this._head[this._index++]=void 0,this._length--,e},n.push=function(t){return this._length++,this._tail.push(t),this},n.unshift=function(t){return this._head[--this._index]=t,this._length++,this},n.clear=function(){this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0},e=t,(r=[{key:\"length\",get:function(){return this._length}}])&&function(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,\"symbol\"==typeof(i=function(t,e){if(\"object\"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!=typeof n)return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(n.key))?i:String(i),n)}var i}(e.prototype,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),h=/*#__PURE__*/function(){function t(t,e,r){this.isLoading=void 0,this.itemsLoaded=void 0,this.itemsTotal=void 0,this.urlModifier=void 0,this.handlers=void 0,this.onStart=void 0,this.onLoad=void 0,this.onProgress=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0,this.urlModifier=void 0,this.handlers=[],this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=r}var e=t.prototype;return e.itemStart=function(t){this.itemsTotal++,this.isLoading||void 0!==this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0},e.itemEnd=function(t){this.itemsLoaded++,void 0!==this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,void 0!==this.onLoad&&this.onLoad())},e.itemError=function(t){void 0!==this.onError&&this.onError(t)},e.resolveURL=function(t){return this.urlModifier?this.urlModifier(t):t},e.setURLModifier=function(t){return this.urlModifier=t,this},e.addHandler=function(t,e){return this.handlers.push(t,e),this},e.removeHandler=function(t){var e=this.handlers.indexOf(t);return-1!==e&&this.handlers.splice(e,2),this},e.getHandler=function(t){for(var e=0,r=this.handlers.length;e<r;e+=2){var n=this.handlers[e],i=this.handlers[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null},t}(),u=new h,d=/*#__PURE__*/function(){function t(t){this.manager=void 0,this.crossOrigin=void 0,this.withCredentials=void 0,this.path=void 0,this.resourcePath=void 0,this.requestHeader=void 0,this.manager=void 0!==t?t:u,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}var e=t.prototype;return e.load=function(t,e,r,n){},e.loadAsync=function(t,e){var r=this;return new Promise(function(n,i){r.load(t,n,e,i)})},e.parse=function(){},e.setCrossOrigin=function(t){return this.crossOrigin=t,this},e.setWithCredentials=function(t){return this.withCredentials=t,this},e.setPath=function(t){return this.path=t,this},e.setResourcePath=function(t){return this.resourcePath=t,this},e.setRequestHeader=function(t){return this.requestHeader=t,this},t}(),f=/*#__PURE__*/function(){function t(t){void 0===t&&(t=4),this.pool=void 0,this.queue=void 0,this.workers=void 0,this.workersResolve=void 0,this.workerStatus=void 0,this.workerCreator=void 0,this.pool=t,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}var e=t.prototype;return e._initWorker=function(t){if(!this.workers[t]){var e=this.workerCreator();e.addEventListener(\"message\",this._onMessage.bind(this,t)),this.workers[t]=e}},e._getIdleWorker=function(){for(var t=0;t<this.pool;t++)if(!(this.workerStatus&1<<t))return t;return-1},e._onMessage=function(t,e){var r=this.workersResolve[t];if(r&&r(e),this.queue.length){var n=this.queue.shift(),i=n.msg,o=n.transfer;this.workersResolve[t]=n.resolve,this.workers[t].postMessage(i,o)}else this.workerStatus^=1<<t},e.setWorkerCreator=function(t){this.workerCreator=t},e.setWorkerLimit=function(t){this.pool=t},e.postMessage=function(t,e){var r=this;return new Promise(function(n){var i=r._getIdleWorker();-1!==i?(r._initWorker(i),r.workerStatus|=1<<i,r.workersResolve[i]=n,r.workers[i].postMessage(t,e)):r.queue.push({resolve:n,msg:t,transfer:e})})},e.destroy=function(){this.workers.forEach(function(t){return t.terminate()}),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0},t}(),c={enabled:!1,files:{},add:function(t,e){},get:function(t){},remove:function(t){},clear:function(){this.files={}}},l={},v=/*#__PURE__*/function(e){var r,n;function i(t){var r;return(r=e.call(this,t)||this).mimeType=void 0,r.responseType=void 0,r}n=e,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,t(r,n);var o=i.prototype;return o.load=function(t,e,r,n){var i=this;void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var o=c.get(t);if(void 0!==o)return this.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;if(void 0===l[t]){l[t]=[],l[t].push({onLoad:e,onProgress:r,onError:n});var s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?\"include\":\"same-origin\"}),a=this.mimeType,h=this.responseType;fetch(s).then(function(e){if(200===e.status||0===e.status){if(0===e.status&&console.warn(\"FileLoader: HTTP Status 0 received.\"),\"undefined\"==typeof ReadableStream||void 0===e.body.getReader)return e;var r=l[t],n=e.body.getReader(),i=e.headers.get(\"Content-Length\"),o=i?parseInt(i):0,s=0!==o,a=0,h=new ReadableStream({start:function(t){!function e(){n.read().then(function(n){var i=n.value;if(n.done)t.close();else{for(var h=new ProgressEvent(\"progress\",{lengthComputable:s,loaded:a+=i.byteLength,total:o}),u=0,d=r.length;u<d;u++){var f=r[u];f.onProgress&&f.onProgress(h)}t.enqueue(i),e()}})}()}});return new Response(h)}throw new Error('fetch for \"'+e.url+'\" responded with '+e.status+\": \"+e.statusText)}).then(function(t){switch(h){case\"arraybuffer\":return t.arrayBuffer();case\"blob\":return t.blob();case\"document\":return t.text().then(function(t){return(new DOMParser).parseFromString(t,a)});case\"json\":return t.json();default:if(void 0===a)return t.text();var e=/charset=\"?([^;\"\\s]*)\"?/i.exec(a),r=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(r);return t.arrayBuffer().then(function(t){return n.decode(t)})}}).then(function(e){c.add(t,e);var r=l[t];delete l[t];for(var n=0,i=r.length;n<i;n++){var o=r[n];o.onLoad&&o.onLoad(e)}}).catch(function(e){var r=l[t];if(void 0===r)throw i.manager.itemError(t),e;delete l[t];for(var n=0,o=r.length;n<o;n++){var s=r[n];s.onError&&s.onError(e)}i.manager.itemError(t)}).finally(function(){i.manager.itemEnd(t)}),this.manager.itemStart(t)}else l[t].push({onLoad:e,onProgress:r,onError:n})},o.setResponseType=function(t){return this.responseType=t,this},o.setMimeType=function(t){return this.mimeType=t,this},i}(d);function p(t){return JSON.parse(JSON.stringify(t))}var g=[[\"0\",10],[\"A\",26],[\"a\",26],[\"_\",1],[\"$\",1]].map(function(t){for(var e=[],r=t[0].charCodeAt(0),n=r+t[1],i=r;i<n;++i)e.push(i);return String.fromCharCode.apply(null,e)}).join(\"\");function m(t,e){return(e&&4!==e?[0,6]:[0,6,12,18]).map(function(e){return g.substr(parseInt(String(t/(1<<e)))%64,1)}).reverse().join(\"\")}function w(t){var e=[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30].map(function(e){return parseInt(t.substr(e,2),16)});return m(e[0],2)+[1,4,7,10,13].map(function(t){return m((e[t]<<16)+(e[t+1]<<8)+e[t+2],4)}).join(\"\")}function y(t,e){var r=[];return function t(n){n.type===e&&r.push(n),(n.children||[]).forEach(function(e){t(e)})}(t),r}function _(t){return new Promise(function(e,r){setTimeout(e,t)})}function b(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.open(t.method||\"GET\",t.url,!0),n.onload=function(i){console.log(t.url,n.readyState,n.status),4===n.readyState&&(200===n.status?e(n.responseXML):r(n.statusText))},n.send(null)})}function L(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=new XMLHttpRequest;i.overrideMimeType(\"application/json\"),i.open(\"GET\",t,!0),i.addEventListener(\"load\",function(t){var n=t.target.response;if(200===this.status){var i;try{i=JSON.parse(n)}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}e(i)}else if(0===this.status){console.warn(\"loadFile: HTTP Status 0 received.\");try{e(JSON.parse(n))}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}}else r(t)},!1),i.addEventListener(\"error\",function(t){r(t)},!1),i.send(null)}function S(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(i){var o=!!i[2],s=i[3];s=window.decodeURIComponent(s),o&&(s=window.atob(s));try{for(var a=new ArrayBuffer(s.length),h=new Uint8Array(a),u=0;u<s.length;u++)h[u]=s.charCodeAt(u);window.setTimeout(function(){e(a)},0)}catch(t){window.setTimeout(function(){r(t)},0)}}else{var d=new XMLHttpRequest;d.open(\"GET\",t,!0),d.responseType=\"arraybuffer\",d.onreadystatechange=function(){4===d.readyState&&(200===d.status?e(d.response):r(\"loadArrayBuffer error : \"+d.response))},d.send(null)}}function P(t){return t&&!t.propertyIsEnumerable(\"length\")&&\"object\"==typeof t&&\"number\"==typeof t.length}function T(t){return\"string\"==typeof t||t instanceof String}function k(t){return!isNaN(parseFloat(t))&&isFinite(t)}function O(t){return T(t)||k(t)}function E(t){return\"function\"==typeof t}function M(t){return!!t&&t.constructor==={}.constructor}function R(t){return x(t,{})}function x(t,e){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function C(t,e){for(var r in t)t.hasOwnProperty(r)&&null!=t[r]&&(e[r]=t[r]);return e}function j(t,e){for(var r in t)t.hasOwnProperty(r)&&null==e[r]&&(e[r]=t[r]);return e}function q(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function H(t){return k(t)?\"\"+t:\"'\"+t+\"'\"}function I(t,e){var r=new t.constructor(t.length+e.length);return r.set(t),r.set(e,t.length),r}var N=function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16);return function(){var e=4294967295*Math.random()|0,r=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+\"-\"+t[255&r]+t[r>>8&255]+\"-\"+t[r>>16&15|64]+t[r>>24&255]+\"-\"+t[63&n|128]+t[n>>8&255]+\"-\"+t[n>>16&255]+t[n>>24&255]+t[255&i]+t[i>>8&255]+t[i>>16&255]+t[i>>24&255]}}();export{c as Cache,u as DefaultLoadingManager,v as FileLoader,d as Loader,h as LoadingManager,s as Map,a as Queue,f as WorkerPool,x as apply,C as apply2,j as applyIf,m as b64,p as clone,w as compressGuid,I as concat,R as copy,N as createUUID,y as findNodeOfType,b as httpRequest,H as inQuotes,P as isArray,q as isEmptyObject,E as isFunction,O as isID,k as isNumeric,M as isObject,T as isString,S as loadArraybuffer,L as loadJSON,_ as timeout};\n//# sourceMappingURL=utils.js.map\n","var t=0;function e(e){return\"__private_\"+t+++\"_\"+e}function r(t,e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new TypeError(\"attempted to use private field on non-instance\");return t}function o(t,e){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},o(t,e)}var i=/*#__PURE__*/function(){function t(t,e,r){this.isLoading=void 0,this.itemsLoaded=void 0,this.itemsTotal=void 0,this.urlModifier=void 0,this.handlers=void 0,this.onStart=void 0,this.onLoad=void 0,this.onProgress=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0,this.urlModifier=void 0,this.handlers=[],this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=r}var e=t.prototype;return e.itemStart=function(t){this.itemsTotal++,this.isLoading||void 0!==this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0},e.itemEnd=function(t){this.itemsLoaded++,void 0!==this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,void 0!==this.onLoad&&this.onLoad())},e.itemError=function(t){void 0!==this.onError&&this.onError(t)},e.resolveURL=function(t){return this.urlModifier?this.urlModifier(t):t},e.setURLModifier=function(t){return this.urlModifier=t,this},e.addHandler=function(t,e){return this.handlers.push(t,e),this},e.removeHandler=function(t){var e=this.handlers.indexOf(t);return-1!==e&&this.handlers.splice(e,2),this},e.getHandler=function(t){for(var e=0,r=this.handlers.length;e<r;e+=2){var o=this.handlers[e],i=this.handlers[e+1];if(o.global&&(o.lastIndex=0),o.test(t))return i}return null},t}(),s=new i,n=/*#__PURE__*/function(){function t(t){this.manager=void 0,this.crossOrigin=void 0,this.withCredentials=void 0,this.path=void 0,this.resourcePath=void 0,this.requestHeader=void 0,this.manager=void 0!==t?t:s,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}var e=t.prototype;return e.load=function(t,e,r,o){},e.loadAsync=function(t,e){var r=this;return new Promise(function(o,i){r.load(t,o,e,i)})},e.parse=function(){},e.setCrossOrigin=function(t){return this.crossOrigin=t,this},e.setWithCredentials=function(t){return this.withCredentials=t,this},e.setPath=function(t){return this.path=t,this},e.setResourcePath=function(t){return this.resourcePath=t,this},e.setRequestHeader=function(t){return this.requestHeader=t,this},t}(),a=/*#__PURE__*/function(){function t(t){void 0===t&&(t=4),this.pool=void 0,this.queue=void 0,this.workers=void 0,this.workersResolve=void 0,this.workerStatus=void 0,this.workerCreator=void 0,this.pool=t,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}var e=t.prototype;return e._initWorker=function(t){if(!this.workers[t]){var e=this.workerCreator();e.addEventListener(\"message\",this._onMessage.bind(this,t)),this.workers[t]=e}},e._getIdleWorker=function(){for(var t=0;t<this.pool;t++)if(!(this.workerStatus&1<<t))return t;return-1},e._onMessage=function(t,e){var r=this.workersResolve[t];if(r&&r(e),this.queue.length){var o=this.queue.shift(),i=o.msg,s=o.transfer;this.workersResolve[t]=o.resolve,this.workers[t].postMessage(i,s)}else this.workerStatus^=1<<t},e.setWorkerCreator=function(t){this.workerCreator=t},e.setWorkerLimit=function(t){this.pool=t},e.postMessage=function(t,e){var r=this;return new Promise(function(o){var i=r._getIdleWorker();-1!==i?(r._initWorker(i),r.workerStatus|=1<<i,r.workersResolve[i]=o,r.workers[i].postMessage(t,e)):r.queue.push({resolve:o,msg:t,transfer:e})})},e.destroy=function(){this.workers.forEach(function(t){return t.terminate()}),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0},t}(),d={},h=/*#__PURE__*/function(t){var e,r;function i(e){var r;return(r=t.call(this,e)||this).mimeType=void 0,r.responseType=void 0,r}r=t,(e=i).prototype=Object.create(r.prototype),e.prototype.constructor=e,o(e,r);var s=i.prototype;return s.load=function(t,e,r,o){var i=this;if(void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t),void 0===d[t]){d[t]=[],d[t].push({onLoad:e,onProgress:r,onError:o});var s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?\"include\":\"same-origin\"}),n=this.mimeType,a=this.responseType;fetch(s).then(function(e){if(200===e.status||0===e.status){if(0===e.status&&console.warn(\"FileLoader: HTTP Status 0 received.\"),\"undefined\"==typeof ReadableStream||void 0===e.body.getReader)return e;var r=d[t],o=e.body.getReader(),i=e.headers.get(\"Content-Length\"),s=i?parseInt(i):0,n=0!==s,a=0,h=new ReadableStream({start:function(t){!function e(){o.read().then(function(o){var i=o.value;if(o.done)t.close();else{for(var d=new ProgressEvent(\"progress\",{lengthComputable:n,loaded:a+=i.byteLength,total:s}),h=0,u=r.length;h<u;h++){var c=r[h];c.onProgress&&c.onProgress(d)}t.enqueue(i),e()}})}()}});return new Response(h)}throw new Error('fetch for \"'+e.url+'\" responded with '+e.status+\": \"+e.statusText)}).then(function(t){switch(a){case\"arraybuffer\":return t.arrayBuffer();case\"blob\":return t.blob();case\"document\":return t.text().then(function(t){return(new DOMParser).parseFromString(t,n)});case\"json\":return t.json();default:if(void 0===n)return t.text();var e=/charset=\"?([^;\"\\s]*)\"?/i.exec(n),r=e&&e[1]?e[1].toLowerCase():void 0,o=new TextDecoder(r);return t.arrayBuffer().then(function(t){return o.decode(t)})}}).then(function(e){var r=d[t];delete d[t];for(var o=0,i=r.length;o<i;o++){var s=r[o];s.onLoad&&s.onLoad(e)}}).catch(function(e){var r=d[t];if(void 0===r)throw i.manager.itemError(t),e;delete d[t];for(var o=0,s=r.length;o<s;o++){var n=r[o];n.onError&&n.onError(e)}i.manager.itemError(t)}).finally(function(){i.manager.itemEnd(t)}),this.manager.itemStart(t)}else d[t].push({onLoad:e,onProgress:r,onError:o})},s.setResponseType=function(t){return this.responseType=t,this},s.setMimeType=function(t){return this.mimeType=t,this},i}(n);[[\"0\",10],[\"A\",26],[\"a\",26],[\"_\",1],[\"$\",1]].map(function(t){for(var e=[],r=t[0].charCodeAt(0),o=r+t[1],i=r;i<o;++i)e.push(i);return String.fromCharCode.apply(null,e)}).join(\"\"),function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16)}();var u=0,c={ETC1S:0,UASTC_4x4:1},f={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16},l={RGBAFormat:1023,RGBA_ASTC_4x4_Format:37808,RGBA_BPTC_Format:36492,RGBA_ETC2_EAC_Format:37496,RGBA_PVRTC_4BPPV1_Format:35842,RGBA_S3TC_DXT5_Format:33779,RGB_ETC1_Format:36196,RGB_ETC2_Format:37492,RGB_PVRTC_4BPPV1_Format:35840,RGB_S3TC_DXT1_Format:33776},p=/*#__PURE__*/e(\"transcoderPath\"),m=/*#__PURE__*/e(\"transcoderBinary\"),v=/*#__PURE__*/e(\"transcoderPending\"),T=/*#__PURE__*/e(\"workerPool\"),g=/*#__PURE__*/e(\"workerSourceURL\"),_=/*#__PURE__*/e(\"workerConfig\"),w=/*#__PURE__*/e(\"supportedFileTypes\"),C=/*#__PURE__*/e(\"withCredentials\"),S=/*#__PURE__*/e(\"initTranscoder\"),y=/*#__PURE__*/function(){function t(t){Object.defineProperty(this,S,{value:F}),Object.defineProperty(this,p,{writable:!0,value:void 0}),Object.defineProperty(this,m,{writable:!0,value:void 0}),Object.defineProperty(this,v,{writable:!0,value:void 0}),Object.defineProperty(this,T,{writable:!0,value:void 0}),Object.defineProperty(this,g,{writable:!0,value:void 0}),Object.defineProperty(this,_,{writable:!0,value:void 0}),Object.defineProperty(this,w,{writable:!0,value:void 0}),Object.defineProperty(this,C,{writable:!0,value:void 0}),r(this,p)[p]=t.transcoderPath||\"https://cdn.jsdelivr.net/npm/@xeokit/sdk/dist/basis/\",r(this,m)[m]=null,r(this,v)[v]=null,r(this,T)[T]=new a,r(this,g)[g]=\"\",t.workerLimit&&r(this,T)[T].setWorkerLimit(t.workerLimit),r(this,_)[_]=null,r(this,C)[C]=!1,r(this,w)[w]=[\"xkt2\"]}var e=t.prototype;return e.init=function(t){r(this,_)[_]={astcSupported:t.astcSupported,etc1Supported:t.etc1Supported,etc2Supported:t.etc2Supported,dxtSupported:t.dxtSupported,bptcSupported:t.bptcSupported,pvrtcSupported:t.pvrtcSupported}},e.transcode=function(t,e){var o=this;return void 0===e&&(e={}),new Promise(function(i,s){var n=e;r(o,S)[S]().then(function(){return r(o,T)[T].postMessage({type:\"transcode\",buffers:t,taskConfig:n},t)}).then(function(t){var e=t.data,r=e.mipmaps,o=e.format,n=e.dfdTransferFn,a=e.dfdFlags;if(\"error\"===e.type)return s(e.error);i({mipmaps:r,props:{format:o,minFilter:1===r.length?1006:1008,magFilter:1===r.length?1006:1008,encoding:2===n?3001:3e3,premultiplyAlpha:!!(1&a)}})})})},e.destroy=function(){URL.revokeObjectURL(r(this,g)[g]),r(this,T)[T].destroy(),u--},t}();function F(){var t=this;if(!r(this,v)[v]){var e=new h;e.setPath(r(this,p)[p]),e.setWithCredentials(r(this,C)[C]);var o=e.loadAsync(\"basis_transcoder.js\"),i=new h;i.setPath(r(this,p)[p]),i.setResponseType(\"arraybuffer\"),i.setWithCredentials(r(this,C)[C]);var s=i.loadAsync(\"basis_transcoder.wasm\");r(this,v)[v]=Promise.all([o,s]).then(function(e){var o=e[0],i=e[1],s=P.toString(),n=[\"/* constants */\",\"let _EngineFormat = \"+JSON.stringify(l),\"let _TranscoderFormat = \"+JSON.stringify(f),\"let _BasisFormat = \"+JSON.stringify(c),\"/* basis_transcoder.js */\",o,\"/* worker */\",s.substring(s.indexOf(\"{\")+1,s.lastIndexOf(\"}\"))].join(\"\\n\");r(t,g)[g]=URL.createObjectURL(new Blob([n])),r(t,m)[m]=i,r(t,T)[T].setWorkerCreator(function(){var e=new Worker(r(t,g)[g]),o=r(t,m)[m].slice(0);return e.postMessage({type:\"init\",config:r(t,_)[_],transcoderBinary:o},[o]),e})}),u>0&&console.warn(\"KTX2TextureTranscoder: Multiple active KTX2TextureTranscoder may cause performance issues. Use a single KTX2TextureTranscoder instance, or call .dispose() on old instances.\"),u++}return r(this,v)[v]}var P=function(){var t,e,r,o=_EngineFormat,i=_TranscoderFormat,s=_BasisFormat;self.addEventListener(\"message\",function(n){var u,c=n.data;switch(c.type){case\"init\":t=c.config,u=c.transcoderBinary,e=new Promise(function(t){r={wasmBinary:u,onRuntimeInitialized:t},BASIS(r)}).then(function(){r.initializeBasis(),void 0===r.KTX2File&&console.warn(\"KTX2TextureTranscoder: Please update Basis Universal transcoder.\")});break;case\"transcode\":e.then(function(){try{for(var e=function(e){var n=new r.KTX2File(new Uint8Array(e));function u(){n.close(),n.delete()}if(!n.isValid())throw u(),new Error(\"KTX2TextureTranscoder: Invalid or unsupported .ktx2 file\");var c=n.isUASTC()?s.UASTC_4x4:s.ETC1S,f=n.getWidth(),l=n.getHeight(),p=n.getLevels(),m=n.getHasAlpha(),v=n.getDFDTransferFunc(),T=n.getDFDFlags(),g=function(e,r,n,u){for(var c=e===s.ETC1S?a:d,f=0;f<c.length;f++){var l=c[f];if(t[l.if]&&l.basisFormat.includes(e)&&!(u&&l.transcoderFormat.length<2)&&(!l.needsPowerOfTwo||h(r)&&h(n)))return{transcoderFormat:l.transcoderFormat[u?1:0],engineFormat:l.engineFormat[u?1:0]}}return console.warn(\"KTX2TextureTranscoder: No suitable compressed texture format found. Decoding to RGBA32.\"),{transcoderFormat:i.RGBA32,engineFormat:o.RGBAFormat}}(c,f,l,m),_=g.transcoderFormat,w=g.engineFormat;if(!f||!l||!p)throw u(),new Error(\"KTX2TextureTranscoder: Invalid texture\");if(!n.startTranscoding())throw u(),new Error(\"KTX2TextureTranscoder: .startTranscoding failed\");for(var C=[],S=0;S<p;S++){var y=n.getImageLevelInfo(S,0,0),F=y.origWidth,P=y.origHeight,R=new Uint8Array(n.getImageTranscodedSizeInBytes(S,0,0,_));if(!n.transcodeImage(R,S,0,0,_,0,-1,-1))throw u(),new Error(\"KTX2TextureTranscoder: .transcodeImage failed.\");C.push({data:R,width:F,height:P})}return u(),{width:f,height:l,hasAlpha:m,mipmaps:C,format:w,dfdTransferFn:v,dfdFlags:T}}(c.buffers[0]),n=e.width,u=e.height,f=e.hasAlpha,l=e.mipmaps,p=e.format,m=e.dfdTransferFn,v=e.dfdFlags,T=[],g=0;g<l.length;++g)T.push(l[g].data.buffer);self.postMessage({type:\"transcode\",id:c.id,width:n,height:u,hasAlpha:f,mipmaps:l,format:p,dfdTransferFn:m,dfdFlags:v},T)}catch(t){console.error(\"[BasisWorker]: \"+t),self.postMessage({type:\"error\",id:c.id,error:t.message})}})}});var n=[{if:\"astcSupported\",basisFormat:[s.UASTC_4x4],transcoderFormat:[i.ASTC_4x4,i.ASTC_4x4],engineFormat:[o.RGBA_ASTC_4x4_Format,o.RGBA_ASTC_4x4_Format],priorityETC1S:Infinity,priorityUASTC:1,needsPowerOfTwo:!1},{if:\"bptcSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.BC7_M5,i.BC7_M5],engineFormat:[o.RGBA_BPTC_Format,o.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{if:\"dxtSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.BC1,i.BC3],engineFormat:[o.RGB_S3TC_DXT1_Format,o.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{if:\"etc2Supported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.ETC1,i.ETC2],engineFormat:[o.RGB_ETC2_Format,o.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{if:\"etc1Supported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.ETC1],engineFormat:[o.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{if:\"pvrtcSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.PVRTC1_4_RGB,i.PVRTC1_4_RGBA],engineFormat:[o.RGB_PVRTC_4BPPV1_Format,o.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0}],a=n.sort(function(t,e){return t.priorityETC1S-e.priorityETC1S}),d=n.sort(function(t,e){return t.priorityUASTC-e.priorityUASTC});function h(t){return t<=2||0==(t&t-1)&&0!==t}};export{y as KTX2TextureTranscoder};\n//# sourceMappingURL=index.es.map\n","import type {View, Viewer} from \"@xeokit/viewer\";\nimport {GLAbstractTexture, GLDataTexture, WEBGL_INFO} from \"@xeokit/webglutils\";\n\n\n\n/**\n * Provides rendering context within a WebGLRenderer.\n */\nexport class RenderContext {\n\n    /**\n     * The Viewer.\n     */\n    public viewer: Viewer;\n\n    /**\n     * The View we are rendering.\n     */\n    public view: View;\n\n    /**\n     * The WebGL rendering context.\n     */\n    public gl: WebGL2RenderingContext;\n\n    public viewMatrixDataTexture: GLDataTexture;\n\n    /**\n     * Whether to render a quality representation for triangle surfaces.\n     *\n     * When ````false````, we'll render them with a fast vertex-shaded Gouraud-shaded representation, which\n     * is great for zillions of objects.\n     *\n     * When ````true````, we'll render them at a better visual quality, using smooth, per-fragment shading\n     * and a more realistic lighting model.\n     */\n    public pbrEnabled: boolean;\n\n    /**\n     * Whether SAO is currently enabled during the current frame.\n     */\n    public withSAO: boolean;\n\n    /**\n     * Whether backfaces are currently enabled during the current frame.\n     */\n    public backfaces: boolean;\n\n    /**\n     * The vertex winding order for what we currently consider to be a backface during current\n     * frame: true == \"cw\", false == \"ccw\".\n     */\n    public frontface: boolean;\n\n    /**\n     * The next available texture unit to bind a {@link GLAbstractTexture} to.\n     */\n    public textureUnit: number;\n\n    /**\n     * Statistic that counts how many times ````gl.bindTexture()```` has been called so far within the current frame.\n     */\n    public bindTexture: number;\n\n    /**\n     * Indicates which pass the renderer is currently rendering.\n     */\n    public renderPass: number;\n\n    /**\n     * The 4x4 viewing transform matrix the renderer is currently using when rendering castsShadows.\n     *\n     * This sets the viewpoint to look from the point of view of each {@link DirLight}\n     * or {@link PointLight} that casts a shadow.\n     */\n    public shadowViewMatrix: any;\n\n    /**\n     * The 4x4 viewing projection matrix the renderer is currently using when rendering shadows.\n     */\n    public shadowProjMatrix: any;\n\n    /**\n     * The 4x4 viewing transform matrix the renderer is currently using when rendering a ray-pick.\n     *\n     * This sets the viewpoint to look along the ray given to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}\n     * when picking with a ray.\n     */\n    public pickViewMatrix: any;\n\n    /**\n     * The 4x4 orthographic projection transform matrix the renderer is currently using when rendering a ray-pick.\n     */\n    public pickProjMatrix: any;\n\n    /**\n     * Distance to the near clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n     */\n    public pickZNear: number;\n\n    /**\n     * Distance to the far clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n     */\n    public pickZFar: number;\n\n    /**\n     * Whether or not the renderer is currently picking invisible objects.\n     */\n    public pickInvisible: boolean;\n\n    /** The current line width.\n     */\n    public lineWidth: number;\n\n    /**\n     * ID of the last {@link WebGLProgram} that was bound during the current frame.\n     */\n    public lastProgramId: number;\n\n    /**\n     * The occlusion rendering texture.\n     */\n    public occlusionTexture: GLAbstractTexture | null;\n\n    constructor(viewer: Viewer, view: View, gl: WebGL2RenderingContext) {\n        this.viewer = viewer;\n        this.view = view;\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Called by the renderer before each frame.\n     */\n    reset() {\n        this.lastProgramId = -1;\n        this.pbrEnabled = false;\n        this.withSAO = false;\n        this.backfaces = false;\n        this.frontface = true;\n        this.textureUnit = 0;\n        this.shadowViewMatrix = null;\n        this.shadowProjMatrix = null;\n        this.pickViewMatrix = null;\n        this.pickProjMatrix = null;\n        this.pickZNear = 0.01;\n        this.pickZFar = 5000;\n        this.pickInvisible = false;\n        this.lineWidth = 1;\n        this.occlusionTexture = null;\n    }\n\n    /**\n     * Gets the next available texture unit for this render\n     */\n    get nextTextureUnit() {\n        const textureUnit = this.textureUnit;\n        this.textureUnit = (this.textureUnit + 1) % WEBGL_INFO.MAX_TEXTURE_UNITS;\n        return textureUnit;\n    }\n}\n","\n/**\n * @private\n */\nexport const RENDER_PASSES = {\n\n    // Skipped - suppress rendering\n\n    NOT_RENDERED: 0,\n\n    // Normal rendering - mutually exclusive modes\n\n    COLOR_OPAQUE: 1,\n    COLOR_TRANSPARENT: 2,\n\n    // Emphasis silhouette rendering - mutually exclusive modes\n\n    SILHOUETTE_HIGHLIGHTED: 3,\n    SILHOUETTE_SELECTED: 4,\n    SILHOUETTE_XRAYED: 5,\n\n    // Edges rendering - mutually exclusive modes\n\n    EDGES_COLOR_OPAQUE: 6,\n    EDGES_COLOR_TRANSPARENT: 7,\n    EDGES_HIGHLIGHTED: 8,\n    EDGES_SELECTED: 9,\n    EDGES_XRAYED: 10,\n\n    // Picking\n\n    PICK: 11\n};\n\n","import {createVec4} from \"@xeokit/matrix\";\nimport {OrthoProjectionType} from \"@xeokit/constants\";\nimport {AmbientLight, DirLight, PerspectiveProjection, PointLight} from \"@xeokit/viewer\";\n\nimport type {RenderContext} from \"./RenderContext\";\nimport {RENDER_PASSES} from \"./RENDER_PASSES\";\nimport type {Layer} from \"./Layer\";\nimport {GLProgram, GLSampler} from \"@xeokit/webglutils\";\n\nconst tempVec4 = createVec4();\n\n/**\n * @private\n */\nexport abstract class LayerRenderer {\n\n    /**\n     * Initialization error messages\n     */\n    errors: string[] | undefined;\n\n    protected renderContext: RenderContext;\n\n    #hash: string;\n    #program: GLProgram | null;\n    #needRebuild: boolean;\n\n    #uniforms: {\n        renderPass: WebGLUniformLocation,\n        viewMatrix: WebGLUniformLocation,\n        projMatrix: WebGLUniformLocation,\n        worldMatrix: WebGLUniformLocation,\n        sectionPlanes: {\n            pos: WebGLUniformLocation,\n            dir: WebGLUniformLocation,\n            active: WebGLUniformLocation\n        }[];\n        lights: {\n            pos?: WebGLUniformLocation,\n            dir?: WebGLUniformLocation,\n            color: WebGLUniformLocation,\n            attenuation?: WebGLUniformLocation\n        }[];\n        pickInvisible: WebGLUniformLocation;\n        pickZFar: WebGLUniformLocation;\n        pickZNear: WebGLUniformLocation;\n        pointCloudIntensityRange: WebGLUniformLocation;\n        nearPlaneHeight: WebGLUniformLocation;\n        pointSize: WebGLUniformLocation;\n        gammaFactor: WebGLUniformLocation;\n        logDepthBufFC: WebGLUniformLocation;\n        sao: WebGLUniformLocation;\n        lightAmbient: WebGLUniformLocation;\n        color: WebGLUniformLocation;\n    }\n\n    #samplers: {\n        viewMatrices: GLSampler;\n        positions: GLSampler;\n        indices: GLSampler;\n        edgeIndices: GLSampler;\n        eachMeshMatrices: GLSampler;\n        eachMeshAttributes: GLSampler;\n        //    eachMeshOffsets: GLSampler;\n        eachEdgeOffset: GLSampler;\n        eachPrimitiveMesh: GLSampler;\n        eachEdgeMesh: GLSampler;\n        baseColorMap: GLSampler;\n        metallicRoughMap: GLSampler;\n        emissiveMap: GLSampler;\n        normalMap: GLSampler;\n        occlusionMap: GLSampler;\n    };\n\n    protected constructor(renderContext: RenderContext) {\n        this.renderContext = renderContext;\n        this.#needRebuild = true;\n        this.#build();\n    }\n\n    #build(): void {\n\n        const view = this.renderContext.view;\n        const gl = this.renderContext.gl;\n\n        this.#program = new GLProgram(gl, this.#buildShader());\n\n        if (this.#program.errors) {\n            this.errors = this.#program.errors;\n            return;\n        }\n\n        const program = this.#program;\n\n        this.#uniforms = {\n            renderPass: program.getLocation(\"renderPass\"),\n            viewMatrix: program.getLocation(\"viewMatrix\"),\n            projMatrix: program.getLocation(\"projMatrix\"),\n            worldMatrix: program.getLocation(\"worldMatrix\"),\n            sao: program.getLocation(\"sao\"),\n            logDepthBufFC: program.getLocation(\"logDepthBufFC\"),\n            gammaFactor: program.getLocation(\"gammaFactor\"),\n            pointSize: program.getLocation(\"pointSize\"),\n            nearPlaneHeight: program.getLocation(\"nearPlaneHeight\"),\n            pointCloudIntensityRange: program.getLocation(\"pointCloudIntensityRange\"),\n            pickZNear: program.getLocation(\"pickZNear\"),\n            pickZFar: program.getLocation(\"pickZFar\"),\n            pickInvisible: program.getLocation(\"pickInvisible\"),\n            color: program.getLocation(\"color\"),\n            lightAmbient: program.getLocation(\"lightAmbient\"),\n            lights: [],\n            sectionPlanes: []\n        };\n\n        const uniforms = this.#uniforms;\n\n        const lights = view.lightsList;\n        for (let i = 0, len = lights.length; i < len; i++) {\n            const light: any = lights[i];\n            switch (light.type) {\n                case \"dir\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        dir: program.getLocation(\"lightDir\" + i)\n                    });\n                    break;\n                case \"point\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        pos: program.getLocation(\"lightPos\" + i),\n                        attenuation: program.getLocation(\"lightAttenuation\" + i)\n                    });\n                    break;\n                case \"spot\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        pos: program.getLocation(\"lightPos\" + i),\n                        dir: program.getLocation(\"lightDir\" + i),\n                        attenuation: program.getLocation(\"lightAttenuation\" + i)\n                    });\n                    break;\n            }\n        }\n\n        for (let i = 0, len = view.sectionPlanesList.length; i < len; i++) {\n            uniforms.sectionPlanes.push({\n                active: program.getLocation(\"sectionPlaneActive\" + i),\n                pos: program.getLocation(\"sectionPlanePos\" + i),\n                dir: program.getLocation(\"sectionPlaneDir\" + i)\n            });\n        }\n\n        this.#samplers = {\n            viewMatrices: program.getSampler(\"viewMatrices\"),\n            positions: program.getSampler(\"positions\"),\n            indices: program.getSampler(\"indices\"),\n            edgeIndices: program.getSampler(\"edgeIndices\"),\n            eachMeshAttributes: program.getSampler(\"eachMeshAttributes\"),\n            eachMeshMatrices: program.getSampler(\"eachMeshMatrices\"),\n            eachEdgeOffset: program.getSampler(\"eachMeshOffset\"),\n            eachPrimitiveMesh: program.getSampler(\"eachMeshTriangleMesh\"),\n            eachEdgeMesh: program.getSampler(\"eachEdgeMesh\"),\n            baseColorMap: program.getSampler(\"baseColorMap\"),\n            metallicRoughMap: program.getSampler(\"metallicRoughMap\"),\n            emissiveMap: program.getSampler(\"emissiveMap\"),\n            normalMap: program.getSampler(\"normalMap\"),\n            occlusionMap: program.getSampler(\"occlusionMap\")\n        };\n\n        this.#hash = this.getHash();\n    }\n\n    #buildShader() {\n        return {\n            vertex: this.buildVertexShader(),\n            fragment: this.buildFragmentShader()\n        };\n    }\n\n    /**\n     * Generates vertex shader GLSL for the current View state\n     */\n    protected abstract buildVertexShader(): string;\n\n    /**\n     * Generates fragment shader GLSL for the current View state\n     */\n    protected abstract buildFragmentShader(): string;\n\n    /**\n     * Gets a hash for the View's current configuration as pertaining to the LayerRenderer.\n     */\n    protected abstract getHash(): string;\n\n    /**\n     * Indicates that the LayerRenderer may need to rebuild shaders\n     */\n    needRebuild() {\n        this.#needRebuild = true;\n    }\n\n    /**\n     * Gets if this LayerRenderer's configuration is still valid for the current View state.\n     */\n    #getValid() {\n        if (!this.#needRebuild) {\n            return true;\n        }\n        this.#needRebuild = false;\n        return this.#hash === this.getHash();\n    };\n\n    /**\n     * Draws the given Layer.\n     *\n     * @param layer The Layer to draw\n     */\n    draw(layer: Layer) {\n\n        if (this.#program && !this.#getValid()) {\n            this.#program.destroy();\n            this.#program = null;\n        }\n\n        if (!this.#program) {\n            this.#build();\n            if (this.errors) {\n                return;\n            }\n            this.renderContext.lastProgramId = -1;\n        }\n\n        const renderState = layer.renderState;\n        const program = this.#program;\n        const renderContext = this.renderContext;\n        const renderPass = renderContext.renderPass;\n        const gl = this.renderContext.gl;\n        const view = this.renderContext.view;\n        const uniforms = this.#uniforms;\n        const samplers = this.#samplers;\n\n        // @ts-ignore\n        if (renderContext.lastProgramId !== program.id) {\n            // @ts-ignore\n            renderContext.lastProgramId = program.id;\n            this.#bind();\n        }\n\n        if (uniforms.renderPass) {\n            gl.uniform1i(uniforms.renderPass, renderPass);\n        }\n\n        // if (uniforms.viewMatrix) {\n        //     //gl.uniformMatrix4fv(uniforms.viewMatrix, false, <Float32Array | GLfloat[]>layer.rtcViewMat.viewMatrix);\n        //     gl.uniformMatrix4fv(uniforms.viewMatrix, false, <Float32Array | GLfloat[]>view.camera.viewMatrix);\n        // }\n\n        if (uniforms.projMatrix) {\n            gl.uniformMatrix4fv(uniforms.projMatrix, false, <Float32Array | GLfloat[]>view.camera.projMatrix);\n        }\n\n        if (uniforms.worldMatrix) {\n            gl.uniformMatrix4fv(uniforms.worldMatrix, false, <Float32Array | GLfloat[]>layer.rendererModel.worldMatrix);\n        }\n\n        if (uniforms.color) {\n            if (renderPass === RENDER_PASSES.SILHOUETTE_XRAYED) {\n                const material = view.xrayMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else if (renderPass === RENDER_PASSES.SILHOUETTE_HIGHLIGHTED) {\n                const material = view.highlightMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else if (renderPass === RENDER_PASSES.SILHOUETTE_SELECTED) {\n                const material = view.selectedMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else {\n                gl.uniform4fv(uniforms.color, new Float32Array([1, 1, 1]));\n            }\n        }\n\n        // if (view.sectionPlanesList.length) {\n        //     const numSectionPlanes = view.sectionPlanesList.length;\n        //     const origin = layer.renderState.origin;\n        //     const sectionPlanes = view.sectionPlanesList;\n        //     const baseIndex = layer.layerIndex * numSectionPlanes;\n        //     const drawFlags = rendererModel.drawFlags;\n        //     for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n        //         const sectionPlaneUniforms = this.#uniforms.sectionPlanes[sectionPlaneIndex];\n        //         if (sectionPlaneUniforms) {\n        //             const active = drawFlags.sectionPlanesActivePerLayer[baseIndex + sectionPlaneIndex];\n        //             gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n        //             if (active) {\n        //                 const sectionPlane = sectionPlanes[sectionPlaneIndex];\n        //                 if (origin) {\n        //                     const rtcSectionPlanePos = rtc.getPlaneRTCPos(sectionPlane.dist, sectionPlane.dir, origin, tempVec3a);\n        //                     gl.uniform3fv(sectionPlaneUniforms.pos, rtcSectionPlanePos);\n        //                 } else {\n        //                     gl.uniform3fv(sectionPlaneUniforms.pos, sectionPlane.pos);\n        //                 }\n        //                 gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n        //             }\n        //         }\n        //     }\n        // }\n\n        if (samplers.viewMatrices) {\n            // @ts-ignore\n            renderState.dataTextureSet.viewMatrices.bindTexture(program, samplers.viewMatrices, renderContext.nextTextureUnit);\n        }\n        if (samplers.positions) {\n            // @ts-ignore\n            renderState.dataTextureSet.positions.bindTexture(program, samplers.positions, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachMeshMatrices) {\n            // @ts-ignore\n            renderState.dataTextureSet.eachMeshMatrices.bindTexture(program, samplers.eachMeshMatrices, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachMeshAttributes) {\n            // @ts-ignore\n            renderState.dataTextureSet.eachMeshAttributes.bindTexture(program, samplers.eachMeshAttributes, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachPrimitiveMesh) {\n            if (renderState.numIndices8Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_8Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_8Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices8Bits);\n            }\n            if (renderState.numIndices16Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_16Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_16Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices16Bits);\n            }\n            if (renderState.numIndices32Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_32Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_32Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices32Bits);\n            }\n        }\n        if (samplers.baseColorMap) {\n            samplers.baseColorMap.bindTexture(renderState.materialTextureSet.colorTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.metallicRoughMap) {\n            samplers.metallicRoughMap.bindTexture(renderState.materialTextureSet.metallicRoughnessTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.emissiveMap) {\n            samplers.emissiveMap.bindTexture(renderState.materialTextureSet.emissiveTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.occlusionMap) {\n            samplers.occlusionMap.bindTexture(renderState.materialTextureSet.occlusionTexture.texture2D, renderContext.nextTextureUnit);\n        }\n    }\n\n    #bind() {\n\n        const view = this.renderContext.view;\n        const gl = this.renderContext.gl;\n        const uniforms = this.#uniforms;\n        const project = view.camera.project;\n\n        // @ts-ignore\n        this.#program.bind();\n        // if (this.#uProjMatrix) {\n        //     gl.uniformMatrix4fv(this.#uProjMatrix, false, project.matrix);\n        // }\n        if (uniforms.lightAmbient) {      // @ts-ignore\n            gl.uniform4fv(uniforms.lightAmbient, view.getAmbientColorAndIntensity());\n        }\n        for (let i = 0, len = uniforms.lights.length; i < len; i++) {\n            const fragLightSourceUniforms = uniforms.lights[i];\n            const light = view.lightsList[i];\n            if (fragLightSourceUniforms.color) {\n                gl.uniform4f(fragLightSourceUniforms.color, light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (fragLightSourceUniforms.dir) { // @ts-ignore\n                gl.uniform3f(fragLightSourceUniforms.dir, light.dir[0], light.dir[1], light.dir[2]);\n            }\n            if (fragLightSourceUniforms.pos) { // @ts-ignore\n                gl.uniform3f(fragLightSourceUniforms.pos, light.pos[0], light.pos[1], light.pos[2]);\n            }\n            if (fragLightSourceUniforms.attenuation) { // @ts-ignore\n                gl.uniform1f(fragLightSourceUniforms.attenuation, light.attenuation);\n            }\n        }\n        if (uniforms.sao) {\n            const sao = view.sao;\n            const saoEnabled = sao.possible;\n            if (saoEnabled) {\n                const viewportWidth = gl.drawingBufferWidth;\n                const viewportHeight = gl.drawingBufferHeight;\n                tempVec4[0] = viewportWidth;\n                tempVec4[1] = viewportHeight;\n                tempVec4[2] = sao.blendCutoff;\n                tempVec4[3] = sao.blendFactor;\n                // @ts-ignore\n                gl.uniform4fv(uniforms.sao, tempVec4);\n                // program.bindTexture(this.#uOcclusionTexture, renderContext.occlusionTexture, 0);\n            }\n        }\n        if (uniforms.gammaFactor) {\n            gl.uniform1f(uniforms.gammaFactor, view.gammaFactor);\n        }\n        if (uniforms.pointSize) {\n            gl.uniform1f(uniforms.pointSize, view.pointsMaterial.pointSize);\n        }\n        if (uniforms.nearPlaneHeight) {\n            gl.uniform1f(uniforms.nearPlaneHeight, (view.camera.projectionType === OrthoProjectionType) ? 1.0 : (gl.drawingBufferHeight / (2 * Math.tan(0.5 * view.camera.perspectiveProjection.fov * Math.PI / 180.0))));\n        }\n        if (uniforms.pickZNear) {\n            gl.uniform1f(uniforms.pickZNear, this.renderContext.pickZNear);\n            gl.uniform1f(uniforms.pickZFar, this.renderContext.pickZFar);\n        }\n        if (uniforms.pickInvisible) {\n            gl.uniform1i(uniforms.pickInvisible, this.renderContext.pickInvisible ? 1 : 0);\n        }\n        if (uniforms.logDepthBufFC) {\n            const logDepthBufFC = 2.0 / (Math.log((project as PerspectiveProjection).far + 1.0) / Math.LN2);\n            gl.uniform1f(uniforms.logDepthBufFC, logDepthBufFC);\n        }\n    }\n\n    // protected get vertexShader(): string {\n    //     return `${this.vertHeader}\n    //     ${this.vertDataTextureDefs}\n    //     ${this.vertLogDepthBufDefs}\n    //     void main(void) {\n    //             ${this.vertDataTextureSamples}\n    //             ${this.vertLogDepthBufOutputs}\n    //     }`;\n    // }\n\n    protected get vertHeader(): string {\n        return `#version 300 es\n                #ifdef GL_FRAGMENT_PRECISION_HIGH\n                precision highp float;\n                precision highp int;\n                precision highp usampler2D;\n                precision highp isampler2D;\n                precision highp sampler2D;\n                #else\n                precision mediump float;\n                precision mediump int;\n                precision mediump usampler2D;\n                precision mediump isampler2D;\n                precision mediump sampler2D;\n                uniform int renderPass;\n                #endif`;\n    }\n\n    protected get vertDataTextureDefs(): string {\n        return `uniform mediump sampler2D eachMeshMatrices;\n                uniform lowp usampler2D eachMeshAttributes;\n                uniform highp sampler2D eachMeshOffset;\n                uniform mediump usampler2D positions;\n                uniform highp usampler2D indices;\n                uniform mediump usampler2D eachPrimitiveMesh;\n                uniform highp sampler2D cameraMatrices;\n                uniform highp sampler2D sceneModelRendererMatrices;`;\n    }\n\n    protected get vertLogDepthBufDefs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `uniform float logDepthBufFC;\n                    out float fragDepth;\n                    bool isPerspectiveMatrix(mat4 m) {\n                        return (m[2][3] == - 1.0);\n                    }\n                    out float isPerspective;`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get vertDataTextureSamples(): string {\n        return \"\";\n    }\n\n    protected get vertLogDepthBufOutputs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `fragDepth = 1.0 + clipPos.w;\n                    isPerspective = float (isPerspectiveMatrix(projMatrix));`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragmentShader(): string {\n        return `${this.fragHeader}\n        ${this.fragGammaDefs}\n        ${this.fragSectionPlaneDefs}\n        ${this.fragLightDefs}\n        ${this.fragLogDepthBufDefs}\n        void main(void) {\n            ${this.fragSectionPlanesSlice}\n            ${this.fragLighting}\n            ${this.fragLogDepthBufOutput}\n        }`;\n    }\n\n    protected get fragHeader(): string {\n        return `#version 300 es\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n       precision highp float;\n        precision highp int;\n        #else\n        precision mediump float;\n        precision mediump int;\n        #endif`;\n    }\n\n    protected get fragGammaDefs(): string {\n        return `uniform float gammaFactor;\n        vec4 linearToLinear( in vec4 value ) {\n            return value;\n        }\n        vec4 sRGBToLinear( in vec4 value ) {\n            return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n        }\n        vec4 gammaToLinear( in vec4 value) {\n            return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n        }\n        vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\n              return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        }`;\n    }\n\n    protected get fragLightDefs(): string {\n        const view = this.renderContext.view;\n        const src = [];\n        src.push(\"uniform vec4 lightAmbient;\");\n        for (let i = 0, len = view.lightsList.length; i < len; i++) {\n            const light: any = view.lightsList[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragLogDepthBufDefs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `in float isPerspective;\n                    uniform float logDepthBufFC;\n                    in float fragDepth;`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragLogDepthBufOutput(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return \"gl_FragDepth = isPerspective == 0.0 ? gl_FragCoord.z : log2( fragDepth ) * logDepthBufFC * 0.5;\";\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragLighting(): string {\n        const src = [];\n        src.push(\"vec4 viewPosition  = viewMatrix * worldPosition; \");\n        src.push(\"vec4 modelNormal = vec4(octDecode(normal.xy), 0.0); \");\n        src.push(\"vec4 worldNormal = worldNormalMatrix * vec4(dot(modelNormal, modelNormalMatrixCol0), dot(modelNormal, modelNormalMatrixCol1), dot(modelNormal, modelNormalMatrixCol2), 0.0);\");\n        src.push(\"vec3 viewNormal = normalize(vec4(viewNormalMatrix * worldNormal).xyz);\");\n        src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n        src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n        src.push(\"float lambertian = 1.0;\");\n\n        for (let i = 0, len = this.renderContext.view.lightsList.length; i < len; i++) {\n            const light: any = this.renderContext.view.lightsList[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = -normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = -normalize((viewMatrix * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"spot\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n        src.push(\"vec3 rgb = (vec3(float(color.r) / 255.0, float(color.g) / 255.0, float(color.b) / 255.0));\");\n        src.push(\"meshColor =  vec4((lightAmbient.rgb * lightAmbient.a * rgb) + (reflectedColor * rgb), float(color.a) / 255.0);\");\n\n        return src.join(\"\\n\");\n    }\n\n    protected get fragSAOOutput(): string {\n        if (this.renderContext.view.sao.enabled) {\n            // Doing SAO blend in the main solid fill draw shader just so that edge lines can be drawn over the top\n            // Would be more efficient to defer this, then render lines later, using same depth buffer for Z-reject\n            return `float viewportWidth     = uSAOParams[0];\n                    float viewportHeight    = uSAOParams[1];\n                    float blendCutoff       = uSAOParams[2];\n                    float blendFactor       = uSAOParams[3];\n                    vec2 uv                 = vec2(gl_FragCoord.x / viewportWidth, gl_FragCoord.y / viewportHeight);\n                    float ambient           = smoothstep(blendCutoff, 1.0, unpackRGBToFloat(texture(uOcclusionTexture, uv))) * blendFactor;\n                    outColor                = vec4(fragColor.rgb * ambient, 1.0);`;\n        } else {\n            return `outColor            = fragColor;`;\n        }\n    }\n\n    protected get fragOutput(): string {\n        return `outColor            = fragColor;`;\n    }\n\n\n    protected get fragSectionPlaneDefs(): string {\n        const src = [];\n        src.push(`in vec4 worldPosition;\n                  in vec4 meshFlags2;`);\n        for (let i = 0, len = this.renderContext.view.sectionPlanesList.length; i < len; i++) {\n            src.push(`uniform bool sectionPlaneActive${i};\n                      uniform vec3 sectionPlanePos${i};\n                      uniform vec3 sectionPlaneDir${i};`);\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragLightSourceUniforms(): string {\n        const src = [];\n        src.push(`uniform vec4 lightAmbient;`);\n        for (let i = 0, len = this.renderContext.view.lightsList.length; i < len; i++) {\n            const light = this.renderContext.view.lightsList[i];\n            if (light instanceof AmbientLight) {\n                continue;\n            }\n            src.push(`uniform vec4 lightColor${i};`);\n            if (light instanceof DirLight) {\n                src.push(`uniform vec3 lightDir${i};`);\n            }\n            if (light instanceof PointLight) {\n                src.push(`uniform vec3 lightPos${i};`);\n            }\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragSectionPlanesSlice(): string {\n        const src = [];\n        const clipping = (this.renderContext.view.sectionPlanesList.length > 0);\n        if (clipping) {\n            src.push(`bool clippable = (float(meshFlags2.x) > 0.0);\n                      if (clippable) {\n                          float dist = 0.0;`);\n            for (let i = 0, len = this.renderContext.view.sectionPlanesList.length; i < len; i++) {\n                src.push(`if (sectionPlaneActive${i}) {\n                              dist += clamp(dot(-sectionPlaneDir${i}.xyz, worldPosition.xyz - sectionPlanePos${i}.xyz), 0.0, 1000.0);\n                          }`);\n            }\n            src.push(`if (dist > 0.0) { \n                          discard;\n                      }\n                  }`);\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragFlatShading(): string {\n        const src = [];\n        src.push(\"\");\n        return src.join(\"\\n\");\n    }\n\n    destroy() {\n        if (this.#program) {\n            this.#program.destroy();\n        }\n        this.#program = null;\n    }\n}\n","import {LayerRenderer} from \"./LayerRenderer\";\nimport type {RenderContext} from \"./RenderContext\";\n\nexport class FastColorTrianglesRenderer extends LayerRenderer {\n\n    constructor(renderContext: RenderContext) {\n        super(renderContext);\n    }\n\n    getHash(): string {\n        return `${this.renderContext.view.getSectionPlanesHash()}-${this.renderContext.view.getLightsHash()}`;\n    }\n\n    buildVertexShader(): string {\n        return `${this.vertHeader}   \n        \n                uniform int                 renderPass;   \n            \n                uniform highp   mat4        projMatrix;\n                uniform highp   mat4        worldMatrix;\n                      \n                uniform mediump sampler2D   viewMatrices;\n                           \n                uniform mediump usampler2D  eachPrimitiveMesh;\n                uniform lowp    usampler2D  eachMeshAttributes;\n                \n                uniform mediump sampler2D   eachMeshMatrices;\n                uniform mediump usampler2D  positions;\n                uniform highp   usampler2D  indices;\n                \n                uniform  float  logDepthBufFC;\n                 \n                out vec4        worldPosition;\n                flat out uint   meshFlags2r;                       \n                flat out uvec4  meshColor;\n                out float       fragDepth;\n                \n                bool isPerspectiveMatrix(mat4 m) {\n                    return (m[2][3] == - 1.0);\n                }\n                \n                out float isPerspective;\n                    \n                void main(void) {\n                                   \n                    int triangleIndex      = gl_VertexID / 3;\n                    \n                    int hPackedMeshIdIndex = (triangleIndex >> 3) & 1023;\n                    int vPackedMeshIdIndex = (triangleIndex >> 3) >> 10;\n                    \n                    int meshIndex          = int(texelFetch(eachPrimitiveMesh, ivec2(hPackedMeshIdIndex, vPackedMeshIdIndex), 0).r);                   \n                    uvec4 meshFlags        = texelFetch (eachMeshAttributes, ivec2(2, meshIndex), 0);\n\n                    if (int(meshFlags.x) != renderPass) {\n                        gl_Position = vec4(3.0, 3.0, 3.0, 1.0);\n                        return;\n                    } \n                 \n                    uvec4 meshFlags2 = texelFetch (eachMeshAttributes, ivec2(3, meshIndex), 0);\n\n                    ivec4 packedVertexBase = ivec4(texelFetch (eachMeshAttributes, ivec2(4, meshIndex), 0));\n                    ivec4 packedIndexBaseOffset = ivec4(texelFetch (eachMeshAttributes, ivec2(5, meshIndex), 0));\n                    int indexBaseOffset =   (packedIndexBaseOffset.r << 24) + \n                                            (packedIndexBaseOffset.g << 16) + \n                                            (packedIndexBaseOffset.b << 8) + \n                                            (packedIndexBaseOffset.a);\n\n                    int hIndex = (triangleIndex - indexBaseOffset) & 1023;\n                    int vIndex = (triangleIndex - indexBaseOffset) >> 10;\n\n                    ivec3 vertexIndices = ivec3(texelFetch(indices, ivec2(hIndex, vIndex), 0));\n                    ivec3 uniqueVertexIndexes = vertexIndices + (packedVertexBase.r << 24) + (packedVertexBase.g << 16) + (packedVertexBase.b << 8) + packedVertexBase.a;\n\n                    ivec3 indexPositionH = uniqueVertexIndexes & 1023;\n                    ivec3 indexPositionV = uniqueVertexIndexes >> 10;\n\n                    mat4 positionsDecompressMatrix = mat4 (\n                        texelFetch (eachMeshMatrices, ivec2(0, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(1, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(2, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(3, meshIndex), 0));\n                        \n                    mat4 meshMatrix = mat4 (\n                        texelFetch (eachMeshMatrices, ivec2(4, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(5, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(6, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(7, meshIndex), 0));\n\n                    ivec4 packedViewMatrixIndex = ivec4(texelFetch (eachMeshAttributes, ivec2(7, meshIndex), 0));\n                    int viewMatrixIndex = \n                            (packedViewMatrixIndex.r << 24) + \n                            (packedViewMatrixIndex.g << 16) + \n                            (packedViewMatrixIndex.b << 8) + \n                            (packedViewMatrixIndex.a);\n                   \n                    mat4 viewMatrix = mat4 (\n                        texelFetch (viewMatrices, ivec2(4, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(5, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(6, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(7, viewMatrixIndex), 0));\n\n                    vec3 _positions[3];\n                   \n                    _positions[0] = vec3(texelFetch(positions, ivec2(indexPositionH.r, indexPositionV.r), 0));\n                    _positions[1] = vec3(texelFetch(positions, ivec2(indexPositionH.g, indexPositionV.g), 0));\n                    _positions[2] = vec3(texelFetch(positions, ivec2(indexPositionH.b, indexPositionV.b), 0));\n  \n                    vec3  position       = _positions[gl_VertexID % 3];\n                   \n                    vec4  _worldPosition = worldMatrix * ((meshMatrix * positionsDecompressMatrix) * vec4(position, 1.0)); \n                    vec4  viewPosition   = viewMatrix * _worldPosition;                   \n                    vec4  clipPosition   = projMatrix * viewPosition;\n\n                    meshFlags2r     = meshFlags2.r;                     \n                    meshColor       = texelFetch (eachMeshAttributes, ivec2(0, meshIndex), 0);                          \n                    fragDepth       = 1.0 + clipPosition.w;\n                    isPerspective   = float (isPerspectiveMatrix(projMatrix));\n                    worldPosition   = _worldPosition;                                               \n                    \n                    gl_Position     = clipPosition;\n                }`;\n    }\n\n    buildFragmentShader(): string {\n        return `${this.fragHeader}                        \n    \n             flat   in uvec4    meshColor;\n                in float        fragDepth;\n                in float        isPerspective;    \n                flat in uint    meshFlags2r;        \n                uniform float   logDepthBufFC;                        \n    \n                ${this.fragSectionPlaneDefs}                  \n                ${this.fragLightSourceUniforms}                                                             \n    \n                out vec4 outColor;        \n    \n                void main(void) {         \n                \n                // src.push(\"float lambertian = 1.0;\");\n                // \n                //  vec3 xTangent = dFdx( vViewPosition.xyz );\n                //  vec3 yTangent = dFdy( vViewPosition.xyz );\n                // \n                //  vec3 viewNormal = normalize( cross( xTangent, yTangent ) );        \n    \n                    ${this.fragSectionPlanesSlice}                                    \n                    ${this.fragFlatShading}     \n          \n                    outColor = vec4(meshColor);                   \n                    gl_FragDepth = isPerspective == 0.0 ? gl_FragCoord.z : log2( fragDepth ) * logDepthBufFC * 0.5;                        \n                }`;\n    }\n\n    // get lambertianLighting() : string{\n    //     const src = [];\n    //     src.push(\"createVec3 reflectedColor = createVec3(0.0, 0.0, 0.0);\");\n    //     src.push(\"createVec3 viewLightDir = createVec3(0.0, 0.0, -1.0);\");\n    //     src.push(\"float lambertian = 1.0;\");\n    //     for (let i = 0, len = this.view.lightsList.length; i < len; i++) {\n    //         const light = this.view.lightsList[i];\n    //         if (light.type === \"ambient\") {\n    //             continue;\n    //         }\n    //         if (light.type === \"dir\") {\n    //             src.push(\"viewLightDir = normalize((viewMatrix * createVec4(lightDir\" + i + \", 0.0)).xyz);\");\n    //         } else {\n    //             continue;\n    //         }\n    //         src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n    //         src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n    //     }\n    //     return src.join(\"\\n\");\n    // }\n\n}","/**\n * @private\n */\nimport type {GLDataTexture} from \"@xeokit/webglutils\";\n\n\nexport class DataTextureSet {\n\n    positions: GLDataTexture | null; // All quantized positions for a Layer\n    indices_8Bits: GLDataTexture | null; // All 8-bit indices\n    indices_16Bits: GLDataTexture | null; // All 16-bit indices\n    indices_32Bits: GLDataTexture | null; // All 32-bt indices\n    edgeIndices_8Bits: GLDataTexture | null; // All 8-bit edge indices\n    edgeIndices_16Bits: GLDataTexture | null; // All 16-bit edges indices\n    edgeIndices_32Bits: GLDataTexture | null; // All 32-bit edges indices\n    indices: { [key: number]: GLDataTexture | null }; // All 8, 16, and 32-bit indices\n    edgeIndices: { [key: number]: GLDataTexture | null } | null; // All 8, 16 and 32-bit indices\n    eachMeshAttributes: GLDataTexture | null; // For each mesh, a set of attributes including color, opacity, visibility etc\n    eachMeshMatrices: GLDataTexture | null; // For each mesh, a positions decompression matrix and a modeling matrix\n    eachEdgeOffset: GLDataTexture | null;\n    eachPrimitiveMesh_8Bits: GLDataTexture | null;\n    eachPrimitiveMesh_16Bits: GLDataTexture | null;\n    eachPrimitiveMesh_32Bits: GLDataTexture | null;\n    eachPrimitiveMesh: { [key: number]: GLDataTexture | null } | null;\n    eachEdgeMesh_8Bits: GLDataTexture | null;\n    eachEdgeMesh_16Bits: GLDataTexture | null;\n    eachEdgeMesh_32Bits: GLDataTexture | null;\n    eachEdgeMesh: { [key: number]: GLDataTexture | null } | null;\n    #built: boolean;\n\n    constructor() {\n        this.positions = null;\n        this.indices_8Bits = null;\n        this.indices_16Bits = null;\n        this.indices_32Bits = null;\n        this.edgeIndices_8Bits = null;\n        this.edgeIndices_16Bits = null;\n        this.edgeIndices_32Bits = null;\n        this.eachMeshAttributes = null;\n        this.eachMeshMatrices = null;\n        this.eachPrimitiveMesh_8Bits = null;\n        this.eachPrimitiveMesh_16Bits = null;\n        this.eachPrimitiveMesh_32Bits = null;\n        this.eachEdgeMesh_8Bits = null;\n        this.eachEdgeMesh_16Bits = null;\n        this.eachEdgeMesh_32Bits = null;\n        this.eachEdgeOffset = null;\n        this.#built = false;\n    }\n\n    build() {\n        this.indices = {\n            8: this.indices_8Bits,\n            16: this.indices_16Bits,\n            32: this.indices_32Bits,\n        };\n        this.eachPrimitiveMesh = {\n            8: this.eachPrimitiveMesh_8Bits,\n            16: this.eachPrimitiveMesh_16Bits,\n            32: this.eachPrimitiveMesh_32Bits,\n        };\n        this.edgeIndices = {\n            8: this.edgeIndices_8Bits,\n            16: this.edgeIndices_16Bits,\n            32: this.edgeIndices_32Bits,\n        };\n        this.eachEdgeMesh = {\n            8: this.eachEdgeMesh_8Bits,\n            16: this.eachEdgeMesh_16Bits,\n            32: this.eachEdgeMesh_32Bits,\n        };\n        this.#built = true;\n    }\n\n    destroy() {\n        if (this.positions) {\n            this.positions.destroy();\n        }\n        if (this.indices_8Bits) {\n            this.indices_8Bits.destroy();\n        }\n        if (this.indices_16Bits) {\n            this.indices_16Bits.destroy();\n        }\n        if (this.indices_32Bits) {\n            this.indices_32Bits.destroy();\n        }\n        if (this.edgeIndices_8Bits) {\n            this.edgeIndices_8Bits.destroy();\n        }\n        if (this.edgeIndices_16Bits) {\n            this.edgeIndices_16Bits.destroy();\n        }\n        if (this.edgeIndices_32Bits) {\n            this.edgeIndices_32Bits.destroy();\n        }\n        if (this.eachMeshMatrices) {\n            this.eachMeshMatrices.destroy();\n        }\n        if (this.eachMeshAttributes) {\n            this.eachMeshAttributes.destroy();\n        }\n        if (this.eachEdgeOffset) {\n            this.eachEdgeOffset.destroy();\n        }\n        if (this.eachPrimitiveMesh_8Bits) {\n            this.eachPrimitiveMesh_8Bits.destroy();\n        }\n        if (this.eachPrimitiveMesh_16Bits) {\n            this.eachPrimitiveMesh_16Bits.destroy();\n        }\n        if (this.eachPrimitiveMesh_32Bits) {\n            this.eachPrimitiveMesh_32Bits.destroy();\n        }\n        if (this.eachEdgeMesh_8Bits) {\n            this.eachEdgeMesh_8Bits.destroy();\n        }\n        if (this.eachEdgeMesh_16Bits) {\n            this.eachEdgeMesh_16Bits.destroy();\n        }\n        if (this.eachEdgeMesh_32Bits) {\n            this.eachEdgeMesh_32Bits.destroy();\n        }\n    }\n}\n","\n/**\n * @private\n */\nexport class MeshCounts {\n\n    numMeshes: number;\n    numVisible: number;\n    numTransparent: number;\n    numEdges: number;\n    numXRayed: number;\n    numSelected: number;\n    numHighlighted: number;\n    numClippable: number;\n    numPickable: number;\n    numCulled: number;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset() {\n        this.numMeshes = 0;\n        this.numVisible = 0;\n        this.numTransparent = 0;\n        this.numEdges = 0;\n        this.numXRayed = 0;\n        this.numSelected = 0;\n        this.numHighlighted = 0;\n        this.numClippable = 0;\n        this.numPickable = 0;\n        this.numCulled = 0;\n    }\n}","\n/**\n * @private\n */\nexport const SCENE_OBJECT_FLAGS = {\n    VISIBLE: 1,\n    CULLED: 1 << 2,\n    PICKABLE: 1 << 3,\n    CLIPPABLE: 1 << 4,\n    COLLIDABLE: 1 << 5,\n    CAST_SHADOW: 1 << 6,\n    RECEIVE_SHADOW: 1 << 7,\n    XRAYED: 1 << 8,\n    HIGHLIGHTED: 1 << 9,\n    SELECTED: 1 << 10,\n    EDGES: 1 << 11,\n    BACKFACES: 1 << 12,\n    TRANSPARENT: 1 << 13\n};\n","/**\n * Bundled by jsDelivr using Rollup v2.59.0 and Terser v5.9.0.\n * Original file: /npm/@petamoriken/float16@3.5.11/src/index.mjs\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\nfunction t(t: Function) {\n    // @ts-ignore\n    return (r: any, ...e: ArrayLike<any>) => n(t, r, e)\n}\n\nfunction r(r: object, n: PropertyKey) {\n    // @ts-ignore\n    return t(s(r, n).get)\n}\n\n// @ts-ignore\n// @ts-ignore\nconst {\n        apply: n,\n        construct: e,\n        defineProperty: o,\n        get: i,\n        getOwnPropertyDescriptor: s,\n        getPrototypeOf: c,\n        has: u,\n        ownKeys: f,\n        set: h,\n        setPrototypeOf: l\n    } = Reflect, a = Proxy, y = Number,\n    {\n        isFinite: p,\n        isNaN: w\n    } = y,\n    {\n        iterator: g,\n        species: d,\n        toStringTag: v,\n        for: b\n    } = Symbol, A = Object,\n    {\n        create: m,\n        defineProperty: B,\n        freeze: x,\n        is: E\n        // @ts-ignore\n    } = A, T = A.prototype, O = t(T.isPrototypeOf), j = A.hasOwn || t(T.hasOwnProperty), I = Array, P = I.isArray,\n    // @ts-ignore\n    S = I.prototype, _ = t(S.join), F = t(S.push), L = t(S.toLocaleString), R = S[g], C = t(R), N = Math.trunc,\n    U = ArrayBuffer, M = U.isView, D = t(U.prototype.slice), k = r(U.prototype, \"byteLength\"),\n    W = \"undefined\" != typeof SharedArrayBuffer ? SharedArrayBuffer : null, V = W && r(W.prototype, \"byteLength\"),\n    // @ts-ignore\n    Y = c(Uint8Array), z = Y.from, G = Y.prototype, K = G[g], X = t(G.keys), q = t(G.values), H = t(G.entries),\n    J = t(G.set), Q = t(G.reverse), Z = t(G.fill), $ = t(G.copyWithin), tt = t(G.sort), rt = t(G.slice),\n    nt = t(G.subarray), et = r(G, \"buffer\"), ot = r(G, \"byteOffset\"), it = r(G, \"length\"), st = r(G, v),\n    // @ts-ignore\n    ct = Uint16Array, ut = (...t) => n(z, ct, t), ft = Uint32Array, ht = Float32Array, lt = c([][g]()), at = t(lt.next),\n    yt = t(function* () {\n        // @ts-ignore\n    }().next), pt = c(lt), wt = DataView.prototype, gt = t(wt.getUint16), dt = t(wt.setUint16), vt = TypeError,\n    bt = RangeError, At = Set, mt = At.prototype, Bt = t(mt.add), xt = t(mt.has), Et = WeakMap, Tt = Et.prototype,\n    Ot = t(Tt.get), jt = t(Tt.has), It = t(Tt.set), Pt = new U(4), St = new ht(Pt), _t = new ft(Pt), Ft = new ft(512),\n    Lt = new ft(512);\nfor (let t = 0; t < 256; ++t) {\n    const r = t - 127;\n    r < -27 ? (Ft[t] = 0, Ft[256 | t] = 32768, Lt[t] = 24, Lt[256 | t] = 24) : r < -14 ? (Ft[t] = 1024 >> -r - 14, Ft[256 | t] = 1024 >> -r - 14 | 32768, Lt[t] = -r - 1, Lt[256 | t] = -r - 1) : r <= 15 ? (Ft[t] = r + 15 << 10, Ft[256 | t] = r + 15 << 10 | 32768, Lt[t] = 13, Lt[256 | t] = 13) : r < 128 ? (Ft[t] = 31744, Ft[256 | t] = 64512, Lt[t] = 24, Lt[256 | t] = 24) : (Ft[t] = 31744, Ft[256 | t] = 64512, Lt[t] = 13, Lt[256 | t] = 13)\n}\n\nfunction Rt(t: number) {\n    St[0] = t;\n    const r = _t[0],\n        n = r >> 23 & 511;\n    return Ft[n] + ((8388607 & r) >> Lt[n])\n}\n\nconst Ct = new ft(2048),\n    Nt = new ft(64),\n    Ut = new ft(64);\nCt[0] = 0;\nfor (let t = 1; t < 1024; ++t) {\n    let r = t << 13,\n        n = 0;\n    for (; 0 == (8388608 & r);) n -= 8388608, r <<= 1;\n    r &= -8388609, n += 947912704, Ct[t] = r | n\n}\nfor (let t = 1024; t < 2048; ++t) Ct[t] = 939524096 + (t - 1024 << 13);\nNt[0] = 0;\nfor (let t = 1; t < 31; ++t) Nt[t] = t << 23;\nNt[31] = 1199570944, Nt[32] = 2147483648;\nfor (let t = 33; t < 63; ++t) Nt[t] = 2147483648 + (t - 32 << 23);\nNt[63] = 3347054592, Ut[0] = 0;\nfor (let t = 1; t < 64; ++t) Ut[t] = 32 === t ? 0 : 1024;\n\nfunction Mt(t: number) {\n    const r = t >> 10;\n    return _t[0] = Ct[Ut[r] + (1023 & t)] + Nt[r], St[0]\n}\n\nfunction Dt(t: unknown) {\n    if (\"bigint\" == typeof t) throw vt(\"Cannot convert a BigInt value to a number\");\n    if (t = y(t), !p(t) || 0 === t) return t;\n    // @ts-ignore\n    return Mt(Rt(t))\n}\n\nfunction kt(t: any[]) {\n    // @ts-ignore\n    if (t[g] === R) return t;\n    const r = C(t);\n    return m(null,\n        {\n            next:\n                {\n                    value: function () {\n                        return at(r)\n                    }\n                },\n            [g]:\n                {\n                    value: function () {\n                        return this\n                    }\n                }\n        })\n}\n\nconst Wt = new Et,\n    Vt = m(pt,\n        {\n            next:\n                {\n                    value: function () {\n                        const t = Ot(Wt, this);\n                        return yt(t)\n                    },\n                    writable: !0,\n                    configurable: !0\n                },\n            [v]:\n                {\n                    value: \"Array Iterator\",\n                    configurable: !0\n                }\n        });\n\nfunction Yt(t:any) {\n    const r = m(Vt);\n    return It(Wt, r, t), r\n}\n\nfunction zt(t:any) {\n    return null !== t && \"object\" == typeof t || \"function\" == typeof t\n}\n\nfunction Gt(t:any) {\n    return null !== t && \"object\" == typeof t\n}\n\nfunction Kt(t:any) {\n    return void 0 !== st(t)\n}\n\nfunction Xt(t:any) {\n    const r = st(t);\n    return \"BigInt64Array\" === r || \"BigUint64Array\" === r\n}\n\nfunction qt(t:any) {\n    if (null === W) return !1;\n    try {\n        // @ts-ignore\n        return V(t), !0\n    } catch (t:any) {\n        return !1\n    }\n}\n\nfunction Ht(t:any) {\n    if (!P(t)) return !1;\n    // @ts-ignore\n    if (t[g] === R) return !0;\n    // @ts-ignore\n    return \"Array Iterator\" === t[g]()[v]\n}\n\nfunction Jt(t:any) {\n    if (\"string\" != typeof t) return !1;\n    const r = y(t);\n    return t === r + \"\" && (!!p(r) && r === N(r))\n}\n\nconst Qt = y.MAX_SAFE_INTEGER;\n\nfunction Zt(t:any) {\n    if (\"bigint\" == typeof t) throw vt(\"Cannot convert a BigInt value to a number\");\n    const r = y(t);\n    return w(r) || 0 === r ? 0 : N(r)\n}\n\nfunction $t(t:any) {\n    const r = Zt(t);\n    return r < 0 ? 0 : r < Qt ? r : Qt\n}\n\nfunction tr(t: { constructor: any; }, r: ArrayBufferConstructor) {\n    if (!zt(t)) throw vt(\"This is not an object\");\n    const n = t.constructor;\n    if (void 0 === n) return r;\n    if (!zt(n)) throw vt(\"The constructor property value is not an object\");\n    const e = n[d];\n    return null == e ? r : e\n}\n\nfunction rr(t:any) {\n    if (qt(t)) return !1;\n    try {\n        return D(t, 0, 0), !1\n    } catch (t:any) {\n    }\n    return !0\n}\n\nfunction nr(t: unknown, r: unknown) {\n    const n = w(t),\n        e = w(r);\n    if (n && e) return 0;\n    if (n) return 1;\n    if (e) return -1;\n    // @ts-ignore\n    if (t < r) return -1;\n    // @ts-ignore\n    if (t > r) return 1;\n    if (0 === t && 0 === r) {\n        const n = E(t, 0),\n            e = E(r, 0);\n        if (!n && e) return -1;\n        if (n && !e) return 1\n    }\n    return 0\n}\n\nconst er = b(\"__Float16Array__\"),\n    or = new Et;\n\nfunction ir(t:any) {\n    return jt(or, t) || !M(t) && function (t:any) {\n        if (!Gt(t)) return !1;\n        const r = c(t);\n        if (!Gt(r)) return !1;\n        // @ts-ignore\n        const n = r.constructor;\n        if (void 0 === n) return !1;\n        if (!zt(n)) throw vt(\"The constructor property value is not an object\");\n        return u(n, er)\n    }(t)\n}\n\nfunction sr(t:any) {\n    if (!ir(t)) throw vt(\"This is not a Float16Array object\")\n}\n\nfunction cr(t: any, r: number) {\n    const n = ir(t),\n        e = Kt(t);\n    if (!n && !e) throw vt(\"Species constructor didn't return TypedArray object\");\n    if (\"number\" == typeof r) {\n        let e;\n        if (n) {\n            const r = ur(t);\n            e = it(r)\n        } else e = it(t);\n        if (e < r) throw vt(\"Derived constructor created TypedArray object which was too small length\")\n    }\n    if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\")\n}\n\nfunction ur(t:any) {\n    const r = Ot(or, t);\n    if (void 0 !== r) {\n        if (rr(et(r))) throw vt(\"Attempting to access detached ArrayBuffer\");\n        return r\n    }\n    const n = t.buffer;\n    if (rr(n)) throw vt(\"Attempting to access detached ArrayBuffer\");\n    const o = e(ar, [n, t.byteOffset, t.length], t.constructor);\n    return Ot(or, o)\n}\n\nfunction fr(t:any) {\n    const r = it(t),\n        n = [];\n    for (let e = 0; e < r; ++e) n[e] = Mt(t[e]);\n    return n\n}\n\nconst hr = new At;\nfor (const t of f(G)) {\n    if (t === v) continue;\n    const r = s(G, t);\n    j(r, \"get\") && Bt(hr, t)\n}\nconst lr = x(\n    {\n        get: (t: object, r: PropertyKey, n: any) => Jt(r) && j(t, r) ? Mt(i(t, r)) : xt(hr, r) && O(G, t) ? i(t, r) : i(t, r, n),\n        set: (t: object, r: PropertyKey, n: number, e: any) => Jt(r) && j(t, r) ? h(t, r, Rt(n)) : h(t, r, n, e),\n        getOwnPropertyDescriptor(t: object, r: PropertyKey) {\n            if (Jt(r) && j(t, r)) {\n                const n = s(t, r);\n                // @ts-ignore\n                return n.value = Mt(n.value), n\n            }\n            return s(t, r)\n        },\n        defineProperty: (t: object, r: PropertyKey, n: PropertyDescriptor & ThisType<any>) => Jt(r) && j(t, r) && j(n, \"value\") ? (n.value = Rt(n.value), o(t, r, n)) : o(t, r, n)\n    });\n\nclass ar {\n    constructor(t: string | number | any[], r: undefined, n: undefined) {\n        let o;\n        if (ir(t)) o = e(ct, [ur(t)], new.target);\n        else if (zt(t) && !function (t:any) {\n            try {\n                return k(t), !0\n            } catch (t) {\n                return !1\n            }\n        }(t)) {\n            let r, n;\n            if (Kt(t)) {\n                r = t, n = it(t);\n                const i = et(t),\n                    s = qt(i) ? U : tr(i, U);\n                if (rr(i)) throw vt(\"Attempting to access detached ArrayBuffer\");\n                if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\");\n                const c = new s(2 * n);\n                o = e(ct, [c], new.target)\n            } else {\n                // @ts-ignore\n                const i = t[g];\n                if (null != i && \"function\" != typeof i) throw vt(\"@@iterator property is not callable\");\n                // @ts-ignore\n                null != i ? Ht(t) ? (r = t, n = t.length) : (r = [...t], n = r.length) : (r = t, n = $t(r.length)), o = e(ct, [n], new.target)\n            }\n            for (let t = 0; t < n; ++t) { // @ts-ignore\n                o[t] = Rt(r[t])\n            }\n        } else o = e(ct, arguments, new.target);\n        const i = new a(o, lr);\n        return It(or, i, o), i\n    }\n\n    static from(t: string | any[], ...r: any[]) {\n        const e = this;\n        if (!u(e, er)) throw vt(\"This constructor is not a subclass of Float16Array\");\n        if (e === ar) {\n            if (ir(t) && 0 === r.length) {\n                const r = ur(t),\n                    n = new ct(et(r), ot(r), it(r));\n                // @ts-ignore\n                return new ar(et(rt(n)))\n            }\n            // @ts-ignore\n            if (0 === r.length) return new ar(et(ut(t, Rt)));\n            const e = r[0],\n                o = r[1];\n            // @ts-ignore\n            return new ar(et(ut(t, ((t, ...r) => {\n                return Rt(n(e, this, [t, ...kt(r)]))\n            }), o)))\n        }\n        let o, i;\n        // @ts-ignore\n        const s = t[g];\n        if (null != s && \"function\" != typeof s) throw vt(\"@@iterator property is not callable\");\n        // @ts-ignore\n        if (null != s) Ht(t) ? (o = t, i = t.length) : !Kt(c = t) || c[g] !== K && \"Array Iterator\" !== c[g]()[v] ? (o = [...t], i = o.length) : (o = t, i = it(t));\n        else {\n            if (null == t) throw vt(\"Cannot convert undefined or null to object\");\n            o = A(t), i = $t(o.length)\n        }\n        var c;\n        // @ts-ignore\n        const f = new e(i);\n        if (0 === r.length)\n            // @ts-ignore\n            for (let t = 0; t < i; ++t) f[t] = o[t];\n        else {\n            const t = r[0],\n                e = r[1];\n            // @ts-ignore\n            for (let r = 0; r < i; ++r) f[r] = n(t, e, [o[r], r])\n        }\n        return f\n    }\n\n    static of(...t:any) {\n        const r = this;\n        if (!u(r, er)) throw vt(\"This constructor is not a subclass of Float16Array\");\n        const n = t.length;\n        if (r === ar) {\n            // @ts-ignore\n            const r = new ar(n),\n                e = ur(r);\n            for (let r = 0; r < n; ++r) e[r] = Rt(t[r]);\n            return r\n        }\n        // @ts-ignore\n        const e = new r(n);\n        // @ts-ignore\n        for (let r = 0; r < n; ++r) e[r] = t[r];\n        return e\n    }\n\n    keys() {\n        sr(this);\n        const t = ur(this);\n        return X(t)\n    }\n\n    values() {\n        sr(this);\n        const t = ur(this);\n        return Yt(function* () {\n            for (const r of q(t)) yield Mt(r)\n        }())\n    }\n\n    entries() {\n        sr(this);\n        const t = ur(this);\n        return Yt(function* () {\n            for (const [r, n] of H(t)) yield [r, Mt(n)]\n        }())\n    }\n\n    at(t:any) {\n        sr(this);\n        const r = ur(this),\n            n = it(r),\n            e = Zt(t),\n            o = e >= 0 ? e : n + e;\n        if (!(o < 0 || o >= n)) return Mt(r[o])\n    }\n\n    map(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0],\n            // @ts-ignore\n            s = tr(e, ar);\n        if (s === ar) {\n            // @ts-ignore\n            const r = new ar(o),\n                s = ur(r);\n            for (let r = 0; r < o; ++r) {\n                const o = Mt(e[r]);\n                s[r] = Rt(n(t, i, [o, r, this]))\n            }\n            return r\n        }\n        const c = new s(o);\n        cr(c, o);\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            c[r] = n(t, i, [o, r, this])\n        }\n        return c\n    }\n\n    filter(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0],\n            // @ts-ignore\n            s = [];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            // @ts-ignore\n            n(t, i, [o, r, this]) && F(s, o)\n        }\n        // @ts-ignore\n        const c = new (tr(e, ar))(s);\n        // @ts-ignore\n        return cr(c), c\n    }\n\n    reduce(t: (arg0: any, arg1: number, arg2: number, arg3: this) => any, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        if (0 === e && 0 === r.length) throw vt(\"Reduce of empty array with no initial value\");\n        let o, i;\n        0 === r.length ? (o = Mt(n[0]), i = 1) : (o = r[0], i = 0);\n        for (let r = i; r < e; ++r) o = t(o, Mt(n[r]), r, this);\n        return o\n    }\n\n    reduceRight(t: (arg0: any, arg1: number, arg2: number, arg3: this) => any, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        if (0 === e && 0 === r.length) throw vt(\"Reduce of empty array with no initial value\");\n        let o, i;\n        0 === r.length ? (o = Mt(n[e - 1]), i = e - 2) : (o = r[0], i = e - 1);\n        for (let r = i; r >= 0; --r) o = t(o, Mt(n[r]), r, this);\n        return o\n    }\n\n    forEach(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) n(t, i, [Mt(e[r]), r, this])\n    }\n\n    find(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return o\n        }\n    }\n\n    findIndex(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return r\n        }\n        return -1\n    }\n\n    findLast(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = o - 1; r >= 0; --r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return o\n        }\n    }\n\n    findLastIndex(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = o - 1; r >= 0; --r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return r\n        }\n        return -1\n    }\n\n    every(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r)\n            if (!n(t, i, [Mt(e[r]), r, this])) return !1;\n        return !0\n    }\n\n    some(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r)\n            if (n(t, i, [Mt(e[r]), r, this])) return !0;\n        return !1\n    }\n\n    set(t: number, ...r: number[]) {\n        sr(this);\n        const n = ur(this),\n            e = Zt(r[0]);\n        if (e < 0) throw bt(\"Offset is out of bounds\");\n        if (null == t) throw vt(\"Cannot convert undefined or null to object\");\n        if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\");\n        if (ir(t)) return J(ur(this), ur(t), e);\n        if (Kt(t)) {\n            if (rr(et(t))) throw vt(\"Attempting to access detached ArrayBuffer\")\n        }\n        const o = it(n),\n            i = A(t),\n            s = $t(i.length);\n        if (e === 1 / 0 || s + e > o) throw bt(\"Offset is out of bounds\");\n        for (let t = 0; t < s; ++t) n[t + e] = Rt(i[t])\n    }\n\n    reverse() {\n        sr(this);\n        const t = ur(this);\n        return Q(t), this\n    }\n\n    fill(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this);\n        return Z(n, Rt(t), ...kt(r)), this\n    }\n\n    copyWithin(t: any, r: any, ...n: any[]) {\n        sr(this);\n        const e = ur(this);\n        return $(e, t, r, ...kt(n)), this\n    }\n\n    sort(...t:any) {\n        sr(this);\n        const r = ur(this),\n            n = void 0 !== t[0] ? t[0] : nr;\n        // @ts-ignore\n        return tt(r, ((t, r) => n(Mt(t), Mt(r)))), this\n    }\n\n    slice(...t:any) {\n        sr(this);\n        const r = ur(this),\n            // @ts-ignore\n            n = tr(r, ar);\n        if (n === ar) {\n            const n = new ct(et(r), ot(r), it(r));\n            // @ts-ignore\n            return new ar(et(rt(n, ...kt(t))))\n        }\n        const e = it(r),\n            o = Zt(t[0]),\n            i = void 0 === t[1] ? e : Zt(t[1]);\n        let s, c;\n        s = o === -1 / 0 ? 0 : o < 0 ? e + o > 0 ? e + o : 0 : e < o ? e : o, c = i === -1 / 0 ? 0 : i < 0 ? e + i > 0 ? e + i : 0 : e < i ? e : i;\n        const u = c - s > 0 ? c - s : 0,\n            f = new n(u);\n        if (cr(f, u), 0 === u) return f;\n        if (rr(et(r))) throw vt(\"Attempting to access detached ArrayBuffer\");\n        let h = 0;\n        for (; s < c;) f[h] = Mt(r[s]), ++s, ++h;\n        return f\n    }\n\n    subarray(...t:any) {\n        sr(this);\n        const r = ur(this),\n            // @ts-ignore\n            n = tr(r, ar),\n            e = new ct(et(r), ot(r), it(r)),\n            o = nt(e, ...kt(t)),\n            i = new n(et(o), ot(o), it(o));\n        // @ts-ignore\n        return cr(i), i\n    }\n\n    indexOf(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = Zt(r[0]);\n        if (o === 1 / 0) return -1;\n        o < 0 && (o += e, o < 0 && (o = 0));\n        for (let r = o; r < e; ++r)\n            if (j(n, r) && Mt(n[r]) === t) return r;\n        return -1\n    }\n\n        lastIndexOf(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = r.length >= 1 ? Zt(r[0]) : e - 1;\n        if (o === -1 / 0) return -1;\n        o >= 0 ? o = o < e - 1 ? o : e - 1 : o += e;\n        for (let r = o; r >= 0; --r)\n            if (j(n, r) && Mt(n[r]) === t) return r;\n        return -1\n    }\n\n    includes(t: unknown, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = Zt(r[0]);\n        if (o === 1 / 0) return !1;\n        o < 0 && (o += e, o < 0 && (o = 0));\n        const i = w(t);\n        for (let r = o; r < e; ++r) {\n            const e = Mt(n[r]);\n            if (i && w(e)) return !0;\n            if (e === t) return !0\n        }\n        return !1\n    }\n\n    join(...t:any) {\n        sr(this);\n        const r = fr(ur(this));\n        return _(r, ...kt(t))\n    }\n\n    toLocaleString(...t:any) {\n        sr(this);\n        const r = fr(ur(this));\n        return L(r, ...kt(t))\n    }\n\n    get [v]() {\n        if (ir(this)) return \"Float16Array\"\n    }\n}\n\nB(ar, \"BYTES_PER_ELEMENT\",\n    {\n        value: 2\n    }), B(ar, er,\n    {}), l(ar, Y);\nconst yr = ar.prototype;\n\nfunction pr(t: any, r: any, ...n: any[]) {\n    return Mt(gt(t, r, ...kt(n)))\n}\n\nfunction wr(t: any, r: any, n: number, ...e: any[]) {\n    return dt(t, r, Rt(n), ...kt(e))\n}\n\nB(yr, \"BYTES_PER_ELEMENT\",\n    {\n        value: 2\n    }), B(yr, g,\n    {\n        value: yr.values,\n        writable: !0,\n        configurable: !0\n    }), l(yr, G);\nexport\n{\n    ar as Float16Array, pr as getFloat16, Dt as hfround, ir as isFloat16Array, wr as setFloat16\n};","import type {FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {GLDataTexture} from \"@xeokit/webglutils\";\nimport {Float16Array} from \"./float16\";\n\nconst emptyDataTexture = new GLDataTexture({textureWidth: 0, textureHeight: 0});\n\n/**\n * Enables the currently bound ````WebGLTexture```` to be used as a data texture.\n */\nexport function disableFilteringForBoundTexture(gl: WebGL2RenderingContext) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n}\n\n/**\n * Creates a GLDataTexture that holds per-geometry matrices for positions decode.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param positionDecodeMatrices Positions decode matrix for each mesh in the layer\n */\nexport function createEachGeometryMatricesDataTexture(gl: WebGL2RenderingContext, positionDecodeMatrices: FloatArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: Positions decode matrix\n\n    const textureHeight = positionDecodeMatrices.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < positionDecodeMatrices.length; i++) {\n        textureData.set(positionDecodeMatrices [i], i * 24);   // 4x4 values\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n\n/**\n * Creates a GLDataTexture containing the given vertex positions.\n */\nexport function createPositionsDataTexture(gl: WebGL2RenderingContext, positions: FloatArrayParam): GLDataTexture {\n    const numVertices = positions.length / 3;\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(numVertices / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint16Array(textureDataSize);\n    //   dataTextureRamStats.sizeDataTexturePositions += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(positions, 0);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    // @ts-ignore\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 8-bit indices.\n */\nexport function createIndices8BitDataTexture(gl: WebGL2RenderingContext, indices_8Bits: IntArrayParam): GLDataTexture {\n    if (indices_8Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_8Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint8Array(textureDataSize);\n    //dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    textureData.set(indices_8Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 16-bit indices.\n */\nexport function createIndices16BitDataTexture(gl: WebGL2RenderingContext, indices_16Bits: IntArrayParam): GLDataTexture {\n    if (indices_16Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_16Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint16Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(indices_16Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 32-bit indices.\n */\nexport function createIndices32BitDataTexture(gl: WebGL2RenderingContext, indices_32Bits: IntArrayParam): GLDataTexture {\n    if (indices_32Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_32Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint32Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(indices_32Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB32UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_INT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 8-bit edge indices.\n */\nexport function createEdgeIndices8BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_8Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_8Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_8Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint8Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_8Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 16-bit edge indices.\n */\nexport function createEdgeIndices16BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_16Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_16Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_16Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint16Array(textureDataSize);\n    //     dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_16Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 32-bit edge indices.\n */\nexport function createEdgeIndices32BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_32Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_32Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_32Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint32Array(textureDataSize);\n    //   dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_32Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG32UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_INT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing per-mesh colors, pick colors, flags, vertex portion bases, indices portion bases, edge indices portion bases\n *\n * The texture will have:\n * - 4 RGBA columns per row: for each mesh (pick) color and flags(2)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param colors Color per mesh\n * @param pickColors Pick color per mesh\n * @param vertexBases Vertex index base for each mesh\n * @param indexBaseOffsets For triangles: array of offsets between the (gl_VertexID / 3) and the position where the indices start in the texture layer\n * @param edgeIndexBaseOffsets For edges: Array of offsets between the (gl_VertexID / 2) and the position where the edge indices start in the texture layer\n */\nexport function createEachMeshAttributesDataTexture(gl: WebGL2RenderingContext, colors: FloatArrayParam[], pickColors: FloatArrayParam[], vertexBases: IntArrayParam, indexBaseOffsets: IntArrayParam, edgeIndexBaseOffsets: IntArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: (RGBA) mesh color RGBA\n    //    - col1: (packed Uint32 as RGBA) mesh pick color\n    //    - col2: (packed 4 bytes as RGBA) mesh flags\n    //    - col3: (packed 4 bytes as RGBA) mesh flags2\n    //    - col4: (packed Uint32 bytes as RGBA) vertex base\n    //    - col5: (packed Uint32 bytes as RGBA) index base offset\n    //    - col6: (packed Uint32 bytes as RGBA) edge index base offset\n    //    - col7: (packed Uint32 bytes as RGBA) RTC view matrix index base offset\n\n    const textureHeight = colors.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 8;\n    const textureData = new Uint8Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < textureHeight; i++) {\n        textureData.set(colors [i], i * 28 + 0); // mesh color\n        textureData.set(pickColors [i], i * 28 + 4); // mesh pick color\n        textureData.set([0, 0, 0, 0], i * 28 + 8);  // mesh flags\n        textureData.set([0, 0, 0, 0], i * 28 + 12); // mesh flags2\n        textureData.set([(vertexBases[i] >> 24) & 255, (vertexBases[i] >> 16) & 255, (vertexBases[i] >> 8) & 255, (vertexBases[i]) & 255], i * 28 + 16);   // vertex base\n        textureData.set([(indexBaseOffsets[i] >> 24) & 255, (indexBaseOffsets[i] >> 16) & 255, (indexBaseOffsets[i] >> 8) & 255, (indexBaseOffsets[i]) & 255], i * 28 + 20);    // triangles index base offset\n        textureData.set([(edgeIndexBaseOffsets[i] >> 24) & 255, (edgeIndexBaseOffsets[i] >> 16) & 255, (edgeIndexBaseOffsets[i] >> 8) & 255, (edgeIndexBaseOffsets[i]) & 255], i * 28 + 24);    // edge index base offset\n    //    textureData.set([(rtcViewMatIndices[i] >> 24) & 255, (rtcViewMatIndices[i] >> 16) & 255, (rtcViewMatIndices[i] >> 8) & 255, (rtcViewMatIndices[i]) & 255], i * 28 + 28);    // RTC view matrix\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight, textureData}); // Re-writeable texture data\n}\n\n/**\n * Creates GLDataTexture containing a 3D offset for each mesh\n *\n * @param gl\n * @param offsets An offset for each mesh\n */\nexport function createEachEdgeOffsetDataTexture(gl: WebGL2RenderingContext, offsets: FloatArrayParam[]) :GLDataTexture{\n    const textureHeight = offsets.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 1;\n    const textureData = new Float32Array(3 * textureWidth * textureHeight);\n    for (let i = 0; i < offsets.length; i++) {\n        textureData.set(offsets [i], i * 3); // mesh offset\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB32F, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB, gl.FLOAT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight, textureData}); // Re-writeable texture data\n}\n\n/**\n * Creates a GLDataTexture that holds per-mesh matrices for positions decode, position modeling, and normals modeling.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param positionDecodeMatrices Positions decode matrix for each mesh in the layer\n * @param matrices Positions instancing matrix for each mesh in the layer. Null if the meshes are not instanced.\n */\nexport function createEachMeshMatricesDataTexture(gl: WebGL2RenderingContext, positionDecodeMatrices: FloatArrayParam, matrices: FloatArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: Positions decode matrix\n    //    - col1: Positions modeling matrix\n    //    - col2: Normals modeling matrix\n\n    const textureHeight = positionDecodeMatrices.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < positionDecodeMatrices.length; i++) {\n        textureData.set(positionDecodeMatrices [i], i * 48);   // 4x4 values\n        textureData.set(matrices [i], i * 48 + 16);   // 4x4 values\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given mesh IDs.\n * This type of texture is used for a lookup table, of mesh IDs for given keys.\n *\n * @param gl\n * @param meshIds\n */\nexport function createPointerTableDataTexture(gl: WebGL2RenderingContext, meshIds: IntArrayParam): GLDataTexture {\n    if (meshIds.length == 0) {\n        return emptyDataTexture;\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    const lenArray = meshIds.length;\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(lenArray / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight;\n    const textureData = new Uint16Array(textureDataSize);\n    textureData.set(meshIds, 0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.R16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RED_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture that holds matrices.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of matrices\n *\n * @param gl\n * @param numMatrices\n */\nexport function createMatricesDataTexture(gl: WebGL2RenderingContext, numMatrices: number): GLDataTexture {\n    const textureHeight = numMatrices;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n","export class DataTextureBuffer { // Temp data buffer as we build a Layer; converted into data textures once Layer is built\n\n    positionsDecompressMatrices: number[];\n    positionsCompressed: number[];\n    indices_8Bits: number[];\n    indices_16Bits: number[];\n    indices_32Bits: number[];\n    edgeIndices_8Bits: number[];\n    edgeIndices_16Bits: number[];\n    edgeIndices_32Bits: number[];\n\n    eachPrimitiveMesh_8Bits: number[];\n    eachPrimitiveMesh_16Bits: number[];\n    eachPrimitiveMesh_32Bits: number[];\n\n    eachEdgeMesh_8Bits: number[];\n    eachEdgeMesh_16Bits: number[];\n    eachEdgeMesh_32Bits: number[];\n\n    eachMeshVertexPortionBase: number[];\n    eachMeshVertexPortionOffset: number[];\n    eachMeshEdgeIndicesOffset: number[];\n\n    eachMeshColor: any[];\n    eachMeshPickColor: any[];\n    eachMeshMatrices: any[];\n    eachMeshNormalMatrix: any[];\n    eachMeshPositionsDecompressMatrix: any[];\n    eachMeshFlags1: any[];\n    eachMeshFlags2: any[];\n    eachEdgeOffset: any[];\n    eachMeshParts: number[];\n\n    constructor() {\n        this.positionsDecompressMatrices = [];\n        this.positionsCompressed = [];\n        this.indices_8Bits = [];\n        this.indices_16Bits = [];\n        this.indices_32Bits = [];\n        this.edgeIndices_8Bits = [];\n        this.edgeIndices_16Bits = [];\n        this.edgeIndices_32Bits = [];\n        this.eachMeshVertexPortionBase = [];\n        this.eachMeshVertexPortionOffset = [];\n        this.eachMeshEdgeIndicesOffset = [];\n        this.eachMeshColor = [];\n        this.eachMeshPickColor = [];\n        this.eachMeshMatrices = [];\n        this.eachMeshNormalMatrix = [];\n        this.eachMeshPositionsDecompressMatrix = [];\n        this.eachMeshFlags1 = [];\n        this.eachMeshFlags2 = [];\n        this.eachPrimitiveMesh_32Bits = [];\n        this.eachPrimitiveMesh_16Bits = [];\n        this.eachPrimitiveMesh_8Bits = [];\n        this.eachEdgeMesh_32Bits = [];\n        this.eachEdgeMesh_16Bits = [];\n        this.eachEdgeMesh_8Bits = [];\n        this.eachEdgeOffset = [];\n        this.eachMeshParts = [];\n    }\n}","import {createVec4, identityMat4, transformPoint4} from \"@xeokit/matrix\";\nimport type {View} from \"@xeokit/viewer\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\nimport type {RendererModelImpl} from \"./RendererModelImpl\";\nimport {DataTextureSet} from \"./DataTextureSet\";\nimport {MeshCounts} from \"./MeshCounts\";\nimport {SCENE_OBJECT_FLAGS} from './SCENE_OBJECT_FLAGS';\nimport {RENDER_PASSES} from './RENDER_PASSES';\nimport {LinesPrimitive, PointsPrimitive} from \"@xeokit/constants\";\nimport {AABB3ToOBB3, collapseAABB3, expandAABB3Point3} from \"@xeokit/boundaries\";\nimport type {GeometryBucketParams, GeometryCompressedParams, MeshParams} from \"@xeokit/scene\";\nimport type {RendererTextureSetImpl} from \"./RendererTextureSetImpl\";\nimport {\n    createEachEdgeOffsetDataTexture,\n    createEachMeshAttributesDataTexture,\n    createEachMeshMatricesDataTexture,\n    createEdgeIndices16BitDataTexture,\n    createEdgeIndices32BitDataTexture,\n    createEdgeIndices8BitDataTexture,\n    createIndices16BitDataTexture,\n    createIndices32BitDataTexture,\n    createIndices8BitDataTexture,\n    createPositionsDataTexture\n} from \"./dataTextures\";\nimport type {LayerParams} from \"./LayerParams\";\nimport type {GeometryBucketHandle} from \"./GeometryBucketHandle\";\nimport {DataTextureBuffer} from \"./DataTextureBuffer\";\n\nconst MAX_MESH_PARTS = (1 << 12); // 12 bits \nconst MAX_DATATEXTURE_HEIGHT = (1 << 11); // 2048\nconst INDICES_EDGE_INDICES_ALIGNMENT_SIZE = 8;\n\nconst identityMatrix = identityMat4();\nconst tempVec4a = createVec4([0, 0, 0, 1]);\nconst tempVec4b = createVec4([0, 0, 0, 1]);\nconst tempVec4c = createVec4([0, 0, 0, 1]);\nconst tempUint8Array4 = new Uint8Array(4);\nconst tempFloat32Array3 = new Float32Array(3);\n\n\ninterface GeometryHandle { // Storage handle for a geometry within a Layer\n    aabb: FloatArrayParam;\n    positionsDecompressMatrix: FloatArrayParam;\n    geometryBucketHandles: GeometryBucketHandle[]\n}\n\ninterface MeshPartParams {\n    aabb: FloatArrayParam;\n}\n\ninterface MeshPartHandle {\n    vertsBase: number;\n    numVerts: number;\n}\n\n/**\n * @private\n */\nexport interface LayerRenderState { // What a LayerRenderer needs to render this Layer\n    materialTextureSet: RendererTextureSetImpl; // Color, opacity, metal/roughness, ambient occlusion maps\n    dataTextureSet: DataTextureSet;  // Data textures containing geometry, transforms, flags and material attributes\n    primitive: number; // Layer primitive type\n    numIndices8Bits: number; // How many 8-bit encodable indices in layer\n    numIndices16Bits: number; // How many 16-bit encodable indices in layer\n    numIndices32Bits: number; // How many 32-bit encodable indices in layer\n    numEdgeIndices8Bits: number; // How many 8-bit encodable edge indices in layer\n    numEdgeIndices16Bits: number; // How many 16-bit encodable edge indices in layer\n    numEdgeIndices32Bits: number; // How many 32-bit encodable edge indices in layer\n    numVertices: number; // How many vertices in layer\n}\n\n/**\n * @private\n */\nexport class Layer {\n\n    rendererModel: RendererModelImpl;\n    layerIndex: number;\n    meshCounts: MeshCounts;\n    renderState: LayerRenderState;\n\n    #gl: WebGL2RenderingContext;\n    #view: View;\n    #dataTextureBuffer: DataTextureBuffer;\n    #geometryHandles: { [key: string]: any };\n    #meshPartHandles: MeshPartHandle[];\n    #numMeshParts: number;\n    #deferredSetFlagsActive: boolean;\n    #deferredSetFlagsDirty: boolean;\n    #built: boolean;\n\n    constructor(layerParams: LayerParams, renderers?: any) {\n\n        this.meshCounts = new MeshCounts();\n        this.layerIndex = layerParams.layerIndex;\n        this.rendererModel = layerParams.rendererModel;\n\n        this.renderState = <LayerRenderState>{\n            primitive: layerParams.primitive,\n            dataTextureSet: new DataTextureSet(),\n            numIndices8Bits: 0,\n            numIndices16Bits: 0,\n            numIndices32Bits: 0,\n            numEdgeIndices8Bits: 0,\n            numEdgeIndices16Bits: 0,\n            numEdgeIndices32Bits: 0,\n            numVertices: 0\n        };\n\n        this.#gl = layerParams.gl;\n        this.#view = layerParams.view;\n        this.#dataTextureBuffer = new DataTextureBuffer();\n        this.#numMeshParts = 0;\n        this.#geometryHandles = {};\n        this.#meshPartHandles = [];\n        this.#built = false;\n\n        this.beginDeferredFlags();\n    }\n\n    get hash() {\n        return `layer-${this.renderState.primitive}`;\n    }\n\n    canCreateMesh(geometryCompressedParams: GeometryCompressedParams): boolean {\n        if (this.#built) {\n            throw \"Already built\";\n        }\n        const renderState = this.renderState;\n        const numGeometryBuckets = geometryCompressedParams.geometryBuckets.length;\n        if ((this.#numMeshParts + numGeometryBuckets) > MAX_MESH_PARTS) {\n            return false;\n        }\n        let numPositions = 0;\n        let numIndices = 0;\n        for (let i = 0; i < numGeometryBuckets; i++) {\n            const geometryBucket = geometryCompressedParams.geometryBuckets[i];\n            numPositions += geometryBucket.positionsCompressed.length;\n            if (geometryBucket.indices) {\n                numIndices += geometryBucket.indices.length;\n            }\n        }\n        const primVerts = (geometryCompressedParams.primitive === PointsPrimitive) ? 1 : (geometryCompressedParams.primitive == LinesPrimitive ? 2 : 3);\n        const maxIndicesOfAnyBits = Math.max(renderState.numIndices8Bits, renderState.numIndices16Bits, renderState.numIndices32Bits);\n        const numVerts = numPositions / primVerts;\n        let numTriangleIndices = numIndices / 3;\n        return (renderState.numVertices + numVerts) <= MAX_DATATEXTURE_HEIGHT * 1024 && (numTriangleIndices + numIndices) <= MAX_DATATEXTURE_HEIGHT * 1024;\n    }\n\n    hasGeometry(geometryId: string): boolean {\n        return this.#geometryHandles[geometryId];\n    }\n\n    createGeometryCompressed(geometryCompressedParams: GeometryCompressedParams) {\n        if (this.#built) {\n            throw \"Already built\";\n        }\n        const geometryBucketHandles = [];\n        for (let i = 0, len = geometryCompressedParams.geometryBuckets.length; i < len; i++) {\n            geometryBucketHandles.push(this.#createGeometryBucket(geometryCompressedParams.geometryBuckets[i]));\n        }\n        this.#geometryHandles[geometryCompressedParams.id] = <GeometryHandle>{\n            id: geometryCompressedParams.id,\n            aabb: geometryCompressedParams.aabb,\n            positionsDecompressMatrix: geometryCompressedParams.positionsDecompressMatrix,\n            geometryBucketHandles\n        };\n    }\n\n    #createGeometryBucket(geometryBucket: GeometryBucketParams): GeometryBucketHandle {\n        const renderState = this.renderState;\n        if (geometryBucket.indices) {  // Align indices to INDICES_EDGE_INDICES_ALIGNMENT_SIZE\n            const numVertsForPrim = (this.renderState.primitive === PointsPrimitive ? 1 : (this.renderState.primitive === LinesPrimitive ? 2 : 3));\n            const alignedIndicesLen = Math.ceil((geometryBucket.indices.length / numVertsForPrim) / INDICES_EDGE_INDICES_ALIGNMENT_SIZE) * INDICES_EDGE_INDICES_ALIGNMENT_SIZE * numVertsForPrim;\n            const alignedIndices = new Uint32Array(alignedIndicesLen);\n            alignedIndices.fill(0);\n            alignedIndices.set(geometryBucket.indices);\n            geometryBucket.indices = alignedIndices;\n        }\n        if (geometryBucket.edgeIndices) {  // Align edge indices to INDICES_EDGE_INDICES_ALIGNMENT_SIZE\n            const alignedEdgeIndicesLen = Math.ceil((geometryBucket.edgeIndices.length / 2) / INDICES_EDGE_INDICES_ALIGNMENT_SIZE) * INDICES_EDGE_INDICES_ALIGNMENT_SIZE * 2;\n            const alignedEdgeIndices = new Uint32Array(alignedEdgeIndicesLen);\n            alignedEdgeIndices.fill(0);\n            alignedEdgeIndices.set(geometryBucket.edgeIndices);\n            geometryBucket.edgeIndices = alignedEdgeIndices;\n        }\n        const dataTextureBuffer = this.#dataTextureBuffer;\n        const positionsCompressed = geometryBucket.positionsCompressed;\n        const indices = geometryBucket.indices;\n        const edgeIndices = geometryBucket.edgeIndices;\n        const vertexBase = dataTextureBuffer.positionsCompressed.length / 3;\n        const numVertices = positionsCompressed.length / 3;\n        for (let i = 0, len = positionsCompressed.length; i < len; i++) {\n            dataTextureBuffer.positionsCompressed.push(positionsCompressed[i]);\n        }\n        let indicesBase;\n        let numTriangles = 0;\n        if (indices) {\n            numTriangles = indices.length / 3;\n            let indicesBuffer;\n            if (numVertices <= (1 << 8)) {\n                indicesBuffer = dataTextureBuffer.indices_8Bits;\n            } else if (numVertices <= (1 << 16)) {\n                indicesBuffer = dataTextureBuffer.indices_16Bits;\n            } else {\n                indicesBuffer = dataTextureBuffer.indices_32Bits;\n            }\n            indicesBase = indicesBuffer.length / 3;\n            for (let i = 0, len = indices.length; i < len; i++) {\n                indicesBuffer.push(indices[i]);\n            }\n        }\n        let edgeIndicesBase;\n        let numEdges = 0;\n        if (edgeIndices) {\n            numEdges = edgeIndices.length / 2;\n            let edgeIndicesBuffer;\n            if (numVertices <= (1 << 8)) {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_8Bits;\n            } else if (numVertices <= (1 << 16)) {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_16Bits;\n            } else {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_32Bits;\n            }\n            edgeIndicesBase = edgeIndicesBuffer.length / 2;\n            for (let i = 0, len = edgeIndices.length; i < len; i++) {\n                edgeIndicesBuffer.push(edgeIndices[i]);\n            }\n        }\n        renderState.numVertices += numVertices;\n        return <GeometryBucketHandle>{\n            vertexBase,\n            numVertices,\n            numTriangles,\n            numEdges,\n            indicesBase,\n            edgeIndicesBase\n        };\n    }\n\n    createMesh(meshParams: MeshParams): number {\n        if (this.#built) {\n            throw new Error(\"Already built\");\n        }\n        const meshIndex = this.meshCounts.numMeshes;\n        const meshPartIds: number[] = [];\n        if (!meshParams.geometryId) {\n            throw new Error(\"geometryId expected\");\n        }\n        const geometryHandle = this.#geometryHandles[meshParams.geometryId];\n        if (!geometryHandle) {\n            throw new Error(\"Geometry not found\");\n        }\n        geometryHandle.geometryBucketHandles.forEach((geometryBucketHandle: GeometryBucketHandle) => {\n            const meshPartId = this.#createMeshPart(meshParams, geometryHandle, geometryBucketHandle);\n            meshPartIds.push(meshPartId);\n        });\n        const worldAABB = collapseAABB3();\n        const geometryOBB = AABB3ToOBB3(geometryHandle.aabb);\n        for (let i = 0, len = geometryOBB.length; i < len; i += 4) {\n            tempVec4a[0] = geometryOBB[i + 0];\n            tempVec4a[1] = geometryOBB[i + 1];\n            tempVec4a[2] = geometryOBB[i + 2];\n            if (meshParams.matrix) {\n                transformPoint4(meshParams.matrix, tempVec4a, tempVec4b);\n                // transformPoint4(meshParams.matrix, tempVec4b, tempVec4c);\n                expandAABB3Point3(worldAABB, tempVec4b);\n            } else {\n                expandAABB3Point3(worldAABB, tempVec4b);\n            }\n        }\n        this.meshCounts.numMeshes++;\n        return meshIndex;\n    }\n\n    #createMeshPart(meshParams: MeshParams, geometryHandle: GeometryHandle, geometryBucketHandle: GeometryBucketHandle): number {\n\n        const dataTextureBuffer = this.#dataTextureBuffer;\n\n        const renderState = this.renderState;\n\n        const matrix = meshParams.matrix || identityMatrix;\n        const color = meshParams.color || [255, 255, 255];\n        const opacity = meshParams.opacity;\n        const metallic = meshParams.metallic;\n        const roughness = meshParams.roughness;\n\n        const positionsIndex = dataTextureBuffer.positionsCompressed.length;\n        const vertsIndex = positionsIndex / 3;\n\n        dataTextureBuffer.eachMeshPositionsDecompressMatrix.push(geometryHandle.positionsDecompressMatrix);\n        dataTextureBuffer.eachMeshMatrices.push(matrix);\n        dataTextureBuffer.eachMeshColor.push([color[0], color[1], color[2], 255]);\n        dataTextureBuffer.eachMeshPickColor.push(meshParams.pickColor);\n\n        let currentNumIndices;\n        if (geometryBucketHandle.numVertices <= (1 << 8)) {\n            currentNumIndices = renderState.numIndices8Bits;\n        } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n            currentNumIndices = renderState.numIndices16Bits;\n        } else {\n            currentNumIndices = renderState.numIndices32Bits;\n        }\n        dataTextureBuffer.eachMeshVertexPortionBase.push(geometryBucketHandle.vertexBase);\n        dataTextureBuffer.eachMeshVertexPortionOffset.push(currentNumIndices / 3 - geometryBucketHandle.indicesBase);\n\n        // Edge indices\n\n        let currentNumEdgeIndices;\n        if (geometryBucketHandle.numVertices <= (1 << 8)) {\n            currentNumEdgeIndices = renderState.numEdgeIndices8Bits;\n        } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n            currentNumEdgeIndices = renderState.numEdgeIndices16Bits;\n        } else {\n            currentNumEdgeIndices = renderState.numEdgeIndices32Bits;\n        }\n        dataTextureBuffer.eachMeshEdgeIndicesOffset.push(currentNumEdgeIndices / 2 - geometryBucketHandle.edgeIndicesBase);\n\n        // Primitive -> mesh lookup\n\n        const meshPartId = this.#meshPartHandles.length;\n\n        if (geometryBucketHandle.numTriangles > 0) {\n            const numIndices = geometryBucketHandle.numTriangles * 3;\n            let eachPrimitiveMeshBuffer;\n            if (geometryBucketHandle.numVertices <= (1 << 8)) {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_8Bits;\n                renderState.numIndices8Bits += numIndices;\n            } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_16Bits;\n                renderState.numIndices16Bits += numIndices;\n            } else {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_32Bits;\n                renderState.numIndices32Bits += numIndices;\n            }\n            for (let i = 0; i < geometryBucketHandle.numTriangles; i += INDICES_EDGE_INDICES_ALIGNMENT_SIZE) {\n                eachPrimitiveMeshBuffer.push(meshPartId);\n            }\n        }\n\n        // Edge index -> mesh lookup\n\n        if (geometryBucketHandle.numEdges > 0) {\n            let numEdgeIndices = geometryBucketHandle.numEdges * 2;\n            let edgeIndicesMeshIdBuffer;\n            if (geometryBucketHandle.numVertices <= (1 << 8)) {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_8Bits;\n                renderState.numEdgeIndices8Bits += numEdgeIndices;\n            } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_16Bits;\n                renderState.numEdgeIndices16Bits += numEdgeIndices;\n            } else {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_32Bits;\n                renderState.numEdgeIndices32Bits += numEdgeIndices;\n            }\n            for (let i = 0; i < geometryBucketHandle.numEdges; i += INDICES_EDGE_INDICES_ALIGNMENT_SIZE) {\n                edgeIndicesMeshIdBuffer.push(meshPartId);\n            }\n        }\n        dataTextureBuffer.eachEdgeOffset.push([0, 0, 0]);\n\n        this.#meshPartHandles.push(<MeshPartHandle>{\n            vertsBase: vertsIndex,\n            numVerts: geometryBucketHandle.numTriangles //////////////////// TODO\n        });\n        this.#numMeshParts++;\n        return meshPartId;\n    }\n\n    build() {\n        if (this.#built) {\n            throw new Error(\"Already built\");\n        }\n        const gl = this.#gl;\n        const dataTextureBuffer = this.#dataTextureBuffer;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        dataTextureSet.positions = createPositionsDataTexture(gl, dataTextureBuffer.positionsCompressed);\n        dataTextureSet.indices_8Bits = createIndices8BitDataTexture(gl, dataTextureBuffer.indices_8Bits);\n        dataTextureSet.indices_16Bits = createIndices16BitDataTexture(gl, dataTextureBuffer.indices_16Bits);\n        dataTextureSet.indices_32Bits = createIndices32BitDataTexture(gl, dataTextureBuffer.indices_32Bits);\n        dataTextureSet.edgeIndices_8Bits = createEdgeIndices8BitDataTexture(gl, dataTextureBuffer.edgeIndices_8Bits);\n        dataTextureSet.edgeIndices_16Bits = createEdgeIndices16BitDataTexture(gl, dataTextureBuffer.edgeIndices_16Bits);\n        dataTextureSet.edgeIndices_32Bits = createEdgeIndices32BitDataTexture(gl, dataTextureBuffer.edgeIndices_32Bits);\n        dataTextureSet.eachMeshAttributes = createEachMeshAttributesDataTexture(gl,\n            dataTextureBuffer.eachMeshColor,\n            dataTextureBuffer.eachMeshPickColor,\n            dataTextureBuffer.eachMeshVertexPortionBase,\n            dataTextureBuffer.eachMeshVertexPortionOffset,\n            dataTextureBuffer.eachMeshEdgeIndicesOffset);\n        dataTextureSet.eachMeshMatrices = createEachMeshMatricesDataTexture(gl, dataTextureBuffer.eachMeshPositionsDecompressMatrix, dataTextureBuffer.eachMeshMatrices);\n        // dataTextureSet.eachPrimitiveMesh8BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_8Bits);\n        // dataTextureSet.eachPrimitiveMesh16BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_16Bits);\n        // dataTextureSet.eachPrimitiveMesh32BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_32Bits);\n        // dataTextureSet.eachEdgeMesh8BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_8Bits);\n        // dataTextureSet.eachEdgeMesh16BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_16Bits);\n        // dataTextureSet.eachEdgeMesh32BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_32Bits);\n        dataTextureSet.eachEdgeOffset = createEachEdgeOffsetDataTexture(gl, dataTextureBuffer.eachEdgeOffset);\n        dataTextureSet.build();\n        // @ts-ignore\n        this.#dataTextureBuffer = null;\n        this.#geometryHandles = {};\n        this.#meshPartHandles = [];\n        this.#built = true;\n    }\n\n    isEmpty() {\n        return this.meshCounts.numMeshes == 0;\n    }\n\n    initFlags(meshIndex: number, flags: number, meshTransparent: boolean) {\n        if (flags & SCENE_OBJECT_FLAGS.VISIBLE) {\n            this.meshCounts.numVisible++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) {\n            this.meshCounts.numHighlighted++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.XRAYED) {\n            this.meshCounts.numXRayed++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.SELECTED) {\n            this.meshCounts.numSelected++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CLIPPABLE) {\n            this.meshCounts.numClippable++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.EDGES) {\n            this.meshCounts.numEdges++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.PICKABLE) {\n            this.meshCounts.numPickable++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CULLED) {\n            this.meshCounts.numCulled++;\n        }\n        if (meshTransparent) {\n            this.meshCounts.numTransparent++;\n        }\n        this.#setMeshFlags(meshIndex, flags, meshTransparent);\n        this.#setMeshFlags2(meshIndex, flags);\n    }\n\n    beginDeferredFlags() {\n        this.#deferredSetFlagsActive = true;\n    }\n\n    commitDeferredFlags() {\n        this.#deferredSetFlagsActive = false;\n        if (!this.#deferredSetFlagsDirty) {\n            return;\n        }\n        this.#deferredSetFlagsDirty = false;\n        const gl = this.#gl;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        // @ts-ignore\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, dataTextureSet.eachMeshAttributes.textureWidth, dataTextureSet.eachMeshAttributes.textureHeight, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, dataTextureSet.eachMeshAttributes.textureData);\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachEdgeOffset.texture);\n        // @ts-ignore\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, dataTextureSet.eachEdgeOffset.textureWidth, dataTextureSet.eachEdgeOffset.textureHeight, gl.RGB, gl.FLOAT, dataTextureSet.eachEdgeOffset.textureData);\n    }\n\n    flushInitFlags() {\n        this.commitDeferredFlags();\n    }\n\n    setMeshVisible(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.VISIBLE) {\n            debugger;\n            this.meshCounts.numVisible++;\n        } else {\n            this.meshCounts.numVisible--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshHighlighted(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) {\n            this.meshCounts.numHighlighted++;\n        } else {\n            this.meshCounts.numHighlighted--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshXRayed(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.XRAYED) {\n            this.meshCounts.numXRayed++;\n        } else {\n            this.meshCounts.numXRayed--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshSelected(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.SELECTED) {\n            this.meshCounts.numSelected++;\n        } else {\n            this.meshCounts.numSelected--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshEdges(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.EDGES) {\n            this.meshCounts.numEdges++;\n        } else {\n            this.meshCounts.numEdges--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshClippable(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CLIPPABLE) {\n            this.meshCounts.numClippable++;\n        } else {\n            this.meshCounts.numClippable--;\n        }\n        this.#setMeshFlags2(meshIndex, flags);\n    }\n\n    setMeshCulled(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CULLED) {\n            this.meshCounts.numCulled++;\n        } else {\n            this.meshCounts.numCulled--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshCollidable(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n    }\n\n    setMeshPickable(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.PICKABLE) {\n            this.meshCounts.numPickable++;\n        } else {\n            this.meshCounts.numPickable--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshColor(meshIndex: number, color: FloatArrayParam, transparent?: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = color[0];\n        tempUint8Array4 [1] = color[1];\n        tempUint8Array4 [2] = color[2];\n        tempUint8Array4 [3] = color[3];\n        // @ts-ignore\n        dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshTransparent(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (transparent) {\n            this.meshCounts.numTransparent++;\n            this.meshCounts.numTransparent++;\n        } else {\n            this.meshCounts.numTransparent--;\n            this.meshCounts.numTransparent--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    #setMeshFlags(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const visible = !!(flags & SCENE_OBJECT_FLAGS.VISIBLE);\n        const xrayed = !!(flags & SCENE_OBJECT_FLAGS.XRAYED);\n        const highlighted = !!(flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED);\n        const selected = !!(flags & SCENE_OBJECT_FLAGS.SELECTED);\n        const edges = !!(flags & SCENE_OBJECT_FLAGS.EDGES);\n        const pickable = !!(flags & SCENE_OBJECT_FLAGS.PICKABLE);\n        const culled = !!(flags & SCENE_OBJECT_FLAGS.CULLED);\n        let f0; // Color\n        if (!visible || culled || xrayed) { // Highlight & select are layered on top of color - not mutually exclusive\n            f0 = RENDER_PASSES.NOT_RENDERED;\n        } else {\n            if (transparent) {\n                f0 = RENDER_PASSES.COLOR_TRANSPARENT;\n            } else {\n                f0 = RENDER_PASSES.COLOR_OPAQUE;\n            }\n        }\n        let f1; // Silhouette\n        if (!visible || culled) {\n            f1 = RENDER_PASSES.NOT_RENDERED;\n        } else if (selected) {\n            f1 = RENDER_PASSES.SILHOUETTE_SELECTED;\n        } else if (highlighted) {\n            f1 = RENDER_PASSES.SILHOUETTE_HIGHLIGHTED;\n        } else if (xrayed) {\n            f1 = RENDER_PASSES.SILHOUETTE_XRAYED;\n        } else {\n            f1 = RENDER_PASSES.NOT_RENDERED;\n        }\n        let f2 = 0; // Edges\n        if (!visible || culled) {\n            f2 = RENDER_PASSES.NOT_RENDERED;\n        } else if (selected) {\n            f2 = RENDER_PASSES.EDGES_SELECTED;\n        } else if (highlighted) {\n            f2 = RENDER_PASSES.EDGES_HIGHLIGHTED;\n        } else if (xrayed) {\n            f2 = RENDER_PASSES.EDGES_XRAYED;\n        } else if (edges) {\n            if (transparent) {\n                f2 = RENDER_PASSES.EDGES_COLOR_TRANSPARENT;\n            } else {\n                f2 = RENDER_PASSES.EDGES_COLOR_OPAQUE;\n            }\n        } else {\n            f2 = RENDER_PASSES.NOT_RENDERED;\n        }\n        let f3 = (visible && !culled && pickable) ? RENDER_PASSES.PICK : RENDER_PASSES.NOT_RENDERED; // Pick\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = f0;\n        tempUint8Array4 [1] = f1;\n        tempUint8Array4 [2] = f2;\n        tempUint8Array4 [3] = f3;\n        if (this.#deferredSetFlagsActive) {\n            // @ts-ignore\n            dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28 + 8);\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 2, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    #setMeshFlags2(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const clippable = !!(flags & SCENE_OBJECT_FLAGS.CLIPPABLE) ? 255 : 0;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = clippable;\n        tempUint8Array4 [1] = 0;\n        tempUint8Array4 [2] = 1;\n        tempUint8Array4 [3] = 2;\n        if (this.#deferredSetFlagsActive) {\n            // @ts-ignore\n            dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28 + 12); // Flags\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 3, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshOffset(meshIndex: number, offset: FloatArrayParam) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempFloat32Array3 [0] = offset[0];\n        tempFloat32Array3 [1] = offset[1];\n        tempFloat32Array3 [2] = offset[2];\n        // dataTextureSet.eachMeshOffset.textureData.set(tempFloat32Array3, meshIndex * 3);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        //gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshOffset.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGB, gl.FLOAT, tempFloat32Array3);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshMatrix(meshIndex: number, matrix: FloatArrayParam) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n\n    }\n\n    setMeshViewMatrixIndex(meshIndex: number, index: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        // tempUint8Array4 [0] = color[0];\n        // tempUint8Array4 [1] = color[1];\n        // tempUint8Array4 [2] = color[2];\n        // tempUint8Array4 [3] = color[3];\n        // // @ts-ignore\n        // dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // // @ts-ignore\n        // gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        // gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    destroy() {\n        this.renderState.dataTextureSet.destroy();\n    }\n}\n\n","import type {Geometry, RendererGeometry} from \"@xeokit/scene\";\n\n/**\n * @private\n */\nexport class RendererGeometryImpl implements RendererGeometry {\n\n    constructor() {\n    }\n}","import type {RendererTexture, Texture} from \"@xeokit/scene\";\nimport type {GLTexture} from \"@xeokit/webglutils\";\n\n/**\n * @private\n */\nexport class RendererTextureImpl implements RendererTexture {\n\n    texture: Texture | null;\n    texture2D: GLTexture;\n\n    constructor(texture: Texture | null, texture2D: GLTexture) {\n        this.texture = texture\n        this.texture2D = texture2D;\n    }\n\n    destroy() {\n        if (this.texture2D) {\n            this.texture2D.destroy();\n        }\n    }\n\n\n}\n","\nimport {createAABB3} from \"@xeokit/boundaries\";\nimport {createVec3} from \"@xeokit/matrix\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {SCENE_OBJECT_FLAGS} from './SCENE_OBJECT_FLAGS';\nimport type {RendererMeshImpl} from \"./RendererMeshImpl\";\nimport type {RendererViewObject} from \"viewer/src/RendererViewObject\";\nimport type {RendererModel, RendererObject, SceneModel, SceneObject} from \"@xeokit/scene\";\n\nconst tempIntRGB = new Uint16Array([0, 0, 0]);\n\n/**\n * @private\n */\nexport class RendererObjectImpl implements RendererObject, RendererViewObject {\n\n    readonly id: string;\n    readonly model: SceneModel;\n    readonly sceneObject: SceneObject;\n    readonly layerId: string | null;\n\n    readonly rendererMeshes: RendererMeshImpl[];\n\n    #flags: number;\n    #aabb: FloatArrayParam;\n    #offsetAABB: FloatArrayParam;\n    #offset: FloatArrayParam;\n    #colorizeUpdated: boolean;\n    #opacityUpdated: boolean;\n\n    constructor(params: {\n        id: string,\n        rendererModel: RendererModel,\n        rendererMeshes: RendererMeshImpl[],\n        aabb: any,\n        layerId?: string\n    }) {\n        this.id = params.id;\n        //this.model = params.rendererModel;\n        this.rendererMeshes = params.rendererMeshes || [];\n        this.#flags = 0;\n        this.#aabb = params.aabb;\n        this.#offsetAABB = createAABB3(params.aabb);\n        this.#offset = createVec3();\n        this.#colorizeUpdated = false;\n        this.#opacityUpdated = false;\n\n        this.layerId = params.layerId || null;\n\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {  // TODO: tidier way? Refactor?\n            this.rendererMeshes[i].setSceneObject(this);\n        }\n    }\n\n    get aabb(): FloatArrayParam {\n        return this.#offsetAABB;\n    }\n\n    setVisible(viewIndex: number, visible: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.VISIBLE) === visible) {\n            return;\n        }\n        this.#flags = visible ? this.#flags | SCENE_OBJECT_FLAGS.VISIBLE : this.#flags & ~SCENE_OBJECT_FLAGS.VISIBLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setVisible(this.#flags);\n        }\n    }\n\n    setHighlighted(viewIndex: number, highlighted: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) === highlighted) {\n            return;\n        }\n        this.#flags = highlighted ? this.#flags | SCENE_OBJECT_FLAGS.HIGHLIGHTED : this.#flags & ~SCENE_OBJECT_FLAGS.HIGHLIGHTED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setHighlighted(this.#flags);\n        }\n    }\n\n    setXRayed(viewIndex: number, xrayed: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.XRAYED) === xrayed) {\n            return;\n        }\n        this.#flags = xrayed ? this.#flags | SCENE_OBJECT_FLAGS.XRAYED : this.#flags & ~SCENE_OBJECT_FLAGS.XRAYED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setXRayed(this.#flags);\n        }\n    }\n\n    setSelected(viewIndex: number, selected: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.SELECTED) === selected) {\n            return;\n        }\n        this.#flags = selected ? this.#flags | SCENE_OBJECT_FLAGS.SELECTED : this.#flags & ~SCENE_OBJECT_FLAGS.SELECTED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setSelected(this.#flags);\n        }\n    }\n\n    setEdges(viewIndex: number, edges: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.EDGES) === edges) {\n            return;\n        }\n        this.#flags = edges ? this.#flags | SCENE_OBJECT_FLAGS.EDGES : this.#flags & ~SCENE_OBJECT_FLAGS.EDGES;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setEdges(this.#flags);\n        }\n    }\n\n    setCulled(viewIndex: number, culled: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.CULLED) === culled) {\n            return;\n        }\n        this.#flags = culled ? this.#flags | SCENE_OBJECT_FLAGS.CULLED : this.#flags & ~SCENE_OBJECT_FLAGS.CULLED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setCulled(this.#flags);\n        }\n    }\n\n    setClippable(viewIndex: number, clippable: boolean): void {\n        if ((!!(this.#flags & SCENE_OBJECT_FLAGS.CLIPPABLE)) === clippable) {\n            return;\n        }\n        this.#flags = clippable ? this.#flags | SCENE_OBJECT_FLAGS.CLIPPABLE : this.#flags & ~SCENE_OBJECT_FLAGS.CLIPPABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setClippable(this.#flags);\n        }\n    }\n\n    setCollidable(viewIndex: number, collidable: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.COLLIDABLE) === collidable) {\n            return;\n        }\n        this.#flags = collidable ? this.#flags | SCENE_OBJECT_FLAGS.COLLIDABLE : this.#flags & ~SCENE_OBJECT_FLAGS.COLLIDABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setCollidable(this.#flags);\n        }\n    }\n\n    setPickable(viewIndex: number, pickable: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.PICKABLE) === pickable) {\n            return;\n        }\n        this.#flags = pickable ? this.#flags | SCENE_OBJECT_FLAGS.PICKABLE : this.#flags & ~SCENE_OBJECT_FLAGS.PICKABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setPickable(this.#flags);\n        }\n    }\n\n    setColorize(viewIndex: number, color?: FloatArrayParam): void { // [0..1, 0..1, 0..1]\n        if (color) {\n            tempIntRGB[0] = Math.floor(color[0] * 255.0); // Quantize\n            tempIntRGB[1] = Math.floor(color[1] * 255.0);\n            tempIntRGB[2] = Math.floor(color[2] * 255.0);\n            for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n                this.rendererMeshes[i].setColorize(tempIntRGB);\n            }\n        } else {\n            for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n                this.rendererMeshes[i].setColorize(null);\n            }\n        }\n    }\n\n    setOpacity(viewIndex: number, opacity?: number): void {\n        if (this.rendererMeshes.length === 0) {\n            return;\n        }\n        // @ts-ignore\n        const lastOpacityQuantized = this.rendererMeshes[0].colorize[3];\n        let opacityQuantized = 255;\n        if (opacity !== null && opacity !== undefined) {\n            if (opacity < 0) {\n                opacity = 0;\n            } else if (opacity > 1) {\n                opacity = 1;\n            }\n            opacityQuantized = Math.floor(opacity * 255.0); // Quantize\n            if (lastOpacityQuantized === opacityQuantized) {\n                return;\n            }\n        } else {\n            opacityQuantized = 255.0;\n            if (lastOpacityQuantized === opacityQuantized) {\n                return;\n            }\n        }\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setOpacity(opacityQuantized, this.#flags);\n        }\n    }\n\n    setOffset(viewIndex: number, offset: FloatArrayParam): void {\n        // if (offset) {\n        //     this.#offset[0] = offset[0];\n        //     this.#offset[1] = offset[1];\n        //     this.#offset[2] = offset[2];\n        // } else {\n        //     this.#offset[0] = 0;\n        //     this.#offset[1] = 0;\n        //     this.#offset[2] = 0;\n        // }\n        // for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n        //     this.rendererMeshes[i].setOffset(this.#offset);\n        // }\n        // this.#offsetAABB[0] = this.#aabb[0] + this.#offset[0];\n        // this.#offsetAABB[1] = this.#aabb[1] + this.#offset[1];\n        // this.#offsetAABB[2] = this.#aabb[2] + this.#offset[2];\n        // this.#offsetAABB[3] = this.#aabb[3] + this.#offset[0];\n        // this.#offsetAABB[4] = this.#aabb[4] + this.#offset[1];\n        // this.#offsetAABB[5] = this.#aabb[5] + this.#offset[2];\n        // // this.scene.#aabbDirty = true;\n        // // this.scene._objectOffsetUpdated(this, offset);\n        // // this.rendererModel._aabbDirty = true;\n        // // this.rendererModel.glRedraw();\n    }\n\n    build(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].build(this.#flags);\n        }\n    }\n\n    finalize2(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].finalize2();\n        }\n    }\n\n    destroy(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].destroy();\n        }\n    }\n}\n","import type {RendererGeometry, RendererMesh, RendererObject, RendererTextureSet, SceneObject} from \"@xeokit/scene\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createAABB3} from \"@xeokit/boundaries\";\n\nimport type {RenderContext} from \"./RenderContext\";\nimport type {Layer} from \"./Layer\";\nimport type {Pickable} from \"./Pickable\";\nimport {createMat4, mulMat4, transformPoint3, translationMat4c} from \"@xeokit/matrix\";\nimport type {Tile, TileManager} from \"./TileManager\";\n\nconst tempMat4a = createMat4();\nconst tempMat4b = createMat4();\n\n\n/**\n * @private\n */\nexport class RendererMeshImpl implements RendererMesh, Pickable {\n\n    id: string;\n    color: FloatArrayParam;\n    rendererGeometry: RendererGeometry;\n    rendererTextureSet: RendererTextureSet;\n    matrix: FloatArrayParam;\n    metallic: number;\n    roughness: number;\n    opacity: number;\n    pickId: number;\n    tileManager: TileManager;\n    tile: Tile;\n    sceneObjectRenderer: RendererObject | null;\n    aabb: FloatArrayParam;\n    layer: Layer;\n    meshIndex: number;\n    colorize: FloatArrayParam;\n    colorizing: boolean;\n    transparent: boolean;\n\n\n    constructor(params: {\n        tileManager: TileManager,\n        layer: Layer,\n        id: string,\n        matrix: FloatArrayParam;\n        metallic: number;\n        roughness: number;\n        color: FloatArrayParam,\n        opacity: number,\n        rendererTextureSet: RendererTextureSet\n        rendererGeometry: RendererGeometry,\n        meshIndex: number\n    }) {\n        this.sceneObjectRenderer = null;\n        this.tileManager = params.tileManager;\n        this.id = params.id;\n        this.pickId = 0;\n        this.color = [params.color[0], params.color[1], params.color[2], params.opacity]; // [0..255]\n        this.colorize = [params.color[0], params.color[1], params.color[2], params.opacity]; // [0..255]\n        this.colorizing = false;\n        this.transparent = (params.opacity < 255);\n        this.layer = params.layer;\n        this.matrix = params.matrix;\n        this.metallic = params.metallic;\n        this.roughness = params.roughness;\n        this.opacity = params.opacity;\n        this.aabb = createAABB3();\n        this.rendererTextureSet = params.rendererTextureSet;\n        this.rendererGeometry = params.rendererGeometry;\n        this.meshIndex = params.meshIndex;\n    }\n\n    delegatePickedEntity(): SceneObject {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setSceneObject(sceneObjectRenderer: RendererObject) {\n        this.sceneObjectRenderer = sceneObjectRenderer;\n    }\n\n    build(flags: number) {\n        // @ts-ignore\n        this.layer.initFlags(this.meshIndex, flags, this.transparent);\n    }\n\n    finalize2() {\n        // @ts-ignore\n        if (this.layer.flushInitFlags) {\n            this.layer.flushInitFlags();\n        }\n    }\n\n    setVisible(flags: any) {\n        this.layer.setMeshVisible(this.meshIndex, flags, this.transparent);\n    }\n\n    setMatrix(matrix: FloatArrayParam): void {\n        const center = transformPoint3(matrix, [0, 0, 0]);\n        const oldTile = this.tile;\n        this.tile = oldTile ? this.tileManager.updateTileCenter(oldTile, center) : this.tileManager.getTile(center);\n        const tileChanged = !oldTile || oldTile.id !== this.tile.id;\n        const tileCenter = this.tile.center;\n        const needRTC = (tileCenter[0] !== 0 || tileCenter[1] !== 0 || tileCenter[2] !== 0);\n        this.layer.setMeshMatrix(this.meshIndex, needRTC\n            ? mulMat4(matrix, translationMat4c(-tileCenter[0], -tileCenter[1], -tileCenter[2], tempMat4a), tempMat4b)\n            : matrix);\n        if (tileChanged) {\n            this.layer.setMeshViewMatrixIndex(this.meshIndex, this.tile.index);\n        }\n    }\n\n    setMetallic(metallic: number): void {\n    }\n\n    setRoughness(roughness: number): void {\n    }\n\n    setColor(color: FloatArrayParam) {\n        this.color[0] = color[0];\n        this.color[1] = color[1];\n        this.color[2] = color[2];\n        if (!this.colorizing) {\n            this.layer.setMeshColor(this.meshIndex, this.color);\n        }\n    }\n\n    setColorize(colorize: FloatArrayParam | null) {\n        const setOpacity = false;\n        if (colorize) {\n            this.colorize[0] = colorize[0];\n            this.colorize[1] = colorize[1];\n            this.colorize[2] = colorize[2];\n            this.layer.setMeshColor(this.meshIndex, this.colorize, setOpacity);\n            this.colorizing = true;\n        } else {\n            this.layer.setMeshColor(this.meshIndex, this.color, setOpacity);\n            this.colorizing = false;\n        }\n    }\n\n    setOpacity(opacity: number, flags: number) {\n        const newTransparent = (opacity < 255);\n        const lastTransparent = this.transparent;\n        const changingTransparency = (lastTransparent !== newTransparent);\n        this.color[3] = opacity;\n        this.colorize[3] = opacity;\n        this.transparent = newTransparent;\n        if (this.colorizing) {\n            this.layer.setMeshColor(this.meshIndex, this.colorize);\n        } else {\n            this.layer.setMeshColor(this.meshIndex, this.color);\n        }\n        if (changingTransparency) {\n            this.layer.setMeshTransparent(this.meshIndex, flags, newTransparent);\n        }\n    }\n\n    setHighlighted(flags: number) {\n        this.layer.setMeshHighlighted(this.meshIndex, flags, this.transparent);\n    }\n\n    setXRayed(flags: number) {\n        this.layer.setMeshXRayed(this.meshIndex, flags, this.transparent);\n    }\n\n    setSelected(flags: number) {\n        this.layer.setMeshSelected(this.meshIndex, flags, this.transparent);\n    }\n\n    setEdges(flags: number) {\n        this.layer.setMeshEdges(this.meshIndex, flags, this.transparent);\n    }\n\n    setClippable(flags: number) {\n        this.layer.setMeshClippable(this.meshIndex, flags);\n    }\n\n    setCollidable(flags: number) {\n        this.layer.setMeshCollidable(this.meshIndex, flags);\n    }\n\n    setPickable(flags: number) {\n        this.layer.setMeshPickable(this.meshIndex, flags, this.transparent);\n    }\n\n    setCulled(flags: number) {\n        this.layer.setMeshCulled(this.meshIndex, flags, this.transparent);\n    }\n\n    canPickTriangle() {\n        return false;\n    }\n\n    drawPickTriangles(drawFlags: any, renderContext: any) {\n        // NOP\n    }\n\n    pickTriangleSurface(pickResult: any) {\n        // NOP\n    }\n\n    canPickWorldPos() {\n        return true;\n    }\n\n    drawPickNormals(renderContext: RenderContext) {\n        //this.sceneObjectRenderer.rendererModel.drawPickNormals(renderContext);\n    }\n\n    // delegatePickedEntity(): SceneObjectRendererCommands {\n    //     return <SceneObjectRendererCommands>this.sceneObjectRenderer;\n    // }\n\n    destroy() {\n        if (this.tile && this.tileManager) {\n            this.tileManager.putTile(this.tile);\n        }\n    }\n}\n","import type { RendererTextureSet} from \"@xeokit/scene\";\nimport type {RendererTextureImpl} from \"./RendererTextureImpl\";\n\n\n/**\n * @private\n */\nexport class RendererTextureSetImpl implements RendererTextureSet {\n\n    public readonly id: string;\n    public readonly colorTexture: RendererTextureImpl;\n    public readonly metallicRoughnessTexture: RendererTextureImpl;\n    public readonly emissiveTexture: RendererTextureImpl;\n    public readonly occlusionTexture: RendererTextureImpl;\n\n    constructor(params: {\n        id: string;\n        colorTexture: RendererTextureImpl;\n        metallicRoughnessTexture: RendererTextureImpl;\n        emissiveTexture: RendererTextureImpl;\n        occlusionTexture: RendererTextureImpl;\n    }) {\n        this.id = params.id;\n        this.colorTexture = params.colorTexture;\n        this.metallicRoughnessTexture = params.metallicRoughnessTexture;\n        this.emissiveTexture = params.emissiveTexture;\n        this.occlusionTexture = params.occlusionTexture;\n    }\n}\n","import {EventDispatcher} from \"strongly-typed-events\";\nimport {Component, EventEmitter, TextureTranscoder} from \"@xeokit/core\";\nimport {createUUID, loadArraybuffer} from \"@xeokit/utils\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {composeMat4, createMat4, createVec3, createVec4, eulerToQuat, identityQuat, mulMat4} from \"@xeokit/matrix\";\n\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {Camera, View} from \"@xeokit/viewer\";\nimport type {Viewer} from \"@xeokit/viewer\";\nimport {GLTexture} from \"@xeokit/webglutils\";\nimport type {\n    Geometry,\n    GeometryCompressedParams,\n    Mesh,\n    RendererGeometry,\n    RendererMesh,\n    RendererModel,\n    RendererTexture,\n    RendererTextureSet,\n    SceneModel,\n    SceneObject,\n    Texture,\n    TextureSet\n} from \"@xeokit/scene\";\nimport type {WebGLRenderer} from \"./WebGLRenderer\";\nimport {Layer} from \"./Layer\";\nimport type {RenderContext} from \"./RenderContext\";\nimport {RendererGeometryImpl} from \"./RendererGeometryImpl\";\nimport type {RendererViewObject} from \"viewer/src/RendererViewObject\";\nimport {RendererTextureImpl} from \"./RendererTextureImpl\";\nimport {RendererObjectImpl} from \"./RendererObjectImpl\";\nimport {RendererMeshImpl} from \"./RendererMeshImpl\";\nimport {RendererTextureSetImpl} from \"./RendererTextureSetImpl\";\nimport type {LayerParams} from \"./LayerParams\";\nimport type {TileManager} from \"./TileManager\";\n\n\nconst tempVec3a = createVec3();\nconst tempMat4 = createMat4();\n\nconst defaultScale = createVec3([1, 1, 1]);\nconst defaultPosition = createVec3([0, 0, 0]);\nconst defaultRotation = createVec3([0, 0, 0]);\nconst defaultQuaternion = identityQuat();\n\nconst defaultColorTextureId = \"defaultColorTexture\";\nconst defaultMetalRoughTextureId = \"defaultMetalRoughTexture\";\nconst defaultNormalsTextureId = \"defaultNormalsTexture\";\nconst defaultEmissiveTextureId = \"defaultEmissiveTexture\";\nconst defaultOcclusionTextureId = \"defaultOcclusionTexture\";\nconst defaultTextureSetId = \"defaultTextureSet\";\n\n/**\n * @private\n */\nexport class RendererModelImpl extends Component implements RendererModel {\n\n    readonly qualityRender: boolean;\n    declare readonly id: string;\n    declare readonly destroyed: boolean;\n    declare built: boolean;\n\n    sceneModel: SceneModel | null;\n\n    rendererGeometries: { [key: string]: RendererGeometry };\n    rendererTextures: { [key: string]: RendererTexture };\n    rendererTextureSets: { [key: string]: RendererTextureSet; };\n    rendererMeshes: { [key: string]: RendererMesh };\n    rendererObjects: { [key: string]: RendererObjectImpl };\n    rendererObjectsList: RendererObjectImpl[];\n\n    rendererViewObjects: { [key: string]: RendererViewObject };\n\n    readonly viewer: Viewer;\n\n    layerList: Layer[];\n    readonly onBuilt: EventEmitter<RendererModel, null>;\n    declare readonly onDestroyed: EventEmitter<Component, null>;\n    #view: View;\n    #webglRenderer: WebGLRenderer;\n    #renderContext: RenderContext;\n    #position: FloatArrayParam;\n    #rotation: FloatArrayParam;\n    #quaternion: FloatArrayParam;\n    #scale: FloatArrayParam;\n    #worldMatrix: FloatArrayParam;\n    #viewMatrix: FloatArrayParam;\n    #colorTextureEnabled: boolean;\n    #backfaces: boolean;\n    #layers: { [key: string]: Layer };\n    #numGeometries: number;\n    #numTriangles: number;\n    #numLines: number;\n    #numPoints: number;\n    #numViewerObjects: number;\n    #textureTranscoder: TextureTranscoder;\n    #aabbDirty: boolean;\n    #edgeThreshold: number;\n    #currentLayers: { [key: string]: any };\n    #aabb: FloatArrayParam;\n    #viewMatrixDirty: boolean;\n    #worldMatrixNonIdentity: boolean;\n    #onCameraViewMatrix: () => void;\n    #layerId: string | undefined;\n\n    constructor(params: {\n        id: string;\n        sceneModel: SceneModel;\n        matrix?: FloatArrayParam;\n        scale?: FloatArrayParam;\n        view: View;\n        webglRenderer: WebGLRenderer;\n        renderContext: RenderContext;\n        quaternion?: FloatArrayParam;\n        rotation?: FloatArrayParam;\n        position?: FloatArrayParam;\n        edgeThreshold?: number;\n        textureTranscoder: TextureTranscoder;\n        qualityRender?: boolean;\n        layerId?: string;\n    }) {\n\n        super(params.view);\n\n        this.id = params.id;\n        this.sceneModel = params.sceneModel\n        this.viewer = params.view.viewer;\n\n        this.#view = params.view;\n        this.#webglRenderer = params.webglRenderer;\n        this.#renderContext = params.renderContext;\n        this.#textureTranscoder = params.textureTranscoder;\n\n        this.#aabb = collapseAABB3();\n        this.#aabbDirty = false;\n        this.#layers = {};\n        this.layerList = [];\n        this.#currentLayers = {};\n\n        this.rendererGeometries = {};\n        this.rendererTextures = {};\n        this.rendererTextureSets = {};\n        this.rendererMeshes = {};\n        this.rendererObjects = {};\n        this.rendererObjectsList = [];\n\n        this.rendererViewObjects = {};\n\n        this.#numGeometries = 0;\n        this.#numViewerObjects = 0;\n\n        this.#numTriangles = 0;\n        this.#numLines = 0;\n        this.#numPoints = 0;\n        this.#edgeThreshold = params.edgeThreshold || 10;\n\n        this.built = false;\n\n        // Build static matrix\n\n        this.#position = createVec3(params.position || [0, 0, 0]);\n        this.#rotation = createVec3(params.rotation || [0, 0, 0]);\n        this.#quaternion = createVec4(params.quaternion || [0, 0, 0, 1]);\n        if (params.rotation) {\n            eulerToQuat(this.#rotation, \"XYZ\", this.#quaternion);\n        }\n        this.#scale = createVec3(params.scale || [1, 1, 1]);\n        this.#worldMatrix = createMat4();\n        composeMat4(this.#position, this.#quaternion, this.#scale, this.#worldMatrix);\n\n        if (params.matrix || params.position || params.rotation || params.scale || params.quaternion) {\n            this.#viewMatrix = createMat4();\n            this.#viewMatrixDirty = true;\n            this.#worldMatrixNonIdentity = true;\n        }\n\n        this.qualityRender = (params.qualityRender !== false);\n\n        this.#layerId = params.layerId;\n\n        this.#onCameraViewMatrix = this.#view.camera.onViewMatrix.subscribe((camera: Camera, viewMatrix: FloatArrayParam) => {\n            this.#viewMatrixDirty = true;\n        });\n\n        this.#createDefaultTextureSetRenderer();\n\n        this.onBuilt = new EventEmitter(new EventDispatcher<RendererModel, null>());\n\n        this.#addModel(params.sceneModel);\n\n        // this.layerList.sort((a, b) => {\n        //     if (a.sortId < b.sortId) {\n        //         return -1;\n        //     }\n        //     if (a.sortId > b.sortId) {\n        //         return 1;\n        //     }\n        //     return 0;\n        // });\n        for (let i = 0, len = this.layerList.length; i < len; i++) {\n            const layer = this.layerList[i];\n            layer.layerIndex = i;\n        }\n        this.#currentLayers = {};\n        this.built = true;\n        this.#webglRenderer.setImageDirty();\n        //     this.#view.viewer.scene.setAABBDirty();\n        this.onBuilt.dispatch(this, null);\n    }\n\n    get position(): FloatArrayParam {\n        return this.#position;\n    }\n\n    get rotation(): FloatArrayParam {\n        return this.#rotation;\n    }\n\n    get quaternion(): FloatArrayParam {\n        return this.#quaternion;\n    }\n\n    get scale(): FloatArrayParam {\n        return this.#scale;\n    }\n\n    get worldMatrix(): FloatArrayParam {\n        return this.#worldMatrix;\n    }\n\n    get viewMatrix(): FloatArrayParam {\n        if (!this.#viewMatrix) {\n            return this.#view.camera.viewMatrix;\n        }\n        if (this.#viewMatrixDirty) {\n            mulMat4(this.#view.camera.viewMatrix, this.#worldMatrix, this.#viewMatrix);\n            this.#viewMatrixDirty = false;\n        }\n        return this.#viewMatrix;\n    }\n\n    get colorTextureEnabled() {\n        return this.#colorTextureEnabled;\n    }\n\n    get backfaces(): boolean {\n        return this.#backfaces;\n    }\n\n    set backfaces(backfaces: boolean) {\n        backfaces = !!backfaces;\n        this.#backfaces = backfaces;\n        this.#webglRenderer.setImageDirty();\n    }\n\n    get matrix(): FloatArrayParam {\n        return this.#worldMatrix;\n    }\n\n    get aabb(): FloatArrayParam {\n        if (this.#aabbDirty) {\n            this.#rebuildAABB();\n        }\n        return this.#aabb;\n    }\n\n    get numTriangles(): number {\n        return this.#numTriangles;\n    }\n\n    get numLines(): number {\n        return this.#numLines;\n    }\n\n    get numPoints(): number {\n        return this.#numPoints;\n    }\n\n    setVisible(viewIndex: number, visible: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setVisible(viewIndex, visible);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setXRayed(viewIndex: number, xrayed: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setXRayed(viewIndex, xrayed);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setHighlighted(viewIndex: number, highlighted: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setHighlighted(viewIndex, highlighted);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setSelected(viewIndex: number, selected: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setSelected(viewIndex, selected);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setEdges(viewIndex: number, edges: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setEdges(viewIndex, edges);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setCulled(viewIndex: number, culled: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setCulled(viewIndex, culled);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setClippable(viewIndex: number, clippable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setClippable(viewIndex, clippable);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setCollidable(viewIndex: number, collidable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setCollidable(viewIndex, collidable);\n        }\n    }\n\n    setPickable(viewIndex: number, pickable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setPickable(viewIndex, pickable);\n        }\n    }\n\n    setColorize(viewIndex: number, colorize: FloatArrayParam): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setColorize(viewIndex, colorize);\n        }\n    }\n\n    setOpacity(viewIndex: number, opacity: number): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setOpacity(viewIndex, opacity);\n        }\n    }\n\n    /*\n    rebuildDrawFlags() {\n        this.drawFlags.reset();\n        this.#updateDrawFlagsVisibleLayers();\n        if (this.drawFlags.numLayers > 0 && this.drawFlags.numVisibleLayers === 0) {\n            this.drawFlags.culled = true;\n            return;\n        }\n        this.#updateDrawFlags();\n    }\n\n    drawColorOpaque(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawColorOpaque(drawFlags, renderContext);\n        }\n    }\n\n    drawColorTransparent(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawColorTransparent(drawFlags, renderContext);\n        }\n    }\n\n    drawDepth(renderContext: RenderContext): void { // Dedicated to SAO because it skips transparent objects\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawDepth(drawFlags, renderContext);\n        }\n    }\n\n    drawNormals(renderContext: RenderContext): void { // Dedicated to SAO because it skips transparent objects\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawNormals(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteXRayed(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteXRayed(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteHighlighted(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteHighlighted(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteSelected(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteSelected(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesColorOpaque(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesColorOpaque(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesColorTransparent(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesColorTransparent(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesXRayed(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesXRayed(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesHighlighted(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesHighlighted(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesSelected(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesSelected(drawFlags, renderContext);\n        }\n    }\n\n    drawOcclusion(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawOcclusion(drawFlags, renderContext);\n        }\n    }\n\n    drawShadow(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawShadow(drawFlags, renderContext);\n        }\n    }\n\n    drawPickMesh(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickMesh(drawFlags, renderContext);\n        }\n    }\n\n    drawPickDepths(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickDepths(drawFlags, renderContext);\n        }\n    }\n\n    drawPickNormals(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickNormals(drawFlags, renderContext);\n        }\n    }\n*/\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        this.#removeModel();\n        this.#view.camera.onViewMatrix.unsubscribe(this.#onCameraViewMatrix);\n        for (let layerId in this.#currentLayers) {\n            if (this.#currentLayers.hasOwnProperty(layerId)) {\n                this.#currentLayers[layerId].destroy();\n            }\n        }\n        for (let i = 0, len = this.layerList.length; i < len; i++) {\n            this.layerList[i].destroy();\n        }\n        for (let objectId in this.rendererObjects) {\n            this.rendererObjects[objectId].destroy();\n        }\n        for (let meshId in this.rendererMeshes) {\n            //    this.#webglRenderer.deregisterPickable(this.rendererMeshes[meshId].pickId);\n        }\n        this.#currentLayers = {};\n        this.#layers = {};\n        this.layerList = [];\n        this.rendererGeometries = {};\n        this.rendererTextures = {};\n        this.rendererTextureSets = {};\n        this.rendererMeshes = {};\n        this.rendererViewObjects = {};\n        // this.#view.viewer.setAABBDirty();\n        this.onBuilt.clear();\n        super.destroy();\n    }\n\n    #addModel(sceneModel: SceneModel): void {\n\n        const textures = sceneModel.textures;\n        const geometries = sceneModel.geometries;\n        const meshes = sceneModel.meshes;\n        const objects = sceneModel.objects;\n\n        if (textures) {\n            for (let textureId in textures) {\n                const texture = textures[textureId];\n                this.#addTexture(texture);\n            }\n        }\n        if (geometries) {\n            for (let geometryId in geometries) {\n                const geometry = geometries[geometryId];\n                this.#addGeometry(geometry);\n            }\n        }\n        if (meshes) {\n            for (let meshId in meshes) {\n                const mesh = meshes[meshId];\n                this.#addMesh(mesh);\n            }\n        }\n        if (objects) {\n            for (let geometryId in objects) {\n                const object = objects[geometryId];\n                this.#addObject(object);\n            }\n        }\n        for (let layerId in this.#currentLayers) {\n            if (this.#currentLayers.hasOwnProperty(layerId)) {\n                this.#currentLayers[layerId].build();\n            }\n        }\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            objectRenderer.build();\n        }\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            objectRenderer.finalize2();\n        }\n    }\n\n    #addTexture(texture: Texture): void {\n        const textureId = texture.id;\n        if (this.rendererTextures[textureId]) {\n            throw new Error(\"RendererTexture already created: \" + textureId);\n        }\n        const glTexture = new GLTexture({gl: this.#renderContext.gl});\n        if (texture.preloadColor) {\n            glTexture.setPreloadColor(texture.preloadColor);\n        }\n        if (texture.image) { // Ignore transcoder for Images\n            const image = texture.image;\n            image.crossOrigin = \"Anonymous\";\n            glTexture.setImage(image, {\n                minFilter: texture.minFilter,\n                magFilter: texture.magFilter,\n                wrapS: texture.wrapS,\n                wrapT: texture.wrapT,\n                wrapR: texture.wrapR,\n                flipY: texture.flipY,\n                encoding: texture.encoding\n            });\n        } else if (texture.src) {\n            const ext = texture.src.split('.').pop();\n            switch (ext) { // Don't transcode recognized image file types\n                case \"jpeg\":\n                case \"jpg\":\n                case \"png\":\n                case \"gif\":\n                    const image = new Image();\n                    image.onload = () => {\n                        glTexture.setImage(image, {\n                            minFilter: texture.minFilter,\n                            magFilter: texture.magFilter,\n                            wrapS: texture.wrapS,\n                            wrapT: texture.wrapT,\n                            wrapR: texture.wrapR,\n                            flipY: texture.flipY,\n                            encoding: texture.encoding\n                        });\n                    };\n                    image.src = texture.src; // URL or Base64 string\n                    break;\n                default: // Assume other file types need transcoding\n                    if (!this.#textureTranscoder) {\n                        this.error(`Can't create texture from 'src' - rendererModel needs to be configured with a TextureTranscoder for this file type ('${ext}')`);\n                    } else {\n                        loadArraybuffer(texture.src, (arrayBuffer: ArrayBuffer) => {\n                                if (!arrayBuffer.byteLength) {\n                                    this.error(`Can't create texture from 'src': file data is zero length`);\n                                    return;\n                                }\n                                this.#textureTranscoder.transcode([arrayBuffer]).then((compressedTextureData) => {\n                                    glTexture.setCompressedData(compressedTextureData);\n                                    this.#webglRenderer.setImageDirty();\n                                });\n                            },\n                            (errMsg: string) => {\n                                this.error(`Can't create texture from 'src': ${errMsg}`);\n                            });\n                    }\n                    break;\n            }\n        } else if (texture.buffers) { // Buffers implicitly require transcoding\n            if (!this.#textureTranscoder) {\n                this.error(`Can't create texture from 'buffers' - rendererModel needs to be configured with a TextureTranscoder for this option`);\n            } else {\n                this.#textureTranscoder.transcode(texture.buffers).then((compressedTextureData) => {\n                    glTexture.setCompressedData(compressedTextureData);\n                    this.#webglRenderer.setImageDirty();\n                });\n            }\n        }\n        const rendererTexture = new RendererTextureImpl(texture, glTexture);\n        texture.rendererTexture = rendererTexture;\n        this.rendererTextures[textureId] = rendererTexture;\n    }\n\n    #addGeometry(geometry: Geometry): void {\n        const geometryId = geometry.id;\n        if (this.rendererGeometries[geometryId]) {\n            throw new Error(`GeometryRenderer already created: ${geometryId}`);\n        }\n        const rendererGeometry = new RendererGeometryImpl();\n        this.rendererGeometries[geometryId] = rendererGeometry;\n        geometry.rendererGeometry = rendererGeometry;\n        this.#numGeometries++;\n    }\n\n    #addMesh(mesh: Mesh): void {\n        const rendererGeometry = this.rendererGeometries[mesh.geometry.id];\n        if (!rendererGeometry) {\n            throw new Error(\"RendererGeometry not found\");\n        }\n        const rendererTextureSet = this.rendererTextureSets[(<TextureSet>mesh.textureSet).id];\n        if (!rendererTextureSet) {\n            throw new Error(\"rendererTextureSet not found\");\n        }\n\n        const layer = this.#getLayer((<TextureSet>mesh.textureSet).id, mesh.geometry);\n\n        if (!layer) {\n            return;\n        }\n\n        if (!layer.hasGeometry(mesh.geometry.id)) {\n            layer.createGeometryCompressed(mesh.geometry)\n        }\n\n        let meshMatrix;\n        let worldMatrix = this.#worldMatrixNonIdentity ? this.#worldMatrix : null;\n\n        meshMatrix = mesh.matrix;\n\n\n        const color = (mesh.color) ? new Uint8Array([Math.floor(mesh.color[0] * 255), Math.floor(mesh.color[1] * 255), Math.floor(mesh.color[2] * 255)]) : [255, 255, 255];\n        const opacity = (mesh.opacity !== undefined && mesh.opacity !== null) ? Math.floor(mesh.opacity * 255) : 255;\n        const metallic = (mesh.metallic !== undefined && mesh.metallic !== null) ? Math.floor(mesh.metallic * 255) : 0;\n        const roughness = (mesh.roughness !== undefined && mesh.roughness !== null) ? Math.floor(mesh.roughness * 255) : 255;\n\n        const meshRenderer = new RendererMeshImpl({\n            tileManager: <TileManager>this.#webglRenderer.tileManager,\n            id: mesh.id,\n            layer,\n            color,\n            opacity,\n            matrix: meshMatrix,\n            metallic,\n            roughness,\n            rendererTextureSet,\n            rendererGeometry,\n            meshIndex: 0\n        });\n\n        meshRenderer.pickId = this.#webglRenderer.registerPickable(meshRenderer);\n\n        const a = meshRenderer.pickId >> 24 & 0xFF;\n        const b = meshRenderer.pickId >> 16 & 0xFF;\n        const g = meshRenderer.pickId >> 8 & 0xFF;\n        const r = meshRenderer.pickId & 0xFF;\n\n        const pickColor = new Uint8Array([r, g, b, a]); // Quantized pick color\n        collapseAABB3(meshRenderer.aabb);\n\n        const meshIndex = layer.createMesh({\n            id: mesh.id,\n            geometryId: mesh.geometry.id,\n            color,\n            opacity,\n            metallic,\n            roughness,\n            matrix: meshMatrix,\n            //     worldMatrix: worldMatrix,\n            //    aabb: mesh.aabb,\n            pickColor\n        });\n        this.#numGeometries++;\n        expandAABB3(this.#aabb, meshRenderer.aabb);\n        meshRenderer.layer = layer;\n        meshRenderer.meshIndex = meshIndex;\n        this.rendererMeshes[mesh.id] = meshRenderer;\n    }\n\n\n    // build() {\n    //     if (this.destroyed) {\n    //         this.log(\"rendererModel already destroyed\");\n    //         return;\n    //     }\n    //     if (this.built) {\n    //         this.log(\"rendererModel already built\");\n    //         return;\n    //     }\n    //     for (let layerId in this.#currentLayers) {\n    //         if (this.#currentLayers.hasOwnProperty(layerId)) {\n    //             this.#currentLayers[layerId].build();\n    //         }\n    //     }\n    //     for (let i = 0, len = this.objectList.length; i < len; i++) {\n    //         const objectRenderer = this.objectList[i];\n    //         objectRenderer.build();\n    //     }\n    //     for (let i = 0, len = this.objectList.length; i < len; i++) {\n    //         const objectRenderer = this.objectList[i];\n    //         objectRenderer.finalize2();\n    //     }\n    //     // this.layerList.sort((a, b) => {\n    //     //     if (a.sortId < b.sortId) {\n    //     //         return -1;\n    //     //     }\n    //     //     if (a.sortId > b.sortId) {\n    //     //         return 1;\n    //     //     }\n    //     //     return 0;\n    //     // });\n    //     for (let i = 0, len = this.layerList.length; i < len; i++) {\n    //         const layer = this.layerList[i];\n    //         layer.layerIndex = i;\n    //     }\n    //     this.#currentLayers = {};\n    //     this.built = true;\n    //     this.#webglRenderer.setImageDirty();\n    //     //     this.#view.viewer.scene.setAABBDirty();\n    //     this.onBuilt.dispatch(this, null);\n    // }\n    //\n    // addModel(params: {\n    //     id: string,\n    //     sceneModel: SceneModel\n    // }) {\n    //\n    //     const sceneModel = params.sceneModel;\n    //     const textures = sceneModel.textures;\n    //     const geometries = sceneModel.geometries;\n    //     const meshes = sceneModel.meshes;\n    //     const objects = sceneModel.objects;\n    //\n    //     if (textures) {\n    //         for (let textureId in textures) {\n    //             const texture = textures[textureId];\n    //             this.#addTexture(texture);\n    //         }\n    //     }\n    //\n    //     if (geometries) {\n    //         for (let geometryId in geometries) {\n    //             const geometry = geometries[geometryId];\n    //             this.#addGeometry(geometry);\n    //         }\n    //     }\n    //\n    //     if (meshes) {\n    //         for (let meshId in meshes) {\n    //             const mesh = meshes[meshId];\n    //             this.#addMesh(mesh);\n    //         }\n    //     }\n    //\n    //     if (objects) {\n    //         for (let geometryId in objects) {\n    //             const object = objects[geometryId];\n    //             this.#addObject(object);\n    //         }\n    //     }\n    // }\n\n    #addObject(sceneObject: SceneObject): void {\n        let objectId = sceneObject.id;\n        if (objectId === undefined) {\n            objectId = createUUID();\n        } else if (this.rendererObjects[objectId]) {\n            this.error(\"[createObject] rendererModel already has a ViewerObject with this ID: \" + objectId + \" - will assign random ID\");\n            objectId = createUUID();\n        }\n        const meshes = sceneObject.meshes;\n        if (meshes === undefined) {\n            throw new Error(\"[createObject] Param expected: meshes\");\n        }\n        const rendererMeshes: RendererMeshImpl[] = [];\n        for (let i = 0, len = meshes.length; i < len; i++) {\n            const mesh = meshes[i];\n            const rendererMesh = <RendererMeshImpl>this.rendererMeshes[mesh.id];\n            rendererMeshes.push(rendererMesh);\n        }\n        const objectRenderer = new RendererObjectImpl({\n            id: objectId,\n            rendererModel: this,\n            rendererMeshes,\n            aabb: sceneObject.aabb,\n            layerId: this.#layerId\n        });\n        this.rendererObjectsList.push(objectRenderer);\n        this.rendererObjects[objectId] = objectRenderer;\n        this.rendererViewObjects[objectId] = objectRenderer;\n        this.#numViewerObjects++;\n    }\n\n    #removeModel(): void {\n        const sceneModel = this.sceneModel;\n        if (!sceneModel) {\n            return;\n        }\n        const textures = sceneModel.textures;\n        const geometries = sceneModel.geometries;\n        const meshes = sceneModel.meshes;\n        const objects = sceneModel.objects;\n        if (textures) {\n            for (let textureId in textures) {\n                const texture = textures[textureId];\n                if (texture.rendererTexture) {\n                    texture.rendererTexture = null;\n                }\n            }\n        }\n        if (geometries) {\n            for (let geometryId in geometries) {\n                const geometry = geometries[geometryId];\n                if (geometry.rendererGeometry) {\n                    geometry.rendererGeometry = null;\n                }\n            }\n        }\n        if (meshes) {\n            for (let meshId in meshes) {\n                const mesh = meshes[meshId];\n                if (mesh.rendererMesh) {\n                    mesh.rendererMesh = null;\n                }\n            }\n        }\n        if (objects) {\n            for (let objectId in objects) {\n                const object = objects[objectId];\n                if (object.rendererObject) {\n                    object.rendererObject = null;\n                }\n            }\n        }\n        this.sceneModel = null;\n    }\n\n    #createDefaultTextureSetRenderer() {\n        const defaultColorTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [1, 1, 1, 1] // [r, g, b, a]})\n            }));\n\n        const defaultMetalRoughTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 1, 1, 1] // [unused, roughness, metalness, unused]\n            }));\n        const defaultNormalsTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 0, 0, 0] // [x, y, z, unused] - these must be zeros\n            }));\n\n        const defaultEmissiveTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 0, 0, 1] // [x, y, z, unused]\n            }));\n        const defaultOcclusionTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [1, 1, 1, 1] // [x, y, z, unused]\n            }));\n        this.rendererTextures[defaultColorTextureId] = defaultColorTexture;\n        this.rendererTextures[defaultMetalRoughTextureId] = defaultMetalRoughTexture;\n        this.rendererTextures[defaultNormalsTextureId] = defaultNormalsTexture;\n        this.rendererTextures[defaultEmissiveTextureId] = defaultEmissiveTexture;\n        this.rendererTextures[defaultOcclusionTextureId] = defaultOcclusionTexture;\n        this.rendererTextureSets[defaultTextureSetId] = new RendererTextureSetImpl({\n            id: defaultTextureSetId,\n            colorTexture: defaultColorTexture,\n            metallicRoughnessTexture: defaultMetalRoughTexture,\n            emissiveTexture: defaultEmissiveTexture,\n            occlusionTexture: defaultOcclusionTexture\n        });\n    }\n\n    #getLayer(textureSetId: string | undefined, geometryCompressedParams: GeometryCompressedParams): Layer | undefined {\n        const layerId = `${textureSetId}_${geometryCompressedParams.primitive}`;\n        let layer = this.#currentLayers[layerId];\n        if (layer) {\n            if (layer.canCreateMesh(geometryCompressedParams)) {\n                return layer;\n            } else {\n                layer.build();\n                delete this.#currentLayers[layerId];\n            }\n        }\n        let textureSet;\n        if (textureSetId) {\n            textureSet = this.rendererTextureSets[textureSetId];\n            if (!textureSet) {\n                this.error(`TextureSet not found: ${textureSetId} - ensure that you create it first with createTextureSet()`);\n                return;\n            }\n        }\n        layer = new Layer(<LayerParams>{\n            gl: this.#renderContext.gl,\n            view: this.#view,\n            rendererModel: this,\n            primitive: geometryCompressedParams.primitive,\n            textureSet,\n            layerIndex: 0\n        });\n        this.#layers[layerId] = layer;\n        this.layerList.push(layer);\n        this.#currentLayers[layerId] = layer;\n        return layer;\n    }\n\n    #rebuildAABB() {\n        collapseAABB3(this.#aabb);\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            expandAABB3(this.#aabb, objectRenderer.aabb);\n        }\n        this.#aabbDirty = false;\n    }\n\n    /*\n        #getActiveSectionPlanesForLayer(layer: any) {\n            const drawFlags = this.drawFlags;\n            const sectionPlanes = this.#view.sectionPlanesList;\n            const numSectionPlanes = sectionPlanes.length;\n            const baseIndex = layer.layerIndex * numSectionPlanes;\n            if (numSectionPlanes > 0) {\n                for (let i = 0; i < numSectionPlanes; i++) {\n                    const sectionPlane = sectionPlanes[i];\n                    if (!sectionPlane.active) {\n                        drawFlags.sectionPlanesActivePerLayer[baseIndex + i] = false;\n\n                    } else {\n                        drawFlags.sectionPlanesActivePerLayer[baseIndex + i] = true;\n                        drawFlags.sectioned = true;\n                    }\n                }\n            }\n            return true;\n        }\n\n        #updateDrawFlagsVisibleLayers() {\n            const drawFlags = this.drawFlags;\n            drawFlags.numLayers = this.layerList.length;\n            drawFlags.numVisibleLayers = 0;\n            for (let layerIndex = 0, len = this.layerList.length; layerIndex < len; layerIndex++) {\n                const layer = this.layerList[layerIndex];\n                const layerVisible = this.#getActiveSectionPlanesForLayer(layer);\n                if (layerVisible) {\n                    drawFlags.visibleLayers[drawFlags.numVisibleLayers++] = layerIndex;\n                }\n            }\n        }\n\n        #updateDrawFlags() {\n            if (this.meshCounts.numVisible === 0) {\n                return;\n            }\n            if (this.meshCounts.numCulled === this.meshCounts.numMeshes) {\n                return;\n            }\n            const drawFlags = this.drawFlags;\n            drawFlags.colorOpaque = (this.meshCounts.numTransparent < this.meshCounts.numMeshes);\n            if (this.meshCounts.numTransparent > 0) {\n                drawFlags.colorTransparent = true;\n            }\n            if (this.meshCounts.numXRayed > 0) {\n                const xrayMaterial = this.#view.xrayMaterial.state;\n                if (xrayMaterial.fill) {\n                    if (xrayMaterial.fillAlpha < 1.0) {\n                        drawFlags.xrayedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.xrayedSilhouetteOpaque = true;\n                    }\n                }\n                if (xrayMaterial.edges) {\n                    if (xrayMaterial.edgeAlpha < 1.0) {\n                        drawFlags.xrayedEdgesTransparent = true;\n                    } else {\n                        drawFlags.xrayedEdgesOpaque = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numEdges > 0) {\n                const edgeMaterial = this.#view.edgeMaterial.state;\n                if (edgeMaterial.edges) {\n                    drawFlags.edgesOpaque = (this.meshCounts.numTransparent < this.meshCounts.numMeshes);\n                    if (this.meshCounts.numTransparent > 0) {\n                        drawFlags.edgesTransparent = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numSelected > 0) {\n                const selectedMaterial = this.#view.selectedMaterial.state;\n                if (selectedMaterial.fill) {\n                    if (selectedMaterial.fillAlpha < 1.0) {\n                        drawFlags.selectedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.selectedSilhouetteOpaque = true;\n                    }\n                }\n                if (selectedMaterial.edges) {\n                    if (selectedMaterial.edgeAlpha < 1.0) {\n                        drawFlags.selectedEdgesTransparent = true;\n                    } else {\n                        drawFlags.selectedEdgesOpaque = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numHighlighted > 0) {\n                const highlightMaterial = this.#view.highlightMaterial.state;\n                if (highlightMaterial.fill) {\n                    if (highlightMaterial.fillAlpha < 1.0) {\n                        drawFlags.highlightedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.highlightedSilhouetteOpaque = true;\n                    }\n                }\n                if (highlightMaterial.edges) {\n                    if (highlightMaterial.edgeAlpha < 1.0) {\n                        drawFlags.highlightedEdgesTransparent = true;\n                    } else {\n                        drawFlags.highlightedEdgesOpaque = true;\n                    }\n                }\n            }\n        }\n\n     */\n}\n\n\n\n","/**\n * [![npm version](https://badge.fury.io/js/%40xeokit%2Fsvg)](https://badge.fury.io/js/%40xeokit%2Fmath)\n * [![](https://data.jsdelivr.com/v1/package/npm/@xeokit/badge)](https://www.jsdelivr.com/package/npm/@xeokit/math)\n *\n * <img style=\"padding:0px; padding-top:20px; padding-bottom:20px;  height:270px\" src=\"media://images/3D-Cart.svg\"/>\n *\n * # xeokit RTC Coordinate Utilities\n *\n * ---\n *\n * ### *Math functions for working with RTC cartesian coordinates*\n *\n * ---\n *\n * * Math functions for working with relative-to-center (RTC) coordinate systems\n * * Used internally within {@link @xeokit/viewer!Viewer}\n *\n * ## Installation\n *\n * ````bash\n * npm install @xeokit/rtc\n * ````\n *\n * ## Usage\n *\n * ````javascript\n * import * as rtc from \"@xeokit/rtc\";\n *\n * const worldPos = [100000000000.0, 1000000000.0, 1000000000000.0];\n * const rtcCenter = [0,0,0];\n * const rtcPos = [0,0,0];\n *\n * rtc.worldToRTCPos(worldPos, rtcCenter, rtcPos);\n *\n * //..\n * ````\n *\n * @module @xeokit/rtc\n */\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createVec3, dotVec3, mulVec3Scalar, normalizeVec3, setMat4Translation, transformVec4} from \"@xeokit/matrix\";\nimport {getPositions3Center} from \"@xeokit/boundaries\";\n\n\nconst tempVec3a = createVec3();\n\n\nconst tempMat = new Float32Array(16);\nconst rtcCenterWorld = new Float64Array(4);\nconst rtcCenterView = new Float64Array(4);\n\n/**\n * Given a view matrix and a relative-to-center (RTC) coordinate origin, returns a view matrix\n * to transform RTC coordinates to View-space.\n */\nexport function createRTCViewMat(viewMat: FloatArrayParam, rtcCenter: FloatArrayParam, rtcViewMat: FloatArrayParam = tempMat): FloatArrayParam {\n    rtcCenterWorld[0] = rtcCenter[0];\n    rtcCenterWorld[1] = rtcCenter[1];\n    rtcCenterWorld[2] = rtcCenter[2];\n    rtcCenterWorld[3] = 1;\n    transformVec4(viewMat, rtcCenterWorld, rtcCenterView);\n    setMat4Translation(viewMat, rtcCenterView, rtcViewMat);\n    return rtcViewMat;\n}\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center pos\n * and a single-precision offset fom that center.\n *\n * @param worldPos The World-space position.\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param rtcPos Single-precision offset fom that center.\n */\nexport function worldToRTCPos(worldPos: FloatArrayParam, rtcCenter: FloatArrayParam, rtcPos: FloatArrayParam) {\n\n    const xHigh = Float32Array.from([worldPos[0]])[0];\n    const xLow = worldPos[0] - xHigh;\n\n    const yHigh = Float32Array.from([worldPos[1]])[0];\n    const yLow = worldPos[1] - yHigh;\n\n    const zHigh = Float32Array.from([worldPos[2]])[0];\n    const zLow = worldPos[2] - zHigh;\n\n    rtcCenter[0] = xHigh;\n    rtcCenter[1] = yHigh;\n    rtcCenter[2] = zHigh;\n\n    rtcPos[0] = xLow;\n    rtcPos[1] = yLow;\n    rtcPos[2] = zLow;\n}\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center.\n *\n * @param worldCenter The World-space position.\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param [cellSize=200] The size of each coordinate cell within the RTC coordinate system.\n */\nexport function worldToRTCCenter(worldCenter: FloatArrayParam, rtcCenter: FloatArrayParam, cellSize = 200) {\n    rtcCenter[0] = Math.round(worldCenter[0] / cellSize) * cellSize;\n    rtcCenter[1] = Math.round(worldCenter[1] / cellSize) * cellSize;\n    rtcCenter[2] = Math.round(worldCenter[2] / cellSize) * cellSize;\n    return rtcCenter;\n}\n\n/**\n * Converts a flat array of double-precision positions to RTC positions.\n *\n * Returns the RTC positions, along with a computed RTC center for those positions.\n *\n * When computing the RTC position, this function uses a modulus operation to ensure that, whenever possible,\n * identical RTC positions are reused for different positions arrays.\n *\n * @param worldPositions Flat array of World-space 3D positions.\n * @param rtcPositions Outputs the computed flat array of 3D RTC positions.\n * @param rtcCenter Outputs the computed double-precision relative-to-center (RTC) center pos.\n * @param [cellSize=200] The size of each coordinate cell within the RTC coordinate system.\n * @returns ````True```` if the positions actually needed conversion to RTC, else ````false````. When\n * ````false````, we can safely ignore the data returned in ````rtcPositions```` and ````rtcCenter````,\n * since ````rtcCenter```` will equal ````[0,0,0]````, and ````rtcPositions```` will contain identical values to ````positions````.\n */\nexport function worldToRTCPositions(worldPositions: FloatArrayParam, rtcPositions: FloatArrayParam, rtcCenter: FloatArrayParam, cellSize = 200): boolean {\n\n    const center = getPositions3Center(worldPositions, tempVec3a);\n\n    const rtcCenterX = Math.round(center[0] / cellSize) * cellSize;\n    const rtcCenterY = Math.round(center[1] / cellSize) * cellSize;\n    const rtcCenterZ = Math.round(center[2] / cellSize) * cellSize;\n\n    for (let i = 0, len = worldPositions.length; i < len; i += 3) {\n        rtcPositions[i + 0] = worldPositions[i + 0] - rtcCenterX;\n        rtcPositions[i + 1] = worldPositions[i + 1] - rtcCenterY;\n        rtcPositions[i + 2] = worldPositions[i + 2] - rtcCenterZ;\n    }\n\n    rtcCenter[0] = rtcCenterX;\n    rtcCenter[1] = rtcCenterY;\n    rtcCenter[2] = rtcCenterZ;\n\n    const rtcNeeded = (rtcCenter[0] !== 0 || rtcCenter[1] !== 0 || rtcCenter[2] !== 0);\n\n    return rtcNeeded;\n}\n\n/**\n * Converts an RTC 3D position to World-space.\n *\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param rtcPos Single-precision offset fom that center.\n * @param worldPos The World-space position.\n */\nexport function rtcToWorldPos(rtcCenter: FloatArrayParam, rtcPos: FloatArrayParam, worldPos: FloatArrayParam): FloatArrayParam {\n    worldPos[0] = rtcCenter[0] + rtcPos[0];\n    worldPos[1] = rtcCenter[1] + rtcPos[1];\n    worldPos[2] = rtcCenter[2] + rtcPos[2];\n    return worldPos;\n}\n\n/**\n * Given a 3D plane defined by distance from origin and direction, and an RTC center position,\n * return a plane position that is relative to the RTC center.\n *\n * @param dist\n * @param dir\n * @param rtcCenter\n * @param rtcPlanePos\n * @returns {*}\n */\nexport function getPlaneRTCPos(dist: number, dir: FloatArrayParam, rtcCenter: FloatArrayParam, rtcPlanePos: FloatArrayParam) {\n    const rtcCenterToPlaneDist = dotVec3(dir, rtcCenter) + dist;\n    const dirNormalized = normalizeVec3(dir, tempVec3a);\n    mulVec3Scalar(dirNormalized, -rtcCenterToPlaneDist, rtcPlanePos);\n    return rtcPlanePos;\n}\n","import {createMatricesDataTexture} from \"./dataTextures\";\nimport type {GLDataTexture} from \"@xeokit/webglutils\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createMat4, createVec3} from \"@xeokit/matrix\";\nimport {createRTCViewMat, worldToRTCCenter} from \"@xeokit/rtc\";\nimport type {Camera} from \"@xeokit/viewer\";\n\nconst NUM_TILES = 2000;\n\nexport interface Tile {\n    id: string;\n    index: number;\n    useCount: number;\n    center: FloatArrayParam;\n    rtcViewMatrix: FloatArrayParam;\n}\n\nexport class TileManager {\n\n    #gl: WebGL2RenderingContext;\n    #indexesUsed: boolean[];\n    #tiles: { [key: string]: Tile };\n    #dataTexture: GLDataTexture;\n    #camera: Camera;\n    #lastFreeIndex: number;\n\n    constructor(params: {\n        camera: Camera,\n        gl: WebGL2RenderingContext\n    }) {\n        this.#camera = params.camera;\n        this.#gl = params.gl;\n        this.#indexesUsed = [];\n        this.#lastFreeIndex = 0;\n        this.#tiles = {};\n        this.#dataTexture = createMatricesDataTexture(this.#gl, NUM_TILES);\n    }\n\n    getTile(center: FloatArrayParam): Tile {\n        const rtcCenter = worldToRTCCenter(center, createVec3());\n        const id = `${rtcCenter[0]}-${rtcCenter[1]}-${rtcCenter[2]}`;\n        let tile = this.#tiles[id];\n        if (!tile) {\n            tile = {\n                id,\n                index: this.#findFreeTile(),\n                useCount: 0,\n                center: createVec3(),\n                rtcViewMatrix: createMat4()\n            };\n            this.#tiles[tile.id] = tile;\n        }\n        tile.useCount++;\n        return tile;\n    }\n\n    putTile(tile: Tile) {\n        if (--tile.useCount <= 0) {\n            delete this.#tiles[tile.id];\n            this.#putFreeTile(tile.index);\n        }\n    }\n\n    updateTileCenter(tile: Tile, newCenter: FloatArrayParam): Tile {\n        const newRTCCenter = worldToRTCCenter(newCenter, createVec3());\n        const newId = `${newRTCCenter[0]}-${newRTCCenter[1]}-${newRTCCenter[2]}`;\n        if (newId === tile.id) {\n            return tile;\n        }\n        this.putTile(tile);\n        let newTile = this.#tiles[newId];\n        if (!newTile) {\n            newTile = {\n                id: newId,\n                index: this.#findFreeTile(),\n                useCount: 0,\n                center: createVec3(),\n                rtcViewMatrix: createMat4()\n            };\n            this.#tiles[newTile.id] = newTile;\n        }\n        newTile.useCount++;\n        return newTile;\n    }\n\n    refreshMatrices() {\n        if (!this.#dataTexture.texture) {\n            return;\n        }\n        const gl = this.#gl;\n        const viewMatrix = this.#camera.viewMatrix;\n        const tileIds = Object.keys(this.#tiles);\n        const numTiles = tileIds.length;\n        const data = new Float32Array(16 * numTiles);\n        for (let i = 0, len = tileIds.length; i < len; i++) {\n            const tileId = tileIds[i];\n            const tile = this.#tiles[tileId];\n            createRTCViewMat(viewMatrix, tile.center, tile.rtcViewMatrix);\n            data.set(tile.rtcViewMatrix, tile.index * 16);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, this.#dataTexture.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, gl.RGBA, gl.FLOAT, data);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n\n    #putFreeTile(index: number) {\n        delete this.#indexesUsed[index];\n        this.#lastFreeIndex = index;\n    }\n\n    #findFreeTile(): number {\n        for (let index = this.#lastFreeIndex; ; index = (index + 1) % NUM_TILES) {\n            if (!this.#indexesUsed[index]) {\n                this.#indexesUsed[index] = true;\n                return index;\n            }\n        }\n    }\n\n\n}","import {apply, Map} from \"@xeokit/utils\";\nimport {createVec3} from \"@xeokit/matrix\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {\n    LinesPrimitive,\n    PointsPrimitive,\n    SolidPrimitive,\n    SurfacePrimitive,\n    TrianglesPrimitive\n} from \"@xeokit/constants\";\n\nimport type {CreateModelParams, Renderer, View, Viewer, ViewObject} from \"@xeokit/viewer\";\n\nimport {KTX2TextureTranscoder} from \"@xeokit/ktx2\";\nimport {RenderContext} from \"./RenderContext\";\nimport {FastColorTrianglesRenderer} from \"./FastColorTrianglesRenderer\";\nimport {getExtension, GLRenderBuffer, WEBGL_INFO} from \"@xeokit/webglutils\";\nimport {RENDER_PASSES} from \"./RENDER_PASSES\";\nimport type {Pickable} from \"./Pickable\";\nimport {RendererModelImpl} from \"./RendererModelImpl\";\nimport type {Layer} from \"./Layer\";\nimport type {RendererViewObject} from \"@xeokit/viewer/src/RendererViewObject\";\nimport type {Capabilities, Component, TextureTranscoder} from \"@xeokit/core\";\nimport type {SceneModel} from \"@xeokit/scene\";\nimport {TileManager} from \"./TileManager\";\n\n\nconst ua = navigator.userAgent.match(/(opera|chrome|safari|firefox|msie|mobile)\\/?\\s*(\\.?\\d+(\\.\\d+)*)/i);\nconst isSafari = (ua && ua[1].toLowerCase() === \"safari\");\n\n/**\n * WebGL-based rendering strategy for a {@link @xeokit/viewer!Viewer | Viewer}.\n *\n * See {@link @xeokit/webglrenderer} for usage.\n *\n * @internal\n */\nexport class WebGLRenderer implements Renderer {\n\n    rendererViewObjects: { [key: string]: RendererViewObject };\n    tileManager: TileManager|null;\n    #sceneModels: { [key: string]: SceneModel };\n    #viewer: Viewer;\n    #view: View;\n    #renderContext: RenderContext;\n    #canvasTransparent: boolean;\n    #transparentEnabled: boolean;\n    #edgesEnabled: boolean;\n    #imageDirty: boolean;\n    #saoEnabled: boolean;\n    #pbrEnabled: boolean;\n    #backgroundColor: FloatArrayParam;\n    #rendererModels: { [key: string]: RendererModelImpl };\n    #layerList: Layer[];\n    #layerListDirty: boolean;\n    #stateSortDirty: boolean;\n    #pickIDs = new Map({});\n    #saoDepthRenderBuffer: GLRenderBuffer;\n    // #renderBufferManager: GLRenderBufferManager;\n    #extensionHandles: any;\n    #logarithmicDepthBufferEnabled: boolean;\n    #alphaDepthMask: boolean;\n    #occlusionTester: any;\n    // #saoOcclusionRenderer: null | SAOOcclusionRenderer;\n    // #saoDepthLimitedBlurRenderer: SAODepthLimitedBlurRenderer;\n    #textureTranscoder: TextureTranscoder;\n\n    // @ts-ignore\n    #layerRenderers: {\n        // colorPoints: ColorPointsLayerRenderer;\n        colorTriangles: FastColorTrianglesRenderer;\n        // qualityColorTriangles: QualityColorTrianglesRenderer;\n        // colorLines: ColorLinesLayerRenderer;\n        // silhouettePoints: SilhouettePointsRenderer;\n        // silhouetteTriangles: SilhouetteTrianglesLayerRenderer;\n        // silhouetteLines: SilhouetteLinesRenderer;\n    };\n    #viewMatrixDirty: boolean;\n\n    /**\n     Creates a WebGLRenderer.\n\n     @param params Configs\n     @param params.textureTranscoder Injects an optional transcoder that will be used internally by {@link rendererModel.createTexture}\n     to convert transcoded texture data. The transcoder is only required when we'll be providing transcoded data\n     to {@link rendererModel.createTexture}. We assume that all transcoded texture data added to a  ````rendererModel````\n     will then be in a format supported by this transcoder.\n     */\n    constructor(params: {\n        textureTranscoder?: TextureTranscoder\n    }) {\n        this.tileManager = null;\n        this.#sceneModels = {};\n        this.rendererViewObjects = {};\n\n        this.#textureTranscoder = params.textureTranscoder || new KTX2TextureTranscoder({});\n        this.#canvasTransparent = false;\n        this.#alphaDepthMask = false;\n        this.#extensionHandles = {};\n        this.#pickIDs = new Map({});\n        this.#layerList = [];\n        this.#layerListDirty = true;\n        this.#stateSortDirty = true;\n        this.#imageDirty = true;\n        this.#transparentEnabled = true;\n        this.#edgesEnabled = true;\n        this.#saoEnabled = true;\n        this.#pbrEnabled = true;\n        this.#backgroundColor = createVec3();\n        this.#occlusionTester = null; // Lazy-created in #addMarker()\n\n        // this.#saoDepthRenderBuffer = null;\n        // this.#renderBufferManager = null;\n        this.#logarithmicDepthBufferEnabled = false;\n        this.#rendererModels = {};\n        this.#viewMatrixDirty = true;\n    }\n\n    init(viewer: Viewer): void {\n        this.#viewer = viewer;\n        this.#textureTranscoder.init(this.#viewer.capabilities);\n    }\n\n    getCapabilities(capabilities: Capabilities): void {\n        capabilities.maxViews = 1;\n        const canvasElement = document.createElement('canvas');\n        let gl;\n        try {\n            gl = canvasElement.getContext(\"webgl2\");\n        } catch (e) {\n            console.error('Failed to get a WebGL context');\n        }\n        if (gl) {\n            capabilities.astcSupported = !!getExtension(gl, 'WEBGL_compressed_texture_astc');\n            capabilities.etc1Supported = true; // WebGL\n            capabilities.etc2Supported = !!getExtension(gl, 'WEBGL_compressed_texture_etc');\n            capabilities.dxtSupported = !!getExtension(gl, 'WEBGL_compressed_texture_s3tc');\n            capabilities.bptcSupported = !!getExtension(gl, 'EXT_texture_compression_bptc');\n            capabilities.pvrtcSupported = !!(getExtension(gl, 'WEBGL_compressed_texture_pvrtc') || getExtension(gl, 'WEBKIT_WEBGL_compressed_texture_pvrtc'));\n        }\n    }\n\n    registerView(view: View): number {\n        if (this.#renderContext) {\n            throw \"Only one View allowed with WebGLRenderer (see WebViewerCapabilities.maxViews)\";\n        }\n        this.#view = view;\n        const WEBGL_CONTEXT_NAMES = [\"webglutils\"];\n        const canvasElement = view.canvasElement;\n        const contextAttr = {};\n        let gl: WebGL2RenderingContext | null = null;\n        for (let i = 0; !gl && i < WEBGL_CONTEXT_NAMES.length; i++) {\n            try {  // @ts-ignore\n                gl = canvasElement.getContext(WEBGL_CONTEXT_NAMES[i], contextAttr);\n            } catch (e) { // Try with next context name\n            }\n        }\n        if (!gl) {\n            console.error('Failed to get a WebGL2 context');\n            //  view.events.fire(\"webglContextFailed\", true, true);\n            return 0;\n        }\n        if (gl) {\n            gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, gl.NICEST);\n        }\n        this.#renderContext = new RenderContext(this.#viewer, this.#view, gl);\n        this.tileManager = new TileManager({\n            camera: view.camera,\n            gl\n        });\n        this.#layerRenderers = {\n            //       colorPoints: new ColorPointsLayerRenderer(this.#renderContext),\n            colorTriangles: new FastColorTrianglesRenderer(this.#renderContext),\n            // qualityColorTriangles: new QualityColorTrianglesRenderer(this.#renderContext),\n            // colorLines: new ColorLinesLayerRenderer(this.#renderContext),\n            // silhouettePoints: new SilhouettePointsRenderer(this.#renderContext),\n            // silhouetteTriangles: new SilhouetteTrianglesLayerRenderer(this.#renderContext),\n            // silhouetteLines: new SilhouetteLinesRenderer(this.#renderContext)\n        };\n        view.camera.onViewMatrix.sub(() => {\n            this.#viewMatrixDirty = true;\n        })\n        return 0;\n    }\n\n    deregisterView(viewIndex: number): void { // Nop\n    }\n\n    /**\n     * Adds a SceneModel to this renderer.\n     */\n    addModel(params: CreateModelParams): void {\n        if (!this.#renderContext) {\n            throw new Error(\"Must register a View before you add a SceneModel\");\n        }\n        const rendererModel = new RendererModelImpl(apply({\n            sceneModel: params.sceneModel,\n            view: this.#view,\n            textureTranscoder: this.#textureTranscoder,\n            webglRenderer: this,\n            renderContext: this.#renderContext,\n            layerId: params.layerId\n        }, params));\n\n        this.#rendererModels[rendererModel.id] = rendererModel;\n        this.#registerRendererViewObjects(rendererModel);\n        this.#layerListDirty = true;\n\n        rendererModel.onDestroyed.one((component: Component) => {\n            const rendererModel = this.#rendererModels[component.id];\n            delete this.#rendererModels[component.id];\n            this.#deregisterRendererViewObjects(rendererModel);\n            this.#layerListDirty = true;\n        });\n    }\n\n    removeModel(modelId: string): void {\n        const sceneModel = this.#sceneModels[modelId];\n        if (sceneModel) {\n            const rendererModel = this.#rendererModels[modelId];\n            delete this.#rendererModels[modelId];\n            this.#deregisterRendererViewObjects(rendererModel);\n            this.#layerListDirty = true;\n\n        }\n    }\n\n    /**\n     * @private\n     */\n    registerPickable(pickable: Pickable): number { // @ts-ignore\n        return this.#pickIDs.addItem(pickable);\n    }\n\n    /**\n     * @private\n     */\n    deregisterPickable(pickId: number) {\n        this.#pickIDs.removeItem(pickId);\n    }\n\n    //\n    // createModel(params: ModelParams): SceneModel {\n    //     if (!this.#renderContext) {\n    //         throw \"Must register a View before you create a model\";\n    //     }\n    //     const WebGLSceneModelRenderer = new WebGLSceneModelRenderer(apply({\n    //         view: this.#view,\n    //         textureTranscoder: this.#textureTranscoder,\n    //         webglRenderer: this,\n    //         renderContext: this.#renderContext,\n    //         layerId: params.layerId\n    //     }, params));\n    //     WebGLSceneModelRenderer.onBuilt.one((buildsceneModelRenderer: SceneModel) => {\n    //         this.#rendererModels[buildsceneModelRenderer.id] = <WebGLSceneModelRenderer>buildsceneModelRenderer;\n    //         this.#layerListDirty = true;\n    //     });\n    //     WebGLSceneModelRenderer.onDestroyed.one((destroyedsceneModelRenderer: Component) => {\n    //         delete this.#rendererModels[destroyedsceneModelRenderer.id];\n    //         this.#layerListDirty = true;\n    //     });\n    //     return WebGLSceneModelRenderer;\n    // }\n\n    setImageDirty(viewIndex?: number) {\n        this.#imageDirty = true;\n    }\n\n    setBackgroundColor(viewIndex: number, color: FloatArrayParam): void { // @ts-ignore\n        this.#backgroundColor.set(color);\n        this.#imageDirty = true;\n    }\n\n    setEdgesEnabled(viewIndex: number, enabled: boolean): void {\n        this.#edgesEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    setPBREnabled(viewIndex: number, enabled: boolean): void {\n        this.#pbrEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    getSAOSupported(): boolean {\n        return isSafari && WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"];\n    }\n\n    setSAOEnabled(viewIndex: number, enabled: boolean): void {\n        this.#saoEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    setTransparentEnabled(viewIndex: number, enabled: boolean): void {\n        this.#transparentEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    clear(viewIndex: number) {\n        const gl = this.#renderContext.gl;\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        if (this.#canvasTransparent) {\n            gl.clearColor(1, 1, 1, 1);\n        } else {\n            gl.clearColor(this.#backgroundColor[0], this.#backgroundColor[1], this.#backgroundColor[2], 1.0);\n        }\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    };\n\n    needsRebuild(viewIndex?: number): void {\n        for (let rendererId in this.#layerRenderers) {\n            // @ts-ignore\n            this.#layerRenderers[rendererId].needRebuild();\n        }\n    }\n\n    needsRender(viewIndex?: number): boolean {\n        return (this.#imageDirty || this.#layerListDirty || this.#stateSortDirty);\n    }\n\n    render(viewIndex: number, params: {\n        force?: boolean;\n    }) {\n        params = params || {};\n        if (params.force) {\n            this.#imageDirty = true;\n        }\n        if (this.#viewMatrixDirty) {\n            (<TileManager>this.tileManager).refreshMatrices();\n            this.#viewMatrixDirty = false;\n        }\n        this.#updateLayerList();\n        if (this.#imageDirty) {\n            this.#draw({clear: true});\n            this.#imageDirty = false;\n        }\n    }\n\n    pickSceneObject(viewIndex: number, params: {}): ViewObject | null {\n        return null;\n    };\n\n    #registerRendererViewObjects(rendererModel: RendererModelImpl) {\n        const rendererObjects = rendererModel.rendererViewObjects;\n        for (let id in rendererObjects) {\n            this.rendererViewObjects[id] = rendererObjects[id];\n        }\n    }\n\n    #deregisterRendererViewObjects(rendererModel: RendererModelImpl) {\n        const rendererViewObjects = rendererModel.rendererViewObjects;\n        for (let id in rendererViewObjects) {\n            delete this.rendererViewObjects[id];\n        }\n    }\n\n    #updateLayerList() {\n        if (this.#layerListDirty) {\n            this.#buildLayerList();\n            this.#layerListDirty = false;\n            this.#stateSortDirty = true;\n        }\n        if (this.#stateSortDirty) {\n            //     this.#sortLayerList();\n            this.#stateSortDirty = false;\n            this.#imageDirty = true;\n        }\n    }\n\n    #buildLayerList() {\n        let lenDrawableList = 0;\n        for (let id in this.#rendererModels) {\n            const webGLSceneModelRenderer = this.#rendererModels[id];\n            for (let i = 0, len = webGLSceneModelRenderer.layerList.length; i < len; i++) {\n                this.#layerList[lenDrawableList++] = webGLSceneModelRenderer.layerList[i];\n            }\n        }\n        this.#layerList.length = lenDrawableList;\n    }\n\n    #draw(params: {\n        clear: boolean;\n    }) {\n        this.#activateExtensions();\n        if (this.#saoEnabled && this.#view.sao.possible) {\n            this.#drawSAOBuffers(params);\n        }\n        this.#drawColor(params);\n    }\n\n    #activateExtensions() {\n        if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) {\n            this.#extensionHandles.OES_element_index_uint = this.#renderContext.gl.getExtension(\"OES_element_index_uint\");\n        }\n        if (this.#logarithmicDepthBufferEnabled && WEBGL_INFO.SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            this.#extensionHandles.EXT_frag_depth = this.#renderContext.gl.getExtension('EXT_frag_depth');\n        }\n        if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"]) {\n            this.#extensionHandles.WEBGL_depth_texture = this.#renderContext.gl.getExtension('WEBGL_depth_texture');\n        }\n    }\n\n    #drawSAOBuffers(params: {\n        clear: boolean;\n    }) {\n        // const sao = this.#view.sao;\n        // const saoDepthRenderBuffer = this.#renderBufferManager.getRenderBuffer(\"saoDepth\", {\n        //     depthTexture: WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"]\n        // });\n        // this.#saoDepthRenderBuffer.bind();\n        // this.#saoDepthRenderBuffer.clear();\n        // this.#drawDepth(params);\n        // this.#saoDepthRenderBuffer.unbind();\n        // // Render occlusion buffer\n        // const occlusionRenderBuffer1 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion\");\n        // occlusionRenderBuffer1.bind();\n        // occlusionRenderBuffer1.clear();\n        // this.#saoOcclusionRenderer.render(saoDepthRenderBuffer);\n        // occlusionRenderBuffer1.unbind();\n        // if (sao.blur) {\n        //     // Horizontally blur occlusion buffer 1 into occlusion buffer 2\n        //     const occlusionRenderBuffer2 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion2\");\n        //     occlusionRenderBuffer2.bind();\n        //     occlusionRenderBuffer2.clear();\n        //     this.#saoDepthLimitedBlurRenderer.render(saoDepthRenderBuffer, occlusionRenderBuffer1, 0);\n        //     occlusionRenderBuffer2.unbind();\n        //     // Vertically blur occlusion buffer 2 back into occlusion buffer 1\n        //     occlusionRenderBuffer1.bind();\n        //     occlusionRenderBuffer1.clear();\n        //     this.#saoDepthLimitedBlurRenderer.render(saoDepthRenderBuffer, occlusionRenderBuffer2, 1);\n        //     occlusionRenderBuffer1.unbind();\n        // }\n    }\n\n    #drawDepth(params: {\n        clear: boolean\n    }) {\n        this.#renderContext.reset();\n        const gl = this.#renderContext.gl;\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.frontFace(gl.CCW);\n        gl.enable(gl.CULL_FACE);\n        gl.depthMask(true);\n        if (params.clear !== false) {\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        // for (let i = 0, len = this.#layerListPostCull.length; i < len; i++) {\n        //     const layer = this.#layerListPostCull[i];\n        //     // if (layer.culled === true || layer.visible === false || !layer.drawDepth) {\n        //     //     continue;\n        //     // }\n        //     // if (layer.drawFlags.colorOpaque) {\n        //     //     //    layer.drawDepth(this.#renderContext);\n        //     // }\n        // }\n        // const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        // for (let ii = 0; ii < numVertexAttribs; ii++) {\n        //     gl.disableVertexAttribArray(ii);\n        // }\n    }\n\n    #drawColor(params: {\n        clear: boolean;\n    }) {\n\n        const view = this.#view;\n        const renderContext = this.#renderContext;\n        const gl = renderContext.gl;\n\n        const normalDrawSAOBin: Layer[] = [];\n        const edgesColorOpaqueBin: Layer[] = [];\n        const normalFillTransparentBin: Layer[] = [];\n        const edgesColorTransparentBin: Layer[] = [];\n        const xrayedSilhouetteOpaqueBin: Layer[] = [];\n        const xrayEdgesOpaqueBin: Layer[] = [];\n        const xrayedSilhouetteTransparentBin: Layer[] = [];\n        const xrayEdgesTransparentBin: Layer[] = [];\n        const highlightedSilhouetteOpaqueBin: Layer[] = [];\n        const highlightedEdgesOpaqueBin: Layer[] = [];\n        const highlightedSilhouetteTransparentBin: Layer[] = [];\n        const highlightedEdgesTransparentBin: Layer[] = [];\n        const selectedSilhouetteOpaqueBin: Layer[] = [];\n        const selectedEdgesOpaqueBin: Layer[] = [];\n        const selectedSilhouetteTransparentBin: Layer[] = [];\n        const selectedEdgesTransparentBin: Layer[] = [];\n\n        renderContext.reset();\n        renderContext.withSAO = false;\n        renderContext.pbrEnabled = this.#pbrEnabled && !!view.qualityRender;\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        if (this.#canvasTransparent) {\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            gl.clearColor(this.#backgroundColor[0], this.#backgroundColor[1], this.#backgroundColor[2], 1.0);\n        }\n\n        gl.enable(gl.DEPTH_TEST);\n        gl.frontFace(gl.CCW);\n        gl.enable(gl.CULL_FACE);\n        gl.depthMask(true);\n        gl.lineWidth(1);\n\n        renderContext.lineWidth = 1;\n\n        const saoPossible = view.sao.possible;\n\n        if (this.#saoEnabled && saoPossible) {\n            // const occlusionRenderBuffer1 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion\", {\n            //     depthTexture: false,\n            //     size: [gl.drawingBufferWidth, gl.drawingBufferHeight]\n            // });\n            // renderContext.occlusionTexture = occlusionRenderBuffer1 ? occlusionRenderBuffer1.getTexture() : null;\n        } else {\n            renderContext.occlusionTexture = null;\n\n        }\n\n        if (params.clear !== false) {\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        // Render normal opaque solids, defer others to subsequent bins, to render after\n\n        let normalDrawSAOBinLen = 0;\n        let edgesColorOpaqueBinLen = 0;\n        let normalFillTransparentBinLen = 0;\n        let edgesColorTransparentBinLen = 0;\n        let xrayedSilhouetteOpaqueBinLen = 0;\n        let xrayEdgesOpaqueBinLen = 0;\n        let xrayedSilhouetteTransparentBinLen = 0;\n        let xrayEdgesTransparentBinLen = 0;\n        let highlightedSilhouetteOpaqueBinLen = 0;\n        let highlightedEdgesOpaqueBinLen = 0;\n        let highlightedSilhouetteTransparentBinLen = 0;\n        let highlightedEdgesTransparentBinLen = 0;\n        let selectedSilhouetteOpaqueBinLen = 0;\n        let selectedEdgesOpaqueBinLen = 0;\n        let selectedSilhouetteTransparentBinLen = 0;\n        let selectedEdgesTransparentBinLen = 0;\n\n        for (let i = 0, len = this.#layerList.length; i < len; i++) {\n\n            const layer = this.#layerList[i];\n            const meshCounts = layer.meshCounts;\n\n            if (meshCounts.numCulled === meshCounts.numMeshes || meshCounts.numVisible === 0) {\n                continue;\n            }\n\n            if (meshCounts.numTransparent < meshCounts.numMeshes) {\n                if (this.#saoEnabled && saoPossible && layer.rendererModel.qualityRender) {\n                    normalDrawSAOBin[normalDrawSAOBinLen++] = layer;\n                } else {\n                    this.#drawLayer(layer, RENDER_PASSES.COLOR_OPAQUE, layer.rendererModel.qualityRender);\n                }\n            }\n\n            if (this.#transparentEnabled) {\n                if (meshCounts.numTransparent) {\n                    normalFillTransparentBin[normalFillTransparentBinLen++] = layer;\n                }\n            }\n\n            if (meshCounts.numXRayed > 0) {\n                if (view.xrayMaterial.fill) {\n                    if (view.xrayMaterial.fillAlpha < 1.0) {\n                        xrayedSilhouetteTransparentBin[xrayedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        xrayedSilhouetteOpaqueBin[xrayedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (meshCounts.numHighlighted > 0) {\n                if (view.highlightMaterial.fill) {\n                    if (view.highlightMaterial.fillAlpha < 1.0) {\n                        highlightedSilhouetteTransparentBin[highlightedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        highlightedSilhouetteOpaqueBin[highlightedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (meshCounts.numSelected > 0) {\n                if (view.selectedMaterial.fill) {\n                    if (view.selectedMaterial.fillAlpha < 1.0) {\n                        selectedSilhouetteTransparentBin[selectedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        selectedSilhouetteOpaqueBin[selectedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (this.#edgesEnabled && this.#view.edgeMaterial.edges) {\n                if (meshCounts.numEdges > 0) {\n                    if (meshCounts.numTransparent < meshCounts.numMeshes) {\n                        edgesColorOpaqueBin[edgesColorOpaqueBinLen++] = layer;\n                    }\n                    if (meshCounts.numTransparent > 0) {\n                        edgesColorTransparentBin[edgesColorTransparentBinLen++] = layer;\n                    }\n                    if (view.selectedMaterial.edgeAlpha < 1.0) {\n                        selectedEdgesTransparentBin[selectedEdgesTransparentBinLen++] = layer;\n                    } else {\n                        selectedEdgesOpaqueBin[selectedEdgesOpaqueBinLen++] = layer;\n                    }\n                    if (view.xrayMaterial.edgeAlpha < 1.0) {\n                        xrayEdgesTransparentBin[xrayEdgesTransparentBinLen++] = layer;\n                    } else {\n                        xrayEdgesOpaqueBin[xrayEdgesOpaqueBinLen++] = layer;\n                    }\n                    if (view.highlightMaterial.edgeAlpha < 1.0) {\n                        highlightedEdgesTransparentBin[highlightedEdgesTransparentBinLen++] = layer;\n                    } else {\n                        highlightedEdgesOpaqueBin[highlightedEdgesOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n        }\n\n        // Render deferred bins\n\n        if (normalDrawSAOBinLen > 0) {\n            renderContext.withSAO = true;\n            for (let i = 0; i < normalDrawSAOBinLen; i++) {\n                //    this.#drawLayer(normalDrawSAOBin[i], RENDER_PASSES.COLOR_OPAQUE, layer.rendererModel.qualityRender);\n                //    normalDrawSAOBin[i].drawColorOpaque(renderContext);\n            }\n        }\n\n        for (let i = 0; i < edgesColorOpaqueBinLen; i++) {\n            this.#drawLayer(edgesColorOpaqueBin[i], RENDER_PASSES.EDGES_COLOR_OPAQUE);\n        }\n\n        for (let i = 0; i < xrayedSilhouetteOpaqueBinLen; i++) {\n            this.#drawLayer(xrayedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_XRAYED);\n        }\n\n        for (let i = 0; i < xrayEdgesOpaqueBinLen; i++) {\n            this.#drawLayer(xrayEdgesOpaqueBin[i], RENDER_PASSES.EDGES_XRAYED);\n        }\n\n        if (xrayedSilhouetteTransparentBinLen > 0 || xrayEdgesTransparentBinLen > 0 || normalFillTransparentBinLen > 0 || edgesColorTransparentBinLen > 0) {\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            renderContext.backfaces = false;\n            if (!this.#alphaDepthMask) {\n                gl.depthMask(false);\n            }\n            for (let i = 0; i < xrayEdgesTransparentBinLen; i++) {\n                this.#drawLayer(xrayEdgesTransparentBin[i], RENDER_PASSES.EDGES_XRAYED);\n            }\n            for (let i = 0; i < xrayedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(xrayedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_XRAYED);\n            }\n            if (normalFillTransparentBinLen > 0 || edgesColorTransparentBinLen > 0) {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < edgesColorTransparentBinLen; i++) {\n                this.#drawLayer(edgesColorTransparentBin[i], RENDER_PASSES.EDGES_COLOR_TRANSPARENT);\n            }\n            for (let i = 0; i < normalFillTransparentBinLen; i++) {\n                this.#drawLayer(normalFillTransparentBin[i], RENDER_PASSES.COLOR_TRANSPARENT);\n            }\n            gl.disable(gl.BLEND);\n            if (!this.#alphaDepthMask) {\n                gl.depthMask(true);\n            }\n        }\n\n        if (highlightedSilhouetteOpaqueBinLen > 0 || highlightedEdgesOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1; // HACK\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            for (let i = 0; i < highlightedEdgesOpaqueBinLen; i++) {\n                this.#drawLayer(highlightedEdgesOpaqueBin[i], RENDER_PASSES.EDGES_HIGHLIGHTED);\n            }\n            for (let i = 0; i < highlightedSilhouetteOpaqueBinLen; i++) {\n                this.#drawLayer(highlightedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_HIGHLIGHTED);\n            }\n        }\n\n        if (highlightedSilhouetteTransparentBinLen > 0 || highlightedEdgesTransparentBinLen > 0 || highlightedSilhouetteOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < highlightedEdgesTransparentBinLen; i++) {\n                this.#drawLayer(highlightedEdgesTransparentBin[i], RENDER_PASSES.EDGES_HIGHLIGHTED);\n            }\n            for (let i = 0; i < highlightedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(highlightedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_HIGHLIGHTED);\n            }\n            gl.disable(gl.BLEND);\n        }\n\n        if (selectedSilhouetteOpaqueBinLen > 0 || selectedEdgesOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            for (let i = 0; i < selectedEdgesOpaqueBinLen; i++) {\n                this.#drawLayer(selectedEdgesOpaqueBin[i], RENDER_PASSES.EDGES_SELECTED);\n            }\n            for (let i = 0; i < selectedSilhouetteOpaqueBinLen; i++) {\n                this.#drawLayer(selectedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_SELECTED);\n            }\n        }\n\n        if (selectedSilhouetteTransparentBinLen > 0 || selectedEdgesTransparentBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < selectedEdgesTransparentBinLen; i++) {\n                this.#drawLayer(selectedEdgesTransparentBin[i], RENDER_PASSES.EDGES_SELECTED);\n            }\n            for (let i = 0; i < selectedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(selectedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_SELECTED);\n            }\n            gl.disable(gl.BLEND);\n        }\n\n        const numTextureUnits = WEBGL_INFO.MAX_TEXTURE_UNITS;\n        for (let ii = 0; ii < numTextureUnits; ii++) {\n            gl.activeTexture(gl.TEXTURE0 + ii);\n        }\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        for (let ii = 0; ii < numVertexAttribs; ii++) {\n            gl.disableVertexAttribArray(ii);\n        }\n    }\n\n    #drawLayer(layer: Layer, renderPass: number, quality: boolean = true) {\n        switch (layer.renderState.primitive) {\n            case TrianglesPrimitive:\n            case SurfacePrimitive:\n            case SolidPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                        if (layer.meshCounts.numTransparent === layer.meshCounts.numMeshes || layer.meshCounts.numXRayed === layer.meshCounts.numMeshes) {\n                            return;\n                        }\n                        if (quality) {\n                            //    this.#layerRenderers.qualityColorTriangles.draw(layer);\n                        } else {\n                            this.#layerRenderers.colorTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        if (layer.meshCounts.numTransparent === 0) {\n                            return;\n                        }\n                        if (quality) {\n                            //     this.#layerRenderers.qualityColorTriangles.draw(layer);\n                        } else {\n                            this.#layerRenderers.colorTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                        if (layer.meshCounts.numSelected > 0) {\n                            //  this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                        if (layer.meshCounts.numHighlighted > 0) {\n                            // this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        if (layer.meshCounts.numXRayed > 0) {\n                            //   this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                }\n                break;\n            case LinesPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        //this.#layerRenderers.colorLines.draw(layer);\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        // this.#layerRenderers.silhouetteLines.draw(layer);\n                        break;\n                }\n                break;\n            case PointsPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        //  this.#layerRenderers.colorPoints.draw(layer);\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        //  this.#layerRenderers.silhouettePoints.draw(layer);\n                        break;\n                }\n                break;\n        }\n    }\n\n\n}"],"names":["s","t","e","Object","defineProperty","i","writable","value","o","n","this","prototype","addItem","arguments","length","r","removeItem","u","c","ETC1S","UASTC_4x4","f","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","l","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","p","m","v","T","g","_","w","C","S","y","F","transcoderPath","a","workerLimit","setWorkerLimit","init","astcSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","transcode","Promise","then","postMessage","type","buffers","taskConfig","data","mipmaps","format","dfdTransferFn","dfdFlags","error","props","minFilter","magFilter","encoding","premultiplyAlpha","destroy","URL","revokeObjectURL","h","setPath","setWithCredentials","loadAsync","setResponseType","all","P","toString","JSON","stringify","substring","indexOf","lastIndexOf","join","createObjectURL","Blob","setWorkerCreator","Worker","slice","config","transcoderBinary","console","warn","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","Uint8Array","close","isValid","Error","isUASTC","getWidth","getHeight","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","d","basisFormat","includes","transcoderFormat","needsPowerOfTwo","engineFormat","startTranscoding","getImageLevelInfo","origWidth","origHeight","R","getImageTranscodedSizeInBytes","transcodeImage","push","width","height","hasAlpha","buffer","id","message","if","priorityETC1S","Infinity","priorityUASTC","sort","RenderContext","viewer","view","gl","viewMatrixDataTexture","pbrEnabled","withSAO","backfaces","frontface","textureUnit","bindTexture","renderPass","shadowViewMatrix","shadowProjMatrix","pickViewMatrix","pickProjMatrix","pickZNear","pickZFar","pickInvisible","lineWidth","lastProgramId","occlusionTexture","reset","_createClass","key","get","WEBGL_INFO","MAX_TEXTURE_UNITS","RENDER_PASSES","NOT_RENDERED","COLOR_OPAQUE","COLOR_TRANSPARENT","SILHOUETTE_HIGHLIGHTED","SILHOUETTE_SELECTED","SILHOUETTE_XRAYED","EDGES_COLOR_OPAQUE","EDGES_COLOR_TRANSPARENT","EDGES_HIGHLIGHTED","EDGES_SELECTED","EDGES_XRAYED","PICK","tempVec4","createVec4","_hash","_classPrivateFieldLooseKey","_program","_needRebuild","_uniforms","_samplers","_build","_buildShader","_getValid","_bind","LayerRenderer","renderContext","_bind2","_getValid2","_buildShader2","_build2","errors","_classPrivateFieldLooseBase","_proto","needRebuild","draw","layer","renderState","program","uniforms","samplers","uniform1i","projMatrix","uniformMatrix4fv","camera","worldMatrix","rendererModel","color","material","xrayMaterial","fillColor","uniform4f","fillAlpha","highlightMaterial","selectedMaterial","uniform4fv","Float32Array","viewMatrices","dataTextureSet","nextTextureUnit","positions","eachMeshMatrices","eachMeshAttributes","eachPrimitiveMesh","numIndices8Bits","eachPrimitiveMesh_8Bits","indices_8Bits","indices","drawArrays","TRIANGLES","numIndices16Bits","eachPrimitiveMesh_16Bits","indices_16Bits","numIndices32Bits","eachPrimitiveMesh_32Bits","indices_32Bits","baseColorMap","materialTextureSet","colorTexture","texture2D","metallicRoughMap","metallicRoughnessTexture","emissiveMap","emissiveTexture","occlusionMap","logarithmicDepthBufferEnabled","fragHeader","fragGammaDefs","fragSectionPlaneDefs","fragLightDefs","fragLogDepthBufDefs","fragSectionPlanesSlice","fragLighting","fragLogDepthBufOutput","src","len","lightsList","light","space","sao","enabled","sectionPlanesList","AmbientLight","DirLight","PointLight","GLProgram","getLocation","viewMatrix","logDepthBufFC","gammaFactor","pointSize","nearPlaneHeight","pointCloudIntensityRange","lightAmbient","lights","sectionPlanes","dir","pos","attenuation","active","getSampler","edgeIndices","eachEdgeOffset","eachEdgeMesh","normalMap","getHash","vertex","buildVertexShader","fragment","buildFragmentShader","project","bind","getAmbientColorAndIntensity","fragLightSourceUniforms","intensity","uniform3f","uniform1f","possible","viewportHeight","drawingBufferHeight","drawingBufferWidth","blendCutoff","blendFactor","pointsMaterial","projectionType","OrthoProjectionType","Math","tan","perspectiveProjection","fov","PI","log","far","LN2","FastColorTrianglesRenderer","_LayerRenderer","call","_inheritsLoose","getSectionPlanesHash","getLightsHash","vertHeader","fragFlatShading","DataTextureSet","edgeIndices_8Bits","edgeIndices_16Bits","edgeIndices_32Bits","eachEdgeMesh_8Bits","eachEdgeMesh_16Bits","eachEdgeMesh_32Bits","_built","build","MeshCounts","numMeshes","numVisible","numTransparent","numEdges","numXRayed","numSelected","numHighlighted","numClippable","numPickable","numCulled","SCENE_OBJECT_FLAGS","VISIBLE","CULLED","PICKABLE","CLIPPABLE","COLLIDABLE","CAST_SHADOW","RECEIVE_SHADOW","XRAYED","HIGHLIGHTED","SELECTED","EDGES","BACKFACES","TRANSPARENT","Reflect","apply","construct","getOwnPropertyDescriptor","getPrototypeOf","has","ownKeys","set","setPrototypeOf","Proxy","Number","isFinite","isNaN","Symbol","iterator","species","toStringTag","b","A","create","B","x","freeze","E","is","O","isPrototypeOf","j","hasOwn","hasOwnProperty","I","Array","isArray","L","toLocaleString","N","trunc","U","ArrayBuffer","M","isView","D","k","W","SharedArrayBuffer","V","Y","z","from","G","K","X","keys","q","values","H","entries","J","Q","reverse","Z","fill","$","copyWithin","tt","rt","nt","subarray","et","ot","it","st","ct","Uint16Array","ut","ft","Uint32Array","ht","lt","at","next","yt","_regeneratorRuntime","mark","_callee","wrap","_context","prev","stop","pt","vt","TypeError","bt","RangeError","At","Set","mt","Bt","add","xt","Et","WeakMap","Tt","Ot","jt","It","Pt","St","_t","Ft","Lt","Rt","Ct","Nt","Ut","Mt","kt","_m","Wt","Vt","_m2","configurable","Yt","zt","Gt","Kt","Xt","qt","Ht","Jt","Qt","MAX_SAFE_INTEGER","Zt","$t","tr","constructor","rr","nr","er","or","ir","sr","cr","ur","ar","byteOffset","fr","_step","hr","_iterator","_createForOfIteratorHelperLoose","done","lr","concat","_this","of","_callee2","_iterator2","_step2","_r10","_context2","_callee3","_iterator3","_step3","_step3$value","_r11","_n6","_context3","map","filter","reduce","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","yr","emptyDataTexture","GLDataTexture","textureWidth","textureHeight","disableFilteringForBoundTexture","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DataTextureBuffer","positionsDecompressMatrices","positionsCompressed","eachMeshVertexPortionBase","eachMeshVertexPortionOffset","eachMeshEdgeIndicesOffset","eachMeshColor","eachMeshPickColor","eachMeshNormalMatrix","eachMeshPositionsDecompressMatrix","eachMeshFlags1","eachMeshFlags2","eachMeshParts","INDICES_EDGE_INDICES_ALIGNMENT_SIZE","identityMatrix","identityMat4","tempVec4a","tempVec4b","tempUint8Array4","tempFloat32Array3","_gl","_view","_dataTextureBuffer","_geometryHandles","_meshPartHandles","_numMeshParts","_deferredSetFlagsActive","_deferredSetFlagsDirty","_createGeometryBucket","_createMeshPart","_setMeshFlags","_setMeshFlags3","Layer","layerParams","renderers","_setMeshFlags4","_setMeshFlags2","_createMeshPart2","_createGeometryBucket2","layerIndex","meshCounts","primitive","numEdgeIndices8Bits","numEdgeIndices16Bits","numEdgeIndices32Bits","numVertices","beginDeferredFlags","canCreateMesh","geometryCompressedParams","numGeometryBuckets","geometryBuckets","numPositions","numIndices","geometryBucket","PointsPrimitive","LinesPrimitive","MAX_DATATEXTURE_HEIGHT","hasGeometry","geometryId","createGeometryCompressed","geometryBucketHandles","aabb","positionsDecompressMatrix","createMesh","meshParams","meshIndex","geometryHandle","geometryBucketHandle","worldAABB","collapseAABB3","geometryOBB","AABB3ToOBB3","matrix","transformPoint4","expandAABB3Point3","dataTextureBuffer","ceil","textureData","texture","createTexture","texStorage2D","RGB16UI","texSubImage2D","RGB_INTEGER","UNSIGNED_SHORT","createPositionsDataTexture","RGB8UI","UNSIGNED_BYTE","createIndices8BitDataTexture","createIndices16BitDataTexture","RGB32UI","UNSIGNED_INT","createIndices32BitDataTexture","RG8UI","RG_INTEGER","createEdgeIndices8BitDataTexture","RG16UI","createEdgeIndices16BitDataTexture","RG32UI","createEdgeIndices32BitDataTexture","colors","pickColors","vertexBases","indexBaseOffsets","edgeIndexBaseOffsets","RGBA8UI","RGBA_INTEGER","createEachMeshAttributesDataTexture","positionDecodeMatrices","matrices","Float16Array","RGBA16F","RGBA","HALF_FLOAT","createEachMeshMatricesDataTexture","offsets","RGB32F","RGB","FLOAT","createEachEdgeOffsetDataTexture","isEmpty","initFlags","flags","meshTransparent","commitDeferredFlags","flushInitFlags","setMeshVisible","transparent","setMeshHighlighted","setMeshXRayed","setMeshSelected","setMeshEdges","setMeshClippable","setMeshCulled","setMeshCollidable","setMeshPickable","setMeshColor","setMeshTransparent","setMeshOffset","offset","setMeshMatrix","setMeshViewMatrixIndex","index","numVertsForPrim","alignedIndicesLen","alignedIndices","alignedEdgeIndicesLen","alignedEdgeIndices","indicesBase","vertexBase","edgeIndicesBase","numTriangles","indicesBuffer","edgeIndicesBuffer","currentNumIndices","vertsIndex","pickColor","meshPartId","eachPrimitiveMeshBuffer","edgeIndicesMeshIdBuffer","numEdgeIndices","vertsBase","numVerts","f0","f1","f2","visible","xrayed","highlighted","selected","culled","f3","clippable","RendererGeometryImpl","RendererTextureImpl","tempIntRGB","_flags","_aabb","_offsetAABB","_offset","_colorizeUpdated","_opacityUpdated","RendererObjectImpl","params","model","sceneObject","layerId","rendererMeshes","createAABB3","createVec3","setSceneObject","setVisible","viewIndex","setHighlighted","setXRayed","setSelected","setEdges","edges","setCulled","setClippable","setCollidable","collidable","setPickable","pickable","setColorize","floor","setOpacity","opacity","lastOpacityQuantized","colorize","opacityQuantized","setOffset","finalize2","tempMat4a","createMat4","tempMat4b","RendererMeshImpl","rendererGeometry","rendererTextureSet","metallic","roughness","pickId","tileManager","tile","sceneObjectRenderer","colorizing","delegatePickedEntity","setMatrix","center","transformPoint3","oldTile","updateTileCenter","getTile","tileChanged","tileCenter","mulMat4","translationMat4c","setMetallic","setRoughness","setColor","newTransparent","changingTransparency","canPickTriangle","drawPickTriangles","drawFlags","pickTriangleSurface","pickResult","canPickWorldPos","drawPickNormals","putTile","RendererTextureSetImpl","identityQuat","defaultTextureSetId","_webglRenderer","_renderContext","_position","_rotation","_quaternion","_scale","_worldMatrix","_viewMatrix","_colorTextureEnabled","_backfaces","_layers","_numGeometries","_numTriangles","_numLines","_numPoints","_numViewerObjects","_textureTranscoder","_aabbDirty","_edgeThreshold","_currentLayers","_viewMatrixDirty","_worldMatrixNonIdentity","_onCameraViewMatrix","_layerId","_addModel","_addTexture","_addGeometry","_addMesh","_addObject","_removeModel","_createDefaultTextureSetRenderer","_getLayer","_rebuildAABB","RendererModelImpl","_Component","_assertThisInitialized","_rebuildAABB2","_getLayer2","_createDefaultTextureSetRenderer2","_removeModel2","_addObject2","_addMesh2","_addGeometry2","_addTexture2","_addModel2","qualityRender","sceneModel","rendererGeometries","rendererTextures","rendererTextureSets","rendererObjects","rendererObjectsList","rendererViewObjects","layerList","onBuilt","webglRenderer","textureTranscoder","edgeThreshold","built","position","rotation","quaternion","eulerToQuat","scale","composeMat4","onViewMatrix","subscribe","EventEmitter","EventDispatcher","setImageDirty","dispatch","destroyed","unsubscribe","objectId","clear","Component","textures","geometries","meshes","objects","textureId","geometry","meshId","mesh","object","_this2","glTexture","GLTexture","preloadColor","setPreloadColor","image","crossOrigin","setImage","wrapS","wrapT","wrapR","flipY","ext","split","pop","Image","onload","loadArraybuffer","arrayBuffer","byteLength","compressedTextureData","setCompressedData","errMsg","rendererTexture","textureSet","meshMatrix","meshRenderer","registerPickable","expandAABB3","undefined","createUUID","objectRenderer","rendererMesh","rendererObject","defaultColorTexture","defaultMetalRoughTexture","defaultNormalsTexture","defaultEmissiveTexture","defaultOcclusionTexture","textureSetId","tempMat","rtcCenterWorld","Float64Array","rtcCenterView","worldToRTCCenter","worldCenter","rtcCenter","cellSize","round","NUM_TILES","_indexesUsed","_tiles","_dataTexture","_camera","_lastFreeIndex","_putFreeTile","_findFreeTile","TileManager","_findFreeTile2","_putFreeTile2","numMatrices","createMatricesDataTexture","useCount","rtcViewMatrix","newCenter","newRTCCenter","newId","newTile","refreshMatrices","viewMat","rtcViewMat","tileIds","tileId","transformVec4","setMat4Translation","ua","navigator","userAgent","match","isSafari","toLowerCase","_sceneModels","_viewer","_canvasTransparent","_transparentEnabled","_edgesEnabled","_imageDirty","_saoEnabled","_pbrEnabled","_backgroundColor","_rendererModels","_layerList","_layerListDirty","_stateSortDirty","_pickIDs","_saoDepthRenderBuffer","_extensionHandles","_logarithmicDepthBufferEnabled","_alphaDepthMask","_occlusionTester","_layerRenderers","_registerRendererViewObjects","_deregisterRendererViewObjects","_updateLayerList","_buildLayerList","_draw","_activateExtensions","_drawSAOBuffers","_drawDepth","_drawColor","_drawLayer","WebGLRenderer","_drawLayer2","_drawColor2","_drawDepth2","_drawSAOBuffers2","_activateExtensions2","_draw2","_buildLayerList2","_updateLayerList2","_deregisterRendererViewObjects2","_registerRendererViewObjects2","Map","KTX2TextureTranscoder","capabilities","getCapabilities","maxViews","canvasElement","document","createElement","getContext","getExtension","registerView","WEBGL_CONTEXT_NAMES","contextAttr","hint","FRAGMENT_SHADER_DERIVATIVE_HINT","NICEST","colorTriangles","sub","deregisterView","addModel","onDestroyed","one","component","removeModel","modelId","deregisterPickable","setBackgroundColor","setEdgesEnabled","setPBREnabled","getSAOSupported","SUPPORTED_EXTENSIONS","setSAOEnabled","setTransparentEnabled","viewport","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","needsRebuild","rendererId","needsRender","render","force","pickSceneObject","lenDrawableList","webGLSceneModelRenderer","OES_element_index_uint","EXT_frag_depth","WEBGL_depth_texture","enable","DEPTH_TEST","frontFace","CCW","CULL_FACE","depthMask","normalDrawSAOBin","edgesColorOpaqueBin","normalFillTransparentBin","edgesColorTransparentBin","xrayedSilhouetteOpaqueBin","xrayEdgesOpaqueBin","xrayedSilhouetteTransparentBin","xrayEdgesTransparentBin","highlightedSilhouetteOpaqueBin","highlightedEdgesOpaqueBin","highlightedSilhouetteTransparentBin","highlightedEdgesTransparentBin","selectedSilhouetteOpaqueBin","selectedEdgesOpaqueBin","selectedSilhouetteTransparentBin","selectedEdgesTransparentBin","saoPossible","normalDrawSAOBinLen","edgesColorOpaqueBinLen","normalFillTransparentBinLen","edgesColorTransparentBinLen","xrayedSilhouetteOpaqueBinLen","xrayEdgesOpaqueBinLen","xrayedSilhouetteTransparentBinLen","xrayEdgesTransparentBinLen","highlightedSilhouetteOpaqueBinLen","highlightedEdgesOpaqueBinLen","highlightedSilhouetteTransparentBinLen","highlightedEdgesTransparentBinLen","selectedSilhouetteOpaqueBinLen","selectedEdgesOpaqueBinLen","selectedSilhouetteTransparentBinLen","selectedEdgesTransparentBinLen","edgeMaterial","edgeAlpha","BLEND","blendEquation","FUNC_ADD","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","blendFunc","disable","numTextureUnits","ii","activeTexture","TEXTURE0","TEXTURE_CUBE_MAP","numVertexAttribs","MAX_VERTEX_ATTRIBS","disableVertexAttribArray","quality","TrianglesPrimitive","SurfacePrimitive","SolidPrimitive"],"mappings":"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"}