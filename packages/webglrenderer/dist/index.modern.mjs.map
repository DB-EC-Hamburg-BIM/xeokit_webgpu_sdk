{"version":3,"file":"index.modern.mjs","sources":["../../utils/dist/utils.js","../../ktx2/dist/index.es","../src/RenderContext.ts","../src/RENDER_PASSES.ts","../src/LayerRenderer.ts","../src/FastColorTrianglesRenderer.ts","../src/DataTextureSet.ts","../src/MeshCounts.ts","../src/SCENE_OBJECT_FLAGS.ts","../src/float16.ts","../src/dataTextures.ts","../src/DataTextureBuffer.ts","../src/Layer.ts","../src/RendererGeometryImpl.ts","../src/RendererTextureImpl.ts","../src/RendererObjectImpl.ts","../src/RendererMeshImpl.ts","../src/RendererTextureSetImpl.ts","../src/RendererModelImpl.ts","../../rtc/src/index.ts","../src/TileManager.ts","../src/WebGLRenderer.ts"],"sourcesContent":["function t(e,r){return t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},t(e,r)}var e=0;function r(t){return\"__private_\"+e+++\"_\"+t}function n(t,e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new TypeError(\"attempted to use private field on non-instance\");return t}var i=/*#__PURE__*/r(\"items\"),o=/*#__PURE__*/r(\"lastUniqueId\"),s=/*#__PURE__*/function(){function t(t,e){Object.defineProperty(this,i,{writable:!0,value:void 0}),Object.defineProperty(this,o,{writable:!0,value:void 0}),n(this,i)[i]=t||[],n(this,o)[o]=(e||0)+1}var e=t.prototype;return e.addItem=function(){var t;if(2===arguments.length){var e=arguments[0];if(t=arguments[1],n(this,i)[i][e])throw\"ID clash: '\"+e+\"'\";return n(this,i)[i][e]=t,e}for(t=arguments[0]||{};;){var r=n(this,o)[o]++;if(!n(this,i)[i][r])return n(this,i)[i][r]=t,r}},e.removeItem=function(t){var e=n(this,i)[i][t];return delete n(this,i)[i][t],e},t}(),a=/*#__PURE__*/function(){function t(){this._head=void 0,this._headLength=void 0,this._tail=void 0,this._index=void 0,this._length=void 0,this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0}var e,r,n=t.prototype;return n.shift=function(){if(this._index>=this._headLength){var t=this._head;if(t.length=0,this._head=this._tail,this._tail=t,this._index=0,this._headLength=this._head.length,!this._headLength)return}var e=this._head[this._index];return this._index<0?delete this._head[this._index++]:this._head[this._index++]=void 0,this._length--,e},n.push=function(t){return this._length++,this._tail.push(t),this},n.unshift=function(t){return this._head[--this._index]=t,this._length++,this},n.clear=function(){this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0},e=t,(r=[{key:\"length\",get:function(){return this._length}}])&&function(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,\"symbol\"==typeof(i=function(t,e){if(\"object\"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!=typeof n)return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(n.key))?i:String(i),n)}var i}(e.prototype,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),h=/*#__PURE__*/function(){function t(t,e,r){this.isLoading=void 0,this.itemsLoaded=void 0,this.itemsTotal=void 0,this.urlModifier=void 0,this.handlers=void 0,this.onStart=void 0,this.onLoad=void 0,this.onProgress=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0,this.urlModifier=void 0,this.handlers=[],this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=r}var e=t.prototype;return e.itemStart=function(t){this.itemsTotal++,this.isLoading||void 0!==this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0},e.itemEnd=function(t){this.itemsLoaded++,void 0!==this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,void 0!==this.onLoad&&this.onLoad())},e.itemError=function(t){void 0!==this.onError&&this.onError(t)},e.resolveURL=function(t){return this.urlModifier?this.urlModifier(t):t},e.setURLModifier=function(t){return this.urlModifier=t,this},e.addHandler=function(t,e){return this.handlers.push(t,e),this},e.removeHandler=function(t){var e=this.handlers.indexOf(t);return-1!==e&&this.handlers.splice(e,2),this},e.getHandler=function(t){for(var e=0,r=this.handlers.length;e<r;e+=2){var n=this.handlers[e],i=this.handlers[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null},t}(),u=new h,d=/*#__PURE__*/function(){function t(t){this.manager=void 0,this.crossOrigin=void 0,this.withCredentials=void 0,this.path=void 0,this.resourcePath=void 0,this.requestHeader=void 0,this.manager=void 0!==t?t:u,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}var e=t.prototype;return e.load=function(t,e,r,n){},e.loadAsync=function(t,e){var r=this;return new Promise(function(n,i){r.load(t,n,e,i)})},e.parse=function(){},e.setCrossOrigin=function(t){return this.crossOrigin=t,this},e.setWithCredentials=function(t){return this.withCredentials=t,this},e.setPath=function(t){return this.path=t,this},e.setResourcePath=function(t){return this.resourcePath=t,this},e.setRequestHeader=function(t){return this.requestHeader=t,this},t}(),f=/*#__PURE__*/function(){function t(t){void 0===t&&(t=4),this.pool=void 0,this.queue=void 0,this.workers=void 0,this.workersResolve=void 0,this.workerStatus=void 0,this.workerCreator=void 0,this.pool=t,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}var e=t.prototype;return e._initWorker=function(t){if(!this.workers[t]){var e=this.workerCreator();e.addEventListener(\"message\",this._onMessage.bind(this,t)),this.workers[t]=e}},e._getIdleWorker=function(){for(var t=0;t<this.pool;t++)if(!(this.workerStatus&1<<t))return t;return-1},e._onMessage=function(t,e){var r=this.workersResolve[t];if(r&&r(e),this.queue.length){var n=this.queue.shift(),i=n.msg,o=n.transfer;this.workersResolve[t]=n.resolve,this.workers[t].postMessage(i,o)}else this.workerStatus^=1<<t},e.setWorkerCreator=function(t){this.workerCreator=t},e.setWorkerLimit=function(t){this.pool=t},e.postMessage=function(t,e){var r=this;return new Promise(function(n){var i=r._getIdleWorker();-1!==i?(r._initWorker(i),r.workerStatus|=1<<i,r.workersResolve[i]=n,r.workers[i].postMessage(t,e)):r.queue.push({resolve:n,msg:t,transfer:e})})},e.destroy=function(){this.workers.forEach(function(t){return t.terminate()}),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0},t}(),c={enabled:!1,files:{},add:function(t,e){},get:function(t){},remove:function(t){},clear:function(){this.files={}}},l={},v=/*#__PURE__*/function(e){var r,n;function i(t){var r;return(r=e.call(this,t)||this).mimeType=void 0,r.responseType=void 0,r}n=e,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,t(r,n);var o=i.prototype;return o.load=function(t,e,r,n){var i=this;void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var o=c.get(t);if(void 0!==o)return this.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;if(void 0===l[t]){l[t]=[],l[t].push({onLoad:e,onProgress:r,onError:n});var s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?\"include\":\"same-origin\"}),a=this.mimeType,h=this.responseType;fetch(s).then(function(e){if(200===e.status||0===e.status){if(0===e.status&&console.warn(\"FileLoader: HTTP Status 0 received.\"),\"undefined\"==typeof ReadableStream||void 0===e.body.getReader)return e;var r=l[t],n=e.body.getReader(),i=e.headers.get(\"Content-Length\"),o=i?parseInt(i):0,s=0!==o,a=0,h=new ReadableStream({start:function(t){!function e(){n.read().then(function(n){var i=n.value;if(n.done)t.close();else{for(var h=new ProgressEvent(\"progress\",{lengthComputable:s,loaded:a+=i.byteLength,total:o}),u=0,d=r.length;u<d;u++){var f=r[u];f.onProgress&&f.onProgress(h)}t.enqueue(i),e()}})}()}});return new Response(h)}throw new Error('fetch for \"'+e.url+'\" responded with '+e.status+\": \"+e.statusText)}).then(function(t){switch(h){case\"arraybuffer\":return t.arrayBuffer();case\"blob\":return t.blob();case\"document\":return t.text().then(function(t){return(new DOMParser).parseFromString(t,a)});case\"json\":return t.json();default:if(void 0===a)return t.text();var e=/charset=\"?([^;\"\\s]*)\"?/i.exec(a),r=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(r);return t.arrayBuffer().then(function(t){return n.decode(t)})}}).then(function(e){c.add(t,e);var r=l[t];delete l[t];for(var n=0,i=r.length;n<i;n++){var o=r[n];o.onLoad&&o.onLoad(e)}}).catch(function(e){var r=l[t];if(void 0===r)throw i.manager.itemError(t),e;delete l[t];for(var n=0,o=r.length;n<o;n++){var s=r[n];s.onError&&s.onError(e)}i.manager.itemError(t)}).finally(function(){i.manager.itemEnd(t)}),this.manager.itemStart(t)}else l[t].push({onLoad:e,onProgress:r,onError:n})},o.setResponseType=function(t){return this.responseType=t,this},o.setMimeType=function(t){return this.mimeType=t,this},i}(d);function p(t){return JSON.parse(JSON.stringify(t))}var g=[[\"0\",10],[\"A\",26],[\"a\",26],[\"_\",1],[\"$\",1]].map(function(t){for(var e=[],r=t[0].charCodeAt(0),n=r+t[1],i=r;i<n;++i)e.push(i);return String.fromCharCode.apply(null,e)}).join(\"\");function m(t,e){return(e&&4!==e?[0,6]:[0,6,12,18]).map(function(e){return g.substr(parseInt(String(t/(1<<e)))%64,1)}).reverse().join(\"\")}function w(t){var e=[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30].map(function(e){return parseInt(t.substr(e,2),16)});return m(e[0],2)+[1,4,7,10,13].map(function(t){return m((e[t]<<16)+(e[t+1]<<8)+e[t+2],4)}).join(\"\")}function y(t,e){var r=[];return function t(n){n.type===e&&r.push(n),(n.children||[]).forEach(function(e){t(e)})}(t),r}function _(t){return new Promise(function(e,r){setTimeout(e,t)})}function b(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.open(t.method||\"GET\",t.url,!0),n.onload=function(i){console.log(t.url,n.readyState,n.status),4===n.readyState&&(200===n.status?e(n.responseXML):r(n.statusText))},n.send(null)})}function L(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=new XMLHttpRequest;i.overrideMimeType(\"application/json\"),i.open(\"GET\",t,!0),i.addEventListener(\"load\",function(t){var n=t.target.response;if(200===this.status){var i;try{i=JSON.parse(n)}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}e(i)}else if(0===this.status){console.warn(\"loadFile: HTTP Status 0 received.\");try{e(JSON.parse(n))}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}}else r(t)},!1),i.addEventListener(\"error\",function(t){r(t)},!1),i.send(null)}function S(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(i){var o=!!i[2],s=i[3];s=window.decodeURIComponent(s),o&&(s=window.atob(s));try{for(var a=new ArrayBuffer(s.length),h=new Uint8Array(a),u=0;u<s.length;u++)h[u]=s.charCodeAt(u);window.setTimeout(function(){e(a)},0)}catch(t){window.setTimeout(function(){r(t)},0)}}else{var d=new XMLHttpRequest;d.open(\"GET\",t,!0),d.responseType=\"arraybuffer\",d.onreadystatechange=function(){4===d.readyState&&(200===d.status?e(d.response):r(\"loadArrayBuffer error : \"+d.response))},d.send(null)}}function P(t){return t&&!t.propertyIsEnumerable(\"length\")&&\"object\"==typeof t&&\"number\"==typeof t.length}function T(t){return\"string\"==typeof t||t instanceof String}function k(t){return!isNaN(parseFloat(t))&&isFinite(t)}function O(t){return T(t)||k(t)}function E(t){return\"function\"==typeof t}function M(t){return!!t&&t.constructor==={}.constructor}function R(t){return x(t,{})}function x(t,e){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function C(t,e){for(var r in t)t.hasOwnProperty(r)&&null!=t[r]&&(e[r]=t[r]);return e}function j(t,e){for(var r in t)t.hasOwnProperty(r)&&null==e[r]&&(e[r]=t[r]);return e}function q(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function H(t){return k(t)?\"\"+t:\"'\"+t+\"'\"}function I(t,e){var r=new t.constructor(t.length+e.length);return r.set(t),r.set(e,t.length),r}var N=function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16);return function(){var e=4294967295*Math.random()|0,r=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+\"-\"+t[255&r]+t[r>>8&255]+\"-\"+t[r>>16&15|64]+t[r>>24&255]+\"-\"+t[63&n|128]+t[n>>8&255]+\"-\"+t[n>>16&255]+t[n>>24&255]+t[255&i]+t[i>>8&255]+t[i>>16&255]+t[i>>24&255]}}();export{c as Cache,u as DefaultLoadingManager,v as FileLoader,d as Loader,h as LoadingManager,s as Map,a as Queue,f as WorkerPool,x as apply,C as apply2,j as applyIf,m as b64,p as clone,w as compressGuid,I as concat,R as copy,N as createUUID,y as findNodeOfType,b as httpRequest,H as inQuotes,P as isArray,q as isEmptyObject,E as isFunction,O as isID,k as isNumeric,M as isObject,T as isString,S as loadArraybuffer,L as loadJSON,_ as timeout};\n//# sourceMappingURL=utils.js.map\n","var t=0;function e(e){return\"__private_\"+t+++\"_\"+e}function r(t,e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new TypeError(\"attempted to use private field on non-instance\");return t}function o(t,e){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},o(t,e)}var i=/*#__PURE__*/function(){function t(t,e,r){this.isLoading=void 0,this.itemsLoaded=void 0,this.itemsTotal=void 0,this.urlModifier=void 0,this.handlers=void 0,this.onStart=void 0,this.onLoad=void 0,this.onProgress=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0,this.urlModifier=void 0,this.handlers=[],this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=r}var e=t.prototype;return e.itemStart=function(t){this.itemsTotal++,this.isLoading||void 0!==this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0},e.itemEnd=function(t){this.itemsLoaded++,void 0!==this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,void 0!==this.onLoad&&this.onLoad())},e.itemError=function(t){void 0!==this.onError&&this.onError(t)},e.resolveURL=function(t){return this.urlModifier?this.urlModifier(t):t},e.setURLModifier=function(t){return this.urlModifier=t,this},e.addHandler=function(t,e){return this.handlers.push(t,e),this},e.removeHandler=function(t){var e=this.handlers.indexOf(t);return-1!==e&&this.handlers.splice(e,2),this},e.getHandler=function(t){for(var e=0,r=this.handlers.length;e<r;e+=2){var o=this.handlers[e],i=this.handlers[e+1];if(o.global&&(o.lastIndex=0),o.test(t))return i}return null},t}(),s=new i,n=/*#__PURE__*/function(){function t(t){this.manager=void 0,this.crossOrigin=void 0,this.withCredentials=void 0,this.path=void 0,this.resourcePath=void 0,this.requestHeader=void 0,this.manager=void 0!==t?t:s,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}var e=t.prototype;return e.load=function(t,e,r,o){},e.loadAsync=function(t,e){var r=this;return new Promise(function(o,i){r.load(t,o,e,i)})},e.parse=function(){},e.setCrossOrigin=function(t){return this.crossOrigin=t,this},e.setWithCredentials=function(t){return this.withCredentials=t,this},e.setPath=function(t){return this.path=t,this},e.setResourcePath=function(t){return this.resourcePath=t,this},e.setRequestHeader=function(t){return this.requestHeader=t,this},t}(),a=/*#__PURE__*/function(){function t(t){void 0===t&&(t=4),this.pool=void 0,this.queue=void 0,this.workers=void 0,this.workersResolve=void 0,this.workerStatus=void 0,this.workerCreator=void 0,this.pool=t,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}var e=t.prototype;return e._initWorker=function(t){if(!this.workers[t]){var e=this.workerCreator();e.addEventListener(\"message\",this._onMessage.bind(this,t)),this.workers[t]=e}},e._getIdleWorker=function(){for(var t=0;t<this.pool;t++)if(!(this.workerStatus&1<<t))return t;return-1},e._onMessage=function(t,e){var r=this.workersResolve[t];if(r&&r(e),this.queue.length){var o=this.queue.shift(),i=o.msg,s=o.transfer;this.workersResolve[t]=o.resolve,this.workers[t].postMessage(i,s)}else this.workerStatus^=1<<t},e.setWorkerCreator=function(t){this.workerCreator=t},e.setWorkerLimit=function(t){this.pool=t},e.postMessage=function(t,e){var r=this;return new Promise(function(o){var i=r._getIdleWorker();-1!==i?(r._initWorker(i),r.workerStatus|=1<<i,r.workersResolve[i]=o,r.workers[i].postMessage(t,e)):r.queue.push({resolve:o,msg:t,transfer:e})})},e.destroy=function(){this.workers.forEach(function(t){return t.terminate()}),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0},t}(),d={},h=/*#__PURE__*/function(t){var e,r;function i(e){var r;return(r=t.call(this,e)||this).mimeType=void 0,r.responseType=void 0,r}r=t,(e=i).prototype=Object.create(r.prototype),e.prototype.constructor=e,o(e,r);var s=i.prototype;return s.load=function(t,e,r,o){var i=this;if(void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t),void 0===d[t]){d[t]=[],d[t].push({onLoad:e,onProgress:r,onError:o});var s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?\"include\":\"same-origin\"}),n=this.mimeType,a=this.responseType;fetch(s).then(function(e){if(200===e.status||0===e.status){if(0===e.status&&console.warn(\"FileLoader: HTTP Status 0 received.\"),\"undefined\"==typeof ReadableStream||void 0===e.body.getReader)return e;var r=d[t],o=e.body.getReader(),i=e.headers.get(\"Content-Length\"),s=i?parseInt(i):0,n=0!==s,a=0,h=new ReadableStream({start:function(t){!function e(){o.read().then(function(o){var i=o.value;if(o.done)t.close();else{for(var d=new ProgressEvent(\"progress\",{lengthComputable:n,loaded:a+=i.byteLength,total:s}),h=0,u=r.length;h<u;h++){var c=r[h];c.onProgress&&c.onProgress(d)}t.enqueue(i),e()}})}()}});return new Response(h)}throw new Error('fetch for \"'+e.url+'\" responded with '+e.status+\": \"+e.statusText)}).then(function(t){switch(a){case\"arraybuffer\":return t.arrayBuffer();case\"blob\":return t.blob();case\"document\":return t.text().then(function(t){return(new DOMParser).parseFromString(t,n)});case\"json\":return t.json();default:if(void 0===n)return t.text();var e=/charset=\"?([^;\"\\s]*)\"?/i.exec(n),r=e&&e[1]?e[1].toLowerCase():void 0,o=new TextDecoder(r);return t.arrayBuffer().then(function(t){return o.decode(t)})}}).then(function(e){var r=d[t];delete d[t];for(var o=0,i=r.length;o<i;o++){var s=r[o];s.onLoad&&s.onLoad(e)}}).catch(function(e){var r=d[t];if(void 0===r)throw i.manager.itemError(t),e;delete d[t];for(var o=0,s=r.length;o<s;o++){var n=r[o];n.onError&&n.onError(e)}i.manager.itemError(t)}).finally(function(){i.manager.itemEnd(t)}),this.manager.itemStart(t)}else d[t].push({onLoad:e,onProgress:r,onError:o})},s.setResponseType=function(t){return this.responseType=t,this},s.setMimeType=function(t){return this.mimeType=t,this},i}(n);[[\"0\",10],[\"A\",26],[\"a\",26],[\"_\",1],[\"$\",1]].map(function(t){for(var e=[],r=t[0].charCodeAt(0),o=r+t[1],i=r;i<o;++i)e.push(i);return String.fromCharCode.apply(null,e)}).join(\"\"),function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16)}();var u=0,c={ETC1S:0,UASTC_4x4:1},f={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16},l={RGBAFormat:1023,RGBA_ASTC_4x4_Format:37808,RGBA_BPTC_Format:36492,RGBA_ETC2_EAC_Format:37496,RGBA_PVRTC_4BPPV1_Format:35842,RGBA_S3TC_DXT5_Format:33779,RGB_ETC1_Format:36196,RGB_ETC2_Format:37492,RGB_PVRTC_4BPPV1_Format:35840,RGB_S3TC_DXT1_Format:33776},p=/*#__PURE__*/e(\"transcoderPath\"),m=/*#__PURE__*/e(\"transcoderBinary\"),v=/*#__PURE__*/e(\"transcoderPending\"),T=/*#__PURE__*/e(\"workerPool\"),g=/*#__PURE__*/e(\"workerSourceURL\"),_=/*#__PURE__*/e(\"workerConfig\"),w=/*#__PURE__*/e(\"supportedFileTypes\"),C=/*#__PURE__*/e(\"withCredentials\"),S=/*#__PURE__*/e(\"initTranscoder\"),y=/*#__PURE__*/function(){function t(t){Object.defineProperty(this,S,{value:F}),Object.defineProperty(this,p,{writable:!0,value:void 0}),Object.defineProperty(this,m,{writable:!0,value:void 0}),Object.defineProperty(this,v,{writable:!0,value:void 0}),Object.defineProperty(this,T,{writable:!0,value:void 0}),Object.defineProperty(this,g,{writable:!0,value:void 0}),Object.defineProperty(this,_,{writable:!0,value:void 0}),Object.defineProperty(this,w,{writable:!0,value:void 0}),Object.defineProperty(this,C,{writable:!0,value:void 0}),r(this,p)[p]=t.transcoderPath||\"https://cdn.jsdelivr.net/npm/@xeokit/sdk/dist/basis/\",r(this,m)[m]=null,r(this,v)[v]=null,r(this,T)[T]=new a,r(this,g)[g]=\"\",t.workerLimit&&r(this,T)[T].setWorkerLimit(t.workerLimit),r(this,_)[_]=null,r(this,C)[C]=!1,r(this,w)[w]=[\"xkt2\"]}var e=t.prototype;return e.init=function(t){r(this,_)[_]={astcSupported:t.astcSupported,etc1Supported:t.etc1Supported,etc2Supported:t.etc2Supported,dxtSupported:t.dxtSupported,bptcSupported:t.bptcSupported,pvrtcSupported:t.pvrtcSupported}},e.transcode=function(t,e){var o=this;return void 0===e&&(e={}),new Promise(function(i,s){var n=e;r(o,S)[S]().then(function(){return r(o,T)[T].postMessage({type:\"transcode\",buffers:t,taskConfig:n},t)}).then(function(t){var e=t.data,r=e.mipmaps,o=e.format,n=e.dfdTransferFn,a=e.dfdFlags;if(\"error\"===e.type)return s(e.error);i({mipmaps:r,props:{format:o,minFilter:1===r.length?1006:1008,magFilter:1===r.length?1006:1008,encoding:2===n?3001:3e3,premultiplyAlpha:!!(1&a)}})})})},e.destroy=function(){URL.revokeObjectURL(r(this,g)[g]),r(this,T)[T].destroy(),u--},t}();function F(){var t=this;if(!r(this,v)[v]){var e=new h;e.setPath(r(this,p)[p]),e.setWithCredentials(r(this,C)[C]);var o=e.loadAsync(\"basis_transcoder.js\"),i=new h;i.setPath(r(this,p)[p]),i.setResponseType(\"arraybuffer\"),i.setWithCredentials(r(this,C)[C]);var s=i.loadAsync(\"basis_transcoder.wasm\");r(this,v)[v]=Promise.all([o,s]).then(function(e){var o=e[0],i=e[1],s=P.toString(),n=[\"/* constants */\",\"let _EngineFormat = \"+JSON.stringify(l),\"let _TranscoderFormat = \"+JSON.stringify(f),\"let _BasisFormat = \"+JSON.stringify(c),\"/* basis_transcoder.js */\",o,\"/* worker */\",s.substring(s.indexOf(\"{\")+1,s.lastIndexOf(\"}\"))].join(\"\\n\");r(t,g)[g]=URL.createObjectURL(new Blob([n])),r(t,m)[m]=i,r(t,T)[T].setWorkerCreator(function(){var e=new Worker(r(t,g)[g]),o=r(t,m)[m].slice(0);return e.postMessage({type:\"init\",config:r(t,_)[_],transcoderBinary:o},[o]),e})}),u>0&&console.warn(\"KTX2TextureTranscoder: Multiple active KTX2TextureTranscoder may cause performance issues. Use a single KTX2TextureTranscoder instance, or call .dispose() on old instances.\"),u++}return r(this,v)[v]}var P=function(){var t,e,r,o=_EngineFormat,i=_TranscoderFormat,s=_BasisFormat;self.addEventListener(\"message\",function(n){var u,c=n.data;switch(c.type){case\"init\":t=c.config,u=c.transcoderBinary,e=new Promise(function(t){r={wasmBinary:u,onRuntimeInitialized:t},BASIS(r)}).then(function(){r.initializeBasis(),void 0===r.KTX2File&&console.warn(\"KTX2TextureTranscoder: Please update Basis Universal transcoder.\")});break;case\"transcode\":e.then(function(){try{for(var e=function(e){var n=new r.KTX2File(new Uint8Array(e));function u(){n.close(),n.delete()}if(!n.isValid())throw u(),new Error(\"KTX2TextureTranscoder: Invalid or unsupported .ktx2 file\");var c=n.isUASTC()?s.UASTC_4x4:s.ETC1S,f=n.getWidth(),l=n.getHeight(),p=n.getLevels(),m=n.getHasAlpha(),v=n.getDFDTransferFunc(),T=n.getDFDFlags(),g=function(e,r,n,u){for(var c=e===s.ETC1S?a:d,f=0;f<c.length;f++){var l=c[f];if(t[l.if]&&l.basisFormat.includes(e)&&!(u&&l.transcoderFormat.length<2)&&(!l.needsPowerOfTwo||h(r)&&h(n)))return{transcoderFormat:l.transcoderFormat[u?1:0],engineFormat:l.engineFormat[u?1:0]}}return console.warn(\"KTX2TextureTranscoder: No suitable compressed texture format found. Decoding to RGBA32.\"),{transcoderFormat:i.RGBA32,engineFormat:o.RGBAFormat}}(c,f,l,m),_=g.transcoderFormat,w=g.engineFormat;if(!f||!l||!p)throw u(),new Error(\"KTX2TextureTranscoder: Invalid texture\");if(!n.startTranscoding())throw u(),new Error(\"KTX2TextureTranscoder: .startTranscoding failed\");for(var C=[],S=0;S<p;S++){var y=n.getImageLevelInfo(S,0,0),F=y.origWidth,P=y.origHeight,R=new Uint8Array(n.getImageTranscodedSizeInBytes(S,0,0,_));if(!n.transcodeImage(R,S,0,0,_,0,-1,-1))throw u(),new Error(\"KTX2TextureTranscoder: .transcodeImage failed.\");C.push({data:R,width:F,height:P})}return u(),{width:f,height:l,hasAlpha:m,mipmaps:C,format:w,dfdTransferFn:v,dfdFlags:T}}(c.buffers[0]),n=e.width,u=e.height,f=e.hasAlpha,l=e.mipmaps,p=e.format,m=e.dfdTransferFn,v=e.dfdFlags,T=[],g=0;g<l.length;++g)T.push(l[g].data.buffer);self.postMessage({type:\"transcode\",id:c.id,width:n,height:u,hasAlpha:f,mipmaps:l,format:p,dfdTransferFn:m,dfdFlags:v},T)}catch(t){console.error(\"[BasisWorker]: \"+t),self.postMessage({type:\"error\",id:c.id,error:t.message})}})}});var n=[{if:\"astcSupported\",basisFormat:[s.UASTC_4x4],transcoderFormat:[i.ASTC_4x4,i.ASTC_4x4],engineFormat:[o.RGBA_ASTC_4x4_Format,o.RGBA_ASTC_4x4_Format],priorityETC1S:Infinity,priorityUASTC:1,needsPowerOfTwo:!1},{if:\"bptcSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.BC7_M5,i.BC7_M5],engineFormat:[o.RGBA_BPTC_Format,o.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{if:\"dxtSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.BC1,i.BC3],engineFormat:[o.RGB_S3TC_DXT1_Format,o.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{if:\"etc2Supported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.ETC1,i.ETC2],engineFormat:[o.RGB_ETC2_Format,o.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{if:\"etc1Supported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.ETC1],engineFormat:[o.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{if:\"pvrtcSupported\",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[i.PVRTC1_4_RGB,i.PVRTC1_4_RGBA],engineFormat:[o.RGB_PVRTC_4BPPV1_Format,o.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0}],a=n.sort(function(t,e){return t.priorityETC1S-e.priorityETC1S}),d=n.sort(function(t,e){return t.priorityUASTC-e.priorityUASTC});function h(t){return t<=2||0==(t&t-1)&&0!==t}};export{y as KTX2TextureTranscoder};\n//# sourceMappingURL=index.es.map\n","import type {View, Viewer} from \"@xeokit/viewer\";\nimport {GLAbstractTexture, GLDataTexture, WEBGL_INFO} from \"@xeokit/webglutils\";\n\n\n\n/**\n * Provides rendering context within a WebGLRenderer.\n */\nexport class RenderContext {\n\n    /**\n     * The Viewer.\n     */\n    public viewer: Viewer;\n\n    /**\n     * The View we are rendering.\n     */\n    public view: View;\n\n    /**\n     * The WebGL rendering context.\n     */\n    public gl: WebGL2RenderingContext;\n\n    public viewMatrixDataTexture: GLDataTexture;\n\n    /**\n     * Whether to render a quality representation for triangle surfaces.\n     *\n     * When ````false````, we'll render them with a fast vertex-shaded Gouraud-shaded representation, which\n     * is great for zillions of objects.\n     *\n     * When ````true````, we'll render them at a better visual quality, using smooth, per-fragment shading\n     * and a more realistic lighting model.\n     */\n    public pbrEnabled: boolean;\n\n    /**\n     * Whether SAO is currently enabled during the current frame.\n     */\n    public withSAO: boolean;\n\n    /**\n     * Whether backfaces are currently enabled during the current frame.\n     */\n    public backfaces: boolean;\n\n    /**\n     * The vertex winding order for what we currently consider to be a backface during current\n     * frame: true == \"cw\", false == \"ccw\".\n     */\n    public frontface: boolean;\n\n    /**\n     * The next available texture unit to bind a {@link GLAbstractTexture} to.\n     */\n    public textureUnit: number;\n\n    /**\n     * Statistic that counts how many times ````gl.bindTexture()```` has been called so far within the current frame.\n     */\n    public bindTexture: number;\n\n    /**\n     * Indicates which pass the renderer is currently rendering.\n     */\n    public renderPass: number;\n\n    /**\n     * The 4x4 viewing transform matrix the renderer is currently using when rendering castsShadows.\n     *\n     * This sets the viewpoint to look from the point of view of each {@link DirLight}\n     * or {@link PointLight} that casts a shadow.\n     */\n    public shadowViewMatrix: any;\n\n    /**\n     * The 4x4 viewing projection matrix the renderer is currently using when rendering shadows.\n     */\n    public shadowProjMatrix: any;\n\n    /**\n     * The 4x4 viewing transform matrix the renderer is currently using when rendering a ray-pick.\n     *\n     * This sets the viewpoint to look along the ray given to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}\n     * when picking with a ray.\n     */\n    public pickViewMatrix: any;\n\n    /**\n     * The 4x4 orthographic projection transform matrix the renderer is currently using when rendering a ray-pick.\n     */\n    public pickProjMatrix: any;\n\n    /**\n     * Distance to the near clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n     */\n    public pickZNear: number;\n\n    /**\n     * Distance to the far clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n     */\n    public pickZFar: number;\n\n    /**\n     * Whether or not the renderer is currently picking invisible objects.\n     */\n    public pickInvisible: boolean;\n\n    /** The current line width.\n     */\n    public lineWidth: number;\n\n    /**\n     * ID of the last {@link WebGLProgram} that was bound during the current frame.\n     */\n    public lastProgramId: number;\n\n    /**\n     * The occlusion rendering texture.\n     */\n    public occlusionTexture: GLAbstractTexture | null;\n\n    constructor(viewer: Viewer, view: View, gl: WebGL2RenderingContext) {\n        this.viewer = viewer;\n        this.view = view;\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Called by the renderer before each frame.\n     */\n    reset() {\n        this.lastProgramId = -1;\n        this.pbrEnabled = false;\n        this.withSAO = false;\n        this.backfaces = false;\n        this.frontface = true;\n        this.textureUnit = 0;\n        this.shadowViewMatrix = null;\n        this.shadowProjMatrix = null;\n        this.pickViewMatrix = null;\n        this.pickProjMatrix = null;\n        this.pickZNear = 0.01;\n        this.pickZFar = 5000;\n        this.pickInvisible = false;\n        this.lineWidth = 1;\n        this.occlusionTexture = null;\n    }\n\n    /**\n     * Gets the next available texture unit for this render\n     */\n    get nextTextureUnit() {\n        const textureUnit = this.textureUnit;\n        this.textureUnit = (this.textureUnit + 1) % WEBGL_INFO.MAX_TEXTURE_UNITS;\n        return textureUnit;\n    }\n}\n","\n/**\n * @private\n */\nexport const RENDER_PASSES = {\n\n    // Skipped - suppress rendering\n\n    NOT_RENDERED: 0,\n\n    // Normal rendering - mutually exclusive modes\n\n    COLOR_OPAQUE: 1,\n    COLOR_TRANSPARENT: 2,\n\n    // Emphasis silhouette rendering - mutually exclusive modes\n\n    SILHOUETTE_HIGHLIGHTED: 3,\n    SILHOUETTE_SELECTED: 4,\n    SILHOUETTE_XRAYED: 5,\n\n    // Edges rendering - mutually exclusive modes\n\n    EDGES_COLOR_OPAQUE: 6,\n    EDGES_COLOR_TRANSPARENT: 7,\n    EDGES_HIGHLIGHTED: 8,\n    EDGES_SELECTED: 9,\n    EDGES_XRAYED: 10,\n\n    // Picking\n\n    PICK: 11\n};\n\n","import {createVec4} from \"@xeokit/matrix\";\nimport {OrthoProjectionType} from \"@xeokit/constants\";\nimport {AmbientLight, DirLight, PerspectiveProjection, PointLight} from \"@xeokit/viewer\";\n\nimport type {RenderContext} from \"./RenderContext\";\nimport {RENDER_PASSES} from \"./RENDER_PASSES\";\nimport type {Layer} from \"./Layer\";\nimport {GLProgram, GLSampler} from \"@xeokit/webglutils\";\n\nconst tempVec4 = createVec4();\n\n/**\n * @private\n */\nexport abstract class LayerRenderer {\n\n    /**\n     * Initialization error messages\n     */\n    errors: string[] | undefined;\n\n    protected renderContext: RenderContext;\n\n    #hash: string;\n    #program: GLProgram | null;\n    #needRebuild: boolean;\n\n    #uniforms: {\n        renderPass: WebGLUniformLocation,\n        viewMatrix: WebGLUniformLocation,\n        projMatrix: WebGLUniformLocation,\n        worldMatrix: WebGLUniformLocation,\n        sectionPlanes: {\n            pos: WebGLUniformLocation,\n            dir: WebGLUniformLocation,\n            active: WebGLUniformLocation\n        }[];\n        lights: {\n            pos?: WebGLUniformLocation,\n            dir?: WebGLUniformLocation,\n            color: WebGLUniformLocation,\n            attenuation?: WebGLUniformLocation\n        }[];\n        pickInvisible: WebGLUniformLocation;\n        pickZFar: WebGLUniformLocation;\n        pickZNear: WebGLUniformLocation;\n        pointCloudIntensityRange: WebGLUniformLocation;\n        nearPlaneHeight: WebGLUniformLocation;\n        pointSize: WebGLUniformLocation;\n        gammaFactor: WebGLUniformLocation;\n        logDepthBufFC: WebGLUniformLocation;\n        sao: WebGLUniformLocation;\n        lightAmbient: WebGLUniformLocation;\n        color: WebGLUniformLocation;\n    }\n\n    #samplers: {\n        viewMatrices: GLSampler;\n        positions: GLSampler;\n        indices: GLSampler;\n        edgeIndices: GLSampler;\n        eachMeshMatrices: GLSampler;\n        eachMeshAttributes: GLSampler;\n        //    eachMeshOffsets: GLSampler;\n        eachEdgeOffset: GLSampler;\n        eachPrimitiveMesh: GLSampler;\n        eachEdgeMesh: GLSampler;\n        baseColorMap: GLSampler;\n        metallicRoughMap: GLSampler;\n        emissiveMap: GLSampler;\n        normalMap: GLSampler;\n        occlusionMap: GLSampler;\n    };\n\n    protected constructor(renderContext: RenderContext) {\n        this.renderContext = renderContext;\n        this.#needRebuild = true;\n        this.#build();\n    }\n\n    #build(): void {\n\n        const view = this.renderContext.view;\n        const gl = this.renderContext.gl;\n\n        this.#program = new GLProgram(gl, this.#buildShader());\n\n        if (this.#program.errors) {\n            this.errors = this.#program.errors;\n            return;\n        }\n\n        const program = this.#program;\n\n        this.#uniforms = {\n            renderPass: program.getLocation(\"renderPass\"),\n            viewMatrix: program.getLocation(\"viewMatrix\"),\n            projMatrix: program.getLocation(\"projMatrix\"),\n            worldMatrix: program.getLocation(\"worldMatrix\"),\n            sao: program.getLocation(\"sao\"),\n            logDepthBufFC: program.getLocation(\"logDepthBufFC\"),\n            gammaFactor: program.getLocation(\"gammaFactor\"),\n            pointSize: program.getLocation(\"pointSize\"),\n            nearPlaneHeight: program.getLocation(\"nearPlaneHeight\"),\n            pointCloudIntensityRange: program.getLocation(\"pointCloudIntensityRange\"),\n            pickZNear: program.getLocation(\"pickZNear\"),\n            pickZFar: program.getLocation(\"pickZFar\"),\n            pickInvisible: program.getLocation(\"pickInvisible\"),\n            color: program.getLocation(\"color\"),\n            lightAmbient: program.getLocation(\"lightAmbient\"),\n            lights: [],\n            sectionPlanes: []\n        };\n\n        const uniforms = this.#uniforms;\n\n        const lights = view.lightsList;\n        for (let i = 0, len = lights.length; i < len; i++) {\n            const light: any = lights[i];\n            switch (light.type) {\n                case \"dir\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        dir: program.getLocation(\"lightDir\" + i)\n                    });\n                    break;\n                case \"point\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        pos: program.getLocation(\"lightPos\" + i),\n                        attenuation: program.getLocation(\"lightAttenuation\" + i)\n                    });\n                    break;\n                case \"spot\":\n                    uniforms.lights.push({\n                        color: program.getLocation(\"lightColor\" + i),\n                        pos: program.getLocation(\"lightPos\" + i),\n                        dir: program.getLocation(\"lightDir\" + i),\n                        attenuation: program.getLocation(\"lightAttenuation\" + i)\n                    });\n                    break;\n            }\n        }\n\n        for (let i = 0, len = view.sectionPlanesList.length; i < len; i++) {\n            uniforms.sectionPlanes.push({\n                active: program.getLocation(\"sectionPlaneActive\" + i),\n                pos: program.getLocation(\"sectionPlanePos\" + i),\n                dir: program.getLocation(\"sectionPlaneDir\" + i)\n            });\n        }\n\n        this.#samplers = {\n            viewMatrices: program.getSampler(\"viewMatrices\"),\n            positions: program.getSampler(\"positions\"),\n            indices: program.getSampler(\"indices\"),\n            edgeIndices: program.getSampler(\"edgeIndices\"),\n            eachMeshAttributes: program.getSampler(\"eachMeshAttributes\"),\n            eachMeshMatrices: program.getSampler(\"eachMeshMatrices\"),\n            eachEdgeOffset: program.getSampler(\"eachMeshOffset\"),\n            eachPrimitiveMesh: program.getSampler(\"eachMeshTriangleMesh\"),\n            eachEdgeMesh: program.getSampler(\"eachEdgeMesh\"),\n            baseColorMap: program.getSampler(\"baseColorMap\"),\n            metallicRoughMap: program.getSampler(\"metallicRoughMap\"),\n            emissiveMap: program.getSampler(\"emissiveMap\"),\n            normalMap: program.getSampler(\"normalMap\"),\n            occlusionMap: program.getSampler(\"occlusionMap\")\n        };\n\n        this.#hash = this.getHash();\n    }\n\n    #buildShader() {\n        return {\n            vertex: this.buildVertexShader(),\n            fragment: this.buildFragmentShader()\n        };\n    }\n\n    /**\n     * Generates vertex shader GLSL for the current View state\n     */\n    protected abstract buildVertexShader(): string;\n\n    /**\n     * Generates fragment shader GLSL for the current View state\n     */\n    protected abstract buildFragmentShader(): string;\n\n    /**\n     * Gets a hash for the View's current configuration as pertaining to the LayerRenderer.\n     */\n    protected abstract getHash(): string;\n\n    /**\n     * Indicates that the LayerRenderer may need to rebuild shaders\n     */\n    needRebuild() {\n        this.#needRebuild = true;\n    }\n\n    /**\n     * Gets if this LayerRenderer's configuration is still valid for the current View state.\n     */\n    #getValid() {\n        if (!this.#needRebuild) {\n            return true;\n        }\n        this.#needRebuild = false;\n        return this.#hash === this.getHash();\n    };\n\n    /**\n     * Draws the given Layer.\n     *\n     * @param layer The Layer to draw\n     */\n    draw(layer: Layer) {\n\n        if (this.#program && !this.#getValid()) {\n            this.#program.destroy();\n            this.#program = null;\n        }\n\n        if (!this.#program) {\n            this.#build();\n            if (this.errors) {\n                return;\n            }\n            this.renderContext.lastProgramId = -1;\n        }\n\n        const renderState = layer.renderState;\n        const program = this.#program;\n        const renderContext = this.renderContext;\n        const renderPass = renderContext.renderPass;\n        const gl = this.renderContext.gl;\n        const view = this.renderContext.view;\n        const uniforms = this.#uniforms;\n        const samplers = this.#samplers;\n\n        // @ts-ignore\n        if (renderContext.lastProgramId !== program.id) {\n            // @ts-ignore\n            renderContext.lastProgramId = program.id;\n            this.#bind();\n        }\n\n        if (uniforms.renderPass) {\n            gl.uniform1i(uniforms.renderPass, renderPass);\n        }\n\n        // if (uniforms.viewMatrix) {\n        //     //gl.uniformMatrix4fv(uniforms.viewMatrix, false, <Float32Array | GLfloat[]>layer.rtcViewMat.viewMatrix);\n        //     gl.uniformMatrix4fv(uniforms.viewMatrix, false, <Float32Array | GLfloat[]>view.camera.viewMatrix);\n        // }\n\n        if (uniforms.projMatrix) {\n            gl.uniformMatrix4fv(uniforms.projMatrix, false, <Float32Array | GLfloat[]>view.camera.projMatrix);\n        }\n\n        if (uniforms.worldMatrix) {\n            gl.uniformMatrix4fv(uniforms.worldMatrix, false, <Float32Array | GLfloat[]>layer.rendererModel.worldMatrix);\n        }\n\n        if (uniforms.color) {\n            if (renderPass === RENDER_PASSES.SILHOUETTE_XRAYED) {\n                const material = view.xrayMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else if (renderPass === RENDER_PASSES.SILHOUETTE_HIGHLIGHTED) {\n                const material = view.highlightMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else if (renderPass === RENDER_PASSES.SILHOUETTE_SELECTED) {\n                const material = view.selectedMaterial;\n                const fillColor = material.fillColor;\n                const fillAlpha = material.fillAlpha;\n                gl.uniform4f(uniforms.color, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n\n            } else {\n                gl.uniform4fv(uniforms.color, new Float32Array([1, 1, 1]));\n            }\n        }\n\n        // if (view.sectionPlanesList.length) {\n        //     const numSectionPlanes = view.sectionPlanesList.length;\n        //     const origin = layer.renderState.origin;\n        //     const sectionPlanes = view.sectionPlanesList;\n        //     const baseIndex = layer.layerIndex * numSectionPlanes;\n        //     const drawFlags = rendererModel.drawFlags;\n        //     for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n        //         const sectionPlaneUniforms = this.#uniforms.sectionPlanes[sectionPlaneIndex];\n        //         if (sectionPlaneUniforms) {\n        //             const active = drawFlags.sectionPlanesActivePerLayer[baseIndex + sectionPlaneIndex];\n        //             gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n        //             if (active) {\n        //                 const sectionPlane = sectionPlanes[sectionPlaneIndex];\n        //                 if (origin) {\n        //                     const rtcSectionPlanePos = rtc.getPlaneRTCPos(sectionPlane.dist, sectionPlane.dir, origin, tempVec3a);\n        //                     gl.uniform3fv(sectionPlaneUniforms.pos, rtcSectionPlanePos);\n        //                 } else {\n        //                     gl.uniform3fv(sectionPlaneUniforms.pos, sectionPlane.pos);\n        //                 }\n        //                 gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n        //             }\n        //         }\n        //     }\n        // }\n\n        if (samplers.viewMatrices) {\n            // @ts-ignore\n            renderState.dataTextureSet.viewMatrices.bindTexture(program, samplers.viewMatrices, renderContext.nextTextureUnit);\n        }\n        if (samplers.positions) {\n            // @ts-ignore\n            renderState.dataTextureSet.positions.bindTexture(program, samplers.positions, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachMeshMatrices) {\n            // @ts-ignore\n            renderState.dataTextureSet.eachMeshMatrices.bindTexture(program, samplers.eachMeshMatrices, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachMeshAttributes) {\n            // @ts-ignore\n            renderState.dataTextureSet.eachMeshAttributes.bindTexture(program, samplers.eachMeshAttributes, renderContext.nextTextureUnit);\n        }\n        if (samplers.eachPrimitiveMesh) {\n            if (renderState.numIndices8Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_8Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_8Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices8Bits);\n            }\n            if (renderState.numIndices16Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_16Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_16Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices16Bits);\n            }\n            if (renderState.numIndices32Bits > 0) {\n                // @ts-ignore\n                renderState.dataTextureSet.eachPrimitiveMesh_32Bits.bindTexture(program, samplers.eachPrimitiveMesh, renderContext.nextTextureUnit);\n                // @ts-ignore\n                renderState.dataTextureSet.indices_32Bits.bindTexture(program, samplers.indices, renderContext.nextTextureUnit);\n                gl.drawArrays(gl.TRIANGLES, 0, renderState.numIndices32Bits);\n            }\n        }\n        if (samplers.baseColorMap) {\n            samplers.baseColorMap.bindTexture(renderState.materialTextureSet.colorTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.metallicRoughMap) {\n            samplers.metallicRoughMap.bindTexture(renderState.materialTextureSet.metallicRoughnessTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.emissiveMap) {\n            samplers.emissiveMap.bindTexture(renderState.materialTextureSet.emissiveTexture.texture2D, renderContext.nextTextureUnit);\n        }\n        if (samplers.occlusionMap) {\n            samplers.occlusionMap.bindTexture(renderState.materialTextureSet.occlusionTexture.texture2D, renderContext.nextTextureUnit);\n        }\n    }\n\n    #bind() {\n\n        const view = this.renderContext.view;\n        const gl = this.renderContext.gl;\n        const uniforms = this.#uniforms;\n        const project = view.camera.project;\n\n        // @ts-ignore\n        this.#program.bind();\n        // if (this.#uProjMatrix) {\n        //     gl.uniformMatrix4fv(this.#uProjMatrix, false, project.matrix);\n        // }\n        if (uniforms.lightAmbient) {      // @ts-ignore\n            gl.uniform4fv(uniforms.lightAmbient, view.getAmbientColorAndIntensity());\n        }\n        for (let i = 0, len = uniforms.lights.length; i < len; i++) {\n            const fragLightSourceUniforms = uniforms.lights[i];\n            const light = view.lightsList[i];\n            if (fragLightSourceUniforms.color) {\n                gl.uniform4f(fragLightSourceUniforms.color, light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (fragLightSourceUniforms.dir) { // @ts-ignore\n                gl.uniform3f(fragLightSourceUniforms.dir, light.dir[0], light.dir[1], light.dir[2]);\n            }\n            if (fragLightSourceUniforms.pos) { // @ts-ignore\n                gl.uniform3f(fragLightSourceUniforms.pos, light.pos[0], light.pos[1], light.pos[2]);\n            }\n            if (fragLightSourceUniforms.attenuation) { // @ts-ignore\n                gl.uniform1f(fragLightSourceUniforms.attenuation, light.attenuation);\n            }\n        }\n        if (uniforms.sao) {\n            const sao = view.sao;\n            const saoEnabled = sao.possible;\n            if (saoEnabled) {\n                const viewportWidth = gl.drawingBufferWidth;\n                const viewportHeight = gl.drawingBufferHeight;\n                tempVec4[0] = viewportWidth;\n                tempVec4[1] = viewportHeight;\n                tempVec4[2] = sao.blendCutoff;\n                tempVec4[3] = sao.blendFactor;\n                // @ts-ignore\n                gl.uniform4fv(uniforms.sao, tempVec4);\n                // program.bindTexture(this.#uOcclusionTexture, renderContext.occlusionTexture, 0);\n            }\n        }\n        if (uniforms.gammaFactor) {\n            gl.uniform1f(uniforms.gammaFactor, view.gammaFactor);\n        }\n        if (uniforms.pointSize) {\n            gl.uniform1f(uniforms.pointSize, view.pointsMaterial.pointSize);\n        }\n        if (uniforms.nearPlaneHeight) {\n            gl.uniform1f(uniforms.nearPlaneHeight, (view.camera.projectionType === OrthoProjectionType) ? 1.0 : (gl.drawingBufferHeight / (2 * Math.tan(0.5 * view.camera.perspectiveProjection.fov * Math.PI / 180.0))));\n        }\n        if (uniforms.pickZNear) {\n            gl.uniform1f(uniforms.pickZNear, this.renderContext.pickZNear);\n            gl.uniform1f(uniforms.pickZFar, this.renderContext.pickZFar);\n        }\n        if (uniforms.pickInvisible) {\n            gl.uniform1i(uniforms.pickInvisible, this.renderContext.pickInvisible ? 1 : 0);\n        }\n        if (uniforms.logDepthBufFC) {\n            const logDepthBufFC = 2.0 / (Math.log((project as PerspectiveProjection).far + 1.0) / Math.LN2);\n            gl.uniform1f(uniforms.logDepthBufFC, logDepthBufFC);\n        }\n    }\n\n    // protected get vertexShader(): string {\n    //     return `${this.vertHeader}\n    //     ${this.vertDataTextureDefs}\n    //     ${this.vertLogDepthBufDefs}\n    //     void main(void) {\n    //             ${this.vertDataTextureSamples}\n    //             ${this.vertLogDepthBufOutputs}\n    //     }`;\n    // }\n\n    protected get vertHeader(): string {\n        return `#version 300 es\n                #ifdef GL_FRAGMENT_PRECISION_HIGH\n                precision highp float;\n                precision highp int;\n                precision highp usampler2D;\n                precision highp isampler2D;\n                precision highp sampler2D;\n                #else\n                precision mediump float;\n                precision mediump int;\n                precision mediump usampler2D;\n                precision mediump isampler2D;\n                precision mediump sampler2D;\n                uniform int renderPass;\n                #endif`;\n    }\n\n    protected get vertDataTextureDefs(): string {\n        return `uniform mediump sampler2D eachMeshMatrices;\n                uniform lowp usampler2D eachMeshAttributes;\n                uniform highp sampler2D eachMeshOffset;\n                uniform mediump usampler2D positions;\n                uniform highp usampler2D indices;\n                uniform mediump usampler2D eachPrimitiveMesh;\n                uniform highp sampler2D cameraMatrices;\n                uniform highp sampler2D sceneModelRendererMatrices;`;\n    }\n\n    protected get vertLogDepthBufDefs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `uniform float logDepthBufFC;\n                    out float fragDepth;\n                    bool isPerspectiveMatrix(mat4 m) {\n                        return (m[2][3] == - 1.0);\n                    }\n                    out float isPerspective;`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get vertDataTextureSamples(): string {\n        return \"\";\n    }\n\n    protected get vertLogDepthBufOutputs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `fragDepth = 1.0 + clipPos.w;\n                    isPerspective = float (isPerspectiveMatrix(projMatrix));`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragmentShader(): string {\n        return `${this.fragHeader}\n        ${this.fragGammaDefs}\n        ${this.fragSectionPlaneDefs}\n        ${this.fragLightDefs}\n        ${this.fragLogDepthBufDefs}\n        void main(void) {\n            ${this.fragSectionPlanesSlice}\n            ${this.fragLighting}\n            ${this.fragLogDepthBufOutput}\n        }`;\n    }\n\n    protected get fragHeader(): string {\n        return `#version 300 es\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n       precision highp float;\n        precision highp int;\n        #else\n        precision mediump float;\n        precision mediump int;\n        #endif`;\n    }\n\n    protected get fragGammaDefs(): string {\n        return `uniform float gammaFactor;\n        vec4 linearToLinear( in vec4 value ) {\n            return value;\n        }\n        vec4 sRGBToLinear( in vec4 value ) {\n            return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n        }\n        vec4 gammaToLinear( in vec4 value) {\n            return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n        }\n        vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\n              return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        }`;\n    }\n\n    protected get fragLightDefs(): string {\n        const view = this.renderContext.view;\n        const src = [];\n        src.push(\"uniform vec4 lightAmbient;\");\n        for (let i = 0, len = view.lightsList.length; i < len; i++) {\n            const light: any = view.lightsList[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragLogDepthBufDefs(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return `in float isPerspective;\n                    uniform float logDepthBufFC;\n                    in float fragDepth;`;\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragLogDepthBufOutput(): string {\n        if (this.renderContext.view.logarithmicDepthBufferEnabled) {\n            return \"gl_FragDepth = isPerspective == 0.0 ? gl_FragCoord.z : log2( fragDepth ) * logDepthBufFC * 0.5;\";\n        } else {\n            return \"\"\n        }\n    }\n\n    protected get fragLighting(): string {\n        const src = [];\n        src.push(\"vec4 viewPosition  = viewMatrix * worldPosition; \");\n        src.push(\"vec4 modelNormal = vec4(octDecode(normal.xy), 0.0); \");\n        src.push(\"vec4 worldNormal = worldNormalMatrix * vec4(dot(modelNormal, modelNormalMatrixCol0), dot(modelNormal, modelNormalMatrixCol1), dot(modelNormal, modelNormalMatrixCol2), 0.0);\");\n        src.push(\"vec3 viewNormal = normalize(vec4(viewNormalMatrix * worldNormal).xyz);\");\n        src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n        src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n        src.push(\"float lambertian = 1.0;\");\n\n        for (let i = 0, len = this.renderContext.view.lightsList.length; i < len; i++) {\n            const light: any = this.renderContext.view.lightsList[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = -normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = -normalize((viewMatrix * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"spot\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n        src.push(\"vec3 rgb = (vec3(float(color.r) / 255.0, float(color.g) / 255.0, float(color.b) / 255.0));\");\n        src.push(\"meshColor =  vec4((lightAmbient.rgb * lightAmbient.a * rgb) + (reflectedColor * rgb), float(color.a) / 255.0);\");\n\n        return src.join(\"\\n\");\n    }\n\n    protected get fragSAOOutput(): string {\n        if (this.renderContext.view.sao.enabled) {\n            // Doing SAO blend in the main solid fill draw shader just so that edge lines can be drawn over the top\n            // Would be more efficient to defer this, then render lines later, using same depth buffer for Z-reject\n            return `float viewportWidth     = uSAOParams[0];\n                    float viewportHeight    = uSAOParams[1];\n                    float blendCutoff       = uSAOParams[2];\n                    float blendFactor       = uSAOParams[3];\n                    vec2 uv                 = vec2(gl_FragCoord.x / viewportWidth, gl_FragCoord.y / viewportHeight);\n                    float ambient           = smoothstep(blendCutoff, 1.0, unpackRGBToFloat(texture(uOcclusionTexture, uv))) * blendFactor;\n                    outColor                = vec4(fragColor.rgb * ambient, 1.0);`;\n        } else {\n            return `outColor            = fragColor;`;\n        }\n    }\n\n    protected get fragOutput(): string {\n        return `outColor            = fragColor;`;\n    }\n\n\n    protected get fragSectionPlaneDefs(): string {\n        const src = [];\n        src.push(`in vec4 worldPosition;\n                  in vec4 meshFlags2;`);\n        for (let i = 0, len = this.renderContext.view.sectionPlanesList.length; i < len; i++) {\n            src.push(`uniform bool sectionPlaneActive${i};\n                      uniform vec3 sectionPlanePos${i};\n                      uniform vec3 sectionPlaneDir${i};`);\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragLightSourceUniforms(): string {\n        const src = [];\n        src.push(`uniform vec4 lightAmbient;`);\n        for (let i = 0, len = this.renderContext.view.lightsList.length; i < len; i++) {\n            const light = this.renderContext.view.lightsList[i];\n            if (light instanceof AmbientLight) {\n                continue;\n            }\n            src.push(`uniform vec4 lightColor${i};`);\n            if (light instanceof DirLight) {\n                src.push(`uniform vec3 lightDir${i};`);\n            }\n            if (light instanceof PointLight) {\n                src.push(`uniform vec3 lightPos${i};`);\n            }\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragSectionPlanesSlice(): string {\n        const src = [];\n        const clipping = (this.renderContext.view.sectionPlanesList.length > 0);\n        if (clipping) {\n            src.push(`bool clippable = (float(meshFlags2.x) > 0.0);\n                      if (clippable) {\n                          float dist = 0.0;`);\n            for (let i = 0, len = this.renderContext.view.sectionPlanesList.length; i < len; i++) {\n                src.push(`if (sectionPlaneActive${i}) {\n                              dist += clamp(dot(-sectionPlaneDir${i}.xyz, worldPosition.xyz - sectionPlanePos${i}.xyz), 0.0, 1000.0);\n                          }`);\n            }\n            src.push(`if (dist > 0.0) { \n                          discard;\n                      }\n                  }`);\n        }\n        return src.join(\"\\n\");\n    }\n\n    protected get fragFlatShading(): string {\n        const src = [];\n        src.push(\"\");\n        return src.join(\"\\n\");\n    }\n\n    destroy() {\n        if (this.#program) {\n            this.#program.destroy();\n        }\n        this.#program = null;\n    }\n}\n","import {LayerRenderer} from \"./LayerRenderer\";\nimport type {RenderContext} from \"./RenderContext\";\n\nexport class FastColorTrianglesRenderer extends LayerRenderer {\n\n    constructor(renderContext: RenderContext) {\n        super(renderContext);\n    }\n\n    getHash(): string {\n        return `${this.renderContext.view.getSectionPlanesHash()}-${this.renderContext.view.getLightsHash()}`;\n    }\n\n    buildVertexShader(): string {\n        return `${this.vertHeader}   \n        \n                uniform int                 renderPass;   \n            \n                uniform highp   mat4        projMatrix;\n                uniform highp   mat4        worldMatrix;\n                      \n                uniform mediump sampler2D   viewMatrices;\n                           \n                uniform mediump usampler2D  eachPrimitiveMesh;\n                uniform lowp    usampler2D  eachMeshAttributes;\n                \n                uniform mediump sampler2D   eachMeshMatrices;\n                uniform mediump usampler2D  positions;\n                uniform highp   usampler2D  indices;\n                \n                uniform  float  logDepthBufFC;\n                 \n                out vec4        worldPosition;\n                flat out uint   meshFlags2r;                       \n                flat out uvec4  meshColor;\n                out float       fragDepth;\n                \n                bool isPerspectiveMatrix(mat4 m) {\n                    return (m[2][3] == - 1.0);\n                }\n                \n                out float isPerspective;\n                    \n                void main(void) {\n                                   \n                    int triangleIndex      = gl_VertexID / 3;\n                    \n                    int hPackedMeshIdIndex = (triangleIndex >> 3) & 1023;\n                    int vPackedMeshIdIndex = (triangleIndex >> 3) >> 10;\n                    \n                    int meshIndex          = int(texelFetch(eachPrimitiveMesh, ivec2(hPackedMeshIdIndex, vPackedMeshIdIndex), 0).r);                   \n                    uvec4 meshFlags        = texelFetch (eachMeshAttributes, ivec2(2, meshIndex), 0);\n\n                    if (int(meshFlags.x) != renderPass) {\n                        gl_Position = vec4(3.0, 3.0, 3.0, 1.0);\n                        return;\n                    } \n                 \n                    uvec4 meshFlags2 = texelFetch (eachMeshAttributes, ivec2(3, meshIndex), 0);\n\n                    ivec4 packedVertexBase = ivec4(texelFetch (eachMeshAttributes, ivec2(4, meshIndex), 0));\n                    ivec4 packedIndexBaseOffset = ivec4(texelFetch (eachMeshAttributes, ivec2(5, meshIndex), 0));\n                    int indexBaseOffset =   (packedIndexBaseOffset.r << 24) + \n                                            (packedIndexBaseOffset.g << 16) + \n                                            (packedIndexBaseOffset.b << 8) + \n                                            (packedIndexBaseOffset.a);\n\n                    int hIndex = (triangleIndex - indexBaseOffset) & 1023;\n                    int vIndex = (triangleIndex - indexBaseOffset) >> 10;\n\n                    ivec3 vertexIndices = ivec3(texelFetch(indices, ivec2(hIndex, vIndex), 0));\n                    ivec3 uniqueVertexIndexes = vertexIndices + (packedVertexBase.r << 24) + (packedVertexBase.g << 16) + (packedVertexBase.b << 8) + packedVertexBase.a;\n\n                    ivec3 indexPositionH = uniqueVertexIndexes & 1023;\n                    ivec3 indexPositionV = uniqueVertexIndexes >> 10;\n\n                    mat4 positionsDecompressMatrix = mat4 (\n                        texelFetch (eachMeshMatrices, ivec2(0, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(1, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(2, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(3, meshIndex), 0));\n                        \n                    mat4 meshMatrix = mat4 (\n                        texelFetch (eachMeshMatrices, ivec2(4, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(5, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(6, meshIndex), 0), \n                        texelFetch (eachMeshMatrices, ivec2(7, meshIndex), 0));\n\n                    ivec4 packedViewMatrixIndex = ivec4(texelFetch (eachMeshAttributes, ivec2(7, meshIndex), 0));\n                    int viewMatrixIndex = \n                            (packedViewMatrixIndex.r << 24) + \n                            (packedViewMatrixIndex.g << 16) + \n                            (packedViewMatrixIndex.b << 8) + \n                            (packedViewMatrixIndex.a);\n                   \n                    mat4 viewMatrix = mat4 (\n                        texelFetch (viewMatrices, ivec2(4, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(5, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(6, viewMatrixIndex), 0), \n                        texelFetch (viewMatrices, ivec2(7, viewMatrixIndex), 0));\n\n                    vec3 _positions[3];\n                   \n                    _positions[0] = vec3(texelFetch(positions, ivec2(indexPositionH.r, indexPositionV.r), 0));\n                    _positions[1] = vec3(texelFetch(positions, ivec2(indexPositionH.g, indexPositionV.g), 0));\n                    _positions[2] = vec3(texelFetch(positions, ivec2(indexPositionH.b, indexPositionV.b), 0));\n  \n                    vec3  position       = _positions[gl_VertexID % 3];\n                   \n                    vec4  _worldPosition = worldMatrix * ((meshMatrix * positionsDecompressMatrix) * vec4(position, 1.0)); \n                    vec4  viewPosition   = viewMatrix * _worldPosition;                   \n                    vec4  clipPosition   = projMatrix * viewPosition;\n\n                    meshFlags2r     = meshFlags2.r;                     \n                    meshColor       = texelFetch (eachMeshAttributes, ivec2(0, meshIndex), 0);                          \n                    fragDepth       = 1.0 + clipPosition.w;\n                    isPerspective   = float (isPerspectiveMatrix(projMatrix));\n                    worldPosition   = _worldPosition;                                               \n                    \n                    gl_Position     = clipPosition;\n                }`;\n    }\n\n    buildFragmentShader(): string {\n        return `${this.fragHeader}                        \n    \n             flat   in uvec4    meshColor;\n                in float        fragDepth;\n                in float        isPerspective;    \n                flat in uint    meshFlags2r;        \n                uniform float   logDepthBufFC;                        \n    \n                ${this.fragSectionPlaneDefs}                  \n                ${this.fragLightSourceUniforms}                                                             \n    \n                out vec4 outColor;        \n    \n                void main(void) {         \n                \n                // src.push(\"float lambertian = 1.0;\");\n                // \n                //  vec3 xTangent = dFdx( vViewPosition.xyz );\n                //  vec3 yTangent = dFdy( vViewPosition.xyz );\n                // \n                //  vec3 viewNormal = normalize( cross( xTangent, yTangent ) );        \n    \n                    ${this.fragSectionPlanesSlice}                                    \n                    ${this.fragFlatShading}     \n          \n                    outColor = vec4(meshColor);                   \n                    gl_FragDepth = isPerspective == 0.0 ? gl_FragCoord.z : log2( fragDepth ) * logDepthBufFC * 0.5;                        \n                }`;\n    }\n\n    // get lambertianLighting() : string{\n    //     const src = [];\n    //     src.push(\"createVec3 reflectedColor = createVec3(0.0, 0.0, 0.0);\");\n    //     src.push(\"createVec3 viewLightDir = createVec3(0.0, 0.0, -1.0);\");\n    //     src.push(\"float lambertian = 1.0;\");\n    //     for (let i = 0, len = this.view.lightsList.length; i < len; i++) {\n    //         const light = this.view.lightsList[i];\n    //         if (light.type === \"ambient\") {\n    //             continue;\n    //         }\n    //         if (light.type === \"dir\") {\n    //             src.push(\"viewLightDir = normalize((viewMatrix * createVec4(lightDir\" + i + \", 0.0)).xyz);\");\n    //         } else {\n    //             continue;\n    //         }\n    //         src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n    //         src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n    //     }\n    //     return src.join(\"\\n\");\n    // }\n\n}","/**\n * @private\n */\nimport type {GLDataTexture} from \"@xeokit/webglutils\";\n\n\nexport class DataTextureSet {\n\n    positions: GLDataTexture | null; // All quantized positions for a Layer\n    indices_8Bits: GLDataTexture | null; // All 8-bit indices\n    indices_16Bits: GLDataTexture | null; // All 16-bit indices\n    indices_32Bits: GLDataTexture | null; // All 32-bt indices\n    edgeIndices_8Bits: GLDataTexture | null; // All 8-bit edge indices\n    edgeIndices_16Bits: GLDataTexture | null; // All 16-bit edges indices\n    edgeIndices_32Bits: GLDataTexture | null; // All 32-bit edges indices\n    indices: { [key: number]: GLDataTexture | null }; // All 8, 16, and 32-bit indices\n    edgeIndices: { [key: number]: GLDataTexture | null } | null; // All 8, 16 and 32-bit indices\n    eachMeshAttributes: GLDataTexture | null; // For each mesh, a set of attributes including color, opacity, visibility etc\n    eachMeshMatrices: GLDataTexture | null; // For each mesh, a positions decompression matrix and a modeling matrix\n    eachEdgeOffset: GLDataTexture | null;\n    eachPrimitiveMesh_8Bits: GLDataTexture | null;\n    eachPrimitiveMesh_16Bits: GLDataTexture | null;\n    eachPrimitiveMesh_32Bits: GLDataTexture | null;\n    eachPrimitiveMesh: { [key: number]: GLDataTexture | null } | null;\n    eachEdgeMesh_8Bits: GLDataTexture | null;\n    eachEdgeMesh_16Bits: GLDataTexture | null;\n    eachEdgeMesh_32Bits: GLDataTexture | null;\n    eachEdgeMesh: { [key: number]: GLDataTexture | null } | null;\n    #built: boolean;\n\n    constructor() {\n        this.positions = null;\n        this.indices_8Bits = null;\n        this.indices_16Bits = null;\n        this.indices_32Bits = null;\n        this.edgeIndices_8Bits = null;\n        this.edgeIndices_16Bits = null;\n        this.edgeIndices_32Bits = null;\n        this.eachMeshAttributes = null;\n        this.eachMeshMatrices = null;\n        this.eachPrimitiveMesh_8Bits = null;\n        this.eachPrimitiveMesh_16Bits = null;\n        this.eachPrimitiveMesh_32Bits = null;\n        this.eachEdgeMesh_8Bits = null;\n        this.eachEdgeMesh_16Bits = null;\n        this.eachEdgeMesh_32Bits = null;\n        this.eachEdgeOffset = null;\n        this.#built = false;\n    }\n\n    build() {\n        this.indices = {\n            8: this.indices_8Bits,\n            16: this.indices_16Bits,\n            32: this.indices_32Bits,\n        };\n        this.eachPrimitiveMesh = {\n            8: this.eachPrimitiveMesh_8Bits,\n            16: this.eachPrimitiveMesh_16Bits,\n            32: this.eachPrimitiveMesh_32Bits,\n        };\n        this.edgeIndices = {\n            8: this.edgeIndices_8Bits,\n            16: this.edgeIndices_16Bits,\n            32: this.edgeIndices_32Bits,\n        };\n        this.eachEdgeMesh = {\n            8: this.eachEdgeMesh_8Bits,\n            16: this.eachEdgeMesh_16Bits,\n            32: this.eachEdgeMesh_32Bits,\n        };\n        this.#built = true;\n    }\n\n    destroy() {\n        if (this.positions) {\n            this.positions.destroy();\n        }\n        if (this.indices_8Bits) {\n            this.indices_8Bits.destroy();\n        }\n        if (this.indices_16Bits) {\n            this.indices_16Bits.destroy();\n        }\n        if (this.indices_32Bits) {\n            this.indices_32Bits.destroy();\n        }\n        if (this.edgeIndices_8Bits) {\n            this.edgeIndices_8Bits.destroy();\n        }\n        if (this.edgeIndices_16Bits) {\n            this.edgeIndices_16Bits.destroy();\n        }\n        if (this.edgeIndices_32Bits) {\n            this.edgeIndices_32Bits.destroy();\n        }\n        if (this.eachMeshMatrices) {\n            this.eachMeshMatrices.destroy();\n        }\n        if (this.eachMeshAttributes) {\n            this.eachMeshAttributes.destroy();\n        }\n        if (this.eachEdgeOffset) {\n            this.eachEdgeOffset.destroy();\n        }\n        if (this.eachPrimitiveMesh_8Bits) {\n            this.eachPrimitiveMesh_8Bits.destroy();\n        }\n        if (this.eachPrimitiveMesh_16Bits) {\n            this.eachPrimitiveMesh_16Bits.destroy();\n        }\n        if (this.eachPrimitiveMesh_32Bits) {\n            this.eachPrimitiveMesh_32Bits.destroy();\n        }\n        if (this.eachEdgeMesh_8Bits) {\n            this.eachEdgeMesh_8Bits.destroy();\n        }\n        if (this.eachEdgeMesh_16Bits) {\n            this.eachEdgeMesh_16Bits.destroy();\n        }\n        if (this.eachEdgeMesh_32Bits) {\n            this.eachEdgeMesh_32Bits.destroy();\n        }\n    }\n}\n","\n/**\n * @private\n */\nexport class MeshCounts {\n\n    numMeshes: number;\n    numVisible: number;\n    numTransparent: number;\n    numEdges: number;\n    numXRayed: number;\n    numSelected: number;\n    numHighlighted: number;\n    numClippable: number;\n    numPickable: number;\n    numCulled: number;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset() {\n        this.numMeshes = 0;\n        this.numVisible = 0;\n        this.numTransparent = 0;\n        this.numEdges = 0;\n        this.numXRayed = 0;\n        this.numSelected = 0;\n        this.numHighlighted = 0;\n        this.numClippable = 0;\n        this.numPickable = 0;\n        this.numCulled = 0;\n    }\n}","\n/**\n * @private\n */\nexport const SCENE_OBJECT_FLAGS = {\n    VISIBLE: 1,\n    CULLED: 1 << 2,\n    PICKABLE: 1 << 3,\n    CLIPPABLE: 1 << 4,\n    COLLIDABLE: 1 << 5,\n    CAST_SHADOW: 1 << 6,\n    RECEIVE_SHADOW: 1 << 7,\n    XRAYED: 1 << 8,\n    HIGHLIGHTED: 1 << 9,\n    SELECTED: 1 << 10,\n    EDGES: 1 << 11,\n    BACKFACES: 1 << 12,\n    TRANSPARENT: 1 << 13\n};\n","/**\n * Bundled by jsDelivr using Rollup v2.59.0 and Terser v5.9.0.\n * Original file: /npm/@petamoriken/float16@3.5.11/src/index.mjs\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\nfunction t(t: Function) {\n    // @ts-ignore\n    return (r: any, ...e: ArrayLike<any>) => n(t, r, e)\n}\n\nfunction r(r: object, n: PropertyKey) {\n    // @ts-ignore\n    return t(s(r, n).get)\n}\n\n// @ts-ignore\n// @ts-ignore\nconst {\n        apply: n,\n        construct: e,\n        defineProperty: o,\n        get: i,\n        getOwnPropertyDescriptor: s,\n        getPrototypeOf: c,\n        has: u,\n        ownKeys: f,\n        set: h,\n        setPrototypeOf: l\n    } = Reflect, a = Proxy, y = Number,\n    {\n        isFinite: p,\n        isNaN: w\n    } = y,\n    {\n        iterator: g,\n        species: d,\n        toStringTag: v,\n        for: b\n    } = Symbol, A = Object,\n    {\n        create: m,\n        defineProperty: B,\n        freeze: x,\n        is: E\n        // @ts-ignore\n    } = A, T = A.prototype, O = t(T.isPrototypeOf), j = A.hasOwn || t(T.hasOwnProperty), I = Array, P = I.isArray,\n    // @ts-ignore\n    S = I.prototype, _ = t(S.join), F = t(S.push), L = t(S.toLocaleString), R = S[g], C = t(R), N = Math.trunc,\n    U = ArrayBuffer, M = U.isView, D = t(U.prototype.slice), k = r(U.prototype, \"byteLength\"),\n    W = \"undefined\" != typeof SharedArrayBuffer ? SharedArrayBuffer : null, V = W && r(W.prototype, \"byteLength\"),\n    // @ts-ignore\n    Y = c(Uint8Array), z = Y.from, G = Y.prototype, K = G[g], X = t(G.keys), q = t(G.values), H = t(G.entries),\n    J = t(G.set), Q = t(G.reverse), Z = t(G.fill), $ = t(G.copyWithin), tt = t(G.sort), rt = t(G.slice),\n    nt = t(G.subarray), et = r(G, \"buffer\"), ot = r(G, \"byteOffset\"), it = r(G, \"length\"), st = r(G, v),\n    // @ts-ignore\n    ct = Uint16Array, ut = (...t) => n(z, ct, t), ft = Uint32Array, ht = Float32Array, lt = c([][g]()), at = t(lt.next),\n    yt = t(function* () {\n        // @ts-ignore\n    }().next), pt = c(lt), wt = DataView.prototype, gt = t(wt.getUint16), dt = t(wt.setUint16), vt = TypeError,\n    bt = RangeError, At = Set, mt = At.prototype, Bt = t(mt.add), xt = t(mt.has), Et = WeakMap, Tt = Et.prototype,\n    Ot = t(Tt.get), jt = t(Tt.has), It = t(Tt.set), Pt = new U(4), St = new ht(Pt), _t = new ft(Pt), Ft = new ft(512),\n    Lt = new ft(512);\nfor (let t = 0; t < 256; ++t) {\n    const r = t - 127;\n    r < -27 ? (Ft[t] = 0, Ft[256 | t] = 32768, Lt[t] = 24, Lt[256 | t] = 24) : r < -14 ? (Ft[t] = 1024 >> -r - 14, Ft[256 | t] = 1024 >> -r - 14 | 32768, Lt[t] = -r - 1, Lt[256 | t] = -r - 1) : r <= 15 ? (Ft[t] = r + 15 << 10, Ft[256 | t] = r + 15 << 10 | 32768, Lt[t] = 13, Lt[256 | t] = 13) : r < 128 ? (Ft[t] = 31744, Ft[256 | t] = 64512, Lt[t] = 24, Lt[256 | t] = 24) : (Ft[t] = 31744, Ft[256 | t] = 64512, Lt[t] = 13, Lt[256 | t] = 13)\n}\n\nfunction Rt(t: number) {\n    St[0] = t;\n    const r = _t[0],\n        n = r >> 23 & 511;\n    return Ft[n] + ((8388607 & r) >> Lt[n])\n}\n\nconst Ct = new ft(2048),\n    Nt = new ft(64),\n    Ut = new ft(64);\nCt[0] = 0;\nfor (let t = 1; t < 1024; ++t) {\n    let r = t << 13,\n        n = 0;\n    for (; 0 == (8388608 & r);) n -= 8388608, r <<= 1;\n    r &= -8388609, n += 947912704, Ct[t] = r | n\n}\nfor (let t = 1024; t < 2048; ++t) Ct[t] = 939524096 + (t - 1024 << 13);\nNt[0] = 0;\nfor (let t = 1; t < 31; ++t) Nt[t] = t << 23;\nNt[31] = 1199570944, Nt[32] = 2147483648;\nfor (let t = 33; t < 63; ++t) Nt[t] = 2147483648 + (t - 32 << 23);\nNt[63] = 3347054592, Ut[0] = 0;\nfor (let t = 1; t < 64; ++t) Ut[t] = 32 === t ? 0 : 1024;\n\nfunction Mt(t: number) {\n    const r = t >> 10;\n    return _t[0] = Ct[Ut[r] + (1023 & t)] + Nt[r], St[0]\n}\n\nfunction Dt(t: unknown) {\n    if (\"bigint\" == typeof t) throw vt(\"Cannot convert a BigInt value to a number\");\n    if (t = y(t), !p(t) || 0 === t) return t;\n    // @ts-ignore\n    return Mt(Rt(t))\n}\n\nfunction kt(t: any[]) {\n    // @ts-ignore\n    if (t[g] === R) return t;\n    const r = C(t);\n    return m(null,\n        {\n            next:\n                {\n                    value: function () {\n                        return at(r)\n                    }\n                },\n            [g]:\n                {\n                    value: function () {\n                        return this\n                    }\n                }\n        })\n}\n\nconst Wt = new Et,\n    Vt = m(pt,\n        {\n            next:\n                {\n                    value: function () {\n                        const t = Ot(Wt, this);\n                        return yt(t)\n                    },\n                    writable: !0,\n                    configurable: !0\n                },\n            [v]:\n                {\n                    value: \"Array Iterator\",\n                    configurable: !0\n                }\n        });\n\nfunction Yt(t:any) {\n    const r = m(Vt);\n    return It(Wt, r, t), r\n}\n\nfunction zt(t:any) {\n    return null !== t && \"object\" == typeof t || \"function\" == typeof t\n}\n\nfunction Gt(t:any) {\n    return null !== t && \"object\" == typeof t\n}\n\nfunction Kt(t:any) {\n    return void 0 !== st(t)\n}\n\nfunction Xt(t:any) {\n    const r = st(t);\n    return \"BigInt64Array\" === r || \"BigUint64Array\" === r\n}\n\nfunction qt(t:any) {\n    if (null === W) return !1;\n    try {\n        // @ts-ignore\n        return V(t), !0\n    } catch (t:any) {\n        return !1\n    }\n}\n\nfunction Ht(t:any) {\n    if (!P(t)) return !1;\n    // @ts-ignore\n    if (t[g] === R) return !0;\n    // @ts-ignore\n    return \"Array Iterator\" === t[g]()[v]\n}\n\nfunction Jt(t:any) {\n    if (\"string\" != typeof t) return !1;\n    const r = y(t);\n    return t === r + \"\" && (!!p(r) && r === N(r))\n}\n\nconst Qt = y.MAX_SAFE_INTEGER;\n\nfunction Zt(t:any) {\n    if (\"bigint\" == typeof t) throw vt(\"Cannot convert a BigInt value to a number\");\n    const r = y(t);\n    return w(r) || 0 === r ? 0 : N(r)\n}\n\nfunction $t(t:any) {\n    const r = Zt(t);\n    return r < 0 ? 0 : r < Qt ? r : Qt\n}\n\nfunction tr(t: { constructor: any; }, r: ArrayBufferConstructor) {\n    if (!zt(t)) throw vt(\"This is not an object\");\n    const n = t.constructor;\n    if (void 0 === n) return r;\n    if (!zt(n)) throw vt(\"The constructor property value is not an object\");\n    const e = n[d];\n    return null == e ? r : e\n}\n\nfunction rr(t:any) {\n    if (qt(t)) return !1;\n    try {\n        return D(t, 0, 0), !1\n    } catch (t:any) {\n    }\n    return !0\n}\n\nfunction nr(t: unknown, r: unknown) {\n    const n = w(t),\n        e = w(r);\n    if (n && e) return 0;\n    if (n) return 1;\n    if (e) return -1;\n    // @ts-ignore\n    if (t < r) return -1;\n    // @ts-ignore\n    if (t > r) return 1;\n    if (0 === t && 0 === r) {\n        const n = E(t, 0),\n            e = E(r, 0);\n        if (!n && e) return -1;\n        if (n && !e) return 1\n    }\n    return 0\n}\n\nconst er = b(\"__Float16Array__\"),\n    or = new Et;\n\nfunction ir(t:any) {\n    return jt(or, t) || !M(t) && function (t:any) {\n        if (!Gt(t)) return !1;\n        const r = c(t);\n        if (!Gt(r)) return !1;\n        // @ts-ignore\n        const n = r.constructor;\n        if (void 0 === n) return !1;\n        if (!zt(n)) throw vt(\"The constructor property value is not an object\");\n        return u(n, er)\n    }(t)\n}\n\nfunction sr(t:any) {\n    if (!ir(t)) throw vt(\"This is not a Float16Array object\")\n}\n\nfunction cr(t: any, r: number) {\n    const n = ir(t),\n        e = Kt(t);\n    if (!n && !e) throw vt(\"Species constructor didn't return TypedArray object\");\n    if (\"number\" == typeof r) {\n        let e;\n        if (n) {\n            const r = ur(t);\n            e = it(r)\n        } else e = it(t);\n        if (e < r) throw vt(\"Derived constructor created TypedArray object which was too small length\")\n    }\n    if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\")\n}\n\nfunction ur(t:any) {\n    const r = Ot(or, t);\n    if (void 0 !== r) {\n        if (rr(et(r))) throw vt(\"Attempting to access detached ArrayBuffer\");\n        return r\n    }\n    const n = t.buffer;\n    if (rr(n)) throw vt(\"Attempting to access detached ArrayBuffer\");\n    const o = e(ar, [n, t.byteOffset, t.length], t.constructor);\n    return Ot(or, o)\n}\n\nfunction fr(t:any) {\n    const r = it(t),\n        n = [];\n    for (let e = 0; e < r; ++e) n[e] = Mt(t[e]);\n    return n\n}\n\nconst hr = new At;\nfor (const t of f(G)) {\n    if (t === v) continue;\n    const r = s(G, t);\n    j(r, \"get\") && Bt(hr, t)\n}\nconst lr = x(\n    {\n        get: (t: object, r: PropertyKey, n: any) => Jt(r) && j(t, r) ? Mt(i(t, r)) : xt(hr, r) && O(G, t) ? i(t, r) : i(t, r, n),\n        set: (t: object, r: PropertyKey, n: number, e: any) => Jt(r) && j(t, r) ? h(t, r, Rt(n)) : h(t, r, n, e),\n        getOwnPropertyDescriptor(t: object, r: PropertyKey) {\n            if (Jt(r) && j(t, r)) {\n                const n = s(t, r);\n                // @ts-ignore\n                return n.value = Mt(n.value), n\n            }\n            return s(t, r)\n        },\n        defineProperty: (t: object, r: PropertyKey, n: PropertyDescriptor & ThisType<any>) => Jt(r) && j(t, r) && j(n, \"value\") ? (n.value = Rt(n.value), o(t, r, n)) : o(t, r, n)\n    });\n\nclass ar {\n    constructor(t: string | number | any[], r: undefined, n: undefined) {\n        let o;\n        if (ir(t)) o = e(ct, [ur(t)], new.target);\n        else if (zt(t) && !function (t:any) {\n            try {\n                return k(t), !0\n            } catch (t) {\n                return !1\n            }\n        }(t)) {\n            let r, n;\n            if (Kt(t)) {\n                r = t, n = it(t);\n                const i = et(t),\n                    s = qt(i) ? U : tr(i, U);\n                if (rr(i)) throw vt(\"Attempting to access detached ArrayBuffer\");\n                if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\");\n                const c = new s(2 * n);\n                o = e(ct, [c], new.target)\n            } else {\n                // @ts-ignore\n                const i = t[g];\n                if (null != i && \"function\" != typeof i) throw vt(\"@@iterator property is not callable\");\n                // @ts-ignore\n                null != i ? Ht(t) ? (r = t, n = t.length) : (r = [...t], n = r.length) : (r = t, n = $t(r.length)), o = e(ct, [n], new.target)\n            }\n            for (let t = 0; t < n; ++t) { // @ts-ignore\n                o[t] = Rt(r[t])\n            }\n        } else o = e(ct, arguments, new.target);\n        const i = new a(o, lr);\n        return It(or, i, o), i\n    }\n\n    static from(t: string | any[], ...r: any[]) {\n        const e = this;\n        if (!u(e, er)) throw vt(\"This constructor is not a subclass of Float16Array\");\n        if (e === ar) {\n            if (ir(t) && 0 === r.length) {\n                const r = ur(t),\n                    n = new ct(et(r), ot(r), it(r));\n                // @ts-ignore\n                return new ar(et(rt(n)))\n            }\n            // @ts-ignore\n            if (0 === r.length) return new ar(et(ut(t, Rt)));\n            const e = r[0],\n                o = r[1];\n            // @ts-ignore\n            return new ar(et(ut(t, ((t, ...r) => {\n                return Rt(n(e, this, [t, ...kt(r)]))\n            }), o)))\n        }\n        let o, i;\n        // @ts-ignore\n        const s = t[g];\n        if (null != s && \"function\" != typeof s) throw vt(\"@@iterator property is not callable\");\n        // @ts-ignore\n        if (null != s) Ht(t) ? (o = t, i = t.length) : !Kt(c = t) || c[g] !== K && \"Array Iterator\" !== c[g]()[v] ? (o = [...t], i = o.length) : (o = t, i = it(t));\n        else {\n            if (null == t) throw vt(\"Cannot convert undefined or null to object\");\n            o = A(t), i = $t(o.length)\n        }\n        var c;\n        // @ts-ignore\n        const f = new e(i);\n        if (0 === r.length)\n            // @ts-ignore\n            for (let t = 0; t < i; ++t) f[t] = o[t];\n        else {\n            const t = r[0],\n                e = r[1];\n            // @ts-ignore\n            for (let r = 0; r < i; ++r) f[r] = n(t, e, [o[r], r])\n        }\n        return f\n    }\n\n    static of(...t:any) {\n        const r = this;\n        if (!u(r, er)) throw vt(\"This constructor is not a subclass of Float16Array\");\n        const n = t.length;\n        if (r === ar) {\n            // @ts-ignore\n            const r = new ar(n),\n                e = ur(r);\n            for (let r = 0; r < n; ++r) e[r] = Rt(t[r]);\n            return r\n        }\n        // @ts-ignore\n        const e = new r(n);\n        // @ts-ignore\n        for (let r = 0; r < n; ++r) e[r] = t[r];\n        return e\n    }\n\n    keys() {\n        sr(this);\n        const t = ur(this);\n        return X(t)\n    }\n\n    values() {\n        sr(this);\n        const t = ur(this);\n        return Yt(function* () {\n            for (const r of q(t)) yield Mt(r)\n        }())\n    }\n\n    entries() {\n        sr(this);\n        const t = ur(this);\n        return Yt(function* () {\n            for (const [r, n] of H(t)) yield [r, Mt(n)]\n        }())\n    }\n\n    at(t:any) {\n        sr(this);\n        const r = ur(this),\n            n = it(r),\n            e = Zt(t),\n            o = e >= 0 ? e : n + e;\n        if (!(o < 0 || o >= n)) return Mt(r[o])\n    }\n\n    map(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0],\n            // @ts-ignore\n            s = tr(e, ar);\n        if (s === ar) {\n            // @ts-ignore\n            const r = new ar(o),\n                s = ur(r);\n            for (let r = 0; r < o; ++r) {\n                const o = Mt(e[r]);\n                s[r] = Rt(n(t, i, [o, r, this]))\n            }\n            return r\n        }\n        const c = new s(o);\n        cr(c, o);\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            c[r] = n(t, i, [o, r, this])\n        }\n        return c\n    }\n\n    filter(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0],\n            // @ts-ignore\n            s = [];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            // @ts-ignore\n            n(t, i, [o, r, this]) && F(s, o)\n        }\n        // @ts-ignore\n        const c = new (tr(e, ar))(s);\n        // @ts-ignore\n        return cr(c), c\n    }\n\n    reduce(t: (arg0: any, arg1: number, arg2: number, arg3: this) => any, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        if (0 === e && 0 === r.length) throw vt(\"Reduce of empty array with no initial value\");\n        let o, i;\n        0 === r.length ? (o = Mt(n[0]), i = 1) : (o = r[0], i = 0);\n        for (let r = i; r < e; ++r) o = t(o, Mt(n[r]), r, this);\n        return o\n    }\n\n    reduceRight(t: (arg0: any, arg1: number, arg2: number, arg3: this) => any, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        if (0 === e && 0 === r.length) throw vt(\"Reduce of empty array with no initial value\");\n        let o, i;\n        0 === r.length ? (o = Mt(n[e - 1]), i = e - 2) : (o = r[0], i = e - 1);\n        for (let r = i; r >= 0; --r) o = t(o, Mt(n[r]), r, this);\n        return o\n    }\n\n    forEach(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) n(t, i, [Mt(e[r]), r, this])\n    }\n\n    find(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return o\n        }\n    }\n\n    findIndex(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return r\n        }\n        return -1\n    }\n\n    findLast(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = o - 1; r >= 0; --r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return o\n        }\n    }\n\n    findLastIndex(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = o - 1; r >= 0; --r) {\n            const o = Mt(e[r]);\n            if (n(t, i, [o, r, this])) return r\n        }\n        return -1\n    }\n\n    every(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r)\n            if (!n(t, i, [Mt(e[r]), r, this])) return !1;\n        return !0\n    }\n\n    some(t: Function, ...r: any[]) {\n        sr(this);\n        const e = ur(this),\n            o = it(e),\n            i = r[0];\n        for (let r = 0; r < o; ++r)\n            if (n(t, i, [Mt(e[r]), r, this])) return !0;\n        return !1\n    }\n\n    set(t: number, ...r: number[]) {\n        sr(this);\n        const n = ur(this),\n            e = Zt(r[0]);\n        if (e < 0) throw bt(\"Offset is out of bounds\");\n        if (null == t) throw vt(\"Cannot convert undefined or null to object\");\n        if (Xt(t)) throw vt(\"Cannot mix BigInt and other types, use explicit conversions\");\n        if (ir(t)) return J(ur(this), ur(t), e);\n        if (Kt(t)) {\n            if (rr(et(t))) throw vt(\"Attempting to access detached ArrayBuffer\")\n        }\n        const o = it(n),\n            i = A(t),\n            s = $t(i.length);\n        if (e === 1 / 0 || s + e > o) throw bt(\"Offset is out of bounds\");\n        for (let t = 0; t < s; ++t) n[t + e] = Rt(i[t])\n    }\n\n    reverse() {\n        sr(this);\n        const t = ur(this);\n        return Q(t), this\n    }\n\n    fill(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this);\n        return Z(n, Rt(t), ...kt(r)), this\n    }\n\n    copyWithin(t: any, r: any, ...n: any[]) {\n        sr(this);\n        const e = ur(this);\n        return $(e, t, r, ...kt(n)), this\n    }\n\n    sort(...t:any) {\n        sr(this);\n        const r = ur(this),\n            n = void 0 !== t[0] ? t[0] : nr;\n        // @ts-ignore\n        return tt(r, ((t, r) => n(Mt(t), Mt(r)))), this\n    }\n\n    slice(...t:any) {\n        sr(this);\n        const r = ur(this),\n            // @ts-ignore\n            n = tr(r, ar);\n        if (n === ar) {\n            const n = new ct(et(r), ot(r), it(r));\n            // @ts-ignore\n            return new ar(et(rt(n, ...kt(t))))\n        }\n        const e = it(r),\n            o = Zt(t[0]),\n            i = void 0 === t[1] ? e : Zt(t[1]);\n        let s, c;\n        s = o === -1 / 0 ? 0 : o < 0 ? e + o > 0 ? e + o : 0 : e < o ? e : o, c = i === -1 / 0 ? 0 : i < 0 ? e + i > 0 ? e + i : 0 : e < i ? e : i;\n        const u = c - s > 0 ? c - s : 0,\n            f = new n(u);\n        if (cr(f, u), 0 === u) return f;\n        if (rr(et(r))) throw vt(\"Attempting to access detached ArrayBuffer\");\n        let h = 0;\n        for (; s < c;) f[h] = Mt(r[s]), ++s, ++h;\n        return f\n    }\n\n    subarray(...t:any) {\n        sr(this);\n        const r = ur(this),\n            // @ts-ignore\n            n = tr(r, ar),\n            e = new ct(et(r), ot(r), it(r)),\n            o = nt(e, ...kt(t)),\n            i = new n(et(o), ot(o), it(o));\n        // @ts-ignore\n        return cr(i), i\n    }\n\n    indexOf(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = Zt(r[0]);\n        if (o === 1 / 0) return -1;\n        o < 0 && (o += e, o < 0 && (o = 0));\n        for (let r = o; r < e; ++r)\n            if (j(n, r) && Mt(n[r]) === t) return r;\n        return -1\n    }\n\n        lastIndexOf(t: number, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = r.length >= 1 ? Zt(r[0]) : e - 1;\n        if (o === -1 / 0) return -1;\n        o >= 0 ? o = o < e - 1 ? o : e - 1 : o += e;\n        for (let r = o; r >= 0; --r)\n            if (j(n, r) && Mt(n[r]) === t) return r;\n        return -1\n    }\n\n    includes(t: unknown, ...r: any[]) {\n        sr(this);\n        const n = ur(this),\n            e = it(n);\n        let o = Zt(r[0]);\n        if (o === 1 / 0) return !1;\n        o < 0 && (o += e, o < 0 && (o = 0));\n        const i = w(t);\n        for (let r = o; r < e; ++r) {\n            const e = Mt(n[r]);\n            if (i && w(e)) return !0;\n            if (e === t) return !0\n        }\n        return !1\n    }\n\n    join(...t:any) {\n        sr(this);\n        const r = fr(ur(this));\n        return _(r, ...kt(t))\n    }\n\n    toLocaleString(...t:any) {\n        sr(this);\n        const r = fr(ur(this));\n        return L(r, ...kt(t))\n    }\n\n    get [v]() {\n        if (ir(this)) return \"Float16Array\"\n    }\n}\n\nB(ar, \"BYTES_PER_ELEMENT\",\n    {\n        value: 2\n    }), B(ar, er,\n    {}), l(ar, Y);\nconst yr = ar.prototype;\n\nfunction pr(t: any, r: any, ...n: any[]) {\n    return Mt(gt(t, r, ...kt(n)))\n}\n\nfunction wr(t: any, r: any, n: number, ...e: any[]) {\n    return dt(t, r, Rt(n), ...kt(e))\n}\n\nB(yr, \"BYTES_PER_ELEMENT\",\n    {\n        value: 2\n    }), B(yr, g,\n    {\n        value: yr.values,\n        writable: !0,\n        configurable: !0\n    }), l(yr, G);\nexport\n{\n    ar as Float16Array, pr as getFloat16, Dt as hfround, ir as isFloat16Array, wr as setFloat16\n};","import type {FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {GLDataTexture} from \"@xeokit/webglutils\";\nimport {Float16Array} from \"./float16\";\n\nconst emptyDataTexture = new GLDataTexture({textureWidth: 0, textureHeight: 0});\n\n/**\n * Enables the currently bound ````WebGLTexture```` to be used as a data texture.\n */\nexport function disableFilteringForBoundTexture(gl: WebGL2RenderingContext) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n}\n\n/**\n * Creates a GLDataTexture that holds per-geometry matrices for positions decode.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param positionDecodeMatrices Positions decode matrix for each mesh in the layer\n */\nexport function createEachGeometryMatricesDataTexture(gl: WebGL2RenderingContext, positionDecodeMatrices: FloatArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: Positions decode matrix\n\n    const textureHeight = positionDecodeMatrices.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < positionDecodeMatrices.length; i++) {\n        textureData.set(positionDecodeMatrices [i], i * 24);   // 4x4 values\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n\n/**\n * Creates a GLDataTexture containing the given vertex positions.\n */\nexport function createPositionsDataTexture(gl: WebGL2RenderingContext, positions: FloatArrayParam): GLDataTexture {\n    const numVertices = positions.length / 3;\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(numVertices / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint16Array(textureDataSize);\n    //   dataTextureRamStats.sizeDataTexturePositions += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(positions, 0);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    // @ts-ignore\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 8-bit indices.\n */\nexport function createIndices8BitDataTexture(gl: WebGL2RenderingContext, indices_8Bits: IntArrayParam): GLDataTexture {\n    if (indices_8Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_8Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint8Array(textureDataSize);\n    //dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    textureData.set(indices_8Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 16-bit indices.\n */\nexport function createIndices16BitDataTexture(gl: WebGL2RenderingContext, indices_16Bits: IntArrayParam): GLDataTexture {\n    if (indices_16Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_16Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint16Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(indices_16Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 32-bit indices.\n */\nexport function createIndices32BitDataTexture(gl: WebGL2RenderingContext, indices_32Bits: IntArrayParam): GLDataTexture {\n    if (indices_32Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(indices_32Bits.length / 3 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 3;\n    const textureData = new Uint32Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(indices_32Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB32UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB_INTEGER, gl.UNSIGNED_INT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 8-bit edge indices.\n */\nexport function createEdgeIndices8BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_8Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_8Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_8Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint8Array(textureDataSize);\n    // dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_8Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 16-bit edge indices.\n */\nexport function createEdgeIndices16BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_16Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_16Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_16Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint16Array(textureDataSize);\n    //     dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_16Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given 32-bit edge indices.\n */\nexport function createEdgeIndices32BitDataTexture(gl: WebGL2RenderingContext, edgeIndices_32Bits: IntArrayParam): GLDataTexture {\n    if (edgeIndices_32Bits.length == 0) {\n        return emptyDataTexture;\n    }\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(edgeIndices_32Bits.length / 2 / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight * 2;\n    const textureData = new Uint32Array(textureDataSize);\n    //   dataTextureRamStats.sizeDataTextureEdgeIndices += textureData.byteLength;\n    textureData.fill(0);\n    // @ts-ignore\n    textureData.set(edgeIndices_32Bits, 0)\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG32UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RG_INTEGER, gl.UNSIGNED_INT, textureData, 0);\n    disableFilteringForBoundTexture(gl);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing per-mesh colors, pick colors, flags, vertex portion bases, indices portion bases, edge indices portion bases\n *\n * The texture will have:\n * - 4 RGBA columns per row: for each mesh (pick) color and flags(2)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param colors Color per mesh\n * @param pickColors Pick color per mesh\n * @param vertexBases Vertex index base for each mesh\n * @param indexBaseOffsets For triangles: array of offsets between the (gl_VertexID / 3) and the position where the indices start in the texture layer\n * @param edgeIndexBaseOffsets For edges: Array of offsets between the (gl_VertexID / 2) and the position where the edge indices start in the texture layer\n */\nexport function createEachMeshAttributesDataTexture(gl: WebGL2RenderingContext, colors: FloatArrayParam[], pickColors: FloatArrayParam[], vertexBases: IntArrayParam, indexBaseOffsets: IntArrayParam, edgeIndexBaseOffsets: IntArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: (RGBA) mesh color RGBA\n    //    - col1: (packed Uint32 as RGBA) mesh pick color\n    //    - col2: (packed 4 bytes as RGBA) mesh flags\n    //    - col3: (packed 4 bytes as RGBA) mesh flags2\n    //    - col4: (packed Uint32 bytes as RGBA) vertex base\n    //    - col5: (packed Uint32 bytes as RGBA) index base offset\n    //    - col6: (packed Uint32 bytes as RGBA) edge index base offset\n    //    - col7: (packed Uint32 bytes as RGBA) RTC view matrix index base offset\n\n    const textureHeight = colors.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 8;\n    const textureData = new Uint8Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < textureHeight; i++) {\n        textureData.set(colors [i], i * 28 + 0); // mesh color\n        textureData.set(pickColors [i], i * 28 + 4); // mesh pick color\n        textureData.set([0, 0, 0, 0], i * 28 + 8);  // mesh flags\n        textureData.set([0, 0, 0, 0], i * 28 + 12); // mesh flags2\n        textureData.set([(vertexBases[i] >> 24) & 255, (vertexBases[i] >> 16) & 255, (vertexBases[i] >> 8) & 255, (vertexBases[i]) & 255], i * 28 + 16);   // vertex base\n        textureData.set([(indexBaseOffsets[i] >> 24) & 255, (indexBaseOffsets[i] >> 16) & 255, (indexBaseOffsets[i] >> 8) & 255, (indexBaseOffsets[i]) & 255], i * 28 + 20);    // triangles index base offset\n        textureData.set([(edgeIndexBaseOffsets[i] >> 24) & 255, (edgeIndexBaseOffsets[i] >> 16) & 255, (edgeIndexBaseOffsets[i] >> 8) & 255, (edgeIndexBaseOffsets[i]) & 255], i * 28 + 24);    // edge index base offset\n    //    textureData.set([(rtcViewMatIndices[i] >> 24) & 255, (rtcViewMatIndices[i] >> 16) & 255, (rtcViewMatIndices[i] >> 8) & 255, (rtcViewMatIndices[i]) & 255], i * 28 + 28);    // RTC view matrix\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA8UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight, textureData}); // Re-writeable texture data\n}\n\n/**\n * Creates GLDataTexture containing a 3D offset for each mesh\n *\n * @param gl\n * @param offsets An offset for each mesh\n */\nexport function createEachEdgeOffsetDataTexture(gl: WebGL2RenderingContext, offsets: FloatArrayParam[]) :GLDataTexture{\n    const textureHeight = offsets.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 1;\n    const textureData = new Float32Array(3 * textureWidth * textureHeight);\n    for (let i = 0; i < offsets.length; i++) {\n        textureData.set(offsets [i], i * 3); // mesh offset\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB32F, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGB, gl.FLOAT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight, textureData}); // Re-writeable texture data\n}\n\n/**\n * Creates a GLDataTexture that holds per-mesh matrices for positions decode, position modeling, and normals modeling.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of meshes\n *\n * @param gl\n * @param positionDecodeMatrices Positions decode matrix for each mesh in the layer\n * @param matrices Positions instancing matrix for each mesh in the layer. Null if the meshes are not instanced.\n */\nexport function createEachMeshMatricesDataTexture(gl: WebGL2RenderingContext, positionDecodeMatrices: FloatArrayParam, matrices: FloatArrayParam): GLDataTexture {\n\n    // Texture has one row per mesh:\n    //\n    //    - col0: Positions decode matrix\n    //    - col1: Positions modeling matrix\n    //    - col2: Normals modeling matrix\n\n    const textureHeight = positionDecodeMatrices.length;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    for (let i = 0; i < positionDecodeMatrices.length; i++) {\n        textureData.set(positionDecodeMatrices [i], i * 48);   // 4x4 values\n        textureData.set(matrices [i], i * 48 + 16);   // 4x4 values\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture containing the given mesh IDs.\n * This type of texture is used for a lookup table, of mesh IDs for given keys.\n *\n * @param gl\n * @param meshIds\n */\nexport function createPointerTableDataTexture(gl: WebGL2RenderingContext, meshIds: IntArrayParam): GLDataTexture {\n    if (meshIds.length == 0) {\n        return emptyDataTexture;\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    const lenArray = meshIds.length;\n    const textureWidth = 1024;\n    const textureHeight = Math.ceil(lenArray / textureWidth);\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureDataSize = textureWidth * textureHeight;\n    const textureData = new Uint16Array(textureDataSize);\n    textureData.set(meshIds, 0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.R16UI, textureWidth, textureHeight);\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RED_INTEGER, gl.UNSIGNED_SHORT, textureData, 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n\n/**\n * Creates a GLDataTexture that holds matrices.\n *\n * The texture will have:\n * - 4 RGBA columns per row (each column will contain 4 packed half-float (16 bits) components).\n *   Thus, each row will contain 16 packed half-floats corresponding to a complete positions decode matrix)\n * - N rows where N is the number of matrices\n *\n * @param gl\n * @param numMatrices\n */\nexport function createMatricesDataTexture(gl: WebGL2RenderingContext, numMatrices: number): GLDataTexture {\n    const textureHeight = numMatrices;\n    if (textureHeight == 0) {\n        throw \"texture height == 0\";\n    }\n    const textureWidth = 4 * 3;\n    // @ts-ignore\n    const textureData = new Float16Array(4 * textureWidth * textureHeight);\n    const texture = gl.createTexture();\n    if (!texture) {\n        return emptyDataTexture;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA16F, textureWidth, textureHeight);\n    // @ts-ignore\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.RGBA, gl.HALF_FLOAT, new Uint16Array(textureData.buffer), 0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return new GLDataTexture({gl, texture, textureWidth, textureHeight});\n}\n","export class DataTextureBuffer { // Temp data buffer as we build a Layer; converted into data textures once Layer is built\n\n    positionsDecompressMatrices: number[];\n    positionsCompressed: number[];\n    indices_8Bits: number[];\n    indices_16Bits: number[];\n    indices_32Bits: number[];\n    edgeIndices_8Bits: number[];\n    edgeIndices_16Bits: number[];\n    edgeIndices_32Bits: number[];\n\n    eachPrimitiveMesh_8Bits: number[];\n    eachPrimitiveMesh_16Bits: number[];\n    eachPrimitiveMesh_32Bits: number[];\n\n    eachEdgeMesh_8Bits: number[];\n    eachEdgeMesh_16Bits: number[];\n    eachEdgeMesh_32Bits: number[];\n\n    eachMeshVertexPortionBase: number[];\n    eachMeshVertexPortionOffset: number[];\n    eachMeshEdgeIndicesOffset: number[];\n\n    eachMeshColor: any[];\n    eachMeshPickColor: any[];\n    eachMeshMatrices: any[];\n    eachMeshNormalMatrix: any[];\n    eachMeshPositionsDecompressMatrix: any[];\n    eachMeshFlags1: any[];\n    eachMeshFlags2: any[];\n    eachEdgeOffset: any[];\n    eachMeshParts: number[];\n\n    constructor() {\n        this.positionsDecompressMatrices = [];\n        this.positionsCompressed = [];\n        this.indices_8Bits = [];\n        this.indices_16Bits = [];\n        this.indices_32Bits = [];\n        this.edgeIndices_8Bits = [];\n        this.edgeIndices_16Bits = [];\n        this.edgeIndices_32Bits = [];\n        this.eachMeshVertexPortionBase = [];\n        this.eachMeshVertexPortionOffset = [];\n        this.eachMeshEdgeIndicesOffset = [];\n        this.eachMeshColor = [];\n        this.eachMeshPickColor = [];\n        this.eachMeshMatrices = [];\n        this.eachMeshNormalMatrix = [];\n        this.eachMeshPositionsDecompressMatrix = [];\n        this.eachMeshFlags1 = [];\n        this.eachMeshFlags2 = [];\n        this.eachPrimitiveMesh_32Bits = [];\n        this.eachPrimitiveMesh_16Bits = [];\n        this.eachPrimitiveMesh_8Bits = [];\n        this.eachEdgeMesh_32Bits = [];\n        this.eachEdgeMesh_16Bits = [];\n        this.eachEdgeMesh_8Bits = [];\n        this.eachEdgeOffset = [];\n        this.eachMeshParts = [];\n    }\n}","import {createVec4, identityMat4, transformPoint4} from \"@xeokit/matrix\";\nimport type {View} from \"@xeokit/viewer\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\nimport type {RendererModelImpl} from \"./RendererModelImpl\";\nimport {DataTextureSet} from \"./DataTextureSet\";\nimport {MeshCounts} from \"./MeshCounts\";\nimport {SCENE_OBJECT_FLAGS} from './SCENE_OBJECT_FLAGS';\nimport {RENDER_PASSES} from './RENDER_PASSES';\nimport {LinesPrimitive, PointsPrimitive} from \"@xeokit/constants\";\nimport {AABB3ToOBB3, collapseAABB3, expandAABB3Point3} from \"@xeokit/boundaries\";\nimport type {GeometryBucketParams, GeometryCompressedParams, MeshParams} from \"@xeokit/scene\";\nimport type {RendererTextureSetImpl} from \"./RendererTextureSetImpl\";\nimport {\n    createEachEdgeOffsetDataTexture,\n    createEachMeshAttributesDataTexture,\n    createEachMeshMatricesDataTexture,\n    createEdgeIndices16BitDataTexture,\n    createEdgeIndices32BitDataTexture,\n    createEdgeIndices8BitDataTexture,\n    createIndices16BitDataTexture,\n    createIndices32BitDataTexture,\n    createIndices8BitDataTexture,\n    createPositionsDataTexture\n} from \"./dataTextures\";\nimport type {LayerParams} from \"./LayerParams\";\nimport type {GeometryBucketHandle} from \"./GeometryBucketHandle\";\nimport {DataTextureBuffer} from \"./DataTextureBuffer\";\n\nconst MAX_MESH_PARTS = (1 << 12); // 12 bits \nconst MAX_DATATEXTURE_HEIGHT = (1 << 11); // 2048\nconst INDICES_EDGE_INDICES_ALIGNMENT_SIZE = 8;\n\nconst identityMatrix = identityMat4();\nconst tempVec4a = createVec4([0, 0, 0, 1]);\nconst tempVec4b = createVec4([0, 0, 0, 1]);\nconst tempVec4c = createVec4([0, 0, 0, 1]);\nconst tempUint8Array4 = new Uint8Array(4);\nconst tempFloat32Array3 = new Float32Array(3);\n\n\ninterface GeometryHandle { // Storage handle for a geometry within a Layer\n    aabb: FloatArrayParam;\n    positionsDecompressMatrix: FloatArrayParam;\n    geometryBucketHandles: GeometryBucketHandle[]\n}\n\ninterface MeshPartParams {\n    aabb: FloatArrayParam;\n}\n\ninterface MeshPartHandle {\n    vertsBase: number;\n    numVerts: number;\n}\n\n/**\n * @private\n */\nexport interface LayerRenderState { // What a LayerRenderer needs to render this Layer\n    materialTextureSet: RendererTextureSetImpl; // Color, opacity, metal/roughness, ambient occlusion maps\n    dataTextureSet: DataTextureSet;  // Data textures containing geometry, transforms, flags and material attributes\n    primitive: number; // Layer primitive type\n    numIndices8Bits: number; // How many 8-bit encodable indices in layer\n    numIndices16Bits: number; // How many 16-bit encodable indices in layer\n    numIndices32Bits: number; // How many 32-bit encodable indices in layer\n    numEdgeIndices8Bits: number; // How many 8-bit encodable edge indices in layer\n    numEdgeIndices16Bits: number; // How many 16-bit encodable edge indices in layer\n    numEdgeIndices32Bits: number; // How many 32-bit encodable edge indices in layer\n    numVertices: number; // How many vertices in layer\n}\n\n/**\n * @private\n */\nexport class Layer {\n\n    rendererModel: RendererModelImpl;\n    layerIndex: number;\n    meshCounts: MeshCounts;\n    renderState: LayerRenderState;\n\n    #gl: WebGL2RenderingContext;\n    #view: View;\n    #dataTextureBuffer: DataTextureBuffer;\n    #geometryHandles: { [key: string]: any };\n    #meshPartHandles: MeshPartHandle[];\n    #numMeshParts: number;\n    #deferredSetFlagsActive: boolean;\n    #deferredSetFlagsDirty: boolean;\n    #built: boolean;\n\n    constructor(layerParams: LayerParams, renderers?: any) {\n\n        this.meshCounts = new MeshCounts();\n        this.layerIndex = layerParams.layerIndex;\n        this.rendererModel = layerParams.rendererModel;\n\n        this.renderState = <LayerRenderState>{\n            primitive: layerParams.primitive,\n            dataTextureSet: new DataTextureSet(),\n            numIndices8Bits: 0,\n            numIndices16Bits: 0,\n            numIndices32Bits: 0,\n            numEdgeIndices8Bits: 0,\n            numEdgeIndices16Bits: 0,\n            numEdgeIndices32Bits: 0,\n            numVertices: 0\n        };\n\n        this.#gl = layerParams.gl;\n        this.#view = layerParams.view;\n        this.#dataTextureBuffer = new DataTextureBuffer();\n        this.#numMeshParts = 0;\n        this.#geometryHandles = {};\n        this.#meshPartHandles = [];\n        this.#built = false;\n\n        this.beginDeferredFlags();\n    }\n\n    get hash() {\n        return `layer-${this.renderState.primitive}`;\n    }\n\n    canCreateMesh(geometryCompressedParams: GeometryCompressedParams): boolean {\n        if (this.#built) {\n            throw \"Already built\";\n        }\n        const renderState = this.renderState;\n        const numGeometryBuckets = geometryCompressedParams.geometryBuckets.length;\n        if ((this.#numMeshParts + numGeometryBuckets) > MAX_MESH_PARTS) {\n            return false;\n        }\n        let numPositions = 0;\n        let numIndices = 0;\n        for (let i = 0; i < numGeometryBuckets; i++) {\n            const geometryBucket = geometryCompressedParams.geometryBuckets[i];\n            numPositions += geometryBucket.positionsCompressed.length;\n            if (geometryBucket.indices) {\n                numIndices += geometryBucket.indices.length;\n            }\n        }\n        const primVerts = (geometryCompressedParams.primitive === PointsPrimitive) ? 1 : (geometryCompressedParams.primitive == LinesPrimitive ? 2 : 3);\n        const maxIndicesOfAnyBits = Math.max(renderState.numIndices8Bits, renderState.numIndices16Bits, renderState.numIndices32Bits);\n        const numVerts = numPositions / primVerts;\n        let numTriangleIndices = numIndices / 3;\n        return (renderState.numVertices + numVerts) <= MAX_DATATEXTURE_HEIGHT * 1024 && (numTriangleIndices + numIndices) <= MAX_DATATEXTURE_HEIGHT * 1024;\n    }\n\n    hasGeometry(geometryId: string): boolean {\n        return this.#geometryHandles[geometryId];\n    }\n\n    createGeometryCompressed(geometryCompressedParams: GeometryCompressedParams) {\n        if (this.#built) {\n            throw \"Already built\";\n        }\n        const geometryBucketHandles = [];\n        for (let i = 0, len = geometryCompressedParams.geometryBuckets.length; i < len; i++) {\n            geometryBucketHandles.push(this.#createGeometryBucket(geometryCompressedParams.geometryBuckets[i]));\n        }\n        this.#geometryHandles[geometryCompressedParams.id] = <GeometryHandle>{\n            id: geometryCompressedParams.id,\n            aabb: geometryCompressedParams.aabb,\n            positionsDecompressMatrix: geometryCompressedParams.positionsDecompressMatrix,\n            geometryBucketHandles\n        };\n    }\n\n    #createGeometryBucket(geometryBucket: GeometryBucketParams): GeometryBucketHandle {\n        const renderState = this.renderState;\n        if (geometryBucket.indices) {  // Align indices to INDICES_EDGE_INDICES_ALIGNMENT_SIZE\n            const numVertsForPrim = (this.renderState.primitive === PointsPrimitive ? 1 : (this.renderState.primitive === LinesPrimitive ? 2 : 3));\n            const alignedIndicesLen = Math.ceil((geometryBucket.indices.length / numVertsForPrim) / INDICES_EDGE_INDICES_ALIGNMENT_SIZE) * INDICES_EDGE_INDICES_ALIGNMENT_SIZE * numVertsForPrim;\n            const alignedIndices = new Uint32Array(alignedIndicesLen);\n            alignedIndices.fill(0);\n            alignedIndices.set(geometryBucket.indices);\n            geometryBucket.indices = alignedIndices;\n        }\n        if (geometryBucket.edgeIndices) {  // Align edge indices to INDICES_EDGE_INDICES_ALIGNMENT_SIZE\n            const alignedEdgeIndicesLen = Math.ceil((geometryBucket.edgeIndices.length / 2) / INDICES_EDGE_INDICES_ALIGNMENT_SIZE) * INDICES_EDGE_INDICES_ALIGNMENT_SIZE * 2;\n            const alignedEdgeIndices = new Uint32Array(alignedEdgeIndicesLen);\n            alignedEdgeIndices.fill(0);\n            alignedEdgeIndices.set(geometryBucket.edgeIndices);\n            geometryBucket.edgeIndices = alignedEdgeIndices;\n        }\n        const dataTextureBuffer = this.#dataTextureBuffer;\n        const positionsCompressed = geometryBucket.positionsCompressed;\n        const indices = geometryBucket.indices;\n        const edgeIndices = geometryBucket.edgeIndices;\n        const vertexBase = dataTextureBuffer.positionsCompressed.length / 3;\n        const numVertices = positionsCompressed.length / 3;\n        for (let i = 0, len = positionsCompressed.length; i < len; i++) {\n            dataTextureBuffer.positionsCompressed.push(positionsCompressed[i]);\n        }\n        let indicesBase;\n        let numTriangles = 0;\n        if (indices) {\n            numTriangles = indices.length / 3;\n            let indicesBuffer;\n            if (numVertices <= (1 << 8)) {\n                indicesBuffer = dataTextureBuffer.indices_8Bits;\n            } else if (numVertices <= (1 << 16)) {\n                indicesBuffer = dataTextureBuffer.indices_16Bits;\n            } else {\n                indicesBuffer = dataTextureBuffer.indices_32Bits;\n            }\n            indicesBase = indicesBuffer.length / 3;\n            for (let i = 0, len = indices.length; i < len; i++) {\n                indicesBuffer.push(indices[i]);\n            }\n        }\n        let edgeIndicesBase;\n        let numEdges = 0;\n        if (edgeIndices) {\n            numEdges = edgeIndices.length / 2;\n            let edgeIndicesBuffer;\n            if (numVertices <= (1 << 8)) {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_8Bits;\n            } else if (numVertices <= (1 << 16)) {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_16Bits;\n            } else {\n                edgeIndicesBuffer = dataTextureBuffer.edgeIndices_32Bits;\n            }\n            edgeIndicesBase = edgeIndicesBuffer.length / 2;\n            for (let i = 0, len = edgeIndices.length; i < len; i++) {\n                edgeIndicesBuffer.push(edgeIndices[i]);\n            }\n        }\n        renderState.numVertices += numVertices;\n        return <GeometryBucketHandle>{\n            vertexBase,\n            numVertices,\n            numTriangles,\n            numEdges,\n            indicesBase,\n            edgeIndicesBase\n        };\n    }\n\n    createMesh(meshParams: MeshParams): number {\n        if (this.#built) {\n            throw new Error(\"Already built\");\n        }\n        const meshIndex = this.meshCounts.numMeshes;\n        const meshPartIds: number[] = [];\n        if (!meshParams.geometryId) {\n            throw new Error(\"geometryId expected\");\n        }\n        const geometryHandle = this.#geometryHandles[meshParams.geometryId];\n        if (!geometryHandle) {\n            throw new Error(\"Geometry not found\");\n        }\n        geometryHandle.geometryBucketHandles.forEach((geometryBucketHandle: GeometryBucketHandle) => {\n            const meshPartId = this.#createMeshPart(meshParams, geometryHandle, geometryBucketHandle);\n            meshPartIds.push(meshPartId);\n        });\n        const worldAABB = collapseAABB3();\n        const geometryOBB = AABB3ToOBB3(geometryHandle.aabb);\n        for (let i = 0, len = geometryOBB.length; i < len; i += 4) {\n            tempVec4a[0] = geometryOBB[i + 0];\n            tempVec4a[1] = geometryOBB[i + 1];\n            tempVec4a[2] = geometryOBB[i + 2];\n            if (meshParams.matrix) {\n                transformPoint4(meshParams.matrix, tempVec4a, tempVec4b);\n                // transformPoint4(meshParams.matrix, tempVec4b, tempVec4c);\n                expandAABB3Point3(worldAABB, tempVec4b);\n            } else {\n                expandAABB3Point3(worldAABB, tempVec4b);\n            }\n        }\n        this.meshCounts.numMeshes++;\n        return meshIndex;\n    }\n\n    #createMeshPart(meshParams: MeshParams, geometryHandle: GeometryHandle, geometryBucketHandle: GeometryBucketHandle): number {\n\n        const dataTextureBuffer = this.#dataTextureBuffer;\n\n        const renderState = this.renderState;\n\n        const matrix = meshParams.matrix || identityMatrix;\n        const color = meshParams.color || [255, 255, 255];\n        const opacity = meshParams.opacity;\n        const metallic = meshParams.metallic;\n        const roughness = meshParams.roughness;\n\n        const positionsIndex = dataTextureBuffer.positionsCompressed.length;\n        const vertsIndex = positionsIndex / 3;\n\n        dataTextureBuffer.eachMeshPositionsDecompressMatrix.push(geometryHandle.positionsDecompressMatrix);\n        dataTextureBuffer.eachMeshMatrices.push(matrix);\n        dataTextureBuffer.eachMeshColor.push([color[0], color[1], color[2], 255]);\n        dataTextureBuffer.eachMeshPickColor.push(meshParams.pickColor);\n\n        let currentNumIndices;\n        if (geometryBucketHandle.numVertices <= (1 << 8)) {\n            currentNumIndices = renderState.numIndices8Bits;\n        } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n            currentNumIndices = renderState.numIndices16Bits;\n        } else {\n            currentNumIndices = renderState.numIndices32Bits;\n        }\n        dataTextureBuffer.eachMeshVertexPortionBase.push(geometryBucketHandle.vertexBase);\n        dataTextureBuffer.eachMeshVertexPortionOffset.push(currentNumIndices / 3 - geometryBucketHandle.indicesBase);\n\n        // Edge indices\n\n        let currentNumEdgeIndices;\n        if (geometryBucketHandle.numVertices <= (1 << 8)) {\n            currentNumEdgeIndices = renderState.numEdgeIndices8Bits;\n        } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n            currentNumEdgeIndices = renderState.numEdgeIndices16Bits;\n        } else {\n            currentNumEdgeIndices = renderState.numEdgeIndices32Bits;\n        }\n        dataTextureBuffer.eachMeshEdgeIndicesOffset.push(currentNumEdgeIndices / 2 - geometryBucketHandle.edgeIndicesBase);\n\n        // Primitive -> mesh lookup\n\n        const meshPartId = this.#meshPartHandles.length;\n\n        if (geometryBucketHandle.numTriangles > 0) {\n            const numIndices = geometryBucketHandle.numTriangles * 3;\n            let eachPrimitiveMeshBuffer;\n            if (geometryBucketHandle.numVertices <= (1 << 8)) {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_8Bits;\n                renderState.numIndices8Bits += numIndices;\n            } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_16Bits;\n                renderState.numIndices16Bits += numIndices;\n            } else {\n                eachPrimitiveMeshBuffer = dataTextureBuffer.eachPrimitiveMesh_32Bits;\n                renderState.numIndices32Bits += numIndices;\n            }\n            for (let i = 0; i < geometryBucketHandle.numTriangles; i += INDICES_EDGE_INDICES_ALIGNMENT_SIZE) {\n                eachPrimitiveMeshBuffer.push(meshPartId);\n            }\n        }\n\n        // Edge index -> mesh lookup\n\n        if (geometryBucketHandle.numEdges > 0) {\n            let numEdgeIndices = geometryBucketHandle.numEdges * 2;\n            let edgeIndicesMeshIdBuffer;\n            if (geometryBucketHandle.numVertices <= (1 << 8)) {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_8Bits;\n                renderState.numEdgeIndices8Bits += numEdgeIndices;\n            } else if (geometryBucketHandle.numVertices <= (1 << 16)) {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_16Bits;\n                renderState.numEdgeIndices16Bits += numEdgeIndices;\n            } else {\n                edgeIndicesMeshIdBuffer = dataTextureBuffer.eachEdgeMesh_32Bits;\n                renderState.numEdgeIndices32Bits += numEdgeIndices;\n            }\n            for (let i = 0; i < geometryBucketHandle.numEdges; i += INDICES_EDGE_INDICES_ALIGNMENT_SIZE) {\n                edgeIndicesMeshIdBuffer.push(meshPartId);\n            }\n        }\n        dataTextureBuffer.eachEdgeOffset.push([0, 0, 0]);\n\n        this.#meshPartHandles.push(<MeshPartHandle>{\n            vertsBase: vertsIndex,\n            numVerts: geometryBucketHandle.numTriangles //////////////////// TODO\n        });\n        this.#numMeshParts++;\n        return meshPartId;\n    }\n\n    build() {\n        if (this.#built) {\n            throw new Error(\"Already built\");\n        }\n        const gl = this.#gl;\n        const dataTextureBuffer = this.#dataTextureBuffer;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        dataTextureSet.positions = createPositionsDataTexture(gl, dataTextureBuffer.positionsCompressed);\n        dataTextureSet.indices_8Bits = createIndices8BitDataTexture(gl, dataTextureBuffer.indices_8Bits);\n        dataTextureSet.indices_16Bits = createIndices16BitDataTexture(gl, dataTextureBuffer.indices_16Bits);\n        dataTextureSet.indices_32Bits = createIndices32BitDataTexture(gl, dataTextureBuffer.indices_32Bits);\n        dataTextureSet.edgeIndices_8Bits = createEdgeIndices8BitDataTexture(gl, dataTextureBuffer.edgeIndices_8Bits);\n        dataTextureSet.edgeIndices_16Bits = createEdgeIndices16BitDataTexture(gl, dataTextureBuffer.edgeIndices_16Bits);\n        dataTextureSet.edgeIndices_32Bits = createEdgeIndices32BitDataTexture(gl, dataTextureBuffer.edgeIndices_32Bits);\n        dataTextureSet.eachMeshAttributes = createEachMeshAttributesDataTexture(gl,\n            dataTextureBuffer.eachMeshColor,\n            dataTextureBuffer.eachMeshPickColor,\n            dataTextureBuffer.eachMeshVertexPortionBase,\n            dataTextureBuffer.eachMeshVertexPortionOffset,\n            dataTextureBuffer.eachMeshEdgeIndicesOffset);\n        dataTextureSet.eachMeshMatrices = createEachMeshMatricesDataTexture(gl, dataTextureBuffer.eachMeshPositionsDecompressMatrix, dataTextureBuffer.eachMeshMatrices);\n        // dataTextureSet.eachPrimitiveMesh8BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_8Bits);\n        // dataTextureSet.eachPrimitiveMesh16BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_16Bits);\n        // dataTextureSet.eachPrimitiveMesh32BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachPrimitiveMesh_32Bits);\n        // dataTextureSet.eachEdgeMesh8BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_8Bits);\n        // dataTextureSet.eachEdgeMesh16BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_16Bits);\n        // dataTextureSet.eachEdgeMesh32BitsDataTexture = createPointerTableDataTexture(gl, dataTextureBuffer.eachEdgeMesh_32Bits);\n        dataTextureSet.eachEdgeOffset = createEachEdgeOffsetDataTexture(gl, dataTextureBuffer.eachEdgeOffset);\n        dataTextureSet.build();\n        // @ts-ignore\n        this.#dataTextureBuffer = null;\n        this.#geometryHandles = {};\n        this.#meshPartHandles = [];\n        this.#built = true;\n    }\n\n    isEmpty() {\n        return this.meshCounts.numMeshes == 0;\n    }\n\n    initFlags(meshIndex: number, flags: number, meshTransparent: boolean) {\n        if (flags & SCENE_OBJECT_FLAGS.VISIBLE) {\n            this.meshCounts.numVisible++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) {\n            this.meshCounts.numHighlighted++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.XRAYED) {\n            this.meshCounts.numXRayed++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.SELECTED) {\n            this.meshCounts.numSelected++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CLIPPABLE) {\n            this.meshCounts.numClippable++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.EDGES) {\n            this.meshCounts.numEdges++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.PICKABLE) {\n            this.meshCounts.numPickable++;\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CULLED) {\n            this.meshCounts.numCulled++;\n        }\n        if (meshTransparent) {\n            this.meshCounts.numTransparent++;\n        }\n        this.#setMeshFlags(meshIndex, flags, meshTransparent);\n        this.#setMeshFlags2(meshIndex, flags);\n    }\n\n    beginDeferredFlags() {\n        this.#deferredSetFlagsActive = true;\n    }\n\n    commitDeferredFlags() {\n        this.#deferredSetFlagsActive = false;\n        if (!this.#deferredSetFlagsDirty) {\n            return;\n        }\n        this.#deferredSetFlagsDirty = false;\n        const gl = this.#gl;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        // @ts-ignore\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, dataTextureSet.eachMeshAttributes.textureWidth, dataTextureSet.eachMeshAttributes.textureHeight, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, dataTextureSet.eachMeshAttributes.textureData);\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachEdgeOffset.texture);\n        // @ts-ignore\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, dataTextureSet.eachEdgeOffset.textureWidth, dataTextureSet.eachEdgeOffset.textureHeight, gl.RGB, gl.FLOAT, dataTextureSet.eachEdgeOffset.textureData);\n    }\n\n    flushInitFlags() {\n        this.commitDeferredFlags();\n    }\n\n    setMeshVisible(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.VISIBLE) {\n            debugger;\n            this.meshCounts.numVisible++;\n        } else {\n            this.meshCounts.numVisible--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshHighlighted(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) {\n            this.meshCounts.numHighlighted++;\n        } else {\n            this.meshCounts.numHighlighted--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshXRayed(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.XRAYED) {\n            this.meshCounts.numXRayed++;\n        } else {\n            this.meshCounts.numXRayed--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshSelected(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.SELECTED) {\n            this.meshCounts.numSelected++;\n        } else {\n            this.meshCounts.numSelected--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshEdges(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.EDGES) {\n            this.meshCounts.numEdges++;\n        } else {\n            this.meshCounts.numEdges--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshClippable(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CLIPPABLE) {\n            this.meshCounts.numClippable++;\n        } else {\n            this.meshCounts.numClippable--;\n        }\n        this.#setMeshFlags2(meshIndex, flags);\n    }\n\n    setMeshCulled(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.CULLED) {\n            this.meshCounts.numCulled++;\n        } else {\n            this.meshCounts.numCulled--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshCollidable(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n    }\n\n    setMeshPickable(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (flags & SCENE_OBJECT_FLAGS.PICKABLE) {\n            this.meshCounts.numPickable++;\n        } else {\n            this.meshCounts.numPickable--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    setMeshColor(meshIndex: number, color: FloatArrayParam, transparent?: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = color[0];\n        tempUint8Array4 [1] = color[1];\n        tempUint8Array4 [2] = color[2];\n        tempUint8Array4 [3] = color[3];\n        // @ts-ignore\n        dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshTransparent(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        if (transparent) {\n            this.meshCounts.numTransparent++;\n            this.meshCounts.numTransparent++;\n        } else {\n            this.meshCounts.numTransparent--;\n            this.meshCounts.numTransparent--;\n        }\n        this.#setMeshFlags(meshIndex, flags, transparent);\n    }\n\n    #setMeshFlags(meshIndex: number, flags: number, transparent: boolean) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const visible = !!(flags & SCENE_OBJECT_FLAGS.VISIBLE);\n        const xrayed = !!(flags & SCENE_OBJECT_FLAGS.XRAYED);\n        const highlighted = !!(flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED);\n        const selected = !!(flags & SCENE_OBJECT_FLAGS.SELECTED);\n        const edges = !!(flags & SCENE_OBJECT_FLAGS.EDGES);\n        const pickable = !!(flags & SCENE_OBJECT_FLAGS.PICKABLE);\n        const culled = !!(flags & SCENE_OBJECT_FLAGS.CULLED);\n        let f0; // Color\n        if (!visible || culled || xrayed) { // Highlight & select are layered on top of color - not mutually exclusive\n            f0 = RENDER_PASSES.NOT_RENDERED;\n        } else {\n            if (transparent) {\n                f0 = RENDER_PASSES.COLOR_TRANSPARENT;\n            } else {\n                f0 = RENDER_PASSES.COLOR_OPAQUE;\n            }\n        }\n        let f1; // Silhouette\n        if (!visible || culled) {\n            f1 = RENDER_PASSES.NOT_RENDERED;\n        } else if (selected) {\n            f1 = RENDER_PASSES.SILHOUETTE_SELECTED;\n        } else if (highlighted) {\n            f1 = RENDER_PASSES.SILHOUETTE_HIGHLIGHTED;\n        } else if (xrayed) {\n            f1 = RENDER_PASSES.SILHOUETTE_XRAYED;\n        } else {\n            f1 = RENDER_PASSES.NOT_RENDERED;\n        }\n        let f2 = 0; // Edges\n        if (!visible || culled) {\n            f2 = RENDER_PASSES.NOT_RENDERED;\n        } else if (selected) {\n            f2 = RENDER_PASSES.EDGES_SELECTED;\n        } else if (highlighted) {\n            f2 = RENDER_PASSES.EDGES_HIGHLIGHTED;\n        } else if (xrayed) {\n            f2 = RENDER_PASSES.EDGES_XRAYED;\n        } else if (edges) {\n            if (transparent) {\n                f2 = RENDER_PASSES.EDGES_COLOR_TRANSPARENT;\n            } else {\n                f2 = RENDER_PASSES.EDGES_COLOR_OPAQUE;\n            }\n        } else {\n            f2 = RENDER_PASSES.NOT_RENDERED;\n        }\n        let f3 = (visible && !culled && pickable) ? RENDER_PASSES.PICK : RENDER_PASSES.NOT_RENDERED; // Pick\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = f0;\n        tempUint8Array4 [1] = f1;\n        tempUint8Array4 [2] = f2;\n        tempUint8Array4 [3] = f3;\n        if (this.#deferredSetFlagsActive) {\n            // @ts-ignore\n            dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28 + 8);\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 2, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    #setMeshFlags2(meshIndex: number, flags: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const clippable = !!(flags & SCENE_OBJECT_FLAGS.CLIPPABLE) ? 255 : 0;\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempUint8Array4 [0] = clippable;\n        tempUint8Array4 [1] = 0;\n        tempUint8Array4 [2] = 1;\n        tempUint8Array4 [3] = 2;\n        if (this.#deferredSetFlagsActive) {\n            // @ts-ignore\n            dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28 + 12); // Flags\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // @ts-ignore\n        gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 3, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshOffset(meshIndex: number, offset: FloatArrayParam) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        tempFloat32Array3 [0] = offset[0];\n        tempFloat32Array3 [1] = offset[1];\n        tempFloat32Array3 [2] = offset[2];\n        // dataTextureSet.eachMeshOffset.textureData.set(tempFloat32Array3, meshIndex * 3);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        //gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshOffset.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGB, gl.FLOAT, tempFloat32Array3);\n        // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    setMeshMatrix(meshIndex: number, matrix: FloatArrayParam) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n\n    }\n\n    setMeshViewMatrixIndex(meshIndex: number, index: number) {\n        if (!this.#built) {\n            throw \"Not built\";\n        }\n        const dataTextureSet = this.renderState.dataTextureSet;\n        const gl = this.#gl;\n        // tempUint8Array4 [0] = color[0];\n        // tempUint8Array4 [1] = color[1];\n        // tempUint8Array4 [2] = color[2];\n        // tempUint8Array4 [3] = color[3];\n        // // @ts-ignore\n        // dataTextureSet.eachMeshAttributes.textureData.set(tempUint8Array4, meshIndex * 28);\n        if (this.#deferredSetFlagsActive) {\n            this.#deferredSetFlagsDirty = true;\n            return;\n        }\n        // // @ts-ignore\n        // gl.bindTexture(gl.TEXTURE_2D, dataTextureSet.eachMeshAttributes.texture);\n        // gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, meshIndex, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, tempUint8Array4);\n        // // gl.bindTexture (gl.TEXTURE_2D, null);\n    }\n\n    destroy() {\n        this.renderState.dataTextureSet.destroy();\n    }\n}\n\n","import type {Geometry, RendererGeometry} from \"@xeokit/scene\";\n\n/**\n * @private\n */\nexport class RendererGeometryImpl implements RendererGeometry {\n\n    constructor() {\n    }\n}","import type {RendererTexture, Texture} from \"@xeokit/scene\";\nimport type {GLTexture} from \"@xeokit/webglutils\";\n\n/**\n * @private\n */\nexport class RendererTextureImpl implements RendererTexture {\n\n    texture: Texture | null;\n    texture2D: GLTexture;\n\n    constructor(texture: Texture | null, texture2D: GLTexture) {\n        this.texture = texture\n        this.texture2D = texture2D;\n    }\n\n    destroy() {\n        if (this.texture2D) {\n            this.texture2D.destroy();\n        }\n    }\n\n\n}\n","\nimport {createAABB3} from \"@xeokit/boundaries\";\nimport {createVec3} from \"@xeokit/matrix\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {SCENE_OBJECT_FLAGS} from './SCENE_OBJECT_FLAGS';\nimport type {RendererMeshImpl} from \"./RendererMeshImpl\";\nimport type {RendererViewObject} from \"viewer/src/RendererViewObject\";\nimport type {RendererModel, RendererObject, SceneModel, SceneObject} from \"@xeokit/scene\";\n\nconst tempIntRGB = new Uint16Array([0, 0, 0]);\n\n/**\n * @private\n */\nexport class RendererObjectImpl implements RendererObject, RendererViewObject {\n\n    readonly id: string;\n    readonly model: SceneModel;\n    readonly sceneObject: SceneObject;\n    readonly layerId: string | null;\n\n    readonly rendererMeshes: RendererMeshImpl[];\n\n    #flags: number;\n    #aabb: FloatArrayParam;\n    #offsetAABB: FloatArrayParam;\n    #offset: FloatArrayParam;\n    #colorizeUpdated: boolean;\n    #opacityUpdated: boolean;\n\n    constructor(params: {\n        id: string,\n        rendererModel: RendererModel,\n        rendererMeshes: RendererMeshImpl[],\n        aabb: any,\n        layerId?: string\n    }) {\n        this.id = params.id;\n        //this.model = params.rendererModel;\n        this.rendererMeshes = params.rendererMeshes || [];\n        this.#flags = 0;\n        this.#aabb = params.aabb;\n        this.#offsetAABB = createAABB3(params.aabb);\n        this.#offset = createVec3();\n        this.#colorizeUpdated = false;\n        this.#opacityUpdated = false;\n\n        this.layerId = params.layerId || null;\n\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {  // TODO: tidier way? Refactor?\n            this.rendererMeshes[i].setSceneObject(this);\n        }\n    }\n\n    get aabb(): FloatArrayParam {\n        return this.#offsetAABB;\n    }\n\n    setVisible(viewIndex: number, visible: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.VISIBLE) === visible) {\n            return;\n        }\n        this.#flags = visible ? this.#flags | SCENE_OBJECT_FLAGS.VISIBLE : this.#flags & ~SCENE_OBJECT_FLAGS.VISIBLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setVisible(this.#flags);\n        }\n    }\n\n    setHighlighted(viewIndex: number, highlighted: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.HIGHLIGHTED) === highlighted) {\n            return;\n        }\n        this.#flags = highlighted ? this.#flags | SCENE_OBJECT_FLAGS.HIGHLIGHTED : this.#flags & ~SCENE_OBJECT_FLAGS.HIGHLIGHTED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setHighlighted(this.#flags);\n        }\n    }\n\n    setXRayed(viewIndex: number, xrayed: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.XRAYED) === xrayed) {\n            return;\n        }\n        this.#flags = xrayed ? this.#flags | SCENE_OBJECT_FLAGS.XRAYED : this.#flags & ~SCENE_OBJECT_FLAGS.XRAYED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setXRayed(this.#flags);\n        }\n    }\n\n    setSelected(viewIndex: number, selected: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.SELECTED) === selected) {\n            return;\n        }\n        this.#flags = selected ? this.#flags | SCENE_OBJECT_FLAGS.SELECTED : this.#flags & ~SCENE_OBJECT_FLAGS.SELECTED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setSelected(this.#flags);\n        }\n    }\n\n    setEdges(viewIndex: number, edges: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.EDGES) === edges) {\n            return;\n        }\n        this.#flags = edges ? this.#flags | SCENE_OBJECT_FLAGS.EDGES : this.#flags & ~SCENE_OBJECT_FLAGS.EDGES;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setEdges(this.#flags);\n        }\n    }\n\n    setCulled(viewIndex: number, culled: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.CULLED) === culled) {\n            return;\n        }\n        this.#flags = culled ? this.#flags | SCENE_OBJECT_FLAGS.CULLED : this.#flags & ~SCENE_OBJECT_FLAGS.CULLED;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setCulled(this.#flags);\n        }\n    }\n\n    setClippable(viewIndex: number, clippable: boolean): void {\n        if ((!!(this.#flags & SCENE_OBJECT_FLAGS.CLIPPABLE)) === clippable) {\n            return;\n        }\n        this.#flags = clippable ? this.#flags | SCENE_OBJECT_FLAGS.CLIPPABLE : this.#flags & ~SCENE_OBJECT_FLAGS.CLIPPABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setClippable(this.#flags);\n        }\n    }\n\n    setCollidable(viewIndex: number, collidable: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.COLLIDABLE) === collidable) {\n            return;\n        }\n        this.#flags = collidable ? this.#flags | SCENE_OBJECT_FLAGS.COLLIDABLE : this.#flags & ~SCENE_OBJECT_FLAGS.COLLIDABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setCollidable(this.#flags);\n        }\n    }\n\n    setPickable(viewIndex: number, pickable: boolean): void {\n        if (!!(this.#flags & SCENE_OBJECT_FLAGS.PICKABLE) === pickable) {\n            return;\n        }\n        this.#flags = pickable ? this.#flags | SCENE_OBJECT_FLAGS.PICKABLE : this.#flags & ~SCENE_OBJECT_FLAGS.PICKABLE;\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setPickable(this.#flags);\n        }\n    }\n\n    setColorize(viewIndex: number, color?: FloatArrayParam): void { // [0..1, 0..1, 0..1]\n        if (color) {\n            tempIntRGB[0] = Math.floor(color[0] * 255.0); // Quantize\n            tempIntRGB[1] = Math.floor(color[1] * 255.0);\n            tempIntRGB[2] = Math.floor(color[2] * 255.0);\n            for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n                this.rendererMeshes[i].setColorize(tempIntRGB);\n            }\n        } else {\n            for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n                this.rendererMeshes[i].setColorize(null);\n            }\n        }\n    }\n\n    setOpacity(viewIndex: number, opacity?: number): void {\n        if (this.rendererMeshes.length === 0) {\n            return;\n        }\n        // @ts-ignore\n        const lastOpacityQuantized = this.rendererMeshes[0].colorize[3];\n        let opacityQuantized = 255;\n        if (opacity !== null && opacity !== undefined) {\n            if (opacity < 0) {\n                opacity = 0;\n            } else if (opacity > 1) {\n                opacity = 1;\n            }\n            opacityQuantized = Math.floor(opacity * 255.0); // Quantize\n            if (lastOpacityQuantized === opacityQuantized) {\n                return;\n            }\n        } else {\n            opacityQuantized = 255.0;\n            if (lastOpacityQuantized === opacityQuantized) {\n                return;\n            }\n        }\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].setOpacity(opacityQuantized, this.#flags);\n        }\n    }\n\n    setOffset(viewIndex: number, offset: FloatArrayParam): void {\n        // if (offset) {\n        //     this.#offset[0] = offset[0];\n        //     this.#offset[1] = offset[1];\n        //     this.#offset[2] = offset[2];\n        // } else {\n        //     this.#offset[0] = 0;\n        //     this.#offset[1] = 0;\n        //     this.#offset[2] = 0;\n        // }\n        // for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n        //     this.rendererMeshes[i].setOffset(this.#offset);\n        // }\n        // this.#offsetAABB[0] = this.#aabb[0] + this.#offset[0];\n        // this.#offsetAABB[1] = this.#aabb[1] + this.#offset[1];\n        // this.#offsetAABB[2] = this.#aabb[2] + this.#offset[2];\n        // this.#offsetAABB[3] = this.#aabb[3] + this.#offset[0];\n        // this.#offsetAABB[4] = this.#aabb[4] + this.#offset[1];\n        // this.#offsetAABB[5] = this.#aabb[5] + this.#offset[2];\n        // // this.scene.#aabbDirty = true;\n        // // this.scene._objectOffsetUpdated(this, offset);\n        // // this.rendererModel._aabbDirty = true;\n        // // this.rendererModel.glRedraw();\n    }\n\n    build(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].build(this.#flags);\n        }\n    }\n\n    finalize2(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].finalize2();\n        }\n    }\n\n    destroy(): void {\n        for (let i = 0, len = this.rendererMeshes.length; i < len; i++) {\n            this.rendererMeshes[i].destroy();\n        }\n    }\n}\n","import type {RendererGeometry, RendererMesh, RendererObject, RendererTextureSet, SceneObject} from \"@xeokit/scene\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createAABB3} from \"@xeokit/boundaries\";\n\nimport type {RenderContext} from \"./RenderContext\";\nimport type {Layer} from \"./Layer\";\nimport type {Pickable} from \"./Pickable\";\nimport {createMat4, mulMat4, transformPoint3, translationMat4c} from \"@xeokit/matrix\";\nimport type {Tile, TileManager} from \"./TileManager\";\n\nconst tempMat4a = createMat4();\nconst tempMat4b = createMat4();\n\n\n/**\n * @private\n */\nexport class RendererMeshImpl implements RendererMesh, Pickable {\n\n    id: string;\n    color: FloatArrayParam;\n    rendererGeometry: RendererGeometry;\n    rendererTextureSet: RendererTextureSet;\n    matrix: FloatArrayParam;\n    metallic: number;\n    roughness: number;\n    opacity: number;\n    pickId: number;\n    tileManager: TileManager;\n    tile: Tile;\n    sceneObjectRenderer: RendererObject | null;\n    aabb: FloatArrayParam;\n    layer: Layer;\n    meshIndex: number;\n    colorize: FloatArrayParam;\n    colorizing: boolean;\n    transparent: boolean;\n\n\n    constructor(params: {\n        tileManager: TileManager,\n        layer: Layer,\n        id: string,\n        matrix: FloatArrayParam;\n        metallic: number;\n        roughness: number;\n        color: FloatArrayParam,\n        opacity: number,\n        rendererTextureSet: RendererTextureSet\n        rendererGeometry: RendererGeometry,\n        meshIndex: number\n    }) {\n        this.sceneObjectRenderer = null;\n        this.tileManager = params.tileManager;\n        this.id = params.id;\n        this.pickId = 0;\n        this.color = [params.color[0], params.color[1], params.color[2], params.opacity]; // [0..255]\n        this.colorize = [params.color[0], params.color[1], params.color[2], params.opacity]; // [0..255]\n        this.colorizing = false;\n        this.transparent = (params.opacity < 255);\n        this.layer = params.layer;\n        this.matrix = params.matrix;\n        this.metallic = params.metallic;\n        this.roughness = params.roughness;\n        this.opacity = params.opacity;\n        this.aabb = createAABB3();\n        this.rendererTextureSet = params.rendererTextureSet;\n        this.rendererGeometry = params.rendererGeometry;\n        this.meshIndex = params.meshIndex;\n    }\n\n    delegatePickedEntity(): SceneObject {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setSceneObject(sceneObjectRenderer: RendererObject) {\n        this.sceneObjectRenderer = sceneObjectRenderer;\n    }\n\n    build(flags: number) {\n        // @ts-ignore\n        this.layer.initFlags(this.meshIndex, flags, this.transparent);\n    }\n\n    finalize2() {\n        // @ts-ignore\n        if (this.layer.flushInitFlags) {\n            this.layer.flushInitFlags();\n        }\n    }\n\n    setVisible(flags: any) {\n        this.layer.setMeshVisible(this.meshIndex, flags, this.transparent);\n    }\n\n    setMatrix(matrix: FloatArrayParam): void {\n        const center = transformPoint3(matrix, [0, 0, 0]);\n        const oldTile = this.tile;\n        this.tile = oldTile ? this.tileManager.updateTileCenter(oldTile, center) : this.tileManager.getTile(center);\n        const tileChanged = !oldTile || oldTile.id !== this.tile.id;\n        const tileCenter = this.tile.center;\n        const needRTC = (tileCenter[0] !== 0 || tileCenter[1] !== 0 || tileCenter[2] !== 0);\n        this.layer.setMeshMatrix(this.meshIndex, needRTC\n            ? mulMat4(matrix, translationMat4c(-tileCenter[0], -tileCenter[1], -tileCenter[2], tempMat4a), tempMat4b)\n            : matrix);\n        if (tileChanged) {\n            this.layer.setMeshViewMatrixIndex(this.meshIndex, this.tile.index);\n        }\n    }\n\n    setMetallic(metallic: number): void {\n    }\n\n    setRoughness(roughness: number): void {\n    }\n\n    setColor(color: FloatArrayParam) {\n        this.color[0] = color[0];\n        this.color[1] = color[1];\n        this.color[2] = color[2];\n        if (!this.colorizing) {\n            this.layer.setMeshColor(this.meshIndex, this.color);\n        }\n    }\n\n    setColorize(colorize: FloatArrayParam | null) {\n        const setOpacity = false;\n        if (colorize) {\n            this.colorize[0] = colorize[0];\n            this.colorize[1] = colorize[1];\n            this.colorize[2] = colorize[2];\n            this.layer.setMeshColor(this.meshIndex, this.colorize, setOpacity);\n            this.colorizing = true;\n        } else {\n            this.layer.setMeshColor(this.meshIndex, this.color, setOpacity);\n            this.colorizing = false;\n        }\n    }\n\n    setOpacity(opacity: number, flags: number) {\n        const newTransparent = (opacity < 255);\n        const lastTransparent = this.transparent;\n        const changingTransparency = (lastTransparent !== newTransparent);\n        this.color[3] = opacity;\n        this.colorize[3] = opacity;\n        this.transparent = newTransparent;\n        if (this.colorizing) {\n            this.layer.setMeshColor(this.meshIndex, this.colorize);\n        } else {\n            this.layer.setMeshColor(this.meshIndex, this.color);\n        }\n        if (changingTransparency) {\n            this.layer.setMeshTransparent(this.meshIndex, flags, newTransparent);\n        }\n    }\n\n    setHighlighted(flags: number) {\n        this.layer.setMeshHighlighted(this.meshIndex, flags, this.transparent);\n    }\n\n    setXRayed(flags: number) {\n        this.layer.setMeshXRayed(this.meshIndex, flags, this.transparent);\n    }\n\n    setSelected(flags: number) {\n        this.layer.setMeshSelected(this.meshIndex, flags, this.transparent);\n    }\n\n    setEdges(flags: number) {\n        this.layer.setMeshEdges(this.meshIndex, flags, this.transparent);\n    }\n\n    setClippable(flags: number) {\n        this.layer.setMeshClippable(this.meshIndex, flags);\n    }\n\n    setCollidable(flags: number) {\n        this.layer.setMeshCollidable(this.meshIndex, flags);\n    }\n\n    setPickable(flags: number) {\n        this.layer.setMeshPickable(this.meshIndex, flags, this.transparent);\n    }\n\n    setCulled(flags: number) {\n        this.layer.setMeshCulled(this.meshIndex, flags, this.transparent);\n    }\n\n    canPickTriangle() {\n        return false;\n    }\n\n    drawPickTriangles(drawFlags: any, renderContext: any) {\n        // NOP\n    }\n\n    pickTriangleSurface(pickResult: any) {\n        // NOP\n    }\n\n    canPickWorldPos() {\n        return true;\n    }\n\n    drawPickNormals(renderContext: RenderContext) {\n        //this.sceneObjectRenderer.rendererModel.drawPickNormals(renderContext);\n    }\n\n    // delegatePickedEntity(): SceneObjectRendererCommands {\n    //     return <SceneObjectRendererCommands>this.sceneObjectRenderer;\n    // }\n\n    destroy() {\n        if (this.tile && this.tileManager) {\n            this.tileManager.putTile(this.tile);\n        }\n    }\n}\n","import type { RendererTextureSet} from \"@xeokit/scene\";\nimport type {RendererTextureImpl} from \"./RendererTextureImpl\";\n\n\n/**\n * @private\n */\nexport class RendererTextureSetImpl implements RendererTextureSet {\n\n    public readonly id: string;\n    public readonly colorTexture: RendererTextureImpl;\n    public readonly metallicRoughnessTexture: RendererTextureImpl;\n    public readonly emissiveTexture: RendererTextureImpl;\n    public readonly occlusionTexture: RendererTextureImpl;\n\n    constructor(params: {\n        id: string;\n        colorTexture: RendererTextureImpl;\n        metallicRoughnessTexture: RendererTextureImpl;\n        emissiveTexture: RendererTextureImpl;\n        occlusionTexture: RendererTextureImpl;\n    }) {\n        this.id = params.id;\n        this.colorTexture = params.colorTexture;\n        this.metallicRoughnessTexture = params.metallicRoughnessTexture;\n        this.emissiveTexture = params.emissiveTexture;\n        this.occlusionTexture = params.occlusionTexture;\n    }\n}\n","import {EventDispatcher} from \"strongly-typed-events\";\nimport {Component, EventEmitter, TextureTranscoder} from \"@xeokit/core\";\nimport {createUUID, loadArraybuffer} from \"@xeokit/utils\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {composeMat4, createMat4, createVec3, createVec4, eulerToQuat, identityQuat, mulMat4} from \"@xeokit/matrix\";\n\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {Camera, View} from \"@xeokit/viewer\";\nimport type {Viewer} from \"@xeokit/viewer\";\nimport {GLTexture} from \"@xeokit/webglutils\";\nimport type {\n    Geometry,\n    GeometryCompressedParams,\n    Mesh,\n    RendererGeometry,\n    RendererMesh,\n    RendererModel,\n    RendererTexture,\n    RendererTextureSet,\n    SceneModel,\n    SceneObject,\n    Texture,\n    TextureSet\n} from \"@xeokit/scene\";\nimport type {WebGLRenderer} from \"./WebGLRenderer\";\nimport {Layer} from \"./Layer\";\nimport type {RenderContext} from \"./RenderContext\";\nimport {RendererGeometryImpl} from \"./RendererGeometryImpl\";\nimport type {RendererViewObject} from \"viewer/src/RendererViewObject\";\nimport {RendererTextureImpl} from \"./RendererTextureImpl\";\nimport {RendererObjectImpl} from \"./RendererObjectImpl\";\nimport {RendererMeshImpl} from \"./RendererMeshImpl\";\nimport {RendererTextureSetImpl} from \"./RendererTextureSetImpl\";\nimport type {LayerParams} from \"./LayerParams\";\nimport type {TileManager} from \"./TileManager\";\n\n\nconst tempVec3a = createVec3();\nconst tempMat4 = createMat4();\n\nconst defaultScale = createVec3([1, 1, 1]);\nconst defaultPosition = createVec3([0, 0, 0]);\nconst defaultRotation = createVec3([0, 0, 0]);\nconst defaultQuaternion = identityQuat();\n\nconst defaultColorTextureId = \"defaultColorTexture\";\nconst defaultMetalRoughTextureId = \"defaultMetalRoughTexture\";\nconst defaultNormalsTextureId = \"defaultNormalsTexture\";\nconst defaultEmissiveTextureId = \"defaultEmissiveTexture\";\nconst defaultOcclusionTextureId = \"defaultOcclusionTexture\";\nconst defaultTextureSetId = \"defaultTextureSet\";\n\n/**\n * @private\n */\nexport class RendererModelImpl extends Component implements RendererModel {\n\n    readonly qualityRender: boolean;\n    declare readonly id: string;\n    declare readonly destroyed: boolean;\n    declare built: boolean;\n\n    sceneModel: SceneModel | null;\n\n    rendererGeometries: { [key: string]: RendererGeometry };\n    rendererTextures: { [key: string]: RendererTexture };\n    rendererTextureSets: { [key: string]: RendererTextureSet; };\n    rendererMeshes: { [key: string]: RendererMesh };\n    rendererObjects: { [key: string]: RendererObjectImpl };\n    rendererObjectsList: RendererObjectImpl[];\n\n    rendererViewObjects: { [key: string]: RendererViewObject };\n\n    readonly viewer: Viewer;\n\n    layerList: Layer[];\n    readonly onBuilt: EventEmitter<RendererModel, null>;\n    declare readonly onDestroyed: EventEmitter<Component, null>;\n    #view: View;\n    #webglRenderer: WebGLRenderer;\n    #renderContext: RenderContext;\n    #position: FloatArrayParam;\n    #rotation: FloatArrayParam;\n    #quaternion: FloatArrayParam;\n    #scale: FloatArrayParam;\n    #worldMatrix: FloatArrayParam;\n    #viewMatrix: FloatArrayParam;\n    #colorTextureEnabled: boolean;\n    #backfaces: boolean;\n    #layers: { [key: string]: Layer };\n    #numGeometries: number;\n    #numTriangles: number;\n    #numLines: number;\n    #numPoints: number;\n    #numViewerObjects: number;\n    #textureTranscoder: TextureTranscoder;\n    #aabbDirty: boolean;\n    #edgeThreshold: number;\n    #currentLayers: { [key: string]: any };\n    #aabb: FloatArrayParam;\n    #viewMatrixDirty: boolean;\n    #worldMatrixNonIdentity: boolean;\n    #onCameraViewMatrix: () => void;\n    #layerId: string | undefined;\n\n    constructor(params: {\n        id: string;\n        sceneModel: SceneModel;\n        matrix?: FloatArrayParam;\n        scale?: FloatArrayParam;\n        view: View;\n        webglRenderer: WebGLRenderer;\n        renderContext: RenderContext;\n        quaternion?: FloatArrayParam;\n        rotation?: FloatArrayParam;\n        position?: FloatArrayParam;\n        edgeThreshold?: number;\n        textureTranscoder: TextureTranscoder;\n        qualityRender?: boolean;\n        layerId?: string;\n    }) {\n\n        super(params.view);\n\n        this.id = params.id;\n        this.sceneModel = params.sceneModel\n        this.viewer = params.view.viewer;\n\n        this.#view = params.view;\n        this.#webglRenderer = params.webglRenderer;\n        this.#renderContext = params.renderContext;\n        this.#textureTranscoder = params.textureTranscoder;\n\n        this.#aabb = collapseAABB3();\n        this.#aabbDirty = false;\n        this.#layers = {};\n        this.layerList = [];\n        this.#currentLayers = {};\n\n        this.rendererGeometries = {};\n        this.rendererTextures = {};\n        this.rendererTextureSets = {};\n        this.rendererMeshes = {};\n        this.rendererObjects = {};\n        this.rendererObjectsList = [];\n\n        this.rendererViewObjects = {};\n\n        this.#numGeometries = 0;\n        this.#numViewerObjects = 0;\n\n        this.#numTriangles = 0;\n        this.#numLines = 0;\n        this.#numPoints = 0;\n        this.#edgeThreshold = params.edgeThreshold || 10;\n\n        this.built = false;\n\n        // Build static matrix\n\n        this.#position = createVec3(params.position || [0, 0, 0]);\n        this.#rotation = createVec3(params.rotation || [0, 0, 0]);\n        this.#quaternion = createVec4(params.quaternion || [0, 0, 0, 1]);\n        if (params.rotation) {\n            eulerToQuat(this.#rotation, \"XYZ\", this.#quaternion);\n        }\n        this.#scale = createVec3(params.scale || [1, 1, 1]);\n        this.#worldMatrix = createMat4();\n        composeMat4(this.#position, this.#quaternion, this.#scale, this.#worldMatrix);\n\n        if (params.matrix || params.position || params.rotation || params.scale || params.quaternion) {\n            this.#viewMatrix = createMat4();\n            this.#viewMatrixDirty = true;\n            this.#worldMatrixNonIdentity = true;\n        }\n\n        this.qualityRender = (params.qualityRender !== false);\n\n        this.#layerId = params.layerId;\n\n        this.#onCameraViewMatrix = this.#view.camera.onViewMatrix.subscribe((camera: Camera, viewMatrix: FloatArrayParam) => {\n            this.#viewMatrixDirty = true;\n        });\n\n        this.#createDefaultTextureSetRenderer();\n\n        this.onBuilt = new EventEmitter(new EventDispatcher<RendererModel, null>());\n\n        this.#addModel(params.sceneModel);\n\n        // this.layerList.sort((a, b) => {\n        //     if (a.sortId < b.sortId) {\n        //         return -1;\n        //     }\n        //     if (a.sortId > b.sortId) {\n        //         return 1;\n        //     }\n        //     return 0;\n        // });\n        for (let i = 0, len = this.layerList.length; i < len; i++) {\n            const layer = this.layerList[i];\n            layer.layerIndex = i;\n        }\n        this.#currentLayers = {};\n        this.built = true;\n        this.#webglRenderer.setImageDirty();\n        //     this.#view.viewer.scene.setAABBDirty();\n        this.onBuilt.dispatch(this, null);\n    }\n\n    get position(): FloatArrayParam {\n        return this.#position;\n    }\n\n    get rotation(): FloatArrayParam {\n        return this.#rotation;\n    }\n\n    get quaternion(): FloatArrayParam {\n        return this.#quaternion;\n    }\n\n    get scale(): FloatArrayParam {\n        return this.#scale;\n    }\n\n    get worldMatrix(): FloatArrayParam {\n        return this.#worldMatrix;\n    }\n\n    get viewMatrix(): FloatArrayParam {\n        if (!this.#viewMatrix) {\n            return this.#view.camera.viewMatrix;\n        }\n        if (this.#viewMatrixDirty) {\n            mulMat4(this.#view.camera.viewMatrix, this.#worldMatrix, this.#viewMatrix);\n            this.#viewMatrixDirty = false;\n        }\n        return this.#viewMatrix;\n    }\n\n    get colorTextureEnabled() {\n        return this.#colorTextureEnabled;\n    }\n\n    get backfaces(): boolean {\n        return this.#backfaces;\n    }\n\n    set backfaces(backfaces: boolean) {\n        backfaces = !!backfaces;\n        this.#backfaces = backfaces;\n        this.#webglRenderer.setImageDirty();\n    }\n\n    get matrix(): FloatArrayParam {\n        return this.#worldMatrix;\n    }\n\n    get aabb(): FloatArrayParam {\n        if (this.#aabbDirty) {\n            this.#rebuildAABB();\n        }\n        return this.#aabb;\n    }\n\n    get numTriangles(): number {\n        return this.#numTriangles;\n    }\n\n    get numLines(): number {\n        return this.#numLines;\n    }\n\n    get numPoints(): number {\n        return this.#numPoints;\n    }\n\n    setVisible(viewIndex: number, visible: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setVisible(viewIndex, visible);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setXRayed(viewIndex: number, xrayed: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setXRayed(viewIndex, xrayed);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setHighlighted(viewIndex: number, highlighted: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setHighlighted(viewIndex, highlighted);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setSelected(viewIndex: number, selected: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setSelected(viewIndex, selected);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setEdges(viewIndex: number, edges: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setEdges(viewIndex, edges);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setCulled(viewIndex: number, culled: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setCulled(viewIndex, culled);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setClippable(viewIndex: number, clippable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setClippable(viewIndex, clippable);\n        }\n        this.#webglRenderer.setImageDirty(viewIndex);\n    }\n\n    setCollidable(viewIndex: number, collidable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setCollidable(viewIndex, collidable);\n        }\n    }\n\n    setPickable(viewIndex: number, pickable: boolean): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setPickable(viewIndex, pickable);\n        }\n    }\n\n    setColorize(viewIndex: number, colorize: FloatArrayParam): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setColorize(viewIndex, colorize);\n        }\n    }\n\n    setOpacity(viewIndex: number, opacity: number): void {\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            this.rendererObjectsList[i].setOpacity(viewIndex, opacity);\n        }\n    }\n\n    /*\n    rebuildDrawFlags() {\n        this.drawFlags.reset();\n        this.#updateDrawFlagsVisibleLayers();\n        if (this.drawFlags.numLayers > 0 && this.drawFlags.numVisibleLayers === 0) {\n            this.drawFlags.culled = true;\n            return;\n        }\n        this.#updateDrawFlags();\n    }\n\n    drawColorOpaque(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawColorOpaque(drawFlags, renderContext);\n        }\n    }\n\n    drawColorTransparent(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawColorTransparent(drawFlags, renderContext);\n        }\n    }\n\n    drawDepth(renderContext: RenderContext): void { // Dedicated to SAO because it skips transparent objects\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawDepth(drawFlags, renderContext);\n        }\n    }\n\n    drawNormals(renderContext: RenderContext): void { // Dedicated to SAO because it skips transparent objects\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawNormals(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteXRayed(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteXRayed(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteHighlighted(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteHighlighted(drawFlags, renderContext);\n        }\n    }\n\n    drawSilhouetteSelected(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawSilhouetteSelected(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesColorOpaque(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesColorOpaque(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesColorTransparent(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesColorTransparent(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesXRayed(renderContext: RenderContext): void {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesXRayed(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesHighlighted(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesHighlighted(drawFlags, renderContext);\n        }\n    }\n\n    drawEdgesSelected(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawEdgesSelected(drawFlags, renderContext);\n        }\n    }\n\n    drawOcclusion(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawOcclusion(drawFlags, renderContext);\n        }\n    }\n\n    drawShadow(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawShadow(drawFlags, renderContext);\n        }\n    }\n\n    drawPickMesh(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickMesh(drawFlags, renderContext);\n        }\n    }\n\n    drawPickDepths(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickDepths(drawFlags, renderContext);\n        }\n    }\n\n    drawPickNormals(renderContext: RenderContext) {\n        if (this.meshCounts.numVisible === 0) {\n            return;\n        }\n        const drawFlags = this.drawFlags;\n        for (let i = 0, len = drawFlags.visibleLayers.length; i < len; i++) {\n            const layerIndex = drawFlags.visibleLayers[i];\n            this.layerList[layerIndex].drawPickNormals(drawFlags, renderContext);\n        }\n    }\n*/\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        this.#removeModel();\n        this.#view.camera.onViewMatrix.unsubscribe(this.#onCameraViewMatrix);\n        for (let layerId in this.#currentLayers) {\n            if (this.#currentLayers.hasOwnProperty(layerId)) {\n                this.#currentLayers[layerId].destroy();\n            }\n        }\n        for (let i = 0, len = this.layerList.length; i < len; i++) {\n            this.layerList[i].destroy();\n        }\n        for (let objectId in this.rendererObjects) {\n            this.rendererObjects[objectId].destroy();\n        }\n        for (let meshId in this.rendererMeshes) {\n            //    this.#webglRenderer.deregisterPickable(this.rendererMeshes[meshId].pickId);\n        }\n        this.#currentLayers = {};\n        this.#layers = {};\n        this.layerList = [];\n        this.rendererGeometries = {};\n        this.rendererTextures = {};\n        this.rendererTextureSets = {};\n        this.rendererMeshes = {};\n        this.rendererViewObjects = {};\n        // this.#view.viewer.setAABBDirty();\n        this.onBuilt.clear();\n        super.destroy();\n    }\n\n    #addModel(sceneModel: SceneModel): void {\n\n        const textures = sceneModel.textures;\n        const geometries = sceneModel.geometries;\n        const meshes = sceneModel.meshes;\n        const objects = sceneModel.objects;\n\n        if (textures) {\n            for (let textureId in textures) {\n                const texture = textures[textureId];\n                this.#addTexture(texture);\n            }\n        }\n        if (geometries) {\n            for (let geometryId in geometries) {\n                const geometry = geometries[geometryId];\n                this.#addGeometry(geometry);\n            }\n        }\n        if (meshes) {\n            for (let meshId in meshes) {\n                const mesh = meshes[meshId];\n                this.#addMesh(mesh);\n            }\n        }\n        if (objects) {\n            for (let geometryId in objects) {\n                const object = objects[geometryId];\n                this.#addObject(object);\n            }\n        }\n        for (let layerId in this.#currentLayers) {\n            if (this.#currentLayers.hasOwnProperty(layerId)) {\n                this.#currentLayers[layerId].build();\n            }\n        }\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            objectRenderer.build();\n        }\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            objectRenderer.finalize2();\n        }\n    }\n\n    #addTexture(texture: Texture): void {\n        const textureId = texture.id;\n        if (this.rendererTextures[textureId]) {\n            throw new Error(\"RendererTexture already created: \" + textureId);\n        }\n        const glTexture = new GLTexture({gl: this.#renderContext.gl});\n        if (texture.preloadColor) {\n            glTexture.setPreloadColor(texture.preloadColor);\n        }\n        if (texture.image) { // Ignore transcoder for Images\n            const image = texture.image;\n            image.crossOrigin = \"Anonymous\";\n            glTexture.setImage(image, {\n                minFilter: texture.minFilter,\n                magFilter: texture.magFilter,\n                wrapS: texture.wrapS,\n                wrapT: texture.wrapT,\n                wrapR: texture.wrapR,\n                flipY: texture.flipY,\n                encoding: texture.encoding\n            });\n        } else if (texture.src) {\n            const ext = texture.src.split('.').pop();\n            switch (ext) { // Don't transcode recognized image file types\n                case \"jpeg\":\n                case \"jpg\":\n                case \"png\":\n                case \"gif\":\n                    const image = new Image();\n                    image.onload = () => {\n                        glTexture.setImage(image, {\n                            minFilter: texture.minFilter,\n                            magFilter: texture.magFilter,\n                            wrapS: texture.wrapS,\n                            wrapT: texture.wrapT,\n                            wrapR: texture.wrapR,\n                            flipY: texture.flipY,\n                            encoding: texture.encoding\n                        });\n                    };\n                    image.src = texture.src; // URL or Base64 string\n                    break;\n                default: // Assume other file types need transcoding\n                    if (!this.#textureTranscoder) {\n                        this.error(`Can't create texture from 'src' - rendererModel needs to be configured with a TextureTranscoder for this file type ('${ext}')`);\n                    } else {\n                        loadArraybuffer(texture.src, (arrayBuffer: ArrayBuffer) => {\n                                if (!arrayBuffer.byteLength) {\n                                    this.error(`Can't create texture from 'src': file data is zero length`);\n                                    return;\n                                }\n                                this.#textureTranscoder.transcode([arrayBuffer]).then((compressedTextureData) => {\n                                    glTexture.setCompressedData(compressedTextureData);\n                                    this.#webglRenderer.setImageDirty();\n                                });\n                            },\n                            (errMsg: string) => {\n                                this.error(`Can't create texture from 'src': ${errMsg}`);\n                            });\n                    }\n                    break;\n            }\n        } else if (texture.buffers) { // Buffers implicitly require transcoding\n            if (!this.#textureTranscoder) {\n                this.error(`Can't create texture from 'buffers' - rendererModel needs to be configured with a TextureTranscoder for this option`);\n            } else {\n                this.#textureTranscoder.transcode(texture.buffers).then((compressedTextureData) => {\n                    glTexture.setCompressedData(compressedTextureData);\n                    this.#webglRenderer.setImageDirty();\n                });\n            }\n        }\n        const rendererTexture = new RendererTextureImpl(texture, glTexture);\n        texture.rendererTexture = rendererTexture;\n        this.rendererTextures[textureId] = rendererTexture;\n    }\n\n    #addGeometry(geometry: Geometry): void {\n        const geometryId = geometry.id;\n        if (this.rendererGeometries[geometryId]) {\n            throw new Error(`GeometryRenderer already created: ${geometryId}`);\n        }\n        const rendererGeometry = new RendererGeometryImpl();\n        this.rendererGeometries[geometryId] = rendererGeometry;\n        geometry.rendererGeometry = rendererGeometry;\n        this.#numGeometries++;\n    }\n\n    #addMesh(mesh: Mesh): void {\n        const rendererGeometry = this.rendererGeometries[mesh.geometry.id];\n        if (!rendererGeometry) {\n            throw new Error(\"RendererGeometry not found\");\n        }\n        const rendererTextureSet = this.rendererTextureSets[(<TextureSet>mesh.textureSet).id];\n        if (!rendererTextureSet) {\n            throw new Error(\"rendererTextureSet not found\");\n        }\n\n        const layer = this.#getLayer((<TextureSet>mesh.textureSet).id, mesh.geometry);\n\n        if (!layer) {\n            return;\n        }\n\n        if (!layer.hasGeometry(mesh.geometry.id)) {\n            layer.createGeometryCompressed(mesh.geometry)\n        }\n\n        let meshMatrix;\n        let worldMatrix = this.#worldMatrixNonIdentity ? this.#worldMatrix : null;\n\n        meshMatrix = mesh.matrix;\n\n\n        const color = (mesh.color) ? new Uint8Array([Math.floor(mesh.color[0] * 255), Math.floor(mesh.color[1] * 255), Math.floor(mesh.color[2] * 255)]) : [255, 255, 255];\n        const opacity = (mesh.opacity !== undefined && mesh.opacity !== null) ? Math.floor(mesh.opacity * 255) : 255;\n        const metallic = (mesh.metallic !== undefined && mesh.metallic !== null) ? Math.floor(mesh.metallic * 255) : 0;\n        const roughness = (mesh.roughness !== undefined && mesh.roughness !== null) ? Math.floor(mesh.roughness * 255) : 255;\n\n        const meshRenderer = new RendererMeshImpl({\n            tileManager: <TileManager>this.#webglRenderer.tileManager,\n            id: mesh.id,\n            layer,\n            color,\n            opacity,\n            matrix: meshMatrix,\n            metallic,\n            roughness,\n            rendererTextureSet,\n            rendererGeometry,\n            meshIndex: 0\n        });\n\n        meshRenderer.pickId = this.#webglRenderer.registerPickable(meshRenderer);\n\n        const a = meshRenderer.pickId >> 24 & 0xFF;\n        const b = meshRenderer.pickId >> 16 & 0xFF;\n        const g = meshRenderer.pickId >> 8 & 0xFF;\n        const r = meshRenderer.pickId & 0xFF;\n\n        const pickColor = new Uint8Array([r, g, b, a]); // Quantized pick color\n        collapseAABB3(meshRenderer.aabb);\n\n        const meshIndex = layer.createMesh({\n            id: mesh.id,\n            geometryId: mesh.geometry.id,\n            color,\n            opacity,\n            metallic,\n            roughness,\n            matrix: meshMatrix,\n            //     worldMatrix: worldMatrix,\n            //    aabb: mesh.aabb,\n            pickColor\n        });\n        this.#numGeometries++;\n        expandAABB3(this.#aabb, meshRenderer.aabb);\n        meshRenderer.layer = layer;\n        meshRenderer.meshIndex = meshIndex;\n        this.rendererMeshes[mesh.id] = meshRenderer;\n    }\n\n\n    // build() {\n    //     if (this.destroyed) {\n    //         this.log(\"rendererModel already destroyed\");\n    //         return;\n    //     }\n    //     if (this.built) {\n    //         this.log(\"rendererModel already built\");\n    //         return;\n    //     }\n    //     for (let layerId in this.#currentLayers) {\n    //         if (this.#currentLayers.hasOwnProperty(layerId)) {\n    //             this.#currentLayers[layerId].build();\n    //         }\n    //     }\n    //     for (let i = 0, len = this.objectList.length; i < len; i++) {\n    //         const objectRenderer = this.objectList[i];\n    //         objectRenderer.build();\n    //     }\n    //     for (let i = 0, len = this.objectList.length; i < len; i++) {\n    //         const objectRenderer = this.objectList[i];\n    //         objectRenderer.finalize2();\n    //     }\n    //     // this.layerList.sort((a, b) => {\n    //     //     if (a.sortId < b.sortId) {\n    //     //         return -1;\n    //     //     }\n    //     //     if (a.sortId > b.sortId) {\n    //     //         return 1;\n    //     //     }\n    //     //     return 0;\n    //     // });\n    //     for (let i = 0, len = this.layerList.length; i < len; i++) {\n    //         const layer = this.layerList[i];\n    //         layer.layerIndex = i;\n    //     }\n    //     this.#currentLayers = {};\n    //     this.built = true;\n    //     this.#webglRenderer.setImageDirty();\n    //     //     this.#view.viewer.scene.setAABBDirty();\n    //     this.onBuilt.dispatch(this, null);\n    // }\n    //\n    // addModel(params: {\n    //     id: string,\n    //     sceneModel: SceneModel\n    // }) {\n    //\n    //     const sceneModel = params.sceneModel;\n    //     const textures = sceneModel.textures;\n    //     const geometries = sceneModel.geometries;\n    //     const meshes = sceneModel.meshes;\n    //     const objects = sceneModel.objects;\n    //\n    //     if (textures) {\n    //         for (let textureId in textures) {\n    //             const texture = textures[textureId];\n    //             this.#addTexture(texture);\n    //         }\n    //     }\n    //\n    //     if (geometries) {\n    //         for (let geometryId in geometries) {\n    //             const geometry = geometries[geometryId];\n    //             this.#addGeometry(geometry);\n    //         }\n    //     }\n    //\n    //     if (meshes) {\n    //         for (let meshId in meshes) {\n    //             const mesh = meshes[meshId];\n    //             this.#addMesh(mesh);\n    //         }\n    //     }\n    //\n    //     if (objects) {\n    //         for (let geometryId in objects) {\n    //             const object = objects[geometryId];\n    //             this.#addObject(object);\n    //         }\n    //     }\n    // }\n\n    #addObject(sceneObject: SceneObject): void {\n        let objectId = sceneObject.id;\n        if (objectId === undefined) {\n            objectId = createUUID();\n        } else if (this.rendererObjects[objectId]) {\n            this.error(\"[createObject] rendererModel already has a ViewerObject with this ID: \" + objectId + \" - will assign random ID\");\n            objectId = createUUID();\n        }\n        const meshes = sceneObject.meshes;\n        if (meshes === undefined) {\n            throw new Error(\"[createObject] Param expected: meshes\");\n        }\n        const rendererMeshes: RendererMeshImpl[] = [];\n        for (let i = 0, len = meshes.length; i < len; i++) {\n            const mesh = meshes[i];\n            const rendererMesh = <RendererMeshImpl>this.rendererMeshes[mesh.id];\n            rendererMeshes.push(rendererMesh);\n        }\n        const objectRenderer = new RendererObjectImpl({\n            id: objectId,\n            rendererModel: this,\n            rendererMeshes,\n            aabb: sceneObject.aabb,\n            layerId: this.#layerId\n        });\n        this.rendererObjectsList.push(objectRenderer);\n        this.rendererObjects[objectId] = objectRenderer;\n        this.rendererViewObjects[objectId] = objectRenderer;\n        this.#numViewerObjects++;\n    }\n\n    #removeModel(): void {\n        const sceneModel = this.sceneModel;\n        if (!sceneModel) {\n            return;\n        }\n        const textures = sceneModel.textures;\n        const geometries = sceneModel.geometries;\n        const meshes = sceneModel.meshes;\n        const objects = sceneModel.objects;\n        if (textures) {\n            for (let textureId in textures) {\n                const texture = textures[textureId];\n                if (texture.rendererTexture) {\n                    texture.rendererTexture = null;\n                }\n            }\n        }\n        if (geometries) {\n            for (let geometryId in geometries) {\n                const geometry = geometries[geometryId];\n                if (geometry.rendererGeometry) {\n                    geometry.rendererGeometry = null;\n                }\n            }\n        }\n        if (meshes) {\n            for (let meshId in meshes) {\n                const mesh = meshes[meshId];\n                if (mesh.rendererMesh) {\n                    mesh.rendererMesh = null;\n                }\n            }\n        }\n        if (objects) {\n            for (let objectId in objects) {\n                const object = objects[objectId];\n                if (object.rendererObject) {\n                    object.rendererObject = null;\n                }\n            }\n        }\n        this.sceneModel = null;\n    }\n\n    #createDefaultTextureSetRenderer() {\n        const defaultColorTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [1, 1, 1, 1] // [r, g, b, a]})\n            }));\n\n        const defaultMetalRoughTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 1, 1, 1] // [unused, roughness, metalness, unused]\n            }));\n        const defaultNormalsTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 0, 0, 0] // [x, y, z, unused] - these must be zeros\n            }));\n\n        const defaultEmissiveTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [0, 0, 0, 1] // [x, y, z, unused]\n            }));\n        const defaultOcclusionTexture = new RendererTextureImpl(\n            null,\n            new GLTexture({\n                gl: this.#renderContext.gl,\n                preloadColor: [1, 1, 1, 1] // [x, y, z, unused]\n            }));\n        this.rendererTextures[defaultColorTextureId] = defaultColorTexture;\n        this.rendererTextures[defaultMetalRoughTextureId] = defaultMetalRoughTexture;\n        this.rendererTextures[defaultNormalsTextureId] = defaultNormalsTexture;\n        this.rendererTextures[defaultEmissiveTextureId] = defaultEmissiveTexture;\n        this.rendererTextures[defaultOcclusionTextureId] = defaultOcclusionTexture;\n        this.rendererTextureSets[defaultTextureSetId] = new RendererTextureSetImpl({\n            id: defaultTextureSetId,\n            colorTexture: defaultColorTexture,\n            metallicRoughnessTexture: defaultMetalRoughTexture,\n            emissiveTexture: defaultEmissiveTexture,\n            occlusionTexture: defaultOcclusionTexture\n        });\n    }\n\n    #getLayer(textureSetId: string | undefined, geometryCompressedParams: GeometryCompressedParams): Layer | undefined {\n        const layerId = `${textureSetId}_${geometryCompressedParams.primitive}`;\n        let layer = this.#currentLayers[layerId];\n        if (layer) {\n            if (layer.canCreateMesh(geometryCompressedParams)) {\n                return layer;\n            } else {\n                layer.build();\n                delete this.#currentLayers[layerId];\n            }\n        }\n        let textureSet;\n        if (textureSetId) {\n            textureSet = this.rendererTextureSets[textureSetId];\n            if (!textureSet) {\n                this.error(`TextureSet not found: ${textureSetId} - ensure that you create it first with createTextureSet()`);\n                return;\n            }\n        }\n        layer = new Layer(<LayerParams>{\n            gl: this.#renderContext.gl,\n            view: this.#view,\n            rendererModel: this,\n            primitive: geometryCompressedParams.primitive,\n            textureSet,\n            layerIndex: 0\n        });\n        this.#layers[layerId] = layer;\n        this.layerList.push(layer);\n        this.#currentLayers[layerId] = layer;\n        return layer;\n    }\n\n    #rebuildAABB() {\n        collapseAABB3(this.#aabb);\n        for (let i = 0, len = this.rendererObjectsList.length; i < len; i++) {\n            const objectRenderer = this.rendererObjectsList[i];\n            expandAABB3(this.#aabb, objectRenderer.aabb);\n        }\n        this.#aabbDirty = false;\n    }\n\n    /*\n        #getActiveSectionPlanesForLayer(layer: any) {\n            const drawFlags = this.drawFlags;\n            const sectionPlanes = this.#view.sectionPlanesList;\n            const numSectionPlanes = sectionPlanes.length;\n            const baseIndex = layer.layerIndex * numSectionPlanes;\n            if (numSectionPlanes > 0) {\n                for (let i = 0; i < numSectionPlanes; i++) {\n                    const sectionPlane = sectionPlanes[i];\n                    if (!sectionPlane.active) {\n                        drawFlags.sectionPlanesActivePerLayer[baseIndex + i] = false;\n\n                    } else {\n                        drawFlags.sectionPlanesActivePerLayer[baseIndex + i] = true;\n                        drawFlags.sectioned = true;\n                    }\n                }\n            }\n            return true;\n        }\n\n        #updateDrawFlagsVisibleLayers() {\n            const drawFlags = this.drawFlags;\n            drawFlags.numLayers = this.layerList.length;\n            drawFlags.numVisibleLayers = 0;\n            for (let layerIndex = 0, len = this.layerList.length; layerIndex < len; layerIndex++) {\n                const layer = this.layerList[layerIndex];\n                const layerVisible = this.#getActiveSectionPlanesForLayer(layer);\n                if (layerVisible) {\n                    drawFlags.visibleLayers[drawFlags.numVisibleLayers++] = layerIndex;\n                }\n            }\n        }\n\n        #updateDrawFlags() {\n            if (this.meshCounts.numVisible === 0) {\n                return;\n            }\n            if (this.meshCounts.numCulled === this.meshCounts.numMeshes) {\n                return;\n            }\n            const drawFlags = this.drawFlags;\n            drawFlags.colorOpaque = (this.meshCounts.numTransparent < this.meshCounts.numMeshes);\n            if (this.meshCounts.numTransparent > 0) {\n                drawFlags.colorTransparent = true;\n            }\n            if (this.meshCounts.numXRayed > 0) {\n                const xrayMaterial = this.#view.xrayMaterial.state;\n                if (xrayMaterial.fill) {\n                    if (xrayMaterial.fillAlpha < 1.0) {\n                        drawFlags.xrayedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.xrayedSilhouetteOpaque = true;\n                    }\n                }\n                if (xrayMaterial.edges) {\n                    if (xrayMaterial.edgeAlpha < 1.0) {\n                        drawFlags.xrayedEdgesTransparent = true;\n                    } else {\n                        drawFlags.xrayedEdgesOpaque = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numEdges > 0) {\n                const edgeMaterial = this.#view.edgeMaterial.state;\n                if (edgeMaterial.edges) {\n                    drawFlags.edgesOpaque = (this.meshCounts.numTransparent < this.meshCounts.numMeshes);\n                    if (this.meshCounts.numTransparent > 0) {\n                        drawFlags.edgesTransparent = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numSelected > 0) {\n                const selectedMaterial = this.#view.selectedMaterial.state;\n                if (selectedMaterial.fill) {\n                    if (selectedMaterial.fillAlpha < 1.0) {\n                        drawFlags.selectedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.selectedSilhouetteOpaque = true;\n                    }\n                }\n                if (selectedMaterial.edges) {\n                    if (selectedMaterial.edgeAlpha < 1.0) {\n                        drawFlags.selectedEdgesTransparent = true;\n                    } else {\n                        drawFlags.selectedEdgesOpaque = true;\n                    }\n                }\n            }\n            if (this.meshCounts.numHighlighted > 0) {\n                const highlightMaterial = this.#view.highlightMaterial.state;\n                if (highlightMaterial.fill) {\n                    if (highlightMaterial.fillAlpha < 1.0) {\n                        drawFlags.highlightedSilhouetteTransparent = true;\n                    } else {\n                        drawFlags.highlightedSilhouetteOpaque = true;\n                    }\n                }\n                if (highlightMaterial.edges) {\n                    if (highlightMaterial.edgeAlpha < 1.0) {\n                        drawFlags.highlightedEdgesTransparent = true;\n                    } else {\n                        drawFlags.highlightedEdgesOpaque = true;\n                    }\n                }\n            }\n        }\n\n     */\n}\n\n\n\n","/**\n * [![npm version](https://badge.fury.io/js/%40xeokit%2Fsvg)](https://badge.fury.io/js/%40xeokit%2Fmath)\n * [![](https://data.jsdelivr.com/v1/package/npm/@xeokit/badge)](https://www.jsdelivr.com/package/npm/@xeokit/math)\n *\n * <img style=\"padding:0px; padding-top:20px; padding-bottom:20px;  height:270px\" src=\"media://images/3D-Cart.svg\"/>\n *\n * # xeokit RTC Coordinate Utilities\n *\n * ---\n *\n * ### *Math functions for working with RTC cartesian coordinates*\n *\n * ---\n *\n * * Math functions for working with relative-to-center (RTC) coordinate systems\n * * Used internally within {@link @xeokit/viewer!Viewer}\n *\n * ## Installation\n *\n * ````bash\n * npm install @xeokit/rtc\n * ````\n *\n * ## Usage\n *\n * ````javascript\n * import * as rtc from \"@xeokit/rtc\";\n *\n * const worldPos = [100000000000.0, 1000000000.0, 1000000000000.0];\n * const rtcCenter = [0,0,0];\n * const rtcPos = [0,0,0];\n *\n * rtc.worldToRTCPos(worldPos, rtcCenter, rtcPos);\n *\n * //..\n * ````\n *\n * @module @xeokit/rtc\n */\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createVec3, dotVec3, mulVec3Scalar, normalizeVec3, setMat4Translation, transformVec4} from \"@xeokit/matrix\";\nimport {getPositions3Center} from \"@xeokit/boundaries\";\n\n\nconst tempVec3a = createVec3();\n\n\nconst tempMat = new Float32Array(16);\nconst rtcCenterWorld = new Float64Array(4);\nconst rtcCenterView = new Float64Array(4);\n\n/**\n * Given a view matrix and a relative-to-center (RTC) coordinate origin, returns a view matrix\n * to transform RTC coordinates to View-space.\n */\nexport function createRTCViewMat(viewMat: FloatArrayParam, rtcCenter: FloatArrayParam, rtcViewMat: FloatArrayParam = tempMat): FloatArrayParam {\n    rtcCenterWorld[0] = rtcCenter[0];\n    rtcCenterWorld[1] = rtcCenter[1];\n    rtcCenterWorld[2] = rtcCenter[2];\n    rtcCenterWorld[3] = 1;\n    transformVec4(viewMat, rtcCenterWorld, rtcCenterView);\n    setMat4Translation(viewMat, rtcCenterView, rtcViewMat);\n    return rtcViewMat;\n}\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center pos\n * and a single-precision offset fom that center.\n *\n * @param worldPos The World-space position.\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param rtcPos Single-precision offset fom that center.\n */\nexport function worldToRTCPos(worldPos: FloatArrayParam, rtcCenter: FloatArrayParam, rtcPos: FloatArrayParam) {\n\n    const xHigh = Float32Array.from([worldPos[0]])[0];\n    const xLow = worldPos[0] - xHigh;\n\n    const yHigh = Float32Array.from([worldPos[1]])[0];\n    const yLow = worldPos[1] - yHigh;\n\n    const zHigh = Float32Array.from([worldPos[2]])[0];\n    const zLow = worldPos[2] - zHigh;\n\n    rtcCenter[0] = xHigh;\n    rtcCenter[1] = yHigh;\n    rtcCenter[2] = zHigh;\n\n    rtcPos[0] = xLow;\n    rtcPos[1] = yLow;\n    rtcPos[2] = zLow;\n}\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center.\n *\n * @param worldCenter The World-space position.\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param [cellSize=200] The size of each coordinate cell within the RTC coordinate system.\n */\nexport function worldToRTCCenter(worldCenter: FloatArrayParam, rtcCenter: FloatArrayParam, cellSize = 200) {\n    rtcCenter[0] = Math.round(worldCenter[0] / cellSize) * cellSize;\n    rtcCenter[1] = Math.round(worldCenter[1] / cellSize) * cellSize;\n    rtcCenter[2] = Math.round(worldCenter[2] / cellSize) * cellSize;\n    return rtcCenter;\n}\n\n/**\n * Converts a flat array of double-precision positions to RTC positions.\n *\n * Returns the RTC positions, along with a computed RTC center for those positions.\n *\n * When computing the RTC position, this function uses a modulus operation to ensure that, whenever possible,\n * identical RTC positions are reused for different positions arrays.\n *\n * @param worldPositions Flat array of World-space 3D positions.\n * @param rtcPositions Outputs the computed flat array of 3D RTC positions.\n * @param rtcCenter Outputs the computed double-precision relative-to-center (RTC) center pos.\n * @param [cellSize=200] The size of each coordinate cell within the RTC coordinate system.\n * @returns ````True```` if the positions actually needed conversion to RTC, else ````false````. When\n * ````false````, we can safely ignore the data returned in ````rtcPositions```` and ````rtcCenter````,\n * since ````rtcCenter```` will equal ````[0,0,0]````, and ````rtcPositions```` will contain identical values to ````positions````.\n */\nexport function worldToRTCPositions(worldPositions: FloatArrayParam, rtcPositions: FloatArrayParam, rtcCenter: FloatArrayParam, cellSize = 200): boolean {\n\n    const center = getPositions3Center(worldPositions, tempVec3a);\n\n    const rtcCenterX = Math.round(center[0] / cellSize) * cellSize;\n    const rtcCenterY = Math.round(center[1] / cellSize) * cellSize;\n    const rtcCenterZ = Math.round(center[2] / cellSize) * cellSize;\n\n    for (let i = 0, len = worldPositions.length; i < len; i += 3) {\n        rtcPositions[i + 0] = worldPositions[i + 0] - rtcCenterX;\n        rtcPositions[i + 1] = worldPositions[i + 1] - rtcCenterY;\n        rtcPositions[i + 2] = worldPositions[i + 2] - rtcCenterZ;\n    }\n\n    rtcCenter[0] = rtcCenterX;\n    rtcCenter[1] = rtcCenterY;\n    rtcCenter[2] = rtcCenterZ;\n\n    const rtcNeeded = (rtcCenter[0] !== 0 || rtcCenter[1] !== 0 || rtcCenter[2] !== 0);\n\n    return rtcNeeded;\n}\n\n/**\n * Converts an RTC 3D position to World-space.\n *\n * @param rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param rtcPos Single-precision offset fom that center.\n * @param worldPos The World-space position.\n */\nexport function rtcToWorldPos(rtcCenter: FloatArrayParam, rtcPos: FloatArrayParam, worldPos: FloatArrayParam): FloatArrayParam {\n    worldPos[0] = rtcCenter[0] + rtcPos[0];\n    worldPos[1] = rtcCenter[1] + rtcPos[1];\n    worldPos[2] = rtcCenter[2] + rtcPos[2];\n    return worldPos;\n}\n\n/**\n * Given a 3D plane defined by distance from origin and direction, and an RTC center position,\n * return a plane position that is relative to the RTC center.\n *\n * @param dist\n * @param dir\n * @param rtcCenter\n * @param rtcPlanePos\n * @returns {*}\n */\nexport function getPlaneRTCPos(dist: number, dir: FloatArrayParam, rtcCenter: FloatArrayParam, rtcPlanePos: FloatArrayParam) {\n    const rtcCenterToPlaneDist = dotVec3(dir, rtcCenter) + dist;\n    const dirNormalized = normalizeVec3(dir, tempVec3a);\n    mulVec3Scalar(dirNormalized, -rtcCenterToPlaneDist, rtcPlanePos);\n    return rtcPlanePos;\n}\n","import {createMatricesDataTexture} from \"./dataTextures\";\nimport type {GLDataTexture} from \"@xeokit/webglutils\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createMat4, createVec3} from \"@xeokit/matrix\";\nimport {createRTCViewMat, worldToRTCCenter} from \"@xeokit/rtc\";\nimport type {Camera} from \"@xeokit/viewer\";\n\nconst NUM_TILES = 2000;\n\nexport interface Tile {\n    id: string;\n    index: number;\n    useCount: number;\n    center: FloatArrayParam;\n    rtcViewMatrix: FloatArrayParam;\n}\n\nexport class TileManager {\n\n    #gl: WebGL2RenderingContext;\n    #indexesUsed: boolean[];\n    #tiles: { [key: string]: Tile };\n    #dataTexture: GLDataTexture;\n    #camera: Camera;\n    #lastFreeIndex: number;\n\n    constructor(params: {\n        camera: Camera,\n        gl: WebGL2RenderingContext\n    }) {\n        this.#camera = params.camera;\n        this.#gl = params.gl;\n        this.#indexesUsed = [];\n        this.#lastFreeIndex = 0;\n        this.#tiles = {};\n        this.#dataTexture = createMatricesDataTexture(this.#gl, NUM_TILES);\n    }\n\n    getTile(center: FloatArrayParam): Tile {\n        const rtcCenter = worldToRTCCenter(center, createVec3());\n        const id = `${rtcCenter[0]}-${rtcCenter[1]}-${rtcCenter[2]}`;\n        let tile = this.#tiles[id];\n        if (!tile) {\n            tile = {\n                id,\n                index: this.#findFreeTile(),\n                useCount: 0,\n                center: createVec3(),\n                rtcViewMatrix: createMat4()\n            };\n            this.#tiles[tile.id] = tile;\n        }\n        tile.useCount++;\n        return tile;\n    }\n\n    putTile(tile: Tile) {\n        if (--tile.useCount <= 0) {\n            delete this.#tiles[tile.id];\n            this.#putFreeTile(tile.index);\n        }\n    }\n\n    updateTileCenter(tile: Tile, newCenter: FloatArrayParam): Tile {\n        const newRTCCenter = worldToRTCCenter(newCenter, createVec3());\n        const newId = `${newRTCCenter[0]}-${newRTCCenter[1]}-${newRTCCenter[2]}`;\n        if (newId === tile.id) {\n            return tile;\n        }\n        this.putTile(tile);\n        let newTile = this.#tiles[newId];\n        if (!newTile) {\n            newTile = {\n                id: newId,\n                index: this.#findFreeTile(),\n                useCount: 0,\n                center: createVec3(),\n                rtcViewMatrix: createMat4()\n            };\n            this.#tiles[newTile.id] = newTile;\n        }\n        newTile.useCount++;\n        return newTile;\n    }\n\n    refreshMatrices() {\n        if (!this.#dataTexture.texture) {\n            return;\n        }\n        const gl = this.#gl;\n        const viewMatrix = this.#camera.viewMatrix;\n        const tileIds = Object.keys(this.#tiles);\n        const numTiles = tileIds.length;\n        const data = new Float32Array(16 * numTiles);\n        for (let i = 0, len = tileIds.length; i < len; i++) {\n            const tileId = tileIds[i];\n            const tile = this.#tiles[tileId];\n            createRTCViewMat(viewMatrix, tile.center, tile.rtcViewMatrix);\n            data.set(tile.rtcViewMatrix, tile.index * 16);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, this.#dataTexture.texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, gl.RGBA, gl.FLOAT, data);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n\n    #putFreeTile(index: number) {\n        delete this.#indexesUsed[index];\n        this.#lastFreeIndex = index;\n    }\n\n    #findFreeTile(): number {\n        for (let index = this.#lastFreeIndex; ; index = (index + 1) % NUM_TILES) {\n            if (!this.#indexesUsed[index]) {\n                this.#indexesUsed[index] = true;\n                return index;\n            }\n        }\n    }\n\n\n}","import {apply, Map} from \"@xeokit/utils\";\nimport {createVec3} from \"@xeokit/matrix\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {\n    LinesPrimitive,\n    PointsPrimitive,\n    SolidPrimitive,\n    SurfacePrimitive,\n    TrianglesPrimitive\n} from \"@xeokit/constants\";\n\nimport type {CreateModelParams, Renderer, View, Viewer, ViewObject} from \"@xeokit/viewer\";\n\nimport {KTX2TextureTranscoder} from \"@xeokit/ktx2\";\nimport {RenderContext} from \"./RenderContext\";\nimport {FastColorTrianglesRenderer} from \"./FastColorTrianglesRenderer\";\nimport {getExtension, GLRenderBuffer, WEBGL_INFO} from \"@xeokit/webglutils\";\nimport {RENDER_PASSES} from \"./RENDER_PASSES\";\nimport type {Pickable} from \"./Pickable\";\nimport {RendererModelImpl} from \"./RendererModelImpl\";\nimport type {Layer} from \"./Layer\";\nimport type {RendererViewObject} from \"@xeokit/viewer/src/RendererViewObject\";\nimport type {Capabilities, Component, TextureTranscoder} from \"@xeokit/core\";\nimport type {SceneModel} from \"@xeokit/scene\";\nimport {TileManager} from \"./TileManager\";\n\n\nconst ua = navigator.userAgent.match(/(opera|chrome|safari|firefox|msie|mobile)\\/?\\s*(\\.?\\d+(\\.\\d+)*)/i);\nconst isSafari = (ua && ua[1].toLowerCase() === \"safari\");\n\n/**\n * WebGL-based rendering strategy for a {@link @xeokit/viewer!Viewer | Viewer}.\n *\n * See {@link @xeokit/webglrenderer} for usage.\n *\n * @internal\n */\nexport class WebGLRenderer implements Renderer {\n\n    rendererViewObjects: { [key: string]: RendererViewObject };\n    tileManager: TileManager|null;\n    #sceneModels: { [key: string]: SceneModel };\n    #viewer: Viewer;\n    #view: View;\n    #renderContext: RenderContext;\n    #canvasTransparent: boolean;\n    #transparentEnabled: boolean;\n    #edgesEnabled: boolean;\n    #imageDirty: boolean;\n    #saoEnabled: boolean;\n    #pbrEnabled: boolean;\n    #backgroundColor: FloatArrayParam;\n    #rendererModels: { [key: string]: RendererModelImpl };\n    #layerList: Layer[];\n    #layerListDirty: boolean;\n    #stateSortDirty: boolean;\n    #pickIDs = new Map({});\n    #saoDepthRenderBuffer: GLRenderBuffer;\n    // #renderBufferManager: GLRenderBufferManager;\n    #extensionHandles: any;\n    #logarithmicDepthBufferEnabled: boolean;\n    #alphaDepthMask: boolean;\n    #occlusionTester: any;\n    // #saoOcclusionRenderer: null | SAOOcclusionRenderer;\n    // #saoDepthLimitedBlurRenderer: SAODepthLimitedBlurRenderer;\n    #textureTranscoder: TextureTranscoder;\n\n    // @ts-ignore\n    #layerRenderers: {\n        // colorPoints: ColorPointsLayerRenderer;\n        colorTriangles: FastColorTrianglesRenderer;\n        // qualityColorTriangles: QualityColorTrianglesRenderer;\n        // colorLines: ColorLinesLayerRenderer;\n        // silhouettePoints: SilhouettePointsRenderer;\n        // silhouetteTriangles: SilhouetteTrianglesLayerRenderer;\n        // silhouetteLines: SilhouetteLinesRenderer;\n    };\n    #viewMatrixDirty: boolean;\n\n    /**\n     Creates a WebGLRenderer.\n\n     @param params Configs\n     @param params.textureTranscoder Injects an optional transcoder that will be used internally by {@link rendererModel.createTexture}\n     to convert transcoded texture data. The transcoder is only required when we'll be providing transcoded data\n     to {@link rendererModel.createTexture}. We assume that all transcoded texture data added to a  ````rendererModel````\n     will then be in a format supported by this transcoder.\n     */\n    constructor(params: {\n        textureTranscoder?: TextureTranscoder\n    }) {\n        this.tileManager = null;\n        this.#sceneModels = {};\n        this.rendererViewObjects = {};\n\n        this.#textureTranscoder = params.textureTranscoder || new KTX2TextureTranscoder({});\n        this.#canvasTransparent = false;\n        this.#alphaDepthMask = false;\n        this.#extensionHandles = {};\n        this.#pickIDs = new Map({});\n        this.#layerList = [];\n        this.#layerListDirty = true;\n        this.#stateSortDirty = true;\n        this.#imageDirty = true;\n        this.#transparentEnabled = true;\n        this.#edgesEnabled = true;\n        this.#saoEnabled = true;\n        this.#pbrEnabled = true;\n        this.#backgroundColor = createVec3();\n        this.#occlusionTester = null; // Lazy-created in #addMarker()\n\n        // this.#saoDepthRenderBuffer = null;\n        // this.#renderBufferManager = null;\n        this.#logarithmicDepthBufferEnabled = false;\n        this.#rendererModels = {};\n        this.#viewMatrixDirty = true;\n    }\n\n    init(viewer: Viewer): void {\n        this.#viewer = viewer;\n        this.#textureTranscoder.init(this.#viewer.capabilities);\n    }\n\n    getCapabilities(capabilities: Capabilities): void {\n        capabilities.maxViews = 1;\n        const canvasElement = document.createElement('canvas');\n        let gl;\n        try {\n            gl = canvasElement.getContext(\"webgl2\");\n        } catch (e) {\n            console.error('Failed to get a WebGL context');\n        }\n        if (gl) {\n            capabilities.astcSupported = !!getExtension(gl, 'WEBGL_compressed_texture_astc');\n            capabilities.etc1Supported = true; // WebGL\n            capabilities.etc2Supported = !!getExtension(gl, 'WEBGL_compressed_texture_etc');\n            capabilities.dxtSupported = !!getExtension(gl, 'WEBGL_compressed_texture_s3tc');\n            capabilities.bptcSupported = !!getExtension(gl, 'EXT_texture_compression_bptc');\n            capabilities.pvrtcSupported = !!(getExtension(gl, 'WEBGL_compressed_texture_pvrtc') || getExtension(gl, 'WEBKIT_WEBGL_compressed_texture_pvrtc'));\n        }\n    }\n\n    registerView(view: View): number {\n        if (this.#renderContext) {\n            throw \"Only one View allowed with WebGLRenderer (see WebViewerCapabilities.maxViews)\";\n        }\n        this.#view = view;\n        const WEBGL_CONTEXT_NAMES = [\"webglutils\"];\n        const canvasElement = view.canvasElement;\n        const contextAttr = {};\n        let gl: WebGL2RenderingContext | null = null;\n        for (let i = 0; !gl && i < WEBGL_CONTEXT_NAMES.length; i++) {\n            try {  // @ts-ignore\n                gl = canvasElement.getContext(WEBGL_CONTEXT_NAMES[i], contextAttr);\n            } catch (e) { // Try with next context name\n            }\n        }\n        if (!gl) {\n            console.error('Failed to get a WebGL2 context');\n            //  view.events.fire(\"webglContextFailed\", true, true);\n            return 0;\n        }\n        if (gl) {\n            gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, gl.NICEST);\n        }\n        this.#renderContext = new RenderContext(this.#viewer, this.#view, gl);\n        this.tileManager = new TileManager({\n            camera: view.camera,\n            gl\n        });\n        this.#layerRenderers = {\n            //       colorPoints: new ColorPointsLayerRenderer(this.#renderContext),\n            colorTriangles: new FastColorTrianglesRenderer(this.#renderContext),\n            // qualityColorTriangles: new QualityColorTrianglesRenderer(this.#renderContext),\n            // colorLines: new ColorLinesLayerRenderer(this.#renderContext),\n            // silhouettePoints: new SilhouettePointsRenderer(this.#renderContext),\n            // silhouetteTriangles: new SilhouetteTrianglesLayerRenderer(this.#renderContext),\n            // silhouetteLines: new SilhouetteLinesRenderer(this.#renderContext)\n        };\n        view.camera.onViewMatrix.sub(() => {\n            this.#viewMatrixDirty = true;\n        })\n        return 0;\n    }\n\n    deregisterView(viewIndex: number): void { // Nop\n    }\n\n    /**\n     * Adds a SceneModel to this renderer.\n     */\n    addModel(params: CreateModelParams): void {\n        if (!this.#renderContext) {\n            throw new Error(\"Must register a View before you add a SceneModel\");\n        }\n        const rendererModel = new RendererModelImpl(apply({\n            sceneModel: params.sceneModel,\n            view: this.#view,\n            textureTranscoder: this.#textureTranscoder,\n            webglRenderer: this,\n            renderContext: this.#renderContext,\n            layerId: params.layerId\n        }, params));\n\n        this.#rendererModels[rendererModel.id] = rendererModel;\n        this.#registerRendererViewObjects(rendererModel);\n        this.#layerListDirty = true;\n\n        rendererModel.onDestroyed.one((component: Component) => {\n            const rendererModel = this.#rendererModels[component.id];\n            delete this.#rendererModels[component.id];\n            this.#deregisterRendererViewObjects(rendererModel);\n            this.#layerListDirty = true;\n        });\n    }\n\n    removeModel(modelId: string): void {\n        const sceneModel = this.#sceneModels[modelId];\n        if (sceneModel) {\n            const rendererModel = this.#rendererModels[modelId];\n            delete this.#rendererModels[modelId];\n            this.#deregisterRendererViewObjects(rendererModel);\n            this.#layerListDirty = true;\n\n        }\n    }\n\n    /**\n     * @private\n     */\n    registerPickable(pickable: Pickable): number { // @ts-ignore\n        return this.#pickIDs.addItem(pickable);\n    }\n\n    /**\n     * @private\n     */\n    deregisterPickable(pickId: number) {\n        this.#pickIDs.removeItem(pickId);\n    }\n\n    //\n    // createModel(params: ModelParams): SceneModel {\n    //     if (!this.#renderContext) {\n    //         throw \"Must register a View before you create a model\";\n    //     }\n    //     const WebGLSceneModelRenderer = new WebGLSceneModelRenderer(apply({\n    //         view: this.#view,\n    //         textureTranscoder: this.#textureTranscoder,\n    //         webglRenderer: this,\n    //         renderContext: this.#renderContext,\n    //         layerId: params.layerId\n    //     }, params));\n    //     WebGLSceneModelRenderer.onBuilt.one((buildsceneModelRenderer: SceneModel) => {\n    //         this.#rendererModels[buildsceneModelRenderer.id] = <WebGLSceneModelRenderer>buildsceneModelRenderer;\n    //         this.#layerListDirty = true;\n    //     });\n    //     WebGLSceneModelRenderer.onDestroyed.one((destroyedsceneModelRenderer: Component) => {\n    //         delete this.#rendererModels[destroyedsceneModelRenderer.id];\n    //         this.#layerListDirty = true;\n    //     });\n    //     return WebGLSceneModelRenderer;\n    // }\n\n    setImageDirty(viewIndex?: number) {\n        this.#imageDirty = true;\n    }\n\n    setBackgroundColor(viewIndex: number, color: FloatArrayParam): void { // @ts-ignore\n        this.#backgroundColor.set(color);\n        this.#imageDirty = true;\n    }\n\n    setEdgesEnabled(viewIndex: number, enabled: boolean): void {\n        this.#edgesEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    setPBREnabled(viewIndex: number, enabled: boolean): void {\n        this.#pbrEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    getSAOSupported(): boolean {\n        return isSafari && WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"];\n    }\n\n    setSAOEnabled(viewIndex: number, enabled: boolean): void {\n        this.#saoEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    setTransparentEnabled(viewIndex: number, enabled: boolean): void {\n        this.#transparentEnabled = enabled;\n        this.#imageDirty = true;\n    }\n\n    clear(viewIndex: number) {\n        const gl = this.#renderContext.gl;\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        if (this.#canvasTransparent) {\n            gl.clearColor(1, 1, 1, 1);\n        } else {\n            gl.clearColor(this.#backgroundColor[0], this.#backgroundColor[1], this.#backgroundColor[2], 1.0);\n        }\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    };\n\n    needsRebuild(viewIndex?: number): void {\n        for (let rendererId in this.#layerRenderers) {\n            // @ts-ignore\n            this.#layerRenderers[rendererId].needRebuild();\n        }\n    }\n\n    needsRender(viewIndex?: number): boolean {\n        return (this.#imageDirty || this.#layerListDirty || this.#stateSortDirty);\n    }\n\n    render(viewIndex: number, params: {\n        force?: boolean;\n    }) {\n        params = params || {};\n        if (params.force) {\n            this.#imageDirty = true;\n        }\n        if (this.#viewMatrixDirty) {\n            (<TileManager>this.tileManager).refreshMatrices();\n            this.#viewMatrixDirty = false;\n        }\n        this.#updateLayerList();\n        if (this.#imageDirty) {\n            this.#draw({clear: true});\n            this.#imageDirty = false;\n        }\n    }\n\n    pickSceneObject(viewIndex: number, params: {}): ViewObject | null {\n        return null;\n    };\n\n    #registerRendererViewObjects(rendererModel: RendererModelImpl) {\n        const rendererObjects = rendererModel.rendererViewObjects;\n        for (let id in rendererObjects) {\n            this.rendererViewObjects[id] = rendererObjects[id];\n        }\n    }\n\n    #deregisterRendererViewObjects(rendererModel: RendererModelImpl) {\n        const rendererViewObjects = rendererModel.rendererViewObjects;\n        for (let id in rendererViewObjects) {\n            delete this.rendererViewObjects[id];\n        }\n    }\n\n    #updateLayerList() {\n        if (this.#layerListDirty) {\n            this.#buildLayerList();\n            this.#layerListDirty = false;\n            this.#stateSortDirty = true;\n        }\n        if (this.#stateSortDirty) {\n            //     this.#sortLayerList();\n            this.#stateSortDirty = false;\n            this.#imageDirty = true;\n        }\n    }\n\n    #buildLayerList() {\n        let lenDrawableList = 0;\n        for (let id in this.#rendererModels) {\n            const webGLSceneModelRenderer = this.#rendererModels[id];\n            for (let i = 0, len = webGLSceneModelRenderer.layerList.length; i < len; i++) {\n                this.#layerList[lenDrawableList++] = webGLSceneModelRenderer.layerList[i];\n            }\n        }\n        this.#layerList.length = lenDrawableList;\n    }\n\n    #draw(params: {\n        clear: boolean;\n    }) {\n        this.#activateExtensions();\n        if (this.#saoEnabled && this.#view.sao.possible) {\n            this.#drawSAOBuffers(params);\n        }\n        this.#drawColor(params);\n    }\n\n    #activateExtensions() {\n        if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) {\n            this.#extensionHandles.OES_element_index_uint = this.#renderContext.gl.getExtension(\"OES_element_index_uint\");\n        }\n        if (this.#logarithmicDepthBufferEnabled && WEBGL_INFO.SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            this.#extensionHandles.EXT_frag_depth = this.#renderContext.gl.getExtension('EXT_frag_depth');\n        }\n        if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"]) {\n            this.#extensionHandles.WEBGL_depth_texture = this.#renderContext.gl.getExtension('WEBGL_depth_texture');\n        }\n    }\n\n    #drawSAOBuffers(params: {\n        clear: boolean;\n    }) {\n        // const sao = this.#view.sao;\n        // const saoDepthRenderBuffer = this.#renderBufferManager.getRenderBuffer(\"saoDepth\", {\n        //     depthTexture: WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"]\n        // });\n        // this.#saoDepthRenderBuffer.bind();\n        // this.#saoDepthRenderBuffer.clear();\n        // this.#drawDepth(params);\n        // this.#saoDepthRenderBuffer.unbind();\n        // // Render occlusion buffer\n        // const occlusionRenderBuffer1 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion\");\n        // occlusionRenderBuffer1.bind();\n        // occlusionRenderBuffer1.clear();\n        // this.#saoOcclusionRenderer.render(saoDepthRenderBuffer);\n        // occlusionRenderBuffer1.unbind();\n        // if (sao.blur) {\n        //     // Horizontally blur occlusion buffer 1 into occlusion buffer 2\n        //     const occlusionRenderBuffer2 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion2\");\n        //     occlusionRenderBuffer2.bind();\n        //     occlusionRenderBuffer2.clear();\n        //     this.#saoDepthLimitedBlurRenderer.render(saoDepthRenderBuffer, occlusionRenderBuffer1, 0);\n        //     occlusionRenderBuffer2.unbind();\n        //     // Vertically blur occlusion buffer 2 back into occlusion buffer 1\n        //     occlusionRenderBuffer1.bind();\n        //     occlusionRenderBuffer1.clear();\n        //     this.#saoDepthLimitedBlurRenderer.render(saoDepthRenderBuffer, occlusionRenderBuffer2, 1);\n        //     occlusionRenderBuffer1.unbind();\n        // }\n    }\n\n    #drawDepth(params: {\n        clear: boolean\n    }) {\n        this.#renderContext.reset();\n        const gl = this.#renderContext.gl;\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.frontFace(gl.CCW);\n        gl.enable(gl.CULL_FACE);\n        gl.depthMask(true);\n        if (params.clear !== false) {\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        // for (let i = 0, len = this.#layerListPostCull.length; i < len; i++) {\n        //     const layer = this.#layerListPostCull[i];\n        //     // if (layer.culled === true || layer.visible === false || !layer.drawDepth) {\n        //     //     continue;\n        //     // }\n        //     // if (layer.drawFlags.colorOpaque) {\n        //     //     //    layer.drawDepth(this.#renderContext);\n        //     // }\n        // }\n        // const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        // for (let ii = 0; ii < numVertexAttribs; ii++) {\n        //     gl.disableVertexAttribArray(ii);\n        // }\n    }\n\n    #drawColor(params: {\n        clear: boolean;\n    }) {\n\n        const view = this.#view;\n        const renderContext = this.#renderContext;\n        const gl = renderContext.gl;\n\n        const normalDrawSAOBin: Layer[] = [];\n        const edgesColorOpaqueBin: Layer[] = [];\n        const normalFillTransparentBin: Layer[] = [];\n        const edgesColorTransparentBin: Layer[] = [];\n        const xrayedSilhouetteOpaqueBin: Layer[] = [];\n        const xrayEdgesOpaqueBin: Layer[] = [];\n        const xrayedSilhouetteTransparentBin: Layer[] = [];\n        const xrayEdgesTransparentBin: Layer[] = [];\n        const highlightedSilhouetteOpaqueBin: Layer[] = [];\n        const highlightedEdgesOpaqueBin: Layer[] = [];\n        const highlightedSilhouetteTransparentBin: Layer[] = [];\n        const highlightedEdgesTransparentBin: Layer[] = [];\n        const selectedSilhouetteOpaqueBin: Layer[] = [];\n        const selectedEdgesOpaqueBin: Layer[] = [];\n        const selectedSilhouetteTransparentBin: Layer[] = [];\n        const selectedEdgesTransparentBin: Layer[] = [];\n\n        renderContext.reset();\n        renderContext.withSAO = false;\n        renderContext.pbrEnabled = this.#pbrEnabled && !!view.qualityRender;\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        if (this.#canvasTransparent) {\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            gl.clearColor(this.#backgroundColor[0], this.#backgroundColor[1], this.#backgroundColor[2], 1.0);\n        }\n\n        gl.enable(gl.DEPTH_TEST);\n        gl.frontFace(gl.CCW);\n        gl.enable(gl.CULL_FACE);\n        gl.depthMask(true);\n        gl.lineWidth(1);\n\n        renderContext.lineWidth = 1;\n\n        const saoPossible = view.sao.possible;\n\n        if (this.#saoEnabled && saoPossible) {\n            // const occlusionRenderBuffer1 = this.#renderBufferManager.getRenderBuffer(\"saoOcclusion\", {\n            //     depthTexture: false,\n            //     size: [gl.drawingBufferWidth, gl.drawingBufferHeight]\n            // });\n            // renderContext.occlusionTexture = occlusionRenderBuffer1 ? occlusionRenderBuffer1.getTexture() : null;\n        } else {\n            renderContext.occlusionTexture = null;\n\n        }\n\n        if (params.clear !== false) {\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        // Render normal opaque solids, defer others to subsequent bins, to render after\n\n        let normalDrawSAOBinLen = 0;\n        let edgesColorOpaqueBinLen = 0;\n        let normalFillTransparentBinLen = 0;\n        let edgesColorTransparentBinLen = 0;\n        let xrayedSilhouetteOpaqueBinLen = 0;\n        let xrayEdgesOpaqueBinLen = 0;\n        let xrayedSilhouetteTransparentBinLen = 0;\n        let xrayEdgesTransparentBinLen = 0;\n        let highlightedSilhouetteOpaqueBinLen = 0;\n        let highlightedEdgesOpaqueBinLen = 0;\n        let highlightedSilhouetteTransparentBinLen = 0;\n        let highlightedEdgesTransparentBinLen = 0;\n        let selectedSilhouetteOpaqueBinLen = 0;\n        let selectedEdgesOpaqueBinLen = 0;\n        let selectedSilhouetteTransparentBinLen = 0;\n        let selectedEdgesTransparentBinLen = 0;\n\n        for (let i = 0, len = this.#layerList.length; i < len; i++) {\n\n            const layer = this.#layerList[i];\n            const meshCounts = layer.meshCounts;\n\n            if (meshCounts.numCulled === meshCounts.numMeshes || meshCounts.numVisible === 0) {\n                continue;\n            }\n\n            if (meshCounts.numTransparent < meshCounts.numMeshes) {\n                if (this.#saoEnabled && saoPossible && layer.rendererModel.qualityRender) {\n                    normalDrawSAOBin[normalDrawSAOBinLen++] = layer;\n                } else {\n                    this.#drawLayer(layer, RENDER_PASSES.COLOR_OPAQUE, layer.rendererModel.qualityRender);\n                }\n            }\n\n            if (this.#transparentEnabled) {\n                if (meshCounts.numTransparent) {\n                    normalFillTransparentBin[normalFillTransparentBinLen++] = layer;\n                }\n            }\n\n            if (meshCounts.numXRayed > 0) {\n                if (view.xrayMaterial.fill) {\n                    if (view.xrayMaterial.fillAlpha < 1.0) {\n                        xrayedSilhouetteTransparentBin[xrayedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        xrayedSilhouetteOpaqueBin[xrayedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (meshCounts.numHighlighted > 0) {\n                if (view.highlightMaterial.fill) {\n                    if (view.highlightMaterial.fillAlpha < 1.0) {\n                        highlightedSilhouetteTransparentBin[highlightedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        highlightedSilhouetteOpaqueBin[highlightedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (meshCounts.numSelected > 0) {\n                if (view.selectedMaterial.fill) {\n                    if (view.selectedMaterial.fillAlpha < 1.0) {\n                        selectedSilhouetteTransparentBin[selectedSilhouetteTransparentBinLen++] = layer;\n                    } else {\n                        selectedSilhouetteOpaqueBin[selectedSilhouetteOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n\n            if (this.#edgesEnabled && this.#view.edgeMaterial.edges) {\n                if (meshCounts.numEdges > 0) {\n                    if (meshCounts.numTransparent < meshCounts.numMeshes) {\n                        edgesColorOpaqueBin[edgesColorOpaqueBinLen++] = layer;\n                    }\n                    if (meshCounts.numTransparent > 0) {\n                        edgesColorTransparentBin[edgesColorTransparentBinLen++] = layer;\n                    }\n                    if (view.selectedMaterial.edgeAlpha < 1.0) {\n                        selectedEdgesTransparentBin[selectedEdgesTransparentBinLen++] = layer;\n                    } else {\n                        selectedEdgesOpaqueBin[selectedEdgesOpaqueBinLen++] = layer;\n                    }\n                    if (view.xrayMaterial.edgeAlpha < 1.0) {\n                        xrayEdgesTransparentBin[xrayEdgesTransparentBinLen++] = layer;\n                    } else {\n                        xrayEdgesOpaqueBin[xrayEdgesOpaqueBinLen++] = layer;\n                    }\n                    if (view.highlightMaterial.edgeAlpha < 1.0) {\n                        highlightedEdgesTransparentBin[highlightedEdgesTransparentBinLen++] = layer;\n                    } else {\n                        highlightedEdgesOpaqueBin[highlightedEdgesOpaqueBinLen++] = layer;\n                    }\n                }\n            }\n        }\n\n        // Render deferred bins\n\n        if (normalDrawSAOBinLen > 0) {\n            renderContext.withSAO = true;\n            for (let i = 0; i < normalDrawSAOBinLen; i++) {\n                //    this.#drawLayer(normalDrawSAOBin[i], RENDER_PASSES.COLOR_OPAQUE, layer.rendererModel.qualityRender);\n                //    normalDrawSAOBin[i].drawColorOpaque(renderContext);\n            }\n        }\n\n        for (let i = 0; i < edgesColorOpaqueBinLen; i++) {\n            this.#drawLayer(edgesColorOpaqueBin[i], RENDER_PASSES.EDGES_COLOR_OPAQUE);\n        }\n\n        for (let i = 0; i < xrayedSilhouetteOpaqueBinLen; i++) {\n            this.#drawLayer(xrayedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_XRAYED);\n        }\n\n        for (let i = 0; i < xrayEdgesOpaqueBinLen; i++) {\n            this.#drawLayer(xrayEdgesOpaqueBin[i], RENDER_PASSES.EDGES_XRAYED);\n        }\n\n        if (xrayedSilhouetteTransparentBinLen > 0 || xrayEdgesTransparentBinLen > 0 || normalFillTransparentBinLen > 0 || edgesColorTransparentBinLen > 0) {\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            renderContext.backfaces = false;\n            if (!this.#alphaDepthMask) {\n                gl.depthMask(false);\n            }\n            for (let i = 0; i < xrayEdgesTransparentBinLen; i++) {\n                this.#drawLayer(xrayEdgesTransparentBin[i], RENDER_PASSES.EDGES_XRAYED);\n            }\n            for (let i = 0; i < xrayedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(xrayedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_XRAYED);\n            }\n            if (normalFillTransparentBinLen > 0 || edgesColorTransparentBinLen > 0) {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < edgesColorTransparentBinLen; i++) {\n                this.#drawLayer(edgesColorTransparentBin[i], RENDER_PASSES.EDGES_COLOR_TRANSPARENT);\n            }\n            for (let i = 0; i < normalFillTransparentBinLen; i++) {\n                this.#drawLayer(normalFillTransparentBin[i], RENDER_PASSES.COLOR_TRANSPARENT);\n            }\n            gl.disable(gl.BLEND);\n            if (!this.#alphaDepthMask) {\n                gl.depthMask(true);\n            }\n        }\n\n        if (highlightedSilhouetteOpaqueBinLen > 0 || highlightedEdgesOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1; // HACK\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            for (let i = 0; i < highlightedEdgesOpaqueBinLen; i++) {\n                this.#drawLayer(highlightedEdgesOpaqueBin[i], RENDER_PASSES.EDGES_HIGHLIGHTED);\n            }\n            for (let i = 0; i < highlightedSilhouetteOpaqueBinLen; i++) {\n                this.#drawLayer(highlightedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_HIGHLIGHTED);\n            }\n        }\n\n        if (highlightedSilhouetteTransparentBinLen > 0 || highlightedEdgesTransparentBinLen > 0 || highlightedSilhouetteOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < highlightedEdgesTransparentBinLen; i++) {\n                this.#drawLayer(highlightedEdgesTransparentBin[i], RENDER_PASSES.EDGES_HIGHLIGHTED);\n            }\n            for (let i = 0; i < highlightedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(highlightedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_HIGHLIGHTED);\n            }\n            gl.disable(gl.BLEND);\n        }\n\n        if (selectedSilhouetteOpaqueBinLen > 0 || selectedEdgesOpaqueBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            for (let i = 0; i < selectedEdgesOpaqueBinLen; i++) {\n                this.#drawLayer(selectedEdgesOpaqueBin[i], RENDER_PASSES.EDGES_SELECTED);\n            }\n            for (let i = 0; i < selectedSilhouetteOpaqueBinLen; i++) {\n                this.#drawLayer(selectedSilhouetteOpaqueBin[i], RENDER_PASSES.SILHOUETTE_SELECTED);\n            }\n        }\n\n        if (selectedSilhouetteTransparentBinLen > 0 || selectedEdgesTransparentBinLen > 0) {\n            renderContext.lastProgramId = -1;\n            gl.clear(gl.DEPTH_BUFFER_BIT);\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            if (this.#canvasTransparent) {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            } else {\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            }\n            for (let i = 0; i < selectedEdgesTransparentBinLen; i++) {\n                this.#drawLayer(selectedEdgesTransparentBin[i], RENDER_PASSES.EDGES_SELECTED);\n            }\n            for (let i = 0; i < selectedSilhouetteTransparentBinLen; i++) {\n                this.#drawLayer(selectedSilhouetteTransparentBin[i], RENDER_PASSES.SILHOUETTE_SELECTED);\n            }\n            gl.disable(gl.BLEND);\n        }\n\n        const numTextureUnits = WEBGL_INFO.MAX_TEXTURE_UNITS;\n        for (let ii = 0; ii < numTextureUnits; ii++) {\n            gl.activeTexture(gl.TEXTURE0 + ii);\n        }\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        for (let ii = 0; ii < numVertexAttribs; ii++) {\n            gl.disableVertexAttribArray(ii);\n        }\n    }\n\n    #drawLayer(layer: Layer, renderPass: number, quality: boolean = true) {\n        switch (layer.renderState.primitive) {\n            case TrianglesPrimitive:\n            case SurfacePrimitive:\n            case SolidPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                        if (layer.meshCounts.numTransparent === layer.meshCounts.numMeshes || layer.meshCounts.numXRayed === layer.meshCounts.numMeshes) {\n                            return;\n                        }\n                        if (quality) {\n                            //    this.#layerRenderers.qualityColorTriangles.draw(layer);\n                        } else {\n                            this.#layerRenderers.colorTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        if (layer.meshCounts.numTransparent === 0) {\n                            return;\n                        }\n                        if (quality) {\n                            //     this.#layerRenderers.qualityColorTriangles.draw(layer);\n                        } else {\n                            this.#layerRenderers.colorTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                        if (layer.meshCounts.numSelected > 0) {\n                            //  this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                        if (layer.meshCounts.numHighlighted > 0) {\n                            // this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        if (layer.meshCounts.numXRayed > 0) {\n                            //   this.#layerRenderers.silhouetteTriangles.draw(layer);\n                        }\n                        break;\n                }\n                break;\n            case LinesPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        //this.#layerRenderers.colorLines.draw(layer);\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        // this.#layerRenderers.silhouetteLines.draw(layer);\n                        break;\n                }\n                break;\n            case PointsPrimitive:\n                switch (renderPass) {\n                    case RENDER_PASSES.COLOR_OPAQUE:\n                    case RENDER_PASSES.COLOR_TRANSPARENT:\n                        //  this.#layerRenderers.colorPoints.draw(layer);\n                        break;\n                    case RENDER_PASSES.SILHOUETTE_SELECTED:\n                    case RENDER_PASSES.SILHOUETTE_HIGHLIGHTED:\n                    case RENDER_PASSES.SILHOUETTE_XRAYED:\n                        //  this.#layerRenderers.silhouettePoints.draw(layer);\n                        break;\n                }\n                break;\n        }\n    }\n\n\n}"],"names":["s","t","e","Object","defineProperty","i","writable","value","o","n","this","prototype","addItem","arguments","length","r","removeItem","u","c","ETC1S","UASTC_4x4","f","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","l","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","p","m","v","T","g","_","w","C","S","y","F","transcoderPath","a","workerLimit","setWorkerLimit","init","astcSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","transcode","Promise","then","postMessage","type","buffers","taskConfig","data","mipmaps","format","dfdTransferFn","dfdFlags","error","props","minFilter","magFilter","encoding","premultiplyAlpha","destroy","URL","revokeObjectURL","h","setPath","setWithCredentials","loadAsync","setResponseType","all","P","toString","JSON","stringify","substring","indexOf","lastIndexOf","join","createObjectURL","Blob","setWorkerCreator","Worker","slice","config","transcoderBinary","console","warn","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","Uint8Array","close","delete","isValid","Error","isUASTC","getWidth","getHeight","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","d","if","basisFormat","includes","transcoderFormat","needsPowerOfTwo","engineFormat","startTranscoding","getImageLevelInfo","origWidth","origHeight","R","getImageTranscodedSizeInBytes","transcodeImage","push","width","height","hasAlpha","buffer","id","message","priorityETC1S","Infinity","priorityUASTC","sort","RenderContext","constructor","viewer","view","gl","viewMatrixDataTexture","pbrEnabled","withSAO","backfaces","frontface","textureUnit","bindTexture","renderPass","shadowViewMatrix","shadowProjMatrix","pickViewMatrix","pickProjMatrix","pickZNear","pickZFar","pickInvisible","lineWidth","lastProgramId","occlusionTexture","reset","nextTextureUnit","WEBGL_INFO","MAX_TEXTURE_UNITS","RENDER_PASSES","NOT_RENDERED","COLOR_OPAQUE","COLOR_TRANSPARENT","SILHOUETTE_HIGHLIGHTED","SILHOUETTE_SELECTED","SILHOUETTE_XRAYED","EDGES_COLOR_OPAQUE","EDGES_COLOR_TRANSPARENT","EDGES_HIGHLIGHTED","EDGES_SELECTED","EDGES_XRAYED","PICK","tempVec4","createVec4","_hash","_classPrivateFieldLooseKey","_program","_needRebuild","_uniforms","_samplers","_build","_buildShader","_getValid","_bind","LayerRenderer","renderContext","_bind2","_getValid2","_buildShader2","_build2","errors","_classPrivateFieldLooseBase","needRebuild","draw","layer","renderState","program","uniforms","samplers","uniform1i","projMatrix","uniformMatrix4fv","camera","worldMatrix","rendererModel","color","material","xrayMaterial","fillColor","uniform4f","fillAlpha","highlightMaterial","selectedMaterial","uniform4fv","Float32Array","viewMatrices","dataTextureSet","positions","eachMeshMatrices","eachMeshAttributes","eachPrimitiveMesh","numIndices8Bits","eachPrimitiveMesh_8Bits","indices_8Bits","indices","drawArrays","TRIANGLES","numIndices16Bits","eachPrimitiveMesh_16Bits","indices_16Bits","numIndices32Bits","eachPrimitiveMesh_32Bits","indices_32Bits","baseColorMap","materialTextureSet","colorTexture","texture2D","metallicRoughMap","metallicRoughnessTexture","emissiveMap","emissiveTexture","occlusionMap","vertHeader","vertDataTextureDefs","vertLogDepthBufDefs","logarithmicDepthBufferEnabled","vertDataTextureSamples","vertLogDepthBufOutputs","fragmentShader","fragHeader","fragGammaDefs","fragSectionPlaneDefs","fragLightDefs","fragLogDepthBufDefs","fragSectionPlanesSlice","fragLighting","fragLogDepthBufOutput","src","len","lightsList","light","space","fragSAOOutput","sao","enabled","fragOutput","sectionPlanesList","fragLightSourceUniforms","AmbientLight","DirLight","PointLight","fragFlatShading","GLProgram","getLocation","viewMatrix","logDepthBufFC","gammaFactor","pointSize","nearPlaneHeight","pointCloudIntensityRange","lightAmbient","lights","sectionPlanes","dir","pos","attenuation","active","getSampler","edgeIndices","eachEdgeOffset","eachEdgeMesh","normalMap","getHash","vertex","buildVertexShader","fragment","buildFragmentShader","project","bind","getAmbientColorAndIntensity","intensity","uniform3f","uniform1f","possible","viewportHeight","drawingBufferHeight","drawingBufferWidth","blendCutoff","blendFactor","pointsMaterial","projectionType","OrthoProjectionType","Math","tan","perspectiveProjection","fov","PI","log","far","LN2","FastColorTrianglesRenderer","super","getSectionPlanesHash","getLightsHash","DataTextureSet","edgeIndices_8Bits","edgeIndices_16Bits","edgeIndices_32Bits","eachEdgeMesh_8Bits","eachEdgeMesh_16Bits","eachEdgeMesh_32Bits","_built","build","MeshCounts","numMeshes","numVisible","numTransparent","numEdges","numXRayed","numSelected","numHighlighted","numClippable","numPickable","numCulled","SCENE_OBJECT_FLAGS","VISIBLE","CULLED","PICKABLE","CLIPPABLE","COLLIDABLE","CAST_SHADOW","RECEIVE_SHADOW","XRAYED","HIGHLIGHTED","SELECTED","EDGES","BACKFACES","TRANSPARENT","get","apply","construct","getOwnPropertyDescriptor","getPrototypeOf","has","ownKeys","set","setPrototypeOf","Reflect","Proxy","Number","isFinite","isNaN","iterator","species","toStringTag","for","b","Symbol","A","create","B","freeze","x","is","E","O","isPrototypeOf","j","hasOwn","hasOwnProperty","I","Array","isArray","L","toLocaleString","N","trunc","U","ArrayBuffer","M","isView","D","k","W","SharedArrayBuffer","V","Y","z","from","G","K","X","keys","q","values","H","entries","J","Q","reverse","Z","fill","$","copyWithin","tt","rt","nt","subarray","et","ot","it","st","ct","Uint16Array","ut","ft","Uint32Array","ht","lt","at","next","yt","pt","vt","TypeError","bt","RangeError","At","Set","mt","Bt","add","xt","Et","WeakMap","Tt","Ot","jt","It","Pt","St","_t","Ft","Lt","Rt","Ct","Nt","Ut","Mt","kt","Wt","Vt","configurable","Yt","zt","Gt","Kt","Xt","qt","Ht","Jt","Qt","MAX_SAFE_INTEGER","Zt","$t","tr","rr","nr","er","or","ir","sr","cr","ur","ar","byteOffset","fr","hr","lr","static","map","filter","reduce","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","yr","emptyDataTexture","GLDataTexture","textureWidth","textureHeight","disableFilteringForBoundTexture","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DataTextureBuffer","positionsDecompressMatrices","positionsCompressed","eachMeshVertexPortionBase","eachMeshVertexPortionOffset","eachMeshEdgeIndicesOffset","eachMeshColor","eachMeshPickColor","eachMeshNormalMatrix","eachMeshPositionsDecompressMatrix","eachMeshFlags1","eachMeshFlags2","eachMeshParts","INDICES_EDGE_INDICES_ALIGNMENT_SIZE","identityMatrix","identityMat4","tempVec4a","tempVec4b","tempUint8Array4","tempFloat32Array3","_gl","_view","_dataTextureBuffer","_geometryHandles","_meshPartHandles","_numMeshParts","_deferredSetFlagsActive","_deferredSetFlagsDirty","_createGeometryBucket","_createMeshPart","_setMeshFlags","_setMeshFlags3","Layer","layerParams","renderers","_setMeshFlags4","_setMeshFlags2","_createMeshPart2","_createGeometryBucket2","layerIndex","meshCounts","primitive","numEdgeIndices8Bits","numEdgeIndices16Bits","numEdgeIndices32Bits","numVertices","beginDeferredFlags","hash","canCreateMesh","geometryCompressedParams","numGeometryBuckets","geometryBuckets","numPositions","numIndices","geometryBucket","PointsPrimitive","LinesPrimitive","MAX_DATATEXTURE_HEIGHT","hasGeometry","geometryId","createGeometryCompressed","geometryBucketHandles","aabb","positionsDecompressMatrix","createMesh","meshParams","meshIndex","geometryHandle","geometryBucketHandle","worldAABB","collapseAABB3","geometryOBB","AABB3ToOBB3","matrix","transformPoint4","expandAABB3Point3","dataTextureBuffer","ceil","textureData","texture","createTexture","texStorage2D","RGB16UI","texSubImage2D","RGB_INTEGER","UNSIGNED_SHORT","createPositionsDataTexture","RGB8UI","UNSIGNED_BYTE","createIndices8BitDataTexture","createIndices16BitDataTexture","RGB32UI","UNSIGNED_INT","createIndices32BitDataTexture","RG8UI","RG_INTEGER","createEdgeIndices8BitDataTexture","RG16UI","createEdgeIndices16BitDataTexture","RG32UI","createEdgeIndices32BitDataTexture","colors","pickColors","vertexBases","indexBaseOffsets","edgeIndexBaseOffsets","RGBA8UI","RGBA_INTEGER","createEachMeshAttributesDataTexture","positionDecodeMatrices","matrices","Float16Array","RGBA16F","RGBA","HALF_FLOAT","createEachMeshMatricesDataTexture","offsets","RGB32F","RGB","FLOAT","createEachEdgeOffsetDataTexture","isEmpty","initFlags","flags","meshTransparent","commitDeferredFlags","flushInitFlags","setMeshVisible","transparent","setMeshHighlighted","setMeshXRayed","setMeshSelected","setMeshEdges","setMeshClippable","setMeshCulled","setMeshCollidable","setMeshPickable","setMeshColor","setMeshTransparent","setMeshOffset","offset","setMeshMatrix","setMeshViewMatrixIndex","index","numVertsForPrim","alignedIndicesLen","alignedIndices","alignedEdgeIndicesLen","alignedEdgeIndices","vertexBase","indicesBase","edgeIndicesBase","numTriangles","indicesBuffer","edgeIndicesBuffer","vertsIndex","currentNumIndices","currentNumEdgeIndices","pickColor","meshPartId","eachPrimitiveMeshBuffer","edgeIndicesMeshIdBuffer","numEdgeIndices","vertsBase","numVerts","visible","xrayed","highlighted","selected","culled","f0","f1","f2","f3","clippable","RendererGeometryImpl","RendererTextureImpl","tempIntRGB","_flags","_aabb","_offsetAABB","_offset","_colorizeUpdated","_opacityUpdated","RendererObjectImpl","params","model","sceneObject","layerId","rendererMeshes","createAABB3","createVec3","setSceneObject","setVisible","viewIndex","setHighlighted","setXRayed","setSelected","setEdges","edges","setCulled","setClippable","setCollidable","collidable","setPickable","pickable","setColorize","floor","setOpacity","opacity","lastOpacityQuantized","colorize","opacityQuantized","setOffset","finalize2","tempMat4a","createMat4","tempMat4b","RendererMeshImpl","rendererGeometry","rendererTextureSet","metallic","roughness","pickId","tileManager","tile","sceneObjectRenderer","colorizing","delegatePickedEntity","setMatrix","center","transformPoint3","oldTile","updateTileCenter","getTile","tileChanged","tileCenter","mulMat4","translationMat4c","setMetallic","setRoughness","setColor","newTransparent","changingTransparency","canPickTriangle","drawPickTriangles","drawFlags","pickTriangleSurface","pickResult","canPickWorldPos","drawPickNormals","putTile","RendererTextureSetImpl","identityQuat","defaultTextureSetId","_webglRenderer","_renderContext","_position","_rotation","_quaternion","_scale","_worldMatrix","_viewMatrix","_colorTextureEnabled","_backfaces","_layers","_numGeometries","_numTriangles","_numLines","_numPoints","_numViewerObjects","_textureTranscoder","_aabbDirty","_edgeThreshold","_currentLayers","_viewMatrixDirty","_worldMatrixNonIdentity","_onCameraViewMatrix","_layerId","_addModel","_addTexture","_addGeometry","_addMesh","_addObject","_removeModel","_createDefaultTextureSetRenderer","_getLayer","_rebuildAABB","RendererModelImpl","Component","_rebuildAABB2","_getLayer2","_createDefaultTextureSetRenderer2","_removeModel2","_addObject2","_addMesh2","_addGeometry2","_addTexture2","_addModel2","qualityRender","sceneModel","rendererGeometries","rendererTextures","rendererTextureSets","rendererObjects","rendererObjectsList","rendererViewObjects","layerList","onBuilt","webglRenderer","textureTranscoder","edgeThreshold","built","position","rotation","quaternion","eulerToQuat","scale","composeMat4","onViewMatrix","subscribe","EventEmitter","EventDispatcher","setImageDirty","dispatch","colorTextureEnabled","numLines","numPoints","destroyed","unsubscribe","objectId","clear","textures","geometries","meshes","objects","textureId","geometry","meshId","mesh","object","glTexture","GLTexture","preloadColor","setPreloadColor","image","crossOrigin","setImage","wrapS","wrapT","wrapR","flipY","ext","split","pop","Image","onload","loadArraybuffer","arrayBuffer","byteLength","compressedTextureData","setCompressedData","errMsg","rendererTexture","textureSet","meshMatrix","meshRenderer","registerPickable","expandAABB3","undefined","createUUID","objectRenderer","rendererMesh","rendererObject","defaultColorTexture","defaultMetalRoughTexture","defaultNormalsTexture","defaultEmissiveTexture","defaultOcclusionTexture","textureSetId","tempMat","rtcCenterWorld","Float64Array","rtcCenterView","createRTCViewMat","viewMat","rtcCenter","rtcViewMat","transformVec4","setMat4Translation","worldToRTCCenter","worldCenter","cellSize","round","NUM_TILES","_indexesUsed","_tiles","_dataTexture","_camera","_lastFreeIndex","_putFreeTile","_findFreeTile","TileManager","_findFreeTile2","_putFreeTile2","numMatrices","createMatricesDataTexture","useCount","rtcViewMatrix","newCenter","newRTCCenter","newId","newTile","refreshMatrices","tileIds","tileId","ua","navigator","userAgent","match","isSafari","toLowerCase","_sceneModels","_viewer","_canvasTransparent","_transparentEnabled","_edgesEnabled","_imageDirty","_saoEnabled","_pbrEnabled","_backgroundColor","_rendererModels","_layerList","_layerListDirty","_stateSortDirty","_pickIDs","_saoDepthRenderBuffer","_extensionHandles","_logarithmicDepthBufferEnabled","_alphaDepthMask","_occlusionTester","_layerRenderers","_registerRendererViewObjects","_deregisterRendererViewObjects","_updateLayerList","_buildLayerList","_draw","_activateExtensions","_drawSAOBuffers","_drawDepth","_drawColor","_drawLayer","WebGLRenderer","_drawLayer2","_drawColor2","_drawDepth2","_drawSAOBuffers2","_activateExtensions2","_draw2","_buildLayerList2","_updateLayerList2","_deregisterRendererViewObjects2","_registerRendererViewObjects2","Map","KTX2TextureTranscoder","capabilities","getCapabilities","maxViews","canvasElement","document","createElement","getContext","getExtension","registerView","WEBGL_CONTEXT_NAMES","contextAttr","hint","FRAGMENT_SHADER_DERIVATIVE_HINT","NICEST","colorTriangles","sub","deregisterView","addModel","onDestroyed","one","component","removeModel","modelId","deregisterPickable","setBackgroundColor","setEdgesEnabled","setPBREnabled","getSAOSupported","SUPPORTED_EXTENSIONS","setSAOEnabled","setTransparentEnabled","viewport","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","needsRebuild","rendererId","needsRender","render","force","pickSceneObject","lenDrawableList","webGLSceneModelRenderer","OES_element_index_uint","EXT_frag_depth","WEBGL_depth_texture","enable","DEPTH_TEST","frontFace","CCW","CULL_FACE","depthMask","normalDrawSAOBin","edgesColorOpaqueBin","normalFillTransparentBin","edgesColorTransparentBin","xrayedSilhouetteOpaqueBin","xrayEdgesOpaqueBin","xrayedSilhouetteTransparentBin","xrayEdgesTransparentBin","highlightedSilhouetteOpaqueBin","highlightedEdgesOpaqueBin","highlightedSilhouetteTransparentBin","highlightedEdgesTransparentBin","selectedSilhouetteOpaqueBin","selectedEdgesOpaqueBin","selectedSilhouetteTransparentBin","selectedEdgesTransparentBin","saoPossible","normalDrawSAOBinLen","edgesColorOpaqueBinLen","normalFillTransparentBinLen","edgesColorTransparentBinLen","xrayedSilhouetteOpaqueBinLen","xrayEdgesOpaqueBinLen","xrayedSilhouetteTransparentBinLen","xrayEdgesTransparentBinLen","highlightedSilhouetteOpaqueBinLen","highlightedEdgesOpaqueBinLen","highlightedSilhouetteTransparentBinLen","highlightedEdgesTransparentBinLen","selectedSilhouetteOpaqueBinLen","selectedEdgesOpaqueBinLen","selectedSilhouetteTransparentBinLen","selectedEdgesTransparentBinLen","edgeMaterial","edgeAlpha","BLEND","blendEquation","FUNC_ADD","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","blendFunc","disable","numTextureUnits","ii","activeTexture","TEXTURE0","TEXTURE_CUBE_MAP","numVertexAttribs","MAX_VERTEX_ATTRIBS","disableVertexAttribArray","quality","TrianglesPrimitive","SurfacePrimitive","SolidPrimitive"],"mappings":"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"}