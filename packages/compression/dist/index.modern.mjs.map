{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * [![npm version](https://badge.fury.io/js/%40xeokit%2Fcompression.svg)](https://badge.fury.io/js/%40xeokit%2Fcompression)\n * [![](https://data.jsdelivr.com/v1/package/npm/@xeokit/compression/badge)](https://www.jsdelivr.com/package/npm/@xeokit/compression)\n * \n * <img style=\"padding:20px\" src=\"media://images/geometry_icon.png\"/>\n *\n * # xeokit Geometry Compression / Decompression Utilities\n *\n * ---\n *\n * ### *Tools for geometry compression and decompression*\n *\n * ---\n *\n * The xeokit Geometry Compression/Decompression Utilities library provides functions used internally within SceneModel.createGeometry implementations to compress geometry. These functions are also provided for users who want to pre-compress their geometry \"offline\" and then use SceneModel.createGeometryCompressed to create compressed geometry directly.\n\n The compression techniques used include simplifying geometry by combining duplicate positions and adjusting indices, generating edge indices for triangle meshes, ignoring normals (as shaders auto-generate them), converting positions to relative-to-center (RTC) coordinates, quantizing positions and UVs as 16-bit unsigned integers, and splitting geometry into buckets to enable indices to use the minimum bits for storage. The bucketing technique was developed for xeokit by Toni Marti with support from Tribia AG.\n\n To use the library, install it using npm install @xeokit/compression. An example usage includes compressing a GeometryParams into a GeometryCompressedParams using the compressGeometryParams function. In this example, the geometry is simple, and only one bucket is needed. However, if the positions array was large enough to require some indices to use more than 16 bits for storage, the bucketing mechanism would split the geometry into smaller buckets, each with smaller indices that index a subset of the positions.\n\n The resulting GeometryCompressedParams object shows that we have one bucket with vertex positions relative to the origin and quantized to 16-bit integers, duplicate positions removed, and adjusted indices. Additionally, edge indices are generated for the TrianglesPrimitive, and a positionsDecompressMatrix is included to de-quantize the positions within the Viewer.\n\n * This library provides a set of functions that are used internally within\n * {@link @xeokit/scene!SceneModel.createGeometry | SceneModel.createGeometry} implementations to\n * compress geometry. The functions are provided here in case users instead want to pre-compress their geometry \"offline\",\n * and then use {@link @xeokit/scene!SceneModel.createGeometryCompressed | SceneModel.createGeometryCompressed}\n * to create the compressed geometry directly.\n *\n * ### Compression Techniques Used\n *\n * * Simplifies geometry by combining duplicate positions and adjusting indices\n * * Generates edge indices for triangle meshes\n * * Ignores normals (our shaders auto-generate them)\n * * Converts positions to relative-to-center (RTC) coordinates\n * * Quantizes positions and UVs as 16-bit unsigned integers\n * * Splits geometry into {@link @xeokit/scene!GeometryBucketParams | buckets } to enable indices to use the minimum bits for storage\n *\n * ### Aknowledgements\n *\n * * The bucketing technique mentioned above was developed for xeokit by Toni Marti, with support from Tribia AG. Read [the slides](media://pdfs/GPU_RAM_Savings_Toni_Marti_Apr22.pdf) from Toni's presentation at WebGL Meetup 2022.\n *\n * ## Installation\n *\n * ````bash\n * npm install @xeokit/compression\n * ````\n *\n * ## Usage\n *\n * In the example below, we'll use {@link compressGeometryParams} to compress\n * a {@link @xeokit/scene!GeometryParams | GeometryParams} into a\n * {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams}.\n *\n * In this example, our geometry is very simple, and our GeometryCompressedParams only gets a single\n * {@link @xeokit/scene!GeometryBucketParams | GeometryBucketParams }. Note that if the\n * {@link @xeokit/scene!GeometryParams.positions | GeometryParams.positions} array was large enough to require\n * some of the indices to use more than 16 bits for storage, then that's when the function's bucketing mechanism would\n * kick in, to split the geometry into smaller buckets, each with smaller indices that index a subset of the positions.\n *\n * ````javascript\n * import {compressGeometryParams} from \"@xeokit/compression\";\n * import {TrianglesPrimitive} from \"@xeokit/core/constants\";\n *\n * const geometryCompressedParams = compressGeometryParams({\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      positions: [\n *          202, 202, 202, 200, 202, 202,\n *          200, 200, 202, 202, 200, 202,\n *          202, 202, 202, 202, 200, 202,\n *          202, 200, 200, 202, 202, 200,\n *          202, 202, 202, 202, 202, 200,\n *          200, 202, 200, 200, 202, 202,\n *          200, 202, 202, 200, 202, 200,\n *          200, 200, 200, 200, 200, 202,\n *          200, 200, 200, 202, 200, 200,\n *          202, 200, 202, 200, 200, 202,\n *          202, 200, 200, 200, 200, 200,\n *          200, 202, 200, 202, 202, 200\n *      ],\n *      indices: [\n *          0, 1, 2, 0, 2, 3, 4, 5, 6, 4,\n *          6, 7, 8, 9, 10, 8, 10, 11, 12,\n *          13, 14, 12, 14, 15, 16, 17, 18,\n *          16, 18, 19, 20, 21, 22, 20, 22, 23\n *      ]\n *  });\n * ````\n *\n * The value of our new {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams} is shown below.\n *\n * We can see that:\n *\n * * We get one bucket, because we have only a small number of indices\n * * Vertex positions are now relative to ````origin```` and quantized to 16-bit integers\n * * Duplicate positions are removed and indices adjusted\n * * Edge indices generated for our TrianglesPrimitive\n * * A ````positionsDecompressMatrix```` to de-quantize the positions within the Viewer\n *\n * ````javascript\n * {\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      origin: [200,200,200],\n *      positionsDecompressMatrix: [\n *          0.00003052270125906143, 0, 0, 0,\n *          0, 0.00003052270125906143, 0, 0,\n *          0, 0, 0.00003052270125906143, 0,\n *          -1, -1, -1, 1\n *      ],\n *      geometryBuckets: [\n *          {\n *              positionsCompressed: [\n *                  65525, 65525, 65525, 0, 65525, 65525,\n *                  0, 0, 65525, 65525, 0, 65525, 65525,\n *                  0, 0, 65525, 65525, 0, 0, 65525, 0, 0,\n *                  0, 0\n *              ],\n *              indices: [\n *                  0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6,\n *                  0, 6, 1, 1, 6, 7, 1, 7, 2, 7, 4, 3, 7, 3, 2,\n *                  4, 7, 6, 4, 6, 5\n *              ],\n *              edgeIndices: [\n *                  3, 4, 0, 4, 5, 0, 5, 6,\n *                  0, 6, 1, 1, 6, 7, 1, 7,\n *                  3, 2, 4, 7, 6, 4, 6\n *              ]\n *          }\n *      ]\n * }\n * ````\n *\n * In the next example, we'll again use {@link compressGeometryParams} to compress\n * a {@link @xeokit/scene!GeometryParams | GeometryParams} into a\n * {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams}, which we'll then use to\n * create a compressed geometry within a {@link @xeokit/scene!SceneModel | SceneModel}.\n *\n * ````javascript\n * import {Scene} from \"@xeokit/scene\";\n * import {TrianglesPrimitive} from \"@xeokit/core/constants\";\n * import {compressGeometryParams} from \"@xeokit/compression\";\n *\n * const scene = new Scene();\n *\n * const sceneModel = scene.createModel({\n *     id: \"myModel\"\n * });\n *\n * const geometryCompressedParams = compressGeometryParams({\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      positions: [202, 202, 202, 200, 202, 202, ...],\n *      indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ...]\n * });\n *\n * sceneModel.createGeometryCompressed(geometryCompressedParams);\n *\n * sceneModel.createMesh({ id: \"myMesh\", geometryId: \"myGeometry\" });\n *\n * sceneModel.createObject({ id: \"myObject1\", meshIds: [\"myMesh\"] });\n * sceneModel.createObject({ id: \"myObject2\", meshIds: [\"myMesh\"] });\n *\n * sceneModel.build();\n * ````\n *\n * @module @xeokit/compression\n */\n\nimport {\n    createMat3, createMat4,\n    createVec3,\n    identityMat3,\n    identityMat4,\n    mulMat3,\n    mulMat4,\n    normalizeVec3,\n    scalingMat3v,\n    scalingMat4v,\n    transformVec3,\n    translationMat3v,\n    translationMat4v\n} from \"@xeokit/matrix\";\n\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\nconst translate = createMat4();\nconst scale = createMat4();\n\n/**\n * Gets the boundary of a flat positions array.\n *\n * @param array\n * @param min\n * @param max\n */\nexport function getPositions3MinMax(array: FloatArrayParam, min?: FloatArrayParam, max?: FloatArrayParam) {\n    let i, j;\n    min = min || new Float64Array(3);\n    max = max || new Float64Array(3);\n    for (i = 0; i < 3; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 3) {\n        for (j = 0; j < 3; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min,\n        max\n    };\n}\n\n/**\n * Creates a de-quantization matrix from a boundary.\n */\nexport function createPositions3DecompressMat4(aabb: FloatArrayParam, positionsDecompressMatrix: FloatArrayParam): FloatArrayParam {\n    positionsDecompressMatrix = positionsDecompressMatrix || createMat4();\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65535;\n    identityMat4(translate);\n    translationMat4v(aabb, translate);\n    identityMat4(scale);\n    scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n    mulMat4(translate, scale, positionsDecompressMatrix);\n    return positionsDecompressMatrix;\n}\n\n/**\n * Compresses a flat positions array\n */\nexport function compressPositions3(array: FloatArrayParam, min: FloatArrayParam, max: FloatArrayParam) {\n    const quantized = new Uint16Array(array.length);\n    var multiplier = new Float32Array([\n        max[0] !== min[0] ? 65535 / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? 65535 / (max[1] - min[1]) : 0,\n        max[2] !== min[2] ? 65535 / (max[2] - min[2]) : 0\n    ]);\n    let i;\n    for (i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n    }\n    identityMat4(translate);\n    translationMat4v(min, translate);\n    identityMat4(scale);\n    scalingMat4v([\n        (max[0] - min[0]) / 65535,\n        (max[1] - min[1]) / 65535,\n        (max[2] - min[2]) / 65535\n    ], scale);\n    const decompressMatrix = mulMat4(translate, scale, identityMat4());\n    return {\n        quantized: quantized,\n        decompressMatrix: decompressMatrix\n    };\n}\n\n/**\n * Compresses a 3D position\n * @param p\n * @param aabb\n * @param q\n */\nexport function compressPoint3(p: FloatArrayParam, aabb: FloatArrayParam, dest: FloatArrayParam = p) {\n    const multiplier = new Float32Array([\n        aabb[3] !== aabb[0] ? 65535 / (aabb[3] - aabb[0]) : 0,\n        aabb[4] !== aabb[1] ? 65535 / (aabb[4] - aabb[1]) : 0,\n        aabb[5] !== aabb[2] ? 65535 / (aabb[5] - aabb[2]) : 0\n    ]);\n    dest[0] = Math.max(0, Math.min(65535, Math.floor((p[0] - aabb[0]) * multiplier[0])));\n    dest[1] = Math.max(0, Math.min(65535, Math.floor((p[1] - aabb[1]) * multiplier[1])));\n    dest[2] = Math.max(0, Math.min(65535, Math.floor((p[2] - aabb[2]) * multiplier[2])));\n    return dest;\n}\n\n/**\n * Decompresses a 3D position\n * @param position\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressPoint3(position: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: FloatArrayParam = position): FloatArrayParam {\n    dest[0] = position[0] * decompressMatrix[0] + decompressMatrix[12];\n    dest[1] = position[1] * decompressMatrix[5] + decompressMatrix[13];\n    dest[2] = position[2] * decompressMatrix[10] + decompressMatrix[14];\n    return dest;\n}\n\n/**\n * Decompresses an axis-aligned 3D boundary\n * @param aabb\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressAABB3(aabb: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: FloatArrayParam = aabb): FloatArrayParam {\n    dest[0] = aabb[0] * decompressMatrix[0] + decompressMatrix[12];\n    dest[1] = aabb[1] * decompressMatrix[5] + decompressMatrix[13];\n    dest[2] = aabb[2] * decompressMatrix[10] + decompressMatrix[14];\n    dest[3] = aabb[3] * decompressMatrix[0] + decompressMatrix[12];\n    dest[4] = aabb[4] * decompressMatrix[5] + decompressMatrix[13];\n    dest[5] = aabb[5] * decompressMatrix[10] + decompressMatrix[14];\n    return dest;\n}\n\n/**\n * Decompresses a flat array of positions\n * @param positions\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressPositions3(positions: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: Float32Array = new Float32Array(positions.length)): Float32Array {\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        dest[i + 0] = positions[i + 0] * decompressMatrix[0] + decompressMatrix[12];\n        dest[i + 1] = positions[i + 1] * decompressMatrix[5] + decompressMatrix[13];\n        dest[i + 2] = positions[i + 2] * decompressMatrix[10] + decompressMatrix[14];\n    }\n    return dest;\n}\n\n/**\n * Gets the 2D min/max boundary of a flat array of UV coordinate\n * @param array\n */\nexport function getUVBounds(array: FloatArrayParam): { min: FloatArrayParam, max: FloatArrayParam } {\n    const min = new Float32Array(2);\n    const max = new Float32Array(2);\n    let i, j;\n    for (i = 0; i < 2; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 2) {\n        for (j = 0; j < 2; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\n/**\n * Compresses a flat array of UV coordinates\n */\nexport var compressUVs = (function () {\n    const translate = createMat3();\n    const scale = createMat3();\n    return function (array: FloatArrayParam, min: FloatArrayParam, max: FloatArrayParam): {\n        quantized: Uint16Array,\n        decompressMatrix: FloatArrayParam | Float64Array\n    } {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 2) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        }\n        identityMat3(translate);\n        translationMat3v(min, translate);\n        identityMat3(scale);\n        scalingMat3v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535\n        ], scale);\n        const decompressMatrix = mulMat3(translate, scale, identityMat3());\n        return {\n            quantized: quantized,\n            decompressMatrix: decompressMatrix\n        };\n    };\n})();\n\n/**\n * Oct-encodes a flat array of normal vectors\n * @param array\n */\nexport function compressNormals(array: FloatArrayParam): Int8Array { // http://jcgt.org/published/0003/02/01/\n\n    // Note: three elements for each encoded normal, in which the last element in each triplet is redundant.\n    // This is to work around a mysterious WebGL issue where 2-element normals just wouldn't work in the shader :/\n\n    const encoded = new Int8Array(array.length);\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < array.length; i += 3) {\n        // Test various combinations of ceil and floor\n        // to minimize rounding errors\n        best = oct = octEncodeNormalFromArray(array, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(array, i, dec);\n        oct = octEncodeNormalFromArray(array, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormalFromArray(array, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormalFromArray(array, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        encoded[i] = best[0];\n        encoded[i + 1] = best[1];\n    }\n    return encoded;\n}\n\n/**\n */\nfunction octEncodeNormalFromArray(array: FloatArrayParam, i: number, xfunc: any, yfunc: any): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n */\nfunction dot(array: FloatArrayParam, i: number, createVec3: FloatArrayParam): number {\n    return array[i] * createVec3[0] + array[i + 1] * createVec3[1] + array[i + 2] * createVec3[2];\n}\n\n/**\n */\nexport function decompressUV(uv: FloatArrayParam, decompressMatrix: FloatArrayParam, dest = new Float32Array(2)) {\n    dest[0] = uv[0] * decompressMatrix[0] + decompressMatrix[6];\n    dest[1] = uv[1] * decompressMatrix[4] + decompressMatrix[7];\n}\n\n/**\n *\n */\nexport function decompressUVs(uvs: FloatArrayParam, decompressMatrix: FloatArrayParam, dest = new Float32Array(uvs.length)) {\n    for (let i = 0, len = uvs.length; i < len; i += 3) {\n        dest[i + 0] = uvs[i + 0] * decompressMatrix[0] + decompressMatrix[6];\n        dest[i + 1] = uvs[i + 1] * decompressMatrix[4] + decompressMatrix[7];\n    }\n    return dest;\n}\n\n/**\n *\n */\nexport function decompressNormal(oct: FloatArrayParam, result: FloatArrayParam): FloatArrayParam {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n *\n */\nexport function decompressNormals(octs: string | any[], result: FloatArrayParam): FloatArrayParam {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n *\n * @param oct\n * @param result\n */\nfunction octDecodeVec2(oct: Int8Array, result: FloatArrayParam = createVec3()): FloatArrayParam {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n *\n */\nfunction octDecodeVec2s(octs: Int8Array, result: FloatArrayParam): FloatArrayParam {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n * @private\n */\nexport function quantizePositions3(positions: FloatArrayParam, aabb: FloatArrayParam, positionsDecompressMatrix: FloatArrayParam) { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const lenPositions = positions.length;\n    const positionsCompressed = new Uint16Array(lenPositions);\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65525;\n    const xMultiplier = maxInt / xwid;\n    const yMultiplier = maxInt / ywid;\n    const zMultiplier = maxInt / zwid;\n    const verify = (num: number) => num >= 0 ? num : 0;\n    for (let i = 0; i < lenPositions; i += 3) {\n        positionsCompressed[i + 0] = Math.floor(verify(positions[i + 0] - xmin) * xMultiplier);\n        positionsCompressed[i + 1] = Math.floor(verify(positions[i + 1] - ymin) * yMultiplier);\n        positionsCompressed[i + 2] = Math.floor(verify(positions[i + 2] - zmin) * zMultiplier);\n    }\n    identityMat4(translate);\n    translationMat4v(aabb, translate);\n    identityMat4(scale);\n    scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n    mulMat4(translate, scale, positionsDecompressMatrix);\n    return positionsCompressed;\n}\n\n/**\n * @private\n */\nexport function transformAndOctEncodeNormals(worldNormalMatrix: FloatArrayParam, normals: FloatArrayParam, lenNormals: number, compressedNormals: FloatArrayParam, lenCompressedNormals: number) {\n\n    function dot(p: FloatArrayParam, createVec3: FloatArrayParam) { // Dot product of a normal in an array against a candidate decoding\n        return p[0] * createVec3[0] + p[1] * createVec3[1] + p[2] * createVec3[2];\n    }\n\n    // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    let i, ei;\n    let localNormal = new Float32Array([0, 0, 0, 0]);\n    let worldNormal = new Float32Array([0, 0, 0, 0]);\n    for (i = 0; i < lenNormals; i += 3) {\n        localNormal[0] = normals[i];\n        localNormal[1] = normals[i + 1];\n        localNormal[2] = normals[i + 2];\n\n        transformVec3(worldNormalMatrix, localNormal, worldNormal);\n        normalizeVec3(worldNormal, worldNormal);\n\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(worldNormal, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(worldNormal, dec);\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\n/**\n * @private\n */\nexport function octEncodeNormals(normals: FloatArrayParam) { // http://jcgt.org/published/0003/02/01/\n    const lenNormals = normals.length;\n    const compressedNormals = new Int8Array(lenNormals)\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < lenNormals; i += 3) {\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeNormal(normals, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(normals, i, dec);\n        oct = octEncodeNormal(normals, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormal(normals, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormal(normals, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[i + 0] = best[0];\n        compressedNormals[i + 1] = best[1];\n        compressedNormals[i + 2] = 0.0; // Unused\n    }\n    return compressedNormals;\n}\n\n/**\n * @private\n */\nexport function octEncodeVec3(p: FloatArrayParam, xfunc: string, yfunc: string): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = p[0] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    let y = p[1] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    if (p[2] < 0) {\n        let tempx = x;\n        let tempy = y;\n        tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n/**\n * @private\n */\nexport function octEncodeNormal(array: FloatArrayParam, i: number, xfunc: string, yfunc: string): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n\n"],"names":["translate","createMat4","scale","getPositions3MinMax","array","min","max","i","j","Float64Array","Number","MAX_VALUE","length","Math","createPositions3DecompressMat4","aabb","positionsDecompressMatrix","xwid","ywid","zwid","maxInt","identityMat4","translationMat4v","scalingMat4v","mulMat4","compressPositions3","quantized","Uint16Array","multiplier","Float32Array","floor","decompressMatrix","compressPoint3","p","dest","decompressPoint3","position","decompressAABB3","decompressPositions3","positions","len","getUVBounds","compressUVs","createMat3","identityMat3","translationMat3v","scalingMat3v","mulMat3","compressNormals","encoded","Int8Array","oct","dec","best","currentCos","bestCos","octEncodeNormalFromArray","octDecodeVec2","dot","xfunc","yfunc","x","abs","y","tempx","tempy","createVec3","decompressUV","uv","decompressUVs","uvs","decompressNormal","result","z","sqrt","decompressNormals","octs","quantizePositions3","lenPositions","positionsCompressed","xmin","ymin","zmin","xMultiplier","yMultiplier","zMultiplier","verify","num","transformAndOctEncodeNormals","worldNormalMatrix","normals","lenNormals","compressedNormals","lenCompressedNormals","localNormal","worldNormal","transformVec3","normalizeVec3","octEncodeVec3","octEncodeNormals","octEncodeNormal"],"mappings":"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"}