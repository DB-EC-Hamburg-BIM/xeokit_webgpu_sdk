{"version":3,"file":"index.umd.js","sources":["../src/KdTree3.ts","../src/sceneObjectsKdTree3.ts","../src/createSceneObjectPrimsKdTree3.ts","../src/PrimsKdTree3.ts","../src/createPrimsKdTree3.ts","../src/createSceneObjectsKdTree3.ts","../src/searchKdTree3WithAABB.ts","../src/searchKdTree3WithFrustum.ts","../src/searchKdTree3WithRay.ts"],"sourcesContent":["import {containsAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\nimport type {KdTree3Params} from \"./KdTree3Params\";\n\n\nconst MAX_KD_TREE_DEPTH = 10; // Increase if greater precision needed\nconst kdTreeDimLength = new Float32Array(3);\n\n/**\n * A static k-d tree that organizes anything that has a boundary for\n * efficient 3D World-space boundary and frustm searches.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class KdTree3 {\n\n    #root: KdNode3;\n    #maxDepth: any;\n    #numNodes: number;\n    #numObjects: number;\n\n    /**\n     * Creates a new KdTree3.\n     *\n     * @param params\n     */\n    constructor(params: KdTree3Params) {\n        this.#maxDepth = params?.maxDepth || MAX_KD_TREE_DEPTH;\n        this.#root = {\n            index: 0,\n            aabb: params.aabb.slice()\n        };\n        this.#numNodes = 0;\n    }\n\n    get root(): KdNode3 {\n        return this.#root;\n    }\n\n    insertItem(item: any, aabb: FloatArrayParam) {\n        this.#insertItem(this.#root, <KdItem3D>{index: this.#numObjects++, item}, aabb, 1)\n    }\n\n    #insertItem(node: KdNode3, item: KdItem3D, aabb: FloatArrayParam, depth: number) {\n        if (depth >= this.#maxDepth) {\n            node.items = node.items || [];\n            node.items.push(item);\n            expandAABB3(node.aabb, aabb);\n            return;\n        }\n        if (node.left) {\n            if (containsAABB3(node.left.aabb, aabb)) {\n                this.#insertItem(node.left, item, aabb, depth + 1);\n                return;\n            }\n        }\n        if (node.right) {\n            if (containsAABB3(node.right.aabb, aabb)) {\n                this.#insertItem(node.right, item, aabb, depth + 1);\n                return;\n            }\n        }\n        const nodeAABB = node.aabb;\n        kdTreeDimLength[0] = nodeAABB[3] - nodeAABB[0];\n        kdTreeDimLength[1] = nodeAABB[4] - nodeAABB[1];\n        kdTreeDimLength[2] = nodeAABB[5] - nodeAABB[2];\n        let dim = 0;\n        if (kdTreeDimLength[1] > kdTreeDimLength[dim]) {\n            dim = 1;\n        }\n        if (kdTreeDimLength[2] > kdTreeDimLength[dim]) {\n            dim = 2;\n        }\n        if (!node.left) {\n            const aabbLeft = nodeAABB.slice();\n            aabbLeft[dim + 3] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            node.left = {\n                index: this.#numNodes++,\n                aabb: aabbLeft\n            };\n            if (containsAABB3(aabbLeft, aabb)) {\n                this.#insertItem(node.left, item, aabb, depth + 1);\n                return;\n            }\n        }\n        if (!node.right) {\n            const aabbRight = nodeAABB.slice();\n            aabbRight[dim] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            node.right = {\n                index: this.#numNodes++,\n                aabb: aabbRight\n            };\n            if (containsAABB3(aabbRight, aabb)) {\n                this.#insertItem(node.right, item, aabb, depth + 1);\n                return;\n            }\n        }\n        node.items = node.items || [];\n        node.items.push(item);\n        expandAABB3(node.aabb, aabb);\n    }\n}\n","import {KdTree3} from \"./KdTree3\";\n\n/**\n * k-d tree built by {@link createSceneObjectsKdTree3} that contains {@link @xeokit/scene!SceneObject | SceneObject} item types.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class SceneObjectsKdTree3 extends KdTree3 {\n}","import {GeometryBucket, GeometryView, getSceneObjectGeometry, SceneObject} from \"@xeokit/scene\";\nimport {KdTree3} from \"./KdTree3\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {LinesPrimitive, PointsPrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\nimport type {KdSceneObjectPrim} from \"./KdSceneObjectPrim\";\n\n/**\n * k-d tree built by {@link createSceneObjectPrimsKdTree3}.\n */\nexport class SceneObjectsPrimsKdTree3 extends KdTree3 {}\n\n/**\n * Creates a KdTree3 that indexes the primitives belonging to the given SceneObjects in 3D World-space.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n *\n * @param sceneObjects\n */\nexport function createSceneObjectPrimsKdTree3(sceneObjects: SceneObject[]): SceneObjectsPrimsKdTree3 {\n\n    const tempAABBInt16 = new Int16Array(6);\n\n    function insertPoint(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = aabb[3] = ax;\n        aabb[1] = aabb[4] = ay;\n        aabb[2] = aabb[5] = az;\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a}}, aabb);\n    }\n\n    function insertLine(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, b: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const bx = positions[(b * 3)];\n        const by = positions[(b * 3) + 1];\n        const bz = positions[(b * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = Math.min(ax, bx);\n        aabb[1] = Math.min(ay, by);\n        aabb[2] = Math.min(az, bz);\n        aabb[3] = Math.max(ax, bx);\n        aabb[4] = Math.max(ay, by);\n        aabb[5] = Math.max(az, bz);\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a, b}}, aabb);\n    }\n\n    function insertTriangle(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, b: number, c: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const bx = positions[(b * 3)];\n        const by = positions[(b * 3) + 1];\n        const bz = positions[(b * 3) + 2];\n        const cx = positions[(c * 3)];\n        const cy = positions[(c * 3) + 1];\n        const cz = positions[(c * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = Math.min(ax, bx, cx);\n        aabb[1] = Math.min(ay, by, cy);\n        aabb[2] = Math.min(az, bz, cz);\n        aabb[3] = Math.max(ax, bx, cx);\n        aabb[4] = Math.max(ay, by, cy);\n        aabb[5] = Math.max(az, bz, cz);\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a, b, c}}, aabb);\n    }\n\n    const aabb = collapseAABB3();\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const viewObject = sceneObjects[i];\n        expandAABB3(aabb, viewObject.aabb);\n    }\n    const kdTree = new SceneObjectsPrimsKdTree3({\n        aabb\n    });\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const sceneObject = sceneObjects[i];\n        getSceneObjectGeometry(sceneObject, (geometryView: GeometryView) => {\n            const geometry = geometryView.geometry;\n            const geometryBucket = geometryView.geometryBucket;\n            const positionsWorld = geometryView.positionsWorld;  // <-- Can be expensive\n            const indices = geometryBucket.indices;\n            switch (geometry.primitive) {\n                case PointsPrimitive:\n                    for (let j = 0, lenj = positionsWorld.length / 3; j < lenj; j++) {\n                        insertPoint(sceneObject, geometryBucket, positionsWorld, j, kdTree);\n                    }\n                    break;\n                case TrianglesPrimitive:\n                    if (indices) {\n                        for (let j = 0, lenj = indices.length; j < lenj; j += 3) {\n                            insertTriangle(sceneObject, geometryBucket, positionsWorld, indices[j], indices[j + 1], indices[j + 2], kdTree);\n                        }\n                    }\n                    break;\n                case LinesPrimitive:\n                    if (indices) {\n                        for (let j = 0, lenj = indices.length; j < lenj; j += 2) {\n                            insertLine(sceneObject, geometryBucket, positionsWorld, indices[j], indices[j + 1], kdTree);\n                        }\n                    }\n                    break;\n            }\n            return true;\n\n        });\n    }\n    return kdTree;\n}\n","import {KdTree3} from \"./KdTree3\";\n\n/**\n * k-d tree built by {@link createPrimsKdTree3} that contains {@link KdTriangle3}, {@link KdLine3} and {@link KdPoint3} item types.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class PrimsKdTree3 extends KdTree3 {\n\n}","import {createAABB3Int16, expandAABB3Points3} from \"@xeokit/boundaries\";\nimport type {FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {LinesPrimitive, PointsPrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdTrianglePrim} from \"./KdTrianglePrim\";\nimport type {KdLinePrim} from \"./KdLinePrim\";\nimport type {KdPointPrim} from \"./KdPointPrim\";\nimport {PrimsKdTree3} from \"./PrimsKdTree3\";\n\nconst tempAABBInt16 = new Int16Array(6);\n\n/**\n * Creates a KdTree3 that indexes the 3D primitives in the given arrays.\n *\n * This function does not care which coordinate space the primitives are in (ie. Local, World, View etc).\n *\n * This function also works for coordinates of any precision (ie. Float32Array, Float64Array, Int16Array, Int32Array etc).\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport function createPrimsKdTree3(primitiveType: number, positions: FloatArrayParam, indices?: IntArrayParam): PrimsKdTree3 {\n    const kdTree = new PrimsKdTree3({\n        aabb: <IntArrayParam>expandAABB3Points3(createAABB3Int16(), positions)\n    });\n\n    switch (primitiveType) {\n        case PointsPrimitive:\n            for (let i = 0, len = positions.length / 3; i < len; i++) {\n                insertPoint(positions, i, kdTree);\n            }\n            break;\n        case TrianglesPrimitive:\n            if (indices) {\n                for (let i = 0, len = indices.length; i < len; i += 3) {\n                    insertTriangle(positions, indices[i], indices[i + 1], indices[i + 2], kdTree);\n                }\n            }\n            break;\n        case LinesPrimitive:\n            if (indices) {\n                for (let i = 0, len = indices.length; i < len; i += 2) {\n                    insertLine(positions, indices[i], indices[i + 1], kdTree);\n                }\n            }\n            break;\n    }\n    return kdTree;\n}\n\nfunction insertPoint(positions: FloatArrayParam, a: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = aabb[3] = ax;\n    aabb[1] = aabb[4] = ay;\n    aabb[2] = aabb[5] = az;\n    kdTree.insertItem(<KdPointPrim>{a}, aabb);\n}\n\nfunction insertLine(positions: FloatArrayParam, a: number, b: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const bx = positions[(b * 3)];\n    const by = positions[(b * 3) + 1];\n    const bz = positions[(b * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = Math.min(ax, bx);\n    aabb[1] = Math.min(ay, by);\n    aabb[2] = Math.min(az, bz);\n    aabb[3] = Math.max(ax, bx);\n    aabb[4] = Math.max(ay, by);\n    aabb[5] = Math.max(az, bz);\n    kdTree.insertItem(<KdLinePrim>{a, b}, aabb);\n}\n\nfunction insertTriangle(positions: FloatArrayParam, a: number, b: number, c: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const bx = positions[(b * 3)];\n    const by = positions[(b * 3) + 1];\n    const bz = positions[(b * 3) + 2];\n    const cx = positions[(c * 3)];\n    const cy = positions[(c * 3) + 1];\n    const cz = positions[(c * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = Math.min(ax, bx, cx);\n    aabb[1] = Math.min(ay, by, cy);\n    aabb[2] = Math.min(az, bz, cz);\n    aabb[3] = Math.max(ax, bx, cx);\n    aabb[4] = Math.max(ay, by, cy);\n    aabb[5] = Math.max(az, bz, cz);\n    kdTree.insertItem(<KdTrianglePrim>{a, b, c}, aabb);\n}\n","import type {SceneObject} from \"@xeokit/scene\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {SceneObjectsKdTree3} from \"./sceneObjectsKdTree3\";\n\n/**\n * Indexes the given SceneObjects in a k-d tree for efficient collision detection.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport function createSceneObjectsKdTree3(sceneObjects: SceneObject[]): SceneObjectsKdTree3 {\n    const aabb = collapseAABB3();\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        expandAABB3(aabb, sceneObjects[i].aabb);\n    }\n    const kdTree = new SceneObjectsKdTree3({aabb});\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const sceneObject = sceneObjects[i];\n        kdTree.insertItem(sceneObject, sceneObject.aabb);\n    }\n    return kdTree;\n}\n\n\n","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {INTERSECT, intersectAABB3s, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D axis-aligned bounding box (AABB).\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithAABB(params: {\n    kdTree: KdTree3,\n    aabb: FloatArrayParam\n}): KdItem3D[] {\n\n    const kdTree = params.kdTree;\n    const aabb = params.aabb;\n    const foundItems: KdItem3D[] = [];\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = intersectAABB3s(aabb, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n","import {Frustum3, INTERSECT, intersectFrustum3AABB3, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D {@link @xeokit/boundaries!Frustum3}.\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithFrustum(params: {\n    kdTree: KdTree3,\n    frustum: Frustum3\n}): KdItem3D[] {\n    const kdTree = params.kdTree;\n    const frustum = params.frustum;\n    const foundItems: KdItem3D[] = [];\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = intersectFrustum3AABB3(frustum, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {INTERSECT, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D ray.\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithRay(params: {\n    kdTree: KdTree3,\n    origin: FloatArrayParam,\n    dir: FloatArrayParam\n}): KdItem3D[] {\n\n    const kdTree = params.kdTree;\n    const origin = params.origin;\n    const dir = params.dir;\n    const foundItems: KdItem3D[] = [];\n\n    function testRayIntersectsAABB3(origin: FloatArrayParam, dir: FloatArrayParam, aabb: FloatArrayParam) : number{\n        return 0;\n    }\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = testRayIntersectsAABB3(origin, dir, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n"],"names":["kdTreeDimLength","Float32Array","_root","_classPrivateFieldLooseKey","_maxDepth","_numNodes","_numObjects","_insertItem","KdTree3","params","Object","defineProperty","value","_insertItem2","writable","this","_classPrivateFieldLooseBase","maxDepth","index","aabb","slice","prototype","insertItem","item","key","get","node","depth","items","push","expandAABB3","left","containsAABB3","right","nodeAABB","dim","aabbLeft","aabbRight","SceneObjectsKdTree3","_KdTree","apply","arguments","_inheritsLoose","SceneObjectsPrimsKdTree3","PrimsKdTree3","tempAABBInt16","Int16Array","insertPoint","positions","a","kdTree","ay","az","insertLine","b","ax","bx","by","bz","Math","min","max","insertTriangle","c","cx","cy","cz","primitiveType","indices","expandAABB3Points3","createAABB3Int16","PointsPrimitive","i","len","length","TrianglesPrimitive","LinesPrimitive","sceneObjects","sceneObject","geometryBucket","prim","collapseAABB3","_loop","getSceneObjectGeometry","geometryView","positionsWorld","geometry","primitive","j","lenj","foundItems","visit","isect","OUTSIDE","intersectAABB3s","root","INTERSECT","frustum","intersectFrustum3AABB3"],"mappings":"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"}