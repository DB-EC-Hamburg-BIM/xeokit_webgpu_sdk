{"version":3,"file":"index.es","sources":["../src/KdTree3.ts","../src/sceneObjectsKdTree3.ts","../src/createSceneObjectsKdTree3.ts","../src/createSceneObjectPrimsKdTree3.ts","../src/PrimsKdTree3.ts","../src/createPrimsKdTree3.ts","../src/searchKdTree3WithAABB.ts","../src/searchKdTree3WithFrustum.ts","../src/searchKdTree3WithRay.ts"],"sourcesContent":["import {containsAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\nimport type {KdTree3Params} from \"./KdTree3Params\";\n\n\nconst MAX_KD_TREE_DEPTH = 10; // Increase if greater precision needed\nconst kdTreeDimLength = new Float32Array(3);\n\n/**\n * A static k-d tree that organizes anything that has a boundary for\n * efficient 3D World-space boundary and frustm searches.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class KdTree3 {\n\n    #root: KdNode3;\n    #maxDepth: any;\n    #numNodes: number;\n    #numObjects: number;\n\n    /**\n     * Creates a new KdTree3.\n     *\n     * @param params\n     */\n    constructor(params: KdTree3Params) {\n        this.#maxDepth = params?.maxDepth || MAX_KD_TREE_DEPTH;\n        this.#root = {\n            index: 0,\n            aabb: params.aabb.slice()\n        };\n        this.#numNodes = 0;\n    }\n\n    get root(): KdNode3 {\n        return this.#root;\n    }\n\n    insertItem(item: any, aabb: FloatArrayParam) {\n        this.#insertItem(this.#root, <KdItem3D>{index: this.#numObjects++, item}, aabb, 1)\n    }\n\n    #insertItem(node: KdNode3, item: KdItem3D, aabb: FloatArrayParam, depth: number) {\n        if (depth >= this.#maxDepth) {\n            node.items = node.items || [];\n            node.items.push(item);\n            expandAABB3(node.aabb, aabb);\n            return;\n        }\n        if (node.left) {\n            if (containsAABB3(node.left.aabb, aabb)) {\n                this.#insertItem(node.left, item, aabb, depth + 1);\n                return;\n            }\n        }\n        if (node.right) {\n            if (containsAABB3(node.right.aabb, aabb)) {\n                this.#insertItem(node.right, item, aabb, depth + 1);\n                return;\n            }\n        }\n        const nodeAABB = node.aabb;\n        kdTreeDimLength[0] = nodeAABB[3] - nodeAABB[0];\n        kdTreeDimLength[1] = nodeAABB[4] - nodeAABB[1];\n        kdTreeDimLength[2] = nodeAABB[5] - nodeAABB[2];\n        let dim = 0;\n        if (kdTreeDimLength[1] > kdTreeDimLength[dim]) {\n            dim = 1;\n        }\n        if (kdTreeDimLength[2] > kdTreeDimLength[dim]) {\n            dim = 2;\n        }\n        if (!node.left) {\n            const aabbLeft = nodeAABB.slice();\n            aabbLeft[dim + 3] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            node.left = {\n                index: this.#numNodes++,\n                aabb: aabbLeft\n            };\n            if (containsAABB3(aabbLeft, aabb)) {\n                this.#insertItem(node.left, item, aabb, depth + 1);\n                return;\n            }\n        }\n        if (!node.right) {\n            const aabbRight = nodeAABB.slice();\n            aabbRight[dim] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            node.right = {\n                index: this.#numNodes++,\n                aabb: aabbRight\n            };\n            if (containsAABB3(aabbRight, aabb)) {\n                this.#insertItem(node.right, item, aabb, depth + 1);\n                return;\n            }\n        }\n        node.items = node.items || [];\n        node.items.push(item);\n        expandAABB3(node.aabb, aabb);\n    }\n}\n","import {KdTree3} from \"./KdTree3\";\n\n/**\n * k-d tree built by {@link createSceneObjectsKdTree3} that contains {@link @xeokit/scene!SceneObject | SceneObject} item types.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class SceneObjectsKdTree3 extends KdTree3 {\n}","import type {SceneObject} from \"@xeokit/scene\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {SceneObjectsKdTree3} from \"./sceneObjectsKdTree3\";\n\n/**\n * Indexes the given SceneObjects in a k-d tree for efficient collision detection.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport function createSceneObjectsKdTree3(sceneObjects: SceneObject[]): SceneObjectsKdTree3 {\n    const aabb = collapseAABB3();\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        expandAABB3(aabb, sceneObjects[i].aabb);\n    }\n    const kdTree = new SceneObjectsKdTree3({aabb});\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const sceneObject = sceneObjects[i];\n        kdTree.insertItem(sceneObject, sceneObject.aabb);\n    }\n    return kdTree;\n}\n\n\n","import {GeometryBucket, GeometryView, getSceneObjectGeometry, SceneObject} from \"@xeokit/scene\";\nimport {KdTree3} from \"./KdTree3\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {collapseAABB3, expandAABB3} from \"@xeokit/boundaries\";\nimport {LinesPrimitive, PointsPrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\nimport type {KdSceneObjectPrim} from \"./KdSceneObjectPrim\";\n\n/**\n * k-d tree built by {@link createSceneObjectPrimsKdTree3}.\n */\nexport class SceneObjectsPrimsKdTree3 extends KdTree3 {}\n\n/**\n * Creates a KdTree3 that indexes the primitives belonging to the given SceneObjects in 3D World-space.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n *\n * @param sceneObjects\n */\nexport function createSceneObjectPrimsKdTree3(sceneObjects: SceneObject[]): SceneObjectsPrimsKdTree3 {\n\n    const tempAABBInt16 = new Int16Array(6);\n\n    function insertPoint(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = aabb[3] = ax;\n        aabb[1] = aabb[4] = ay;\n        aabb[2] = aabb[5] = az;\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a}}, aabb);\n    }\n\n    function insertLine(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, b: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const bx = positions[(b * 3)];\n        const by = positions[(b * 3) + 1];\n        const bz = positions[(b * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = Math.min(ax, bx);\n        aabb[1] = Math.min(ay, by);\n        aabb[2] = Math.min(az, bz);\n        aabb[3] = Math.max(ax, bx);\n        aabb[4] = Math.max(ay, by);\n        aabb[5] = Math.max(az, bz);\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a, b}}, aabb);\n    }\n\n    function insertTriangle(sceneObject: SceneObject, geometryBucket: GeometryBucket, positions: FloatArrayParam, a: number, b: number, c: number, kdTree: KdTree3) {\n        const ax = positions[(a * 3)];\n        const ay = positions[(a * 3) + 1];\n        const az = positions[(a * 3) + 2];\n        const bx = positions[(b * 3)];\n        const by = positions[(b * 3) + 1];\n        const bz = positions[(b * 3) + 2];\n        const cx = positions[(c * 3)];\n        const cy = positions[(c * 3) + 1];\n        const cz = positions[(c * 3) + 2];\n        const aabb = tempAABBInt16;\n        aabb[0] = Math.min(ax, bx, cx);\n        aabb[1] = Math.min(ay, by, cy);\n        aabb[2] = Math.min(az, bz, cz);\n        aabb[3] = Math.max(ax, bx, cx);\n        aabb[4] = Math.max(ay, by, cy);\n        aabb[5] = Math.max(az, bz, cz);\n        kdTree.insertItem(<KdSceneObjectPrim>{sceneObject, geometryBucket, prim: {a, b, c}}, aabb);\n    }\n\n    const aabb = collapseAABB3();\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const viewObject = sceneObjects[i];\n        expandAABB3(aabb, viewObject.aabb);\n    }\n    const kdTree = new SceneObjectsPrimsKdTree3({\n        aabb\n    });\n    for (let i = 0, len = sceneObjects.length; i < len; i++) {\n        const sceneObject = sceneObjects[i];\n        getSceneObjectGeometry(sceneObject, (geometryView: GeometryView) => {\n            const geometry = geometryView.geometry;\n            const geometryBucket = geometryView.geometryBucket;\n            const positionsWorld = geometryView.positionsWorld;  // <-- Can be expensive\n            const indices = geometryBucket.indices;\n            switch (geometry.primitive) {\n                case PointsPrimitive:\n                    for (let j = 0, lenj = positionsWorld.length / 3; j < lenj; j++) {\n                        insertPoint(sceneObject, geometryBucket, positionsWorld, j, kdTree);\n                    }\n                    break;\n                case TrianglesPrimitive:\n                    if (indices) {\n                        for (let j = 0, lenj = indices.length; j < lenj; j += 3) {\n                            insertTriangle(sceneObject, geometryBucket, positionsWorld, indices[j], indices[j + 1], indices[j + 2], kdTree);\n                        }\n                    }\n                    break;\n                case LinesPrimitive:\n                    if (indices) {\n                        for (let j = 0, lenj = indices.length; j < lenj; j += 2) {\n                            insertLine(sceneObject, geometryBucket, positionsWorld, indices[j], indices[j + 1], kdTree);\n                        }\n                    }\n                    break;\n            }\n            return true;\n\n        });\n    }\n    return kdTree;\n}\n","import {KdTree3} from \"./KdTree3\";\n\n/**\n * k-d tree built by {@link createPrimsKdTree3} that contains {@link KdTriangle3}, {@link KdLine3} and {@link KdPoint3} item types.\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport class PrimsKdTree3 extends KdTree3 {\n\n}","import {createAABB3Int16, expandAABB3Points3} from \"@xeokit/boundaries\";\nimport type {FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {LinesPrimitive, PointsPrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdTrianglePrim} from \"./KdTrianglePrim\";\nimport type {KdLinePrim} from \"./KdLinePrim\";\nimport type {KdPointPrim} from \"./KdPointPrim\";\nimport {PrimsKdTree3} from \"./PrimsKdTree3\";\n\nconst tempAABBInt16 = new Int16Array(6);\n\n/**\n * Creates a KdTree3 that indexes the 3D primitives in the given arrays.\n *\n * This function does not care which coordinate space the primitives are in (ie. Local, World, View etc).\n *\n * This function also works for coordinates of any precision (ie. Float32Array, Float64Array, Int16Array, Int32Array etc).\n *\n * See {@link \"@xeokit/collision/kdtree3\"} for usage.\n */\nexport function createPrimsKdTree3(primitiveType: number, positions: FloatArrayParam, indices?: IntArrayParam): PrimsKdTree3 {\n    const kdTree = new PrimsKdTree3({\n        aabb: <IntArrayParam>expandAABB3Points3(createAABB3Int16(), positions)\n    });\n\n    switch (primitiveType) {\n        case PointsPrimitive:\n            for (let i = 0, len = positions.length / 3; i < len; i++) {\n                insertPoint(positions, i, kdTree);\n            }\n            break;\n        case TrianglesPrimitive:\n            if (indices) {\n                for (let i = 0, len = indices.length; i < len; i += 3) {\n                    insertTriangle(positions, indices[i], indices[i + 1], indices[i + 2], kdTree);\n                }\n            }\n            break;\n        case LinesPrimitive:\n            if (indices) {\n                for (let i = 0, len = indices.length; i < len; i += 2) {\n                    insertLine(positions, indices[i], indices[i + 1], kdTree);\n                }\n            }\n            break;\n    }\n    return kdTree;\n}\n\nfunction insertPoint(positions: FloatArrayParam, a: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = aabb[3] = ax;\n    aabb[1] = aabb[4] = ay;\n    aabb[2] = aabb[5] = az;\n    kdTree.insertItem(<KdPointPrim>{a}, aabb);\n}\n\nfunction insertLine(positions: FloatArrayParam, a: number, b: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const bx = positions[(b * 3)];\n    const by = positions[(b * 3) + 1];\n    const bz = positions[(b * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = Math.min(ax, bx);\n    aabb[1] = Math.min(ay, by);\n    aabb[2] = Math.min(az, bz);\n    aabb[3] = Math.max(ax, bx);\n    aabb[4] = Math.max(ay, by);\n    aabb[5] = Math.max(az, bz);\n    kdTree.insertItem(<KdLinePrim>{a, b}, aabb);\n}\n\nfunction insertTriangle(positions: FloatArrayParam, a: number, b: number, c: number, kdTree: KdTree3) {\n    const ax = positions[(a * 3)];\n    const ay = positions[(a * 3) + 1];\n    const az = positions[(a * 3) + 2];\n    const bx = positions[(b * 3)];\n    const by = positions[(b * 3) + 1];\n    const bz = positions[(b * 3) + 2];\n    const cx = positions[(c * 3)];\n    const cy = positions[(c * 3) + 1];\n    const cz = positions[(c * 3) + 2];\n    const aabb = tempAABBInt16;\n    aabb[0] = Math.min(ax, bx, cx);\n    aabb[1] = Math.min(ay, by, cy);\n    aabb[2] = Math.min(az, bz, cz);\n    aabb[3] = Math.max(ax, bx, cx);\n    aabb[4] = Math.max(ay, by, cy);\n    aabb[5] = Math.max(az, bz, cz);\n    kdTree.insertItem(<KdTrianglePrim>{a, b, c}, aabb);\n}\n","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {INTERSECT, intersectAABB3s, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D axis-aligned bounding box (AABB).\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithAABB(params: {\n    kdTree: KdTree3,\n    aabb: FloatArrayParam\n}): KdItem3D[] {\n\n    const kdTree = params.kdTree;\n    const aabb = params.aabb;\n    const foundItems: KdItem3D[] = [];\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = intersectAABB3s(aabb, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n","import {Frustum3, INTERSECT, intersectFrustum3AABB3, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D {@link @xeokit/boundaries!Frustum3}.\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithFrustum(params: {\n    kdTree: KdTree3,\n    frustum: Frustum3\n}): KdItem3D[] {\n    const kdTree = params.kdTree;\n    const frustum = params.frustum;\n    const foundItems: KdItem3D[] = [];\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = intersectFrustum3AABB3(frustum, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {INTERSECT, OUTSIDE} from \"@xeokit/boundaries\";\nimport type {KdTree3} from \"./KdTree3\";\nimport type {KdNode3} from \"./KdNode3\";\nimport type {KdItem3D} from \"./KdItem3\";\n\n\n/**\n * Queries a {@link KdTree3} for {@link KdItem3D | KDItems} that intersect\n * a 3D ray.\n *\n * See {@link \"@xeokit/collison/kdtree3\"} for usage.\n */\nexport function searchKdTree3WithRay(params: {\n    kdTree: KdTree3,\n    origin: FloatArrayParam,\n    dir: FloatArrayParam\n}): KdItem3D[] {\n\n    const kdTree = params.kdTree;\n    const origin = params.origin;\n    const dir = params.dir;\n    const foundItems: KdItem3D[] = [];\n\n    function testRayIntersectsAABB3(origin: FloatArrayParam, dir: FloatArrayParam, aabb: FloatArrayParam) : number{\n        return 0;\n    }\n\n    function visit(node: KdNode3, isect: number) {\n        if (isect === OUTSIDE) {\n            return;\n        }\n        isect = testRayIntersectsAABB3(origin, dir, node.aabb);\n        if (isect === OUTSIDE) {\n            return;\n        }\n        const items = node.items;\n        if (items && items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n                foundItems.push(items[i].item);\n            }\n        }\n        if (node.left) {\n            visit(node.left, isect);\n        }\n        if (node.right) {\n            visit(node.right, isect);\n        }\n    }\n\n    visit(kdTree.root, INTERSECT);\n    return foundItems;\n}\n"],"names":["kdTreeDimLength","Float32Array","_root","_classPrivateFieldLooseKey","_maxDepth","_numNodes","_numObjects","_insertItem","KdTree3","params","Object","defineProperty","value","_insertItem2","writable","this","_classPrivateFieldLooseBase","maxDepth","index","aabb","slice","prototype","insertItem","item","key","get","node","depth","items","push","expandAABB3","left","containsAABB3","right","nodeAABB","dim","aabbLeft","aabbRight","SceneObjectsKdTree3","_KdTree","apply","arguments","_inheritsLoose","createSceneObjectsKdTree3","sceneObjects","collapseAABB3","i","len","length","kdTree","sceneObject","SceneObjectsPrimsKdTree3","createSceneObjectPrimsKdTree3","tempAABBInt16","Int16Array","insertPoint","geometryBucket","positions","a","ay","az","prim","insertLine","b","ax","bx","by","bz","Math","min","max","insertTriangle","c","cx","cy","cz","_loop","getSceneObjectGeometry","geometryView","positionsWorld","indices","geometry","primitive","PointsPrimitive","j","lenj","TrianglesPrimitive","LinesPrimitive","PrimsKdTree3","createPrimsKdTree3","primitiveType","expandAABB3Points3","createAABB3Int16","searchKdTree3WithAABB","foundItems","visit","isect","OUTSIDE","intersectAABB3s","root","INTERSECT","searchKdTree3WithFrustum","frustum","intersectFrustum3AABB3","searchKdTree3WithRay"],"mappings":"0vBAOA,IACMA,EAAkB,IAAIC,aAAa,GAAGC,eAAAC,EAAA,QAAAC,eAAAD,EAAAE,YAAAA,eAAAF,EAAA,YAAAG,eAAAH,EAAAI,cAAAA,eAAAJ,EAAA,cAQ/BK,eAYT,WAAA,SAAAA,EAAYC,GAAqBC,OAAAC,oBAAAJ,EAAA,CAAAK,MAAAC,IAAAH,OAAAC,oBAAAT,EAAA,CAAAY,UAAA,EAAAF,WAAAF,IAAAA,OAAAC,eAAAI,KAAAX,EAAAU,CAAAA,UAAAF,EAAAA,eAAAF,OAAAC,eAAAI,KAAAV,EAAAS,CAAAA,UAAAF,EAAAA,eAAAF,OAAAC,eAAAI,KAAAT,EAAAQ,CAAAA,UAAAF,EAAAA,eAC7BI,EAAAD,KAAIX,GAAAA,UAAaK,SAAAA,EAAQQ,WAtBP,GAuBlBD,EAAAD,KAAIb,GAAAA,GAAS,CACTgB,MAAO,EACPC,KAAMV,EAAOU,KAAKC,SAEtBJ,EAAID,KAAAV,GAAAA,GAAa,CACrB,CAAC,eAAAG,EAAAa,UAMDC,WAAA,SAAWC,EAAWJ,GAClBH,EAAAD,KAAIR,GAAAA,GAAAS,EAAaD,KAAIb,GAAAA,GAAkB,CAACgB,MAAOF,EAAAD,KAAIT,GAAAA,KAAgBiB,KAAAA,GAAOJ,EAAM,EACpF,IAACX,KAAA,CAAA,CAAAgB,IAAA,OAAAC,IAND,WACI,OAAAT,EAAOD,KAAIb,GAAAA,EACf,mgBAACM,CAAA,CAXD,GA2EH,SAAAK,EA1Dea,EAAeH,EAAgBJ,EAAuBQ,GAC9D,GAAIA,GAAKX,EAAID,KAAIX,GAAAA,GAIb,OAHAsB,EAAKE,MAAQF,EAAKE,OAAS,GAC3BF,EAAKE,MAAMC,KAAKN,QAChBO,EAAYJ,EAAKP,KAAMA,GAG3B,GAAIO,EAAKK,MACDC,EAAcN,EAAKK,KAAKZ,KAAMA,GAC9BH,EAAAD,KAAIR,GAAAA,GAAamB,EAAKK,KAAMR,EAAMJ,EAAMQ,EAAQ,QAIxD,GAAID,EAAKO,OACDD,EAAcN,EAAKO,MAAMd,KAAMA,GAC/BH,EAAAD,KAAIR,GAAAA,GAAamB,EAAKO,MAAOV,EAAMJ,EAAMQ,EAAQ,OAFzD,CAMA,IAAMO,EAAWR,EAAKP,KACtBnB,EAAgB,GAAKkC,EAAS,GAAKA,EAAS,GAC5ClC,EAAgB,GAAKkC,EAAS,GAAKA,EAAS,GAC5ClC,EAAgB,GAAKkC,EAAS,GAAKA,EAAS,GAC5C,IAAIC,EAAM,EAOV,GANInC,EAAgB,GAAKA,EAAgBmC,KACrCA,EAAM,GAENnC,EAAgB,GAAKA,EAAgBmC,KACrCA,EAAM,IAELT,EAAKK,KAAM,CACZ,IAAMK,EAAWF,EAASd,QAM1B,GALAgB,EAASD,EAAM,IAAOD,EAASC,GAAOD,EAASC,EAAM,IAAM,EAC3DT,EAAKK,KAAO,CACRb,MAAOF,EAAID,KAAAV,GAAAA,KACXc,KAAMiB,GAENJ,EAAcI,EAAUjB,GAExB,YADAH,EAAID,KAAAR,GAAAA,GAAamB,EAAKK,KAAMR,EAAMJ,EAAMQ,EAAQ,EAGvD,CACD,IAAKD,EAAKO,MAAO,CACb,IAAMI,EAAYH,EAASd,QAM3B,GALAiB,EAAUF,IAASD,EAASC,GAAOD,EAASC,EAAM,IAAM,EACxDT,EAAKO,MAAQ,CACTf,MAAOF,OAAIX,GAAAA,KACXc,KAAMkB,GAENL,EAAcK,EAAWlB,GAEzB,YADAH,EAAAD,KAAIR,GAAAA,GAAamB,EAAKO,MAAOV,EAAMJ,EAAMQ,EAAQ,EAGxD,CACDD,EAAKE,MAAQF,EAAKE,OAAS,GAC3BF,EAAKE,MAAMC,KAAKN,GAChBO,EAAYJ,EAAKP,KAAMA,EAtCtB,CAuCL,CC/FS,IAAAmB,eAAoBC,SAAAA,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAAzB,KAAA0B,YAAA1B,IAAA,CAAA,OAAA2B,EAAAJ,EAAAC,GAAAD,CAAA,CAAAC,CAAQ/B,GCEnC,SAAUmC,EAA0BC,GAEtC,IADA,IAAMzB,EAAO0B,IACJC,EAAI,EAAGC,EAAMH,EAAaI,OAAQF,EAAIC,EAAKD,IAChDhB,EAAYX,EAAMyB,EAAaE,GAAG3B,MAGtC,IADA,IAAM8B,EAAS,IAAIX,EAAoB,CAACnB,KAAAA,IAC/B2B,EAAI,EAAGC,EAAMH,EAAaI,OAAQF,EAAIC,EAAKD,IAAK,CACrD,IAAMI,EAAcN,EAAaE,GACjCG,EAAO3B,WAAW4B,EAAaA,EAAY/B,KAC9C,CACD,OAAO8B,CACX,CCVa,IAAAE,wBAAyBZ,GAAA,SAAAY,IAAA,OAAAZ,EAAAC,MAAAzB,KAAA0B,YAAA1B,IAAA,CAAA,OAAA2B,EAAAS,EAAAZ,GAAAY,CAAA,EAAQ3C,GASxC,SAAU4C,EAA8BR,GAE1C,IAAMS,EAAgB,IAAIC,WAAW,GAErC,SAASC,EAAYL,EAA0BM,EAAgCC,EAA4BC,EAAWT,GAClH,IACMU,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBvC,EAAOkC,EACblC,EAAK,GAAKA,EAAK,GAJJsC,EAAe,EAAJC,GAKtBvC,EAAK,GAAKA,EAAK,GAAKwC,EACpBxC,EAAK,GAAKA,EAAK,GAAKyC,EACpBX,EAAO3B,WAA8B,CAAC4B,YAAAA,EAAaM,eAAAA,EAAgBK,KAAM,CAACH,EAAAA,IAAKvC,EACnF,CAEA,SAAS2C,EAAWZ,EAA0BM,EAAgCC,EAA4BC,EAAWK,EAAWd,GAC5H,IAAMe,EAAKP,EAAe,EAAJC,GAChBC,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBO,EAAKR,EAAe,EAAJM,GAChBG,EAAKT,EAAe,EAAJM,EAAS,GACzBI,EAAKV,EAAe,EAAJM,EAAS,GACzB5C,EAAOkC,EACblC,EAAK,GAAKiD,KAAKC,IAAIL,EAAIC,GACvB9C,EAAK,GAAKiD,KAAKC,IAAIV,EAAIO,GACvB/C,EAAK,GAAKiD,KAAKC,IAAIT,EAAIO,GACvBhD,EAAK,GAAKiD,KAAKE,IAAIN,EAAIC,GACvB9C,EAAK,GAAKiD,KAAKE,IAAIX,EAAIO,GACvB/C,EAAK,GAAKiD,KAAKE,IAAIV,EAAIO,GACvBlB,EAAO3B,WAA8B,CAAC4B,YAAAA,EAAaM,eAAAA,EAAgBK,KAAM,CAACH,EAAAA,EAAGK,EAAAA,IAAK5C,EACtF,CAEA,SAASoD,EAAerB,EAA0BM,EAAgCC,EAA4BC,EAAWK,EAAWS,EAAWvB,GAC3I,IAAMe,EAAKP,EAAe,EAAJC,GAChBC,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBO,EAAKR,EAAe,EAAJM,GAChBG,EAAKT,EAAe,EAAJM,EAAS,GACzBI,EAAKV,EAAe,EAAJM,EAAS,GACzBU,EAAKhB,EAAe,EAAJe,GAChBE,EAAKjB,EAAe,EAAJe,EAAS,GACzBG,EAAKlB,EAAe,EAAJe,EAAS,GACzBrD,EAAOkC,EACblC,EAAK,GAAKiD,KAAKC,IAAIL,EAAIC,EAAIQ,GAC3BtD,EAAK,GAAKiD,KAAKC,IAAIV,EAAIO,EAAIQ,GAC3BvD,EAAK,GAAKiD,KAAKC,IAAIT,EAAIO,EAAIQ,GAC3BxD,EAAK,GAAKiD,KAAKE,IAAIN,EAAIC,EAAIQ,GAC3BtD,EAAK,GAAKiD,KAAKE,IAAIX,EAAIO,EAAIQ,GAC3BvD,EAAK,GAAKiD,KAAKE,IAAIV,EAAIO,EAAIQ,GAC3B1B,EAAO3B,WAA8B,CAAC4B,YAAAA,EAAaM,eAAAA,EAAgBK,KAAM,CAACH,EAAAA,EAAGK,EAAAA,EAAGS,EAAAA,IAAKrD,EACzF,CAGA,IADA,IAAMA,EAAO0B,IACJC,EAAI,EAAGC,EAAMH,EAAaI,OAAQF,EAAIC,EAAKD,IAEhDhB,EAAYX,EADOyB,EAAaE,GACH3B,MAKjC,IAHA,IAAM8B,EAAS,IAAIE,EAAyB,CACxChC,KAAAA,IACDyD,EAAA,WAEC,IAAM1B,EAAcN,EAAaE,GACjC+B,EAAuB3B,EAAa,SAAC4B,GACjC,IACMtB,EAAiBsB,EAAatB,eAC9BuB,EAAiBD,EAAaC,eAC9BC,EAAUxB,EAAewB,QAC/B,OAJiBF,EAAaG,SAIbC,WACb,KAAKC,EACD,IAAK,IAAIC,EAAI,EAAGC,EAAON,EAAe/B,OAAS,EAAGoC,EAAIC,EAAMD,IACxD7B,EAAYL,EAAaM,EAAgBuB,EAAgBK,EAAGnC,GAEhE,MACJ,KAAKqC,EACD,GAAIN,EACA,IAAK,IAAII,EAAI,EAAGC,EAAOL,EAAQhC,OAAQoC,EAAIC,EAAMD,GAAK,EAClDb,EAAerB,EAAaM,EAAgBuB,EAAgBC,EAAQI,GAAIJ,EAAQI,EAAI,GAAIJ,EAAQI,EAAI,GAAInC,GAGhH,MACJ,KAAKsC,EACD,GAAIP,EACA,IAAK,IAAII,EAAI,EAAGC,EAAOL,EAAQhC,OAAQoC,EAAIC,EAAMD,GAAK,EAClDtB,EAAWZ,EAAaM,EAAgBuB,EAAgBC,EAAQI,GAAIJ,EAAQI,EAAI,GAAInC,GAKpG,QAEJ,EACH,EA/BQH,EAAI,EAAGC,EAAMH,EAAaI,OAAQF,EAAIC,EAAKD,IAAG8B,IAgCvD,OAAO3B,CACX,CCzGa,IAAAuC,eAAajD,SAAAA,GAAA,SAAAiD,IAAA,OAAAjD,EAAAC,MAAAzB,KAAA0B,YAAA1B,IAAA,CAAA,OAAA2B,EAAA8C,EAAAjD,GAAAiD,CAAA,CAAAjD,CAAQ/B,GCE5B6C,EAAgB,IAAIC,WAAW,YAWrBmC,EAAmBC,EAAuBjC,EAA4BuB,GAClF,IAAM/B,EAAS,IAAIuC,EAAa,CAC5BrE,KAAqBwE,EAAmBC,IAAoBnC,KAGhE,OAAQiC,GACJ,KAAKP,EACD,IAAK,IAAIrC,EAAI,EAAGC,EAAMU,EAAUT,OAAS,EAAGF,EAAIC,EAAKD,IACjDS,EAAYE,EAAWX,EAAGG,GAE9B,MACJ,KAAKqC,EACD,GAAIN,EACA,IAAK,IAAIlC,EAAI,EAAGC,EAAMiC,EAAQhC,OAAQF,EAAIC,EAAKD,GAAK,EAChDyB,EAAed,EAAWuB,EAAQlC,GAAIkC,EAAQlC,EAAI,GAAIkC,EAAQlC,EAAI,GAAIG,GAG9E,MACJ,KAAKsC,EACD,GAAIP,EACA,IAAK,IAAIlC,EAAI,EAAGC,EAAMiC,EAAQhC,OAAQF,EAAIC,EAAKD,GAAK,EAChDgB,EAAWL,EAAWuB,EAAQlC,GAAIkC,EAAQlC,EAAI,GAAIG,GAKlE,OAAOA,CACX,CAEA,SAASM,EAAYE,EAA4BC,EAAWT,GACxD,IACMU,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBvC,EAAOkC,EACblC,EAAK,GAAKA,EAAK,GAJJsC,EAAe,EAAJC,GAKtBvC,EAAK,GAAKA,EAAK,GAAKwC,EACpBxC,EAAK,GAAKA,EAAK,GAAKyC,EACpBX,EAAO3B,WAAwB,CAACoC,EAAAA,GAAIvC,EACxC,CAEA,SAAS2C,EAAWL,EAA4BC,EAAWK,EAAWd,GAClE,IAAMe,EAAKP,EAAe,EAAJC,GAChBC,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBO,EAAKR,EAAe,EAAJM,GAChBG,EAAKT,EAAe,EAAJM,EAAS,GACzBI,EAAKV,EAAe,EAAJM,EAAS,GACzB5C,EAAOkC,EACblC,EAAK,GAAKiD,KAAKC,IAAIL,EAAIC,GACvB9C,EAAK,GAAKiD,KAAKC,IAAIV,EAAIO,GACvB/C,EAAK,GAAKiD,KAAKC,IAAIT,EAAIO,GACvBhD,EAAK,GAAKiD,KAAKE,IAAIN,EAAIC,GACvB9C,EAAK,GAAKiD,KAAKE,IAAIX,EAAIO,GACvB/C,EAAK,GAAKiD,KAAKE,IAAIV,EAAIO,GACvBlB,EAAO3B,WAAuB,CAACoC,EAAAA,EAAGK,EAAAA,GAAI5C,EAC1C,CAEA,SAASoD,EAAed,EAA4BC,EAAWK,EAAWS,EAAWvB,GACjF,IAAMe,EAAKP,EAAe,EAAJC,GAChBC,EAAKF,EAAe,EAAJC,EAAS,GACzBE,EAAKH,EAAe,EAAJC,EAAS,GACzBO,EAAKR,EAAe,EAAJM,GAChBG,EAAKT,EAAe,EAAJM,EAAS,GACzBI,EAAKV,EAAe,EAAJM,EAAS,GACzBU,EAAKhB,EAAe,EAAJe,GAChBE,EAAKjB,EAAe,EAAJe,EAAS,GACzBG,EAAKlB,EAAe,EAAJe,EAAS,GACzBrD,EAAOkC,EACblC,EAAK,GAAKiD,KAAKC,IAAIL,EAAIC,EAAIQ,GAC3BtD,EAAK,GAAKiD,KAAKC,IAAIV,EAAIO,EAAIQ,GAC3BvD,EAAK,GAAKiD,KAAKC,IAAIT,EAAIO,EAAIQ,GAC3BxD,EAAK,GAAKiD,KAAKE,IAAIN,EAAIC,EAAIQ,GAC3BtD,EAAK,GAAKiD,KAAKE,IAAIX,EAAIO,EAAIQ,GAC3BvD,EAAK,GAAKiD,KAAKE,IAAIV,EAAIO,EAAIQ,GAC3B1B,EAAO3B,WAA2B,CAACoC,EAAAA,EAAGK,EAAAA,EAAGS,EAAAA,GAAIrD,EACjD,CClFM,SAAU0E,EAAsBpF,GAKlC,IACMU,EAAOV,EAAOU,KACd2E,EAAyB,GAyB/B,OAvBA,SAASC,EAAMrE,EAAesE,GAC1B,GAAIA,IAAUC,IAGdD,EAAQE,EAAgB/E,EAAMO,EAAKP,SACrB8E,EAAd,CAGA,IAAMrE,EAAQF,EAAKE,MACnB,GAAIA,GAASA,EAAMoB,OAAS,EACxB,IAAK,IAAIF,EAAI,EAAGC,EAAMnB,EAAMoB,OAAQF,EAAIC,EAAKD,IACzCgD,EAAWjE,KAAKD,EAAMkB,GAAGvB,MAG7BG,EAAKK,MACLgE,EAAMrE,EAAKK,KAAMiE,GAEjBtE,EAAKO,OACL8D,EAAMrE,EAAKO,MAAO+D,EAXrB,CAaL,CAEAD,CA1BetF,EAAOwC,OA0BTkD,KAAMC,GACZN,CACX,CCnCM,SAAUO,EAAyB5F,GAIrC,IACM6F,EAAU7F,EAAO6F,QACjBR,EAAyB,GAyB/B,OAvBA,SAASC,EAAMrE,EAAesE,GAC1B,GAAIA,IAAUC,IAGdD,EAAQO,EAAuBD,EAAS5E,EAAKP,SAC/B8E,EAAd,CAGA,IAAMrE,EAAQF,EAAKE,MACnB,GAAIA,GAASA,EAAMoB,OAAS,EACxB,IAAK,IAAIF,EAAI,EAAGC,EAAMnB,EAAMoB,OAAQF,EAAIC,EAAKD,IACzCgD,EAAWjE,KAAKD,EAAMkB,GAAGvB,MAG7BG,EAAKK,MACLgE,EAAMrE,EAAKK,KAAMiE,GAEjBtE,EAAKO,OACL8D,EAAMrE,EAAKO,MAAO+D,EAXrB,CAaL,CAEAD,CA1BetF,EAAOwC,OA0BTkD,KAAMC,GACZN,CACX,UC9BgBU,EAAqB/F,GAMjC,IAGMqF,EAAyB,GA6B/B,OAvBA,SAASC,EAAMrE,EAAesE,GAC1B,GAAIA,IAAUC,IAGdD,EANJ,KAOkBC,EAAd,CAGA,IAAMrE,EAAQF,EAAKE,MACnB,GAAIA,GAASA,EAAMoB,OAAS,EACxB,IAAK,IAAIF,EAAI,EAAGC,EAAMnB,EAAMoB,OAAQF,EAAIC,EAAKD,IACzCgD,EAAWjE,KAAKD,EAAMkB,GAAGvB,MAG7BG,EAAKK,MACLgE,EAAMrE,EAAKK,KAAMiE,GAEjBtE,EAAKO,OACL8D,EAAMrE,EAAKO,MAAO+D,EAXrB,CAaL,CAEAD,CA/BetF,EAAOwC,OA+BTkD,KAAMC,GACZN,CACX"}