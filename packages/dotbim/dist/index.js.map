{"version":3,"file":"index.js","sources":["../src/loadDotBIM.ts"],"sourcesContent":["import type {SceneModel} from \"@xeokit/scene\";\nimport type {DataModel} from \"@xeokit/data\";\nimport {SDKError} from \"@xeokit/core\";\n\n\n/**\n * Loads .BIM into a {@link @xeokit/scene!SceneModel | SceneModel} and/or a {@link @xeokit/data!DataModel | DataModel}.\n *\n * * Expects {@link @xeokit/scene!SceneModel.built | SceneModel.built} and {@link @xeokit/scene!SceneModel.destroyed | SceneModel.destroyed} to be ````false````\n * * Does not call {@link @xeokit/scene!SceneModel.build | SceneModel.build} - we call that ourselves, when we have finished building the SceneModel\n *\n * See {@link \"@xeokit/dotbim\"} for usage.\n *\n * @param params - Loading parameters.\n * @param params.data - .BIM file data.\n * @param params.sceneModel - SceneModel to load into.\n * @param params.dataModel - DataModel to load into.\n * @param options - .BIM loading options\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has already been built.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has already been built.\n * @returns {Promise} Resolves when .BIM has been loaded into the SceneModel and/or DataModel.\n */\nexport function loadDotBIM(params: {\n                               data: any,\n                               sceneModel: SceneModel,\n                               dataModel?: DataModel\n                           },\n                           options: {\n                               rotateX?: boolean;\n                           } = {\n                               rotateX: false\n                           }): Promise<any> {\n    if (params.sceneModel.destroyed) {\n        throw new Error(\"SceneModel already destroyed\");\n    }\n    if (params.sceneModel.built) {\n        throw new SDKError(\"SceneModel already built\");\n    }\n    if (params.dataModel) {\n        if (params.dataModel.destroyed) {\n            throw new SDKError(\"DataModel already destroyed\");\n        }\n        if (params.dataModel.built) {\n            throw new SDKError(\"DataModel already built\");\n        }\n    }\n    return new Promise<void>(function (resolve, reject) {\n        const data = params.data;\n        const ctx = {\n            data,\n            sceneModel: params.sceneModel,\n            dataModel: params.dataModel,\n            nextId: 0\n        };\n        parseDotBIM(ctx);\n        resolve();\n    });\n}\n\nfunction parseDotBIM(ctx: any) {\n    const data = ctx.data;\n    const meshes = data.meshes;\n    for (let i = 0, len = meshes.length; i < len; i++) {\n        const mesh = meshes[i];\n        ctx.sceneModel.createGeometry({\n            id: mesh.mesh_id,\n            positions: mesh.coordinates,\n            indices: mesh.indices\n        });\n    }\n    const elements = data.elements;\n    for (let i = 0, len = elements.length; i < len; i++) {\n        const element = elements[i];\n        const objectId = element.guid;\n        if (ctx.sceneModel) {\n            const geometryId = element.mesh_id;\n            const meshId = `${objectId}-mesh-${i}`;\n            ctx.sceneModel.createMesh({\n                id: meshId,\n                geometryId,\n                baseColor: element.color\n            });\n            ctx.sceneModel.createObject({\n                id: objectId,\n                meshIds: [meshId]\n            });\n        }\n        if (ctx.dataModel) {\n            ctx.dataModel.createObject({\n                id: element.guid,\n                type: element.type\n            });\n        }\n    }\n}\n"],"names":["params","options","sceneModel","destroyed","Error","built","SDKError","dataModel","Promise","resolve","reject","ctx","data","meshes","i","len","length","mesh","createGeometry","id","mesh_id","positions","coordinates","indices","elements","element","objectId","guid","meshId","createMesh","geometryId","baseColor","color","createObject","meshIds","type","parseDotBIM","nextId"],"mappings":"iDAwBgB,SAAWA,EAKAC,GAKvB,GAAID,EAAOE,WAAWC,UAClB,MAAU,IAAAC,MAAM,gCAEpB,GAAIJ,EAAOE,WAAWG,MAClB,UAAUC,EAAQA,SAAC,4BAEvB,GAAIN,EAAOO,UAAW,CAClB,GAAIP,EAAOO,UAAUJ,UACjB,MAAM,IAAIG,EAAQA,SAAC,+BAEvB,GAAIN,EAAOO,UAAUF,MACjB,UAAUC,WAAS,0BAE1B,CACD,OAAW,IAAAE,QAAc,SAAUC,EAASC,IAahD,SAAqBC,GAGjB,IAFA,IAAMC,EAAOD,EAAIC,KACXC,EAASD,EAAKC,OACXC,EAAI,EAAGC,EAAMF,EAAOG,OAAQF,EAAIC,EAAKD,IAAK,CAC/C,IAAMG,EAAOJ,EAAOC,GACpBH,EAAIT,WAAWgB,eAAe,CAC1BC,GAAIF,EAAKG,QACTC,UAAWJ,EAAKK,YAChBC,QAASN,EAAKM,SAErB,CAED,IADA,IAAMC,EAAWZ,EAAKY,SACbV,EAAI,EAAGC,EAAMS,EAASR,OAAQF,EAAIC,EAAKD,IAAK,CACjD,IAAMW,EAAUD,EAASV,GACnBY,EAAWD,EAAQE,KACzB,GAAIhB,EAAIT,WAAY,CAChB,IACM0B,EAAYF,EAAQ,SAASZ,EACnCH,EAAIT,WAAW2B,WAAW,CACtBV,GAAIS,EACJE,WAJeL,EAAQL,QAKvBW,UAAWN,EAAQO,QAEvBrB,EAAIT,WAAW+B,aAAa,CACxBd,GAAIO,EACJQ,QAAS,CAACN,IAEjB,CACGjB,EAAIJ,WACJI,EAAIJ,UAAU0B,aAAa,CACvBd,GAAIM,EAAQE,KACZQ,KAAMV,EAAQU,MAGzB,CACL,CAxCQC,CANY,CACRxB,KAFSZ,EAAOY,KAGhBV,WAAYF,EAAOE,WACnBK,UAAWP,EAAOO,UAClB8B,OAAQ,IAGZ5B,GACJ,EACJ"}