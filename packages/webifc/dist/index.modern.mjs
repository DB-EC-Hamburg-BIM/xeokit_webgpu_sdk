import{createMat4 as e,createVec3 as t,transformPositions3 as o}from"@xeokit/matrix";import*as r from"web-ifc/web-ifc-api-node";import{IfcRelAggregates as i}from"@xeokit/ifctypes";import{worldToRTCPositions as a}from"@xeokit/rtc";import{TrianglesPrimitive as n}from"@xeokit/constants";function l(i){if(!i.ifcAPI)throw new Error("Argument missing: ifcAPI");if(i.sceneModel.destroyed)throw new Error("SceneModel already destroyed");if(i.sceneModel.built)throw new Error("SceneModel already built");if(i.dataModel){if(i.dataModel.destroyed)throw new Error("DataModel already destroyed");if(i.dataModel.built)throw new Error("DataModel already built")}return new Promise(function(l,c){const s=new Uint8Array(i.data),I=i.ifcAPI.OpenModel(s),f=i.ifcAPI.GetLineIDsWithType(I,r.IFCPROJECT),p=f.get(0);var m;(m={data:i.data,modelId:I,lines:f,ifcProjectId:p,ifcAPI:i.ifcAPI,sceneModel:i.sceneModel,dataModel:i.dataModel,nextId:0}).dataModel&&function(e){const t=e.ifcAPI.GetLineIDsWithType(e.modelId,r.IFCPROJECT).get(0),o=e.ifcAPI.GetLine(e.modelId,t);(function(e){const t=e.ifcAPI.GetLineIDsWithType(e.modelId,r.IFCRELDEFINESBYPROPERTIES);for(let o=0;o<t.size();o++){let r=t.get(o),i=e.ifcAPI.GetLine(e.modelId,r,!0);if(i){const t=i.RelatingPropertyDefinition;if(!t)continue;const o=t.GlobalId.value,r=t.HasProperties;if(r&&r.length>0){const a="Default",n=t.Name.value,l=[];for(let e=0,t=r.length;e<t;e++){const t=r[e],o=t.Name,i=t.NominalValue;o&&i&&l.push({name:o.value,type:i.type,value:i.value,valueType:i.valueType,description:t.Description?t.Description.value:i.description?i.description:""})}e.dataModel.createPropertySet({id:o,type:a,name:n,properties:l});const d=i.RelatedObjects;if(!d||0===d.length)return;for(let t=0,r=d.length;t<r;t++){const r=e.dataObjects[d[t].GlobalId.value];r&&(r.propertySetIds||(r.propertySetIds=[]),r.propertySetIds.push(o))}}}}})(e),d(e,o)}(m),m.sceneModel&&function(r){r.ifcAPI.StreamAllMeshes(r.modelId,i=>{const l=i.geometries,d=[],c=r.ifcAPI.GetLine(r.modelId,i.expressID).GlobalId.value,s=e(),I=t();for(let e=0,t=l.size();e<t;e++){const t=l.get(e),i=r.ifcAPI.GetGeometry(r.modelId,t.geometryExpressID),c=r.ifcAPI.GetVertexArray(i.GetVertexData(),i.GetVertexDataSize()),f=r.ifcAPI.GetIndexArray(i.GetIndexData(),i.GetIndexDataSize()),p=new Float64Array(c.length/2);for(let e=0,t=0,o=c.length/6;e<o;e++,t+=3)p[t+0]=c[6*e+0],p[t+1]=c[6*e+1],p[t+2]=c[6*e+2];s.set(t.flatTransformation),o(s,p),a(p,p,I);const m=""+r.nextId++;r.sceneModel.createGeometry({id:m,primitive:n,positions:p,indices:f});const u=""+r.nextId++;r.sceneModel.createMesh({id:u,geometryId:m,color:[t.color.x,t.color.y,t.color.z],opacity:t.color.w}),d.push(u)}r.sceneModel.createObject({id:c,meshIds:d})})}(m),l()})}function d(e,t,o){!function(e,t,o){const r=t.GlobalId.value,a=t.__proto__.constructor.name;e.dataModel.createObject({id:r,name:t.Name&&""!==t.Name.value?t.Name.value:a,type:a}),o&&e.dataModel.createRelationship({type:i,relatingObjectId:o,relatedObjectId:r})}(e,t,o);const a=t.GlobalId.value;c(e,t.expressID,"RelatingObject","RelatedObjects",r.IFCRELAGGREGATES,a),c(e,t.expressID,"RelatingStructure","RelatedElements",r.IFCRELCONTAINEDINSPATIALSTRUCTURE,a)}function c(e,t,o,r,i,a){const n=e.ifcAPI.GetLineIDsWithType(e.modelId,i);for(let i=0;i<n.size();i++){const l=n.get(i),c=e.ifcAPI.GetLine(e.modelId,l),s=c[o];let I=!1;if(I=Array.isArray(s)?s.map(e=>e.value).includes(t):s.value===t,I){const t=c[r];if(Array.isArray(t))t.forEach(t=>{const o=e.ifcAPI.GetLine(e.modelId,t.value);d(e,o,a)});else{const o=e.ifcAPI.GetLine(e.modelId,t.value);d(e,o,a)}}}}export{l as loadWebIFC};
//# sourceMappingURL=index.modern.mjs.map
