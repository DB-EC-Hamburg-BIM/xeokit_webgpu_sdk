{"version":3,"file":"index.js","sources":["../src/LocaleService.ts"],"sourcesContent":["import {EventDispatcher} from \"strongly-typed-events\";\nimport {EventEmitter} from \"@xeokit/core\";\n\n/**\n * The localization service for a {@link @xeokit/viewer!Viewer}.\n *\n * See {@link \"@xeokit/localization\"} for usage.\n */\nclass LocaleService {\n\n    /**\n     * Emits an event each time the locale translations have updated.\n     *\n     * @event\n     */\n    readonly onUpdated: EventEmitter<LocaleService, string>;\n    #messages: { [key: string]: any };\n    #locales: string[];\n    #locale: string = \"en\";\n\n    /**\n     * Constructs a LocaleService.\n     *\n     * @param cfg LocaleService configuration\n     * @param cfg.messages Set of locale translations\n     * @param cfg.locale Initial locale\n     */\n    constructor(cfg: {\n        messages?: any,\n        locale?: string\n    } = {\n        messages: {},\n        locale: \"\"\n    }) {\n        this.onUpdated = new EventEmitter(new EventDispatcher<LocaleService, string>());\n        this.messages = cfg.messages;\n        this.locale = cfg.locale;\n    }\n\n    /**\n     * Replaces the current set of locale translations.\n     *\n     * * Fires an \"updated\" event when done.\n     * * Automatically refreshes any plugins that depend on the translations.\n     * * Does not change the current locale.\n     *\n     * ## Usage\n     *\n     * ````javascript\n     * viewer.localeService.setMessages({\n     *     messages: {\n     *         \"en\": { // English\n     *             \"NavCube\": {\n     *                 \"front\": \"Front\",\n     *                 \"back\": \"Back\",\n     *                 \"top\": \"Top\",\n     *                 \"bottom\": \"Bottom\",\n     *                 \"left\": \"Left\",\n     *                 \"right\": \"Right\"\n     *             }\n     *         },\n     *         \"mi\": { // Māori\n     *             \"NavCube\": {\n     *                 \"front\": \"Mua\",\n     *                 \"back\": \"Tuarā\",\n     *                 \"top\": \"Runga\",\n     *                 \"bottom\": \"Raro\",\n     *                 \"left\": \"Mauī\",\n     *                 \"right\": \"Tika\"\n     *             }\n     *         }\n     *    }\n     * });\n     * ````\n     *\n     * @param messages The new translations.\n     */\n    set messages(messages: { [key: string]: any }) {\n        this.#messages = messages || {};\n        this.#locales = Object.keys(this.#messages);\n        this.onUpdated.dispatch(this, this.#locale);\n    }\n\n    /**\n     * Gets the list of available locales.\n     *\n     * These are derived from the currently configured set of translations.\n     *\n     * @returns The list of available locales.\n     */\n    get locales(): string[] {\n        return this.#locales;\n    }\n\n    /**\n     * Gets the current locale.\n     *\n     * @returns {String} The current locale.\n     */\n    get locale(): string {\n        return this.#locale;\n    }\n\n    /**\n     * Sets the current locale.\n     *\n     * * Fires an \"updated\" event when done.\n     * * The given locale does not need to be in the list of available locales returned by {@link LocaleService.locales}, since\n     * this method assumes that you may want to load the locales at a later point.\n     * * Automatically refreshes any plugins that depend on the translations.\n     * * We can then get translations for the locale, if translations have been loaded for it, via {@link LocaleService.translate} and {@link LocaleService.translatePlurals}.\n     *\n     * @param locale The new current locale.\n     */\n    set locale(locale: string|undefined) {\n        locale = locale || \"de\";\n        if (this.#locale === locale) {\n            return;\n        }\n        this.#locale = locale;\n        this.onUpdated.dispatch(this, this.#locale);\n    }\n\n    /**\n     * Loads a new set of locale translations, adding them to the existing translations.\n     *\n     * * Fires an \"updated\" event when done.\n     * * Automatically refreshes any plugins that depend on the translations.\n     * * Does not change the current locale.\n     *\n     * ## Usage\n     *\n     * ````javascript\n     * viewer.localeService.loadMessages({\n     *     \"jp\": { // Japanese\n     *         \"NavCube\": {\n     *             \"front\": \"前部\",\n     *             \"back\": \"裏\",\n     *             \"top\": \"上\",\n     *             \"bottom\": \"底\",\n     *             \"left\": \"左\",\n     *             \"right\": \"右\"\n     *         }\n     *     }\n     * });\n     * ````\n     *\n     * @param messages The new translations.\n     */\n    loadMessages(messages: { [key: string]: any } = {}) {\n        for (let locale in messages) {\n            this.#messages[locale] = messages[locale];\n        }\n        this.messages = this.#messages;\n    }\n\n    /**\n     * Clears all locale translations.\n     *\n     * * Fires an \"updated\" event when done.\n     * * Does not change the current locale.\n     * * Automatically refreshes any plugins that depend on the translations, which will cause those\n     * plugins to fall back on their internal hard-coded text values, since this method removes all\n     * our translations.\n     */\n    clearMessages() {\n        this.messages = {};\n    }\n\n    /**\n     * Translates the given string according to the current locale.\n     *\n     * Returns null if no translation can be found.\n     *\n     * @param msg String to translate.\n     * @param args Extra parameters.\n     * @returns  Translated string if found, else null.\n     */\n    translate(msg: string, args?: any): string | null {\n        const localeMessages = this.#messages[this.#locale];\n        if (!localeMessages) {\n            return null;\n        }\n        const localeMessage = resolvePath(msg, localeMessages);\n        if (localeMessage) {\n            if (args) {\n                return vsprintf(localeMessage, args);\n            }\n            return localeMessage;\n        }\n        return null;\n    }\n\n    /**\n     * Translates the given phrase according to the current locale.\n     *\n     * Returns null if no translation can be found.\n     *\n     * @param msg Phrase to translate.\n     * @param count The plural number.\n     * @param [args] Extra parameters.\n     * @returns String|null Translated string if found, else null.\n     */\n    translatePlurals(msg: string, count: number, args: any): string | null {\n        const localeMessages = this.#messages[this.#locale];\n        if (!localeMessages) {\n            return null;\n        }\n        let localeMessage = resolvePath(msg, localeMessages);\n        count = parseInt(\"\" + count, 10);\n        if (count === 0) {\n            localeMessage = localeMessage.zero;\n        } else {\n            localeMessage = (count > 1) ? localeMessage.other : localeMessage.one;\n        }\n        if (!localeMessage) {\n            return null;\n        }\n        localeMessage = vsprintf(localeMessage, [count]);\n        if (args) {\n            localeMessage = vsprintf(localeMessage, args);\n        }\n        return localeMessage;\n    }\n}\n\nfunction resolvePath(key: string, json: any) {\n    if (json[key]) {\n        return json[key];\n    }\n    const parts = key.split(\".\");\n    let obj = json;\n    for (let i = 0, len = parts.length; obj && (i < len); i++) {\n        const part = parts[i];\n        obj = obj[part];\n    }\n    return obj;\n}\n\nfunction vsprintf(msg: string, args: any = []) {\n    return msg.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (m, n) {\n        if (m === \"{{\") {\n            return \"{\";\n        }\n        if (m === \"}}\") {\n            return \"}\";\n        }\n        return args[n];\n    });\n}\n\nexport {LocaleService};"],"names":["_messages","_classPrivateFieldLooseKey","_locales","_locale","resolvePath","key","json","parts","split","obj","i","len","length","vsprintf","msg","args","replace","m","n","LocaleService","cfg","messages","locale","onUpdated","Object","defineProperty","this","writable","value","EventEmitter","EventDispatcher","_proto","prototype","loadMessages","_classPrivateFieldLooseBase","clearMessages","translate","localeMessages","localeMessage","translatePlurals","count","parseInt","zero","other","one","set","keys","dispatch","get"],"mappings":"6PAC0C,IAAAA,eAAAC,cAAAC,eAAAD,EAAAE,WAAAA,eAAAF,YAiO1C,SAASG,EAAYC,EAAaC,GAC9B,GAAIA,EAAKD,GACL,OAAOC,EAAKD,GAIhB,IAFA,IAAME,EAAQF,EAAIG,MAAM,KACpBC,EAAMH,EACDI,EAAI,EAAGC,EAAMJ,EAAMK,OAAQH,GAAQC,EAAIC,EAAMD,IAElDD,EAAMA,EADOF,EAAMG,IAGvB,OAAOD,CACX,CAEA,SAASI,EAASC,EAAaC,GAC3B,YAD2BA,IAAAA,IAAAA,EAAY,IAChCD,EAAIE,QAAQ,uBAAwB,SAAUC,EAAGC,GACpD,MAAU,OAAND,EACO,IAED,OAANA,EACO,IAEJF,EAAKG,EAChB,EACJ,+CA9NI,SAAAC,EAAYC,QAGR,IAHQA,IAAAA,EAGR,CACAC,SAAU,GACVC,OAAQ,KAjBHC,KAAAA,eAASC,EAAAA,OAAAC,eAAAC,KAAA1B,EAAA,CAAA2B,UAAAC,EAAAA,eAAAJ,OAAAC,eAAAvB,KAAAA,EAAAyB,CAAAA,YAAAC,WAAA,IAAAJ,OAAAC,oBAAAtB,EAAA,CAAAwB,UAAA,EAAAC,MAGA,OAgBdF,KAAKH,UAAY,IAAIM,eAAa,IAAIC,mBACtCJ,KAAKL,SAAWD,EAAIC,SACpBK,KAAKJ,OAASF,EAAIE,MACtB,CAAC,QAAAS,EAAAZ,EAAAa,UAoFA,OApFAD,EAgHDE,aAAA,SAAaZ,GACT,IAAK,IAAIC,cADAD,IAAAA,EAAmC,CAAE,GAC3BA,EACfa,OAAIlC,GAAAA,GAAWsB,GAAUD,EAASC,GAEtCI,KAAKL,SAAQa,EAAGR,KAAI1B,GAAAA,EACxB,EAAC+B,EAWDI,cAAA,WACIT,KAAKL,SAAW,CACpB,CAAA,EAACU,EAWDK,UAAA,SAAUtB,EAAaC,GACnB,IAAMsB,EAAiBH,EAAIR,KAAA1B,GAAAA,GAAAkC,EAAWR,KAAIvB,GAAAA,IAC1C,IAAKkC,EACD,OACH,KACD,IAAMC,EAAgBlC,EAAYU,EAAKuB,GACvC,OAAIC,EACIvB,EACOF,EAASyB,EAAevB,GAE5BuB,MAGf,EAACP,EAYDQ,iBAAA,SAAiBzB,EAAa0B,EAAezB,GACzC,IAAMsB,EAAiBH,OAAIlC,GAAAA,GAAAkC,EAAWR,KAAIvB,GAAAA,IAC1C,IAAKkC,EACD,OAAO,KAEX,IAAIC,EAAgBlC,EAAYU,EAAKuB,GAOrC,OAJIC,EADU,KADdE,EAAQC,SAAS,GAAKD,EAAO,KAETF,EAAcI,KAEbF,EAAQ,EAAKF,EAAcK,MAAQL,EAAcM,MAKtEN,EAAgBzB,EAASyB,EAAe,CAACE,IACrCzB,IACAuB,EAAgBzB,EAASyB,EAAevB,IAErCuB,GALN,IAML,IAACnB,OAAAd,IAAA,WAAAwC,IAlJD,SAAaxB,GACTa,OAAIlC,GAAAA,GAAaqB,GAAY,CAAA,EAC7Ba,EAAIR,KAAAxB,GAAAA,GAAYsB,OAAOsB,KAAIZ,EAACR,KAAI1B,GAAAA,IAChC0B,KAAKH,UAAUwB,SAASrB,KAAIQ,EAAER,KAAIvB,GAAAA,GACtC,IAACE,IAAA,UAAA2C,IASD,WACI,OAAAd,EAAOR,KAAIxB,GAAAA,EACf,GAAC,CAAAG,IAAA,SAAA2C,IAOD,WACI,OAAAd,EAAOR,KAAIvB,GAAAA,EACf,EAAC0C,IAaD,SAAWvB,GACPA,EAASA,GAAU,KACfY,OAAI/B,GAAAA,KAAamB,IAGrBY,EAAIR,KAAAvB,GAAAA,GAAWmB,EACfI,KAAKH,UAAUwB,SAASrB,KAAIQ,EAAER,KAAIvB,GAAAA,IACtC,mgBAACgB,CAAA"}