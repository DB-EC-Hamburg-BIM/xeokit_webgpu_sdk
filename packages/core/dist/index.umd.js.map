{"version":3,"file":"index.umd.js","sources":["../src/EventEmitter.ts","../src/Component.ts","../src/SDKError.ts"],"sourcesContent":["import type {IEvent} from \"strongly-typed-events\";\n\n/**\n * Event emitter.\n *\n * @typeParam TSender - Type of the event sender\n * @typeParam TArgs - Type of the event argument\n */\nexport class EventEmitter<TSender, TArgs> {\n\n    #ievent: any;\n\n    constructor(ievent: IEvent<TSender, TArgs>) {\n        this.#ievent = ievent;\n    }\n\n    /**\n     * Returns the number of subscriptions.\n     */\n    get count() : number {\n        return this.#ievent.count;\n    }\n    /**\n     * Subscribe to the event.\n     *\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns Function that unsubscribes the event handler from the event.\n     */\n    subscribe(func: (a: TSender, b: TArgs) => void): () => void {\n        return this.#ievent.asEvent().subscribe(func);\n    }\n\n    /**\n     * @private\n     * @param sender\n     * @param args\n     */\n    dispatch(sender: TSender, args: TArgs): void {\n        this.#ievent.dispatch(sender, args);\n    }\n\n    /**\n     * Subscribe to the event.\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns A function that unsubscribes the event handler from the event.\n     */\n    sub(func: (a: TSender, b: TArgs) => void): () => void {\n        return this.#ievent.asEvent().sub(func);\n    }\n    /**\n     * Unsubscribe from the event.\n     * @param func The event handler that will be unsubsribed from the event.\n     */\n    unsubscribe(func: (a: TSender, b: TArgs) => void): void {\n        this.#ievent.asEvent().unsubscribe(func);\n    }\n\n    /**\n     * Unsubscribe from the event.\n     * @param func The event handler that will be unsubsribed from the event.\n     */\n    unsub(func: (a: TSender, b: TArgs) => void): void {\n        this.#ievent.asEvent().unsub(func);\n    }\n\n    /**\n     * Subscribes to the event only once.\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns A function that unsubscribes the event handler from the event.\n     */\n    one(func: (a: TSender, b: TArgs) => void): () => void {\n       return this.#ievent.asEvent().one(func);\n    }\n\n    /**\n     * Checks if the event has a subscription for the specified handler.\n     * @param func The event handler.\n     */\n    has(func: (a: TSender, b: TArgs) => void): boolean {\n        return this.#ievent.asEvent().has(func);\n    }\n\n    /**\n     * Clears all the subscriptions.\n     */\n    clear(): void {\n        this.#ievent.asEvent().clear();\n    }\n}","import {EventEmitter} from \"./EventEmitter\";\nimport {EventDispatcher} from \"strongly-typed-events\";\n\nconst createUUID = ((() => {\n    const lut: any[] = [];\n    for (let i = 0; i < 256; i++) {\n        lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n    }\n    return () => {\n        const d0 = Math.random() * 0xffffffff | 0;\n        const d1 = Math.random() * 0xffffffff | 0;\n        const d2 = Math.random() * 0xffffffff | 0;\n        const d3 = Math.random() * 0xffffffff | 0;\n        return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n    };\n}))();\n\n/**\n * Common base class for xeokit SDK components.\n *\n * ## Summary\n *\n * * Unique ID\n * * Logging methods\n * * Manages lifecycle of child Components\n */\nexport class Component {\n\n    /**\n     * Unique ID of this Component.\n     */\n    public id: string;\n\n    /**\n     * True once this Component has been destroyed.\n     *\n     * Don't use this Component if this is ````true````.\n     */\n    public destroyed: boolean;\n\n    protected dirty: boolean;\n\n    readonly #owner?: Component | null;\n\n    #ownedComponents: null | { [key: string]: Component };\n\n    /**\n     * Emits an event when the {@link @xeokit/core!Component} has been destroyed.\n     *\n     * @event\n     */\n    onDestroyed: EventEmitter<Component, null>;\n\n    /**\n     * Creates a new component.\n     */\n    constructor(owner: null | Component, cfg: { id?: string, [key: string]: any } = {}) {\n        this.#owner = owner;\n        this.id = cfg.id || createUUID();\n        this.destroyed = false;\n        this.#ownedComponents = null;\n        this.dirty = false;\n        this.onDestroyed = new EventEmitter(new EventDispatcher<Component, null>());\n        if (owner) {\n            owner.#own(this);\n        }\n    }\n\n    /**\n     * Logs a message for this component.\n     *\n     * The message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * @param message - The message to log\n     * @protected\n     */\n    log(message: string): void {\n        message = `[LOG] ${this.#prefixMessageWithID(message)}`;\n        console.log(message);\n    }\n\n    /**\n     * Logs a warning for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * @param message - The warning message to log\n     * @protected\n     */\n    warn(message: string): void {\n        message = `[WARN] ${this.#prefixMessageWithID(message)}`;\n        console.warn(message);\n    }\n\n    /**\n     * Logs an error for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n\n     @param message The error message to log\n     @protected\n     */\n    error(message: string): void {\n        message = `[ERROR] ${this.#prefixMessageWithID(message)}`;\n        console.error(message);\n    }\n\n    /**\n     * Flags this component as having a defered state updates it needs to perform.\n     */\n    protected setDirty(): void {\n        if (this.dirty) {\n            return;\n        }\n        this.dirty = true;\n    }\n\n    /**\n     * Gives this component an opportunity to action any defered state updates.\n     */\n    protected cleanIfDirty(): void {\n        if (this.dirty) {\n            this.dirty = false;\n            this.clean();\n        }\n    }\n\n    /**\n     * Forces this component to action any deferred state updates.\n     */\n    protected clean(): void {\n    }\n\n    /**\n     * Destroys this component.\n     *\n     * Also destroys any components owned by this one.\n     *\n     * Sets {@link Component.destroyed} ````true````.\n     *\n     * Cancels any deferred state updates.\n     */\n    destroy(): void {\n        if (this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        if (this.#ownedComponents) {\n            for (let id in this.#ownedComponents) {\n                if (this.#ownedComponents.hasOwnProperty(id)) {\n                    const component = this.#ownedComponents[id];\n                    component.destroy();\n                    delete this.#ownedComponents[id];\n                }\n            }\n        }\n        this.#ownedComponents = null;\n        this.dirty = false;\n        this.onDestroyed.dispatch(this, null);\n        this.onDestroyed.clear();\n    }\n\n    #prefixMessageWithID(message: string): string {\n        return ` [${this.constructor.name} \"${this.id}\"]: ${message}`;\n    }\n\n    #own(component: Component) {\n        if (!this.#ownedComponents) {\n            this.#ownedComponents = {};\n        }\n        if (!this.#ownedComponents[component.id]) {\n            this.#ownedComponents[component.id] = component;\n        }\n        component.onDestroyed.one(() => {\n            // @ts-ignore\n            delete this.#ownedComponents[component.id];\n        });\n    }\n}\n\n","/**\n * Basic xeokit SDK error type.\n */\nexport class SDKError extends Error {\n\n}"],"names":["_ievent","_classPrivateFieldLooseKey","EventEmitter","ievent","Object","defineProperty","this","writable","value","_classPrivateFieldLooseBase","_proto","prototype","subscribe","func","asEvent","dispatch","sender","args","sub","unsubscribe","unsub","one","has","clear","key","get","count","createUUID","lut","i","toString","d0","Math","random","d1","d2","d3","_owner","_ownedComponents","_prefixMessageWithID","_own","Component","owner","cfg","_own2","_prefixMessageWithID2","id","destroyed","dirty","onDestroyed","EventDispatcher","log","message","console","warn","error","setDirty","cleanIfDirty","clean","destroy","hasOwnProperty","constructor","name","component","_this","SDKError","_Error","apply","arguments","_wrapNativeSuper","Error"],"mappings":"qpDAQA,IAAAA,eAAAC,EAAA,UAAaC,eAIT,WAAA,SAAAA,EAAYC,GAA8BC,OAAAC,eAAAC,KAAAN,EAAA,CAAAO,UAAA,EAAAC,WAAA,IACtCC,EAAAH,KAAIN,GAAAA,GAAWG,CACnB,CAAC,QAAAO,EAAAR,EAAAS,iBAAAD,EAcDE,UAAA,SAAUC,GACN,OAAOJ,EAAIH,KAAAN,GAAAA,GAASc,UAAUF,UAAUC,EAC5C,EAACH,EAODK,SAAA,SAASC,EAAiBC,GACtBR,EAAIH,KAAAN,GAAAA,GAASe,SAASC,EAAQC,EAClC,EAACP,EAODQ,IAAA,SAAIL,GACA,OAAOJ,EAAAH,KAAIN,GAAAA,GAASc,UAAUI,IAAIL,EACtC,EAACH,EAKDS,YAAA,SAAYN,GACRJ,EAAAH,KAAIN,GAAAA,GAASc,UAAUK,YAAYN,EACvC,EAACH,EAMDU,MAAA,SAAMP,GACFJ,EAAAH,KAAIN,GAAAA,GAASc,UAAUM,MAAMP,EACjC,EAACH,EAODW,IAAA,SAAIR,GACD,OAAOJ,EAAAH,KAAIN,GAAAA,GAASc,UAAUO,IAAIR,EACrC,EAACH,EAMDY,IAAA,SAAIT,GACA,OAAOJ,EAAIH,KAAAN,GAAAA,GAASc,UAAUQ,IAAIT,EACtC,EAACH,EAKDa,MAAA,WACId,EAAIH,KAAAN,GAAAA,GAASc,UAAUS,OAC3B,IAACrB,KAAA,CAAA,CAAAsB,IAAA,QAAAC,IApED,WACI,OAAOhB,EAAIH,KAAAN,GAAAA,GAAS0B,KACxB,mgBAACxB,CAAA,CATD,GCTEyB,EAAe,WAEjB,IADA,IAAMC,EAAa,GACVC,EAAI,EAAGA,EAAI,IAAKA,IACrBD,EAAIC,IAAMA,EAAI,GAAK,IAAM,IAAOA,EAAGC,SAAS,IAEhD,OAAY,WACR,IAAMC,EAAqB,WAAhBC,KAAKC,SAAwB,EAClCC,EAAqB,WAAhBF,KAAKC,SAAwB,EAClCE,EAAqB,WAAhBH,KAAKC,SAAwB,EAClCG,EAAqB,WAAhBJ,KAAKC,SAAwB,EACxC,OAAUL,EAAS,IAALG,GAAaH,EAAIG,GAAM,EAAI,KAAQH,EAAIG,GAAM,GAAK,KAAQH,EAAIG,GAAM,GAAK,KAAK,IAAIH,EAAS,IAALM,GAAaN,EAAIM,GAAM,EAAI,SAASN,EAAIM,GAAM,GAAK,GAAO,IAAQN,EAAIM,GAAM,GAAK,KAASN,IAAAA,EAAS,GAALO,EAAY,KAAQP,EAAIO,GAAM,EAAI,SAASP,EAAIO,GAAM,GAAK,KAAQP,EAAIO,GAAM,GAAK,KAAQP,EAAS,IAALQ,GAAaR,EAAIQ,GAAM,EAAI,KAAQR,EAAIQ,GAAM,GAAK,KAAQR,EAAIQ,GAAM,GAAK,IAC5W,CACJ,CAZqB,GAYfC,eAAApC,EAAAqC,SAAAA,eAAArC,EAAA,mBAAAsC,eAAAtC,EAAAuC,uBAAAA,eAAAvC,SAWOwC,eA8BT,WAAA,SAAAA,EAAYC,EAAyBC,QAAAA,IAAAA,IAAAA,EAA2C,CAAE,GAAAvC,OAAAC,eAAAC,KAAAkC,EAAA,CAAAhC,MAAAoC,IAAAxC,OAAAC,eAAAkC,KAAAA,GAAA/B,MAAAqC,IAzB3EC,KAAAA,eAOAC,eAAS,EAAAzC,KAEN0C,WAAK5C,EAAAA,OAAAC,eAAAgC,KAAAA,GAAA9B,UAAA,EAAAC,WAAAJ,IAAAA,OAAAC,eAAAC,KAAAgC,EAAA/B,CAAAA,YAAAC,WAAA,IAAAF,KAWf2C,iBAMIxC,EAAAA,OAAI4B,GAAAA,GAAUK,EACdpC,KAAKwC,GAAKH,EAAIG,IAAMnB,IACpBrB,KAAKyC,WAAY,EACjBtC,EAAIH,KAAAgC,GAAAA,GAAoB,KACxBhC,KAAK0C,OAAQ,EACb1C,KAAK2C,YAAc,IAAI/C,EAAa,IAAIgD,mBACpCR,GACAjC,EAAAiC,EAAKF,GAAAA,GAAMlC,KAEnB,CAAC,IAAAI,EAAA+B,EAAA9B,UA8FA8B,OA9FA/B,EAUDyC,IAAA,SAAIC,GACAA,EAAO,SAAA3C,EAAYH,KAAIiC,GAAAA,GAAsBa,GAC7CC,QAAQF,IAAIC,EAChB,EAAC1C,EAUD4C,KAAA,SAAKF,GACDA,EAAO3C,UAAAA,EAAaH,KAAIiC,GAAAA,GAAsBa,GAC9CC,QAAQC,KAAKF,EACjB,EAAC1C,EAUD6C,MAAA,SAAMH,GACFA,aAAO3C,EAAcH,KAAIiC,GAAAA,GAAsBa,GAC/CC,QAAQE,MAAMH,EAClB,EAAC1C,EAKS8C,SAAA,WACFlD,KAAK0C,QAGT1C,KAAK0C,OAAQ,EACjB,EAACtC,EAKS+C,aAAA,WACFnD,KAAK0C,QACL1C,KAAK0C,OAAQ,EACb1C,KAAKoD,QAEb,EAAChD,EAKSgD,MAAA,WAAK,EACdhD,EAWDiD,QAAA,WACI,IAAIrD,KAAKyC,UAAT,CAIA,GADAzC,KAAKyC,WAAY,EACjBtC,EAAIH,KAAIgC,GAAAA,GACJ,IAAK,IAAIQ,KAAErC,EAAIH,KAAIgC,GAAAA,GACX7B,OAAI6B,GAAAA,GAAkBsB,eAAed,KACnBrC,EAAIH,KAAAgC,GAAAA,GAAkBQ,GAC9Ba,iBACHlD,EAAAH,KAAIgC,GAAAA,GAAkBQ,IAIzCrC,EAAAH,KAAIgC,GAAAA,GAAoB,KACxBhC,KAAK0C,OAAQ,EACb1C,KAAK2C,YAAYlC,SAAST,KAAM,MAChCA,KAAK2C,YAAY1B,OAdhB,CAeL,EAACkB,CAAA,CAxGD,GA0HH,SAAAI,EAhBwBO,GACjB,MAAY,KAAA9C,KAAKuD,YAAYC,KAAS,KAAAxD,KAAKwC,GAAE,OAAOM,CACxD,CAAC,SAAAR,EAEImB,GAAoBC,IAAAA,EACrB1D,KAAIG,EAACH,KAAIgC,GAAAA,KACL7B,OAAI6B,GAAAA,GAAoB,CAAA,GAEvB7B,EAAAH,KAAIgC,GAAAA,GAAkByB,EAAUjB,MACjCrC,OAAI6B,GAAAA,GAAkByB,EAAUjB,IAAMiB,GAE1CA,EAAUd,YAAY5B,IAAI,kBAEfZ,EAAAuD,EAAI1B,GAAAA,GAAkByB,EAAUjB,GAC3C,EACJ,CC9KS,IAAAmB,eAASC,SAAAA,WAAA,SAAAD,IAAAC,OAAAA,EAAAC,MAAAC,KAAAA,0BAAAF,KAAAD,yEAAAA,CAAA,CAAAC,cAAAG,EAAQC"}