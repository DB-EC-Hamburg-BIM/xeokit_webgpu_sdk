{"version":3,"file":"index.modern.mjs","sources":["../src/EventEmitter.ts","../src/Component.ts","../src/SDKError.ts"],"sourcesContent":["import type {IEvent} from \"strongly-typed-events\";\n\n/**\n * Event emitter.\n *\n * @typeParam TSender - Type of the event sender\n * @typeParam TArgs - Type of the event argument\n */\nexport class EventEmitter<TSender, TArgs> {\n\n    #ievent: any;\n\n    constructor(ievent: IEvent<TSender, TArgs>) {\n        this.#ievent = ievent;\n    }\n\n    /**\n     * Returns the number of subscriptions.\n     */\n    get count() : number {\n        return this.#ievent.count;\n    }\n    /**\n     * Subscribe to the event.\n     *\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns Function that unsubscribes the event handler from the event.\n     */\n    subscribe(func: (a: TSender, b: TArgs) => void): () => void {\n        return this.#ievent.asEvent().subscribe(func);\n    }\n\n    /**\n     * @private\n     * @param sender\n     * @param args\n     */\n    dispatch(sender: TSender, args: TArgs): void {\n        this.#ievent.dispatch(sender, args);\n    }\n\n    /**\n     * Subscribe to the event.\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns A function that unsubscribes the event handler from the event.\n     */\n    sub(func: (a: TSender, b: TArgs) => void): () => void {\n        return this.#ievent.asEvent().sub(func);\n    }\n    /**\n     * Unsubscribe from the event.\n     * @param func The event handler that will be unsubsribed from the event.\n     */\n    unsubscribe(func: (a: TSender, b: TArgs) => void): void {\n        this.#ievent.asEvent().unsubscribe(func);\n    }\n\n    /**\n     * Unsubscribe from the event.\n     * @param func The event handler that will be unsubsribed from the event.\n     */\n    unsub(func: (a: TSender, b: TArgs) => void): void {\n        this.#ievent.asEvent().unsub(func);\n    }\n\n    /**\n     * Subscribes to the event only once.\n     * @param func The event handler that is called when the event is dispatched.\n     * @returns A function that unsubscribes the event handler from the event.\n     */\n    one(func: (a: TSender, b: TArgs) => void): () => void {\n       return this.#ievent.asEvent().one(func);\n    }\n\n    /**\n     * Checks if the event has a subscription for the specified handler.\n     * @param func The event handler.\n     */\n    has(func: (a: TSender, b: TArgs) => void): boolean {\n        return this.#ievent.asEvent().has(func);\n    }\n\n    /**\n     * Clears all the subscriptions.\n     */\n    clear(): void {\n        this.#ievent.asEvent().clear();\n    }\n}","import {EventEmitter} from \"./EventEmitter\";\nimport {EventDispatcher} from \"strongly-typed-events\";\n\nconst createUUID = ((() => {\n    const lut: any[] = [];\n    for (let i = 0; i < 256; i++) {\n        lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n    }\n    return () => {\n        const d0 = Math.random() * 0xffffffff | 0;\n        const d1 = Math.random() * 0xffffffff | 0;\n        const d2 = Math.random() * 0xffffffff | 0;\n        const d3 = Math.random() * 0xffffffff | 0;\n        return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n    };\n}))();\n\n/**\n * Common base class for xeokit SDK components.\n *\n * ## Summary\n *\n * * Unique ID\n * * Logging methods\n * * Manages lifecycle of child Components\n */\nexport class Component {\n\n    /**\n     * Unique ID of this Component.\n     */\n    public id: string;\n\n    /**\n     * True once this Component has been destroyed.\n     *\n     * Don't use this Component if this is ````true````.\n     */\n    public destroyed: boolean;\n\n    protected dirty: boolean;\n\n    readonly #owner?: Component | null;\n\n    #ownedComponents: null | { [key: string]: Component };\n\n    /**\n     * Emits an event when the {@link @xeokit/core!Component} has been destroyed.\n     *\n     * @event\n     */\n    onDestroyed: EventEmitter<Component, null>;\n\n    /**\n     * Creates a new component.\n     */\n    constructor(owner: null | Component, cfg: { id?: string, [key: string]: any } = {}) {\n        this.#owner = owner;\n        this.id = cfg.id || createUUID();\n        this.destroyed = false;\n        this.#ownedComponents = null;\n        this.dirty = false;\n        this.onDestroyed = new EventEmitter(new EventDispatcher<Component, null>());\n        if (owner) {\n            owner.#own(this);\n        }\n    }\n\n    /**\n     * Logs a message for this component.\n     *\n     * The message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * @param message - The message to log\n     * @protected\n     */\n    log(message: string): void {\n        message = `[LOG] ${this.#prefixMessageWithID(message)}`;\n        console.log(message);\n    }\n\n    /**\n     * Logs a warning for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * @param message - The warning message to log\n     * @protected\n     */\n    warn(message: string): void {\n        message = `[WARN] ${this.#prefixMessageWithID(message)}`;\n        console.warn(message);\n    }\n\n    /**\n     * Logs an error for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n\n     @param message The error message to log\n     @protected\n     */\n    error(message: string): void {\n        message = `[ERROR] ${this.#prefixMessageWithID(message)}`;\n        console.error(message);\n    }\n\n    /**\n     * Flags this component as having a defered state updates it needs to perform.\n     */\n    protected setDirty(): void {\n        if (this.dirty) {\n            return;\n        }\n        this.dirty = true;\n    }\n\n    /**\n     * Gives this component an opportunity to action any defered state updates.\n     */\n    protected cleanIfDirty(): void {\n        if (this.dirty) {\n            this.dirty = false;\n            this.clean();\n        }\n    }\n\n    /**\n     * Forces this component to action any deferred state updates.\n     */\n    protected clean(): void {\n    }\n\n    /**\n     * Destroys this component.\n     *\n     * Also destroys any components owned by this one.\n     *\n     * Sets {@link Component.destroyed} ````true````.\n     *\n     * Cancels any deferred state updates.\n     */\n    destroy(): void {\n        if (this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        if (this.#ownedComponents) {\n            for (let id in this.#ownedComponents) {\n                if (this.#ownedComponents.hasOwnProperty(id)) {\n                    const component = this.#ownedComponents[id];\n                    component.destroy();\n                    delete this.#ownedComponents[id];\n                }\n            }\n        }\n        this.#ownedComponents = null;\n        this.dirty = false;\n        this.onDestroyed.dispatch(this, null);\n        this.onDestroyed.clear();\n    }\n\n    #prefixMessageWithID(message: string): string {\n        return ` [${this.constructor.name} \"${this.id}\"]: ${message}`;\n    }\n\n    #own(component: Component) {\n        if (!this.#ownedComponents) {\n            this.#ownedComponents = {};\n        }\n        if (!this.#ownedComponents[component.id]) {\n            this.#ownedComponents[component.id] = component;\n        }\n        component.onDestroyed.one(() => {\n            // @ts-ignore\n            delete this.#ownedComponents[component.id];\n        });\n    }\n}\n\n","/**\n * Basic xeokit SDK error type.\n */\nexport class SDKError extends Error {\n\n}"],"names":["EventEmitter","constructor","ievent","Object","defineProperty","_ievent","writable","value","_classPrivateFieldLooseBase","this","count","subscribe","func","asEvent","dispatch","sender","args","sub","unsubscribe","unsub","one","has","clear","createUUID","lut","i","toString","d0","Math","random","d1","d2","d3","_owner","_classPrivateFieldLooseKey","_ownedComponents","_prefixMessageWithID","_own","Component","owner","cfg","_own2","_prefixMessageWithID2","id","destroyed","dirty","onDestroyed","EventDispatcher","log","message","console","warn","error","setDirty","cleanIfDirty","clean","destroy","hasOwnProperty","name","component","SDKError","Error"],"mappings":"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"}