{"version":3,"file":"index.es","sources":["../../utils/dist/utils.js","../../constants/dist/index.es","../../matrix/dist/index.es","../src/ViewObject.ts","../src/SectionPlane.ts","../src/Metriqs.ts","../src/SAO.ts","../src/LinesMaterial.ts","../src/ViewLayer.ts","../src/EmphasisMaterial.ts","../src/EdgeMaterial.ts","../src/PointsMaterial.ts","../src/PerspectiveProjection.ts","../src/OrthoProjection.ts","../src/CustomProjection.ts","../../boundaries/dist/index.es","../src/Camera.ts","../src/scheduler.ts","../src/CameraFlightAnimation.ts","../src/View.ts","../src/Viewer.ts","../src/FrustumProjection.ts","../src/AmbientLight.ts","../src/DirLight.ts","../src/PointLight.ts","../src/PickResult.ts"],"sourcesContent":["function t(e,r){return t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},t(e,r)}var e=0;function r(t){return\"__private_\"+e+++\"_\"+t}function n(t,e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new TypeError(\"attempted to use private field on non-instance\");return t}var i=/*#__PURE__*/r(\"items\"),o=/*#__PURE__*/r(\"lastUniqueId\"),s=/*#__PURE__*/function(){function t(t,e){Object.defineProperty(this,i,{writable:!0,value:void 0}),Object.defineProperty(this,o,{writable:!0,value:void 0}),n(this,i)[i]=t||[],n(this,o)[o]=(e||0)+1}var e=t.prototype;return e.addItem=function(){var t;if(2===arguments.length){var e=arguments[0];if(t=arguments[1],n(this,i)[i][e])throw\"ID clash: '\"+e+\"'\";return n(this,i)[i][e]=t,e}for(t=arguments[0]||{};;){var r=n(this,o)[o]++;if(!n(this,i)[i][r])return n(this,i)[i][r]=t,r}},e.removeItem=function(t){var e=n(this,i)[i][t];return delete n(this,i)[i][t],e},t}(),a=/*#__PURE__*/function(){function t(){this._head=void 0,this._headLength=void 0,this._tail=void 0,this._index=void 0,this._length=void 0,this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0}var e,r,n=t.prototype;return n.shift=function(){if(this._index>=this._headLength){var t=this._head;if(t.length=0,this._head=this._tail,this._tail=t,this._index=0,this._headLength=this._head.length,!this._headLength)return}var e=this._head[this._index];return this._index<0?delete this._head[this._index++]:this._head[this._index++]=void 0,this._length--,e},n.push=function(t){return this._length++,this._tail.push(t),this},n.unshift=function(t){return this._head[--this._index]=t,this._length++,this},n.clear=function(){this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0},e=t,(r=[{key:\"length\",get:function(){return this._length}}])&&function(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,\"symbol\"==typeof(i=function(t,e){if(\"object\"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!=typeof n)return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(n.key))?i:String(i),n)}var i}(e.prototype,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),h=/*#__PURE__*/function(){function t(t,e,r){this.isLoading=void 0,this.itemsLoaded=void 0,this.itemsTotal=void 0,this.urlModifier=void 0,this.handlers=void 0,this.onStart=void 0,this.onLoad=void 0,this.onProgress=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0,this.urlModifier=void 0,this.handlers=[],this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=r}var e=t.prototype;return e.itemStart=function(t){this.itemsTotal++,this.isLoading||void 0!==this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0},e.itemEnd=function(t){this.itemsLoaded++,void 0!==this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,void 0!==this.onLoad&&this.onLoad())},e.itemError=function(t){void 0!==this.onError&&this.onError(t)},e.resolveURL=function(t){return this.urlModifier?this.urlModifier(t):t},e.setURLModifier=function(t){return this.urlModifier=t,this},e.addHandler=function(t,e){return this.handlers.push(t,e),this},e.removeHandler=function(t){var e=this.handlers.indexOf(t);return-1!==e&&this.handlers.splice(e,2),this},e.getHandler=function(t){for(var e=0,r=this.handlers.length;e<r;e+=2){var n=this.handlers[e],i=this.handlers[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null},t}(),u=new h,d=/*#__PURE__*/function(){function t(t){this.manager=void 0,this.crossOrigin=void 0,this.withCredentials=void 0,this.path=void 0,this.resourcePath=void 0,this.requestHeader=void 0,this.manager=void 0!==t?t:u,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}var e=t.prototype;return e.load=function(t,e,r,n){},e.loadAsync=function(t,e){var r=this;return new Promise(function(n,i){r.load(t,n,e,i)})},e.parse=function(){},e.setCrossOrigin=function(t){return this.crossOrigin=t,this},e.setWithCredentials=function(t){return this.withCredentials=t,this},e.setPath=function(t){return this.path=t,this},e.setResourcePath=function(t){return this.resourcePath=t,this},e.setRequestHeader=function(t){return this.requestHeader=t,this},t}(),f=/*#__PURE__*/function(){function t(t){void 0===t&&(t=4),this.pool=void 0,this.queue=void 0,this.workers=void 0,this.workersResolve=void 0,this.workerStatus=void 0,this.workerCreator=void 0,this.pool=t,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}var e=t.prototype;return e._initWorker=function(t){if(!this.workers[t]){var e=this.workerCreator();e.addEventListener(\"message\",this._onMessage.bind(this,t)),this.workers[t]=e}},e._getIdleWorker=function(){for(var t=0;t<this.pool;t++)if(!(this.workerStatus&1<<t))return t;return-1},e._onMessage=function(t,e){var r=this.workersResolve[t];if(r&&r(e),this.queue.length){var n=this.queue.shift(),i=n.msg,o=n.transfer;this.workersResolve[t]=n.resolve,this.workers[t].postMessage(i,o)}else this.workerStatus^=1<<t},e.setWorkerCreator=function(t){this.workerCreator=t},e.setWorkerLimit=function(t){this.pool=t},e.postMessage=function(t,e){var r=this;return new Promise(function(n){var i=r._getIdleWorker();-1!==i?(r._initWorker(i),r.workerStatus|=1<<i,r.workersResolve[i]=n,r.workers[i].postMessage(t,e)):r.queue.push({resolve:n,msg:t,transfer:e})})},e.destroy=function(){this.workers.forEach(function(t){return t.terminate()}),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0},t}(),c={enabled:!1,files:{},add:function(t,e){},get:function(t){},remove:function(t){},clear:function(){this.files={}}},l={},v=/*#__PURE__*/function(e){var r,n;function i(t){var r;return(r=e.call(this,t)||this).mimeType=void 0,r.responseType=void 0,r}n=e,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,t(r,n);var o=i.prototype;return o.load=function(t,e,r,n){var i=this;void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var o=c.get(t);if(void 0!==o)return this.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;if(void 0===l[t]){l[t]=[],l[t].push({onLoad:e,onProgress:r,onError:n});var s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?\"include\":\"same-origin\"}),a=this.mimeType,h=this.responseType;fetch(s).then(function(e){if(200===e.status||0===e.status){if(0===e.status&&console.warn(\"FileLoader: HTTP Status 0 received.\"),\"undefined\"==typeof ReadableStream||void 0===e.body.getReader)return e;var r=l[t],n=e.body.getReader(),i=e.headers.get(\"Content-Length\"),o=i?parseInt(i):0,s=0!==o,a=0,h=new ReadableStream({start:function(t){!function e(){n.read().then(function(n){var i=n.value;if(n.done)t.close();else{for(var h=new ProgressEvent(\"progress\",{lengthComputable:s,loaded:a+=i.byteLength,total:o}),u=0,d=r.length;u<d;u++){var f=r[u];f.onProgress&&f.onProgress(h)}t.enqueue(i),e()}})}()}});return new Response(h)}throw new Error('fetch for \"'+e.url+'\" responded with '+e.status+\": \"+e.statusText)}).then(function(t){switch(h){case\"arraybuffer\":return t.arrayBuffer();case\"blob\":return t.blob();case\"document\":return t.text().then(function(t){return(new DOMParser).parseFromString(t,a)});case\"json\":return t.json();default:if(void 0===a)return t.text();var e=/charset=\"?([^;\"\\s]*)\"?/i.exec(a),r=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(r);return t.arrayBuffer().then(function(t){return n.decode(t)})}}).then(function(e){c.add(t,e);var r=l[t];delete l[t];for(var n=0,i=r.length;n<i;n++){var o=r[n];o.onLoad&&o.onLoad(e)}}).catch(function(e){var r=l[t];if(void 0===r)throw i.manager.itemError(t),e;delete l[t];for(var n=0,o=r.length;n<o;n++){var s=r[n];s.onError&&s.onError(e)}i.manager.itemError(t)}).finally(function(){i.manager.itemEnd(t)}),this.manager.itemStart(t)}else l[t].push({onLoad:e,onProgress:r,onError:n})},o.setResponseType=function(t){return this.responseType=t,this},o.setMimeType=function(t){return this.mimeType=t,this},i}(d);function p(t){return JSON.parse(JSON.stringify(t))}var g=[[\"0\",10],[\"A\",26],[\"a\",26],[\"_\",1],[\"$\",1]].map(function(t){for(var e=[],r=t[0].charCodeAt(0),n=r+t[1],i=r;i<n;++i)e.push(i);return String.fromCharCode.apply(null,e)}).join(\"\");function m(t,e){return(e&&4!==e?[0,6]:[0,6,12,18]).map(function(e){return g.substr(parseInt(String(t/(1<<e)))%64,1)}).reverse().join(\"\")}function w(t){var e=[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30].map(function(e){return parseInt(t.substr(e,2),16)});return m(e[0],2)+[1,4,7,10,13].map(function(t){return m((e[t]<<16)+(e[t+1]<<8)+e[t+2],4)}).join(\"\")}function y(t,e){var r=[];return function t(n){n.type===e&&r.push(n),(n.children||[]).forEach(function(e){t(e)})}(t),r}function _(t){return new Promise(function(e,r){setTimeout(e,t)})}function b(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.open(t.method||\"GET\",t.url,!0),n.onload=function(i){console.log(t.url,n.readyState,n.status),4===n.readyState&&(200===n.status?e(n.responseXML):r(n.statusText))},n.send(null)})}function L(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=new XMLHttpRequest;i.overrideMimeType(\"application/json\"),i.open(\"GET\",t,!0),i.addEventListener(\"load\",function(t){var n=t.target.response;if(200===this.status){var i;try{i=JSON.parse(n)}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}e(i)}else if(0===this.status){console.warn(\"loadFile: HTTP Status 0 received.\");try{e(JSON.parse(n))}catch(t){r(\"utils.loadJSON(): Failed to parse JSON response - \"+t)}}else r(t)},!1),i.addEventListener(\"error\",function(t){r(t)},!1),i.send(null)}function S(t,e,r){var n=function(t){};e=e||n,r=r||n;var i=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(i){var o=!!i[2],s=i[3];s=window.decodeURIComponent(s),o&&(s=window.atob(s));try{for(var a=new ArrayBuffer(s.length),h=new Uint8Array(a),u=0;u<s.length;u++)h[u]=s.charCodeAt(u);window.setTimeout(function(){e(a)},0)}catch(t){window.setTimeout(function(){r(t)},0)}}else{var d=new XMLHttpRequest;d.open(\"GET\",t,!0),d.responseType=\"arraybuffer\",d.onreadystatechange=function(){4===d.readyState&&(200===d.status?e(d.response):r(\"loadArrayBuffer error : \"+d.response))},d.send(null)}}function P(t){return t&&!t.propertyIsEnumerable(\"length\")&&\"object\"==typeof t&&\"number\"==typeof t.length}function T(t){return\"string\"==typeof t||t instanceof String}function k(t){return!isNaN(parseFloat(t))&&isFinite(t)}function O(t){return T(t)||k(t)}function E(t){return\"function\"==typeof t}function M(t){return!!t&&t.constructor==={}.constructor}function R(t){return x(t,{})}function x(t,e){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function C(t,e){for(var r in t)t.hasOwnProperty(r)&&null!=t[r]&&(e[r]=t[r]);return e}function j(t,e){for(var r in t)t.hasOwnProperty(r)&&null==e[r]&&(e[r]=t[r]);return e}function q(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function H(t){return k(t)?\"\"+t:\"'\"+t+\"'\"}function I(t,e){var r=new t.constructor(t.length+e.length);return r.set(t),r.set(e,t.length),r}var N=function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16);return function(){var e=4294967295*Math.random()|0,r=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+\"-\"+t[255&r]+t[r>>8&255]+\"-\"+t[r>>16&15|64]+t[r>>24&255]+\"-\"+t[63&n|128]+t[n>>8&255]+\"-\"+t[n>>16&255]+t[n>>24&255]+t[255&i]+t[i>>8&255]+t[i>>16&255]+t[i>>24&255]}}();export{c as Cache,u as DefaultLoadingManager,v as FileLoader,d as Loader,h as LoadingManager,s as Map,a as Queue,f as WorkerPool,x as apply,C as apply2,j as applyIf,m as b64,p as clone,w as compressGuid,I as concat,R as copy,N as createUUID,y as findNodeOfType,b as httpRequest,H as inQuotes,P as isArray,q as isEmptyObject,E as isFunction,O as isID,k as isNumeric,M as isObject,T as isString,S as loadArraybuffer,L as loadJSON,_ as timeout};\n//# sourceMappingURL=utils.js.map\n","var e=1e3,r=1001,a=1002,o=1003,p=1004,t=1004,v=1005,x=1005,b=1006,c=1007,d=1007,f=1008,g=1008,h=1009,i=1010,j=1011,k=1012,l=1013,m=1014,n=1015,q=1016,s=1017,u=1018,w=1020,y=1021,z=1022,A=1023,B=1024,C=1025,D=1026,E=1027,F=1028,G=1029,H=1030,I=1031,J=1033,K=33776,L=33777,M=33778,N=33779,O=35840,P=35841,Q=35842,R=35843,S=36196,T=37492,U=37496,V=37808,W=37809,X=37810,Y=37811,Z=37812,$=37813,_=37814,ee=37815,re=37816,ae=37817,oe=37818,pe=37819,te=37820,ve=37821,xe=36492,be=3e3,ce=3001,de=1e4,fe=10001,ge=10002,he=2e4,ie=20001,je=20002,ke=20003,le=20004,me=3e4,ne=300001,qe=4e5,se=400001,ue=400002,we=400003,ye=400004,ze=400005,Ae=5e5,Be=500001,Ce=500002,De=500003;export{y as AlphaFormat,i as ByteType,se as CentimetersUnit,r as ClampToEdgeWrapping,De as CustomProjectionType,D as DepthFormat,E as DepthStencilFormat,ne as FastRender,ye as FeetUnit,n as FloatType,Ce as FrustumProjectionType,de as GIFMediaType,q as HalfFloatType,ze as InchesUnit,l as IntType,fe as JPEGMediaType,be as LinearEncoding,b as LinearFilter,g as LinearMipMapLinearFilter,d as LinearMipMapNearestFilter,f as LinearMipmapLinearFilter,c as LinearMipmapNearestFilter,ie as LinesPrimitive,C as LuminanceAlphaFormat,B as LuminanceFormat,qe as MetersUnit,ue as MillimetersUnit,a as MirroredRepeatWrapping,o as NearestFilter,x as NearestMipMapLinearFilter,p as NearestMipMapNearestFilter,v as NearestMipmapLinearFilter,t as NearestMipmapNearestFilter,Be as OrthoProjectionType,ge as PNGMediaType,Ae as PerspectiveProjectionType,he as PointsPrimitive,me as QualityRender,A as RGBAFormat,J as RGBAIntegerFormat,pe as RGBA_ASTC_10x10_Format,re as RGBA_ASTC_10x5_Format,ae as RGBA_ASTC_10x6_Format,oe as RGBA_ASTC_10x8_Format,te as RGBA_ASTC_12x10_Format,ve as RGBA_ASTC_12x12_Format,V as RGBA_ASTC_4x4_Format,W as RGBA_ASTC_5x4_Format,X as RGBA_ASTC_5x5_Format,Y as RGBA_ASTC_6x5_Format,Z as RGBA_ASTC_6x6_Format,$ as RGBA_ASTC_8x5_Format,_ as RGBA_ASTC_8x6_Format,ee as RGBA_ASTC_8x8_Format,xe as RGBA_BPTC_Format,U as RGBA_ETC2_EAC_Format,R as RGBA_PVRTC_2BPPV1_Format,Q as RGBA_PVRTC_4BPPV1_Format,L as RGBA_S3TC_DXT1_Format,M as RGBA_S3TC_DXT3_Format,N as RGBA_S3TC_DXT5_Format,z as RGBFormat,S as RGB_ETC1_Format,T as RGB_ETC2_Format,P as RGB_PVRTC_2BPPV1_Format,O as RGB_PVRTC_4BPPV1_Format,K as RGB_S3TC_DXT1_Format,H as RGFormat,I as RGIntegerFormat,F as RedFormat,G as RedIntegerFormat,e as RepeatWrapping,j as ShortType,ke as SolidPrimitive,le as SurfacePrimitive,je as TrianglesPrimitive,h as UnsignedByteType,w as UnsignedInt248Type,m as UnsignedIntType,s as UnsignedShort4444Type,u as UnsignedShort5551Type,k as UnsignedShortType,we as YardsUnit,ce as sRGBEncoding};\n//# sourceMappingURL=index.es.map\n","import{newFloatArray as n,clamp as t,DEGTORAD as r}from\"@xeokit/math\";var u=s(),a=M(),o=M(),i=M(),e=M(),c=M(),f=s();function v(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function h(n){return new FloatArrayClass(n||2)}function M(n){return new Float64Array(n||3)}function s(n){return new FloatArrayClass(n||4)}function l(n,t){return t||(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function d(n,t){return t||(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function q(n,t,r){return r||(r=n),r[0]=n[0]+t[0],r[1]=n[1]+t[1],r[2]=n[2]+t[2],r[3]=n[3]+t[3],r}function X(n,t,r){return r||(r=n),r[0]=n[0]+t,r[1]=n[1]+t,r[2]=n[2]+t,r[3]=n[3]+t,r}function Y(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r[2]=n[2]*t,r[3]=n[3]*t,r}function Z(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r[2]=n[2]*t,r}function b(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r}function g(n,t,r){return r||(r=n),r[0]=n[0]+t[0],r[1]=n[1]+t[1],r[2]=n[2]+t[2],r}function y(n,t,r){return r||(r=n),r[0]=n[0]+t,r[1]=n[1]+t,r[2]=n[2]+t,r}function w(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r[2]=n[2]-t[2],r[3]=n[3]-t[3],r}function A(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]}function p(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r[2]=n[2]-t[2],r}function F(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r}function m(){for(var n=[].slice.call(arguments),t=new Float32Array(n[0]),r=1;r<n.length;r++)t[0]+=n[r][0],t[1]+=n[r][1];return t[0]/=n.length,t[1]/=n.length,t}function x(n,t,r){return r||(r=n),r[0]=n[0]-t,r[1]=n[1]-t,r[2]=n[2]-t,r[3]=n[3]-t,r}function C(n,t,r){return r||(r=n),r[0]=t-n[0],r[1]=t-n[1],r[2]=t-n[2],r[3]=t-n[3],r}function k(n,t,r){return r||(r=n),r[0]=n[0]*t[0],r[1]=n[1]*t[1],r[2]=n[2]*t[2],r[3]=n[3]*t[3],r}function j(n,t,r){return r||(r=n),r[0]=n[0]/t[0],r[1]=n[1]/t[1],r[2]=n[2]/t[2],r}function z(n,t,r){return r||(r=n),r[0]=n[0]/t[0],r[1]=n[1]/t[1],r[2]=n[2]/t[2],r[3]=n[3]/t[3],r}function B(n,t,r){return r||(r=t),r[0]=n/t[0],r[1]=n/t[1],r[2]=n/t[2],r}function D(n,t,r){return r||(r=n),r[0]=n[0]/t,r[1]=n[1]/t,r[2]=n[2]/t,r}function E(n,t,r){return r||(r=n),r[0]=n[0]/t,r[1]=n[1]/t,r[2]=n[2]/t,r[3]=n[3]/t,r}function G(n,t,r){return r||(r=t),r[0]=n/t[0],r[1]=n/t[1],r[2]=n/t[2],r[3]=n/t[3],r}function H(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function I(n,t){var r=n[0],u=n[1],a=n[2],o=t[0],i=t[1],e=t[2];return[u*e-a*i,a*o-r*e,r*i-u*o,0]}function J(n,t,r){r||(r=n);var u=n[0],a=n[1],o=n[2],i=t[0],e=t[1],c=t[2];return r[0]=a*c-o*e,r[1]=o*i-u*c,r[2]=u*e-a*i,r}function K(n){return H(n,n)}function L(n){return Math.sqrt(K(n))}function N(n,t){return n[0]*t[0]+n[1]*t[1]}function O(n){return v(n,n)}function P(n){return N(n,n)}function Q(n){return Math.sqrt(O(n))}var R,S=(R=M(),function(n,t){return Q(p(n,t,R))});function T(n){return Math.sqrt(P(n))}function U(n,t,r,u,a,o){var i=o||M(),e=(n-t)/(r-t);return i[0]=u[0]+e*(a[0]-u[0]),i[1]=u[1]+e*(a[1]-u[1]),i[2]=u[2]+e*(a[2]-u[2]),i}var V=function(){var n=h();return function(t,r){return T(F(t,r,n))}}();function W(n,t){return B(1,n,t)}function $(n,t){return Y(n,1/L(n),t)}function _(n,t){return Z(n,1/Q(n),t)}function nn(n,t){return b(n,1/T(n),t)}function tn(n,t){var r=v(n,t)/Math.sqrt(O(n)*O(t));return r=r<-1?-1:r>1?1:r,Math.acos(r)}var rn=function(){var n=M();return function(t,r){return n[0]=t[0],n[1]=t[1],n[2]=t[2],r[0]=Q(n),n[0]=t[4],n[1]=t[5],n[2]=t[6],r[1]=Q(n),n[0]=t[8],n[1]=t[9],n[2]=t[10],r[2]=Q(n),r}}();function un(n){for(var t=0,r=(n=Array.prototype.slice.call(n)).length;t<r;t++)n[t]=an(n[t]);return n}function an(n){return Math.round(1e5*n)/1e5}function on(n,t,r,u){void 0===u&&(u=M());var a=t[0]-n[0],o=t[1]-n[1],i=t[2]-n[2],e=r[0]-n[0],c=r[1]-n[1],f=r[2]-n[2],v=o*f-i*c,h=i*e-a*f,s=a*c-o*e,l=Math.sqrt(v*v+h*h+s*s);return 0===l?(u[0]=0,u[1]=0,u[2]=0):(u[0]=v/l,u[1]=h/l,u[2]=s/l),u}function en(t){return new n(t||9)}function cn(t){return n(t||16)}var fn=cn(),vn=cn();function hn(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]&&n[6]===t[6]&&n[7]===t[7]&&n[8]===t[8]&&n[9]===t[9]&&n[10]===t[10]&&n[11]===t[11]&&n[12]===t[12]&&n[13]===t[13]&&n[14]===t[14]&&n[15]===t[15]}function Mn(n,t,r,u,a){var o=[],i=[];return o[2]=r,i[2]=u,i[1]=o[2]*Math.tan(n/2),o[1]=-i[1],i[0]=i[1]*t,o[0]=-i[0],sn(o,i,a)}function sn(n,t,r){r||(r=cn());var u=[n[0],n[1],n[2],0],a=[t[0],t[1],t[2],0];q(a,u,fn),w(a,u,vn);var o=2*u[2],i=vn[0],e=vn[1],c=vn[2];return r[0]=o/i,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=o/e,r[6]=0,r[7]=0,r[8]=fn[0]/i,r[9]=fn[1]/e,r[10]=-fn[2]/c,r[11]=-1,r[12]=0,r[13]=0,r[14]=-o*a[2]/c,r[15]=0,r}function ln(n,t,r,u,a,o,i){i||(i=cn());var e=t-n,c=u-r,f=o-a;return i[0]=2/e,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2/c,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-2/f,i[11]=0,i[12]=-(n+t)/e,i[13]=-(u+r)/c,i[14]=-(o+a)/f,i[15]=1,i}function dn(n,t,r,u,a,o,i){i||(i=cn());var e=t-n,c=u-r,f=o-a;return i[0]=2*a/e,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*a/c,i[6]=0,i[7]=0,i[8]=(t+n)/e,i[9]=(u+r)/c,i[10]=-(o+a)/f,i[11]=-1,i[12]=0,i[13]=0,i[14]=-o*a*2/f,i[15]=0,i}function qn(n){return n||(n=cn()),n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Xn(n){return n||(n=cn()),n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Yn(n){return 1===n[0]&&0===n[1]&&0===n[2]&&0===n[3]&&0===n[4]&&1===n[5]&&0===n[6]&&0===n[7]&&0===n[8]&&0===n[9]&&1===n[10]&&0===n[11]&&0===n[12]&&0===n[13]&&0===n[14]&&1===n[15]}function Zn(n,t,r){r||(r=cn());var u,a,o,i,e,c,f=$([t[0],t[1],t[2],0],[]),v=Math.sin(n),h=Math.cos(n),M=1-h,s=f[0],l=f[1],d=f[2];return u=s*l,a=l*d,o=d*s,i=s*v,e=l*v,c=d*v,r[0]=M*s*s+h,r[1]=M*u+c,r[2]=M*o-e,r[3]=0,r[4]=M*u-c,r[5]=M*l*l+h,r[6]=M*a+i,r[7]=0,r[8]=M*o+e,r[9]=M*a-i,r[10]=M*d*d+h,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}function bn(n,t,r,u){u||(u=cn());var a,o,i,e,c,f,v,h,M,s,l=n[0],d=n[1],q=n[2],X=r[0],Y=r[1],Z=r[2],b=t[0],g=t[1],y=t[2];return l===b&&d===g&&q===y?qn():(a=l-b,o=d-g,i=q-y,e=Y*(i*=s=1/Math.sqrt(a*a+o*o+i*i))-Z*(o*=s),c=Z*(a*=s)-X*i,f=X*o-Y*a,(s=Math.sqrt(e*e+c*c+f*f))?(e*=s=1/s,c*=s,f*=s):(e=0,c=0,f=0),v=o*f-i*c,h=i*e-a*f,M=a*c-o*e,(s=Math.sqrt(v*v+h*h+M*M))?(v*=s=1/s,h*=s,M*=s):(v=0,h=0,M=0),u[0]=e,u[1]=v,u[2]=a,u[3]=0,u[4]=c,u[5]=h,u[6]=o,u[7]=0,u[8]=f,u[9]=M,u[10]=i,u[11]=0,u[12]=-(e*l+c*d+f*q),u[13]=-(v*l+h*d+M*q),u[14]=-(a*l+o*d+i*q),u[15]=1,u)}function gn(n,t){t||(t=n);var r=n[0],u=n[1],a=n[2],o=n[3],i=n[4],e=n[5],c=n[6],f=n[7],v=n[8],h=n[9],M=n[10],s=n[11],l=n[12],d=n[13],q=n[14],X=n[15],Y=r*e-u*i,Z=r*c-a*i,b=r*f-o*i,g=u*c-a*e,y=u*f-o*e,w=a*f-o*c,A=v*d-h*l,p=v*q-M*l,F=v*X-s*l,m=h*q-M*d,x=h*X-s*d,C=M*X-s*q,k=1/(Y*C-Z*x+b*m+g*F-y*p+w*A);return t[0]=(e*C-c*x+f*m)*k,t[1]=(-u*C+a*x-o*m)*k,t[2]=(d*w-q*y+X*g)*k,t[3]=(-h*w+M*y-s*g)*k,t[4]=(-i*C+c*F-f*p)*k,t[5]=(r*C-a*F+o*p)*k,t[6]=(-l*w+q*b-X*Z)*k,t[7]=(v*w-M*b+s*Z)*k,t[8]=(i*x-e*F+f*A)*k,t[9]=(-r*x+u*F-o*A)*k,t[10]=(l*y-d*b+X*Y)*k,t[11]=(-v*y+h*b-s*Y)*k,t[12]=(-i*m+e*p-c*A)*k,t[13]=(r*m-u*p+a*A)*k,t[14]=(-l*g+d*Z-q*Y)*k,t[15]=(v*g-h*Z+M*Y)*k,t}function yn(n,t){var r=n[4],u=n[14],a=n[8],o=n[13],i=n[12],e=n[9];if(!t||n===t){var c=n[1],f=n[2],v=n[3],h=n[6],M=n[7],s=n[11];return n[1]=r,n[2]=a,n[3]=i,n[4]=c,n[6]=e,n[7]=o,n[8]=f,n[9]=h,n[11]=u,n[12]=v,n[13]=M,n[14]=s,n}return t[0]=n[0],t[1]=r,t[2]=a,t[3]=i,t[4]=n[1],t[5]=n[5],t[6]=e,t[7]=o,t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=u,t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15],t}function wn(n,t,r){r||(r=n);var u=t[0],a=t[1],o=t[2],i=t[3];return r[0]=n[0]*u+n[4]*a+n[8]*o+n[12]*i,r[1]=n[1]*u+n[5]*a+n[9]*o+n[13]*i,r[2]=n[2]*u+n[6]*a+n[10]*o+n[14]*i,r[3]=n[3]*u+n[7]*a+n[11]*o+n[15]*i,r}function An(n,t,r){r||(r=n);var u=n[0],a=n[1],o=n[2],i=n[3],e=n[4],c=n[5],f=n[6],v=n[7],h=n[8],M=n[9],s=n[10],l=n[11],d=n[12],q=n[13],X=n[14],Y=n[15],Z=t[0],b=t[1],g=t[2],y=t[3],w=t[4],A=t[5],p=t[6],F=t[7],m=t[8],x=t[9],C=t[10],k=t[11],j=t[12],z=t[13],B=t[14],D=t[15];return r[0]=Z*u+b*e+g*h+y*d,r[1]=Z*a+b*c+g*M+y*q,r[2]=Z*o+b*f+g*s+y*X,r[3]=Z*i+b*v+g*l+y*Y,r[4]=w*u+A*e+p*h+F*d,r[5]=w*a+A*c+p*M+F*q,r[6]=w*o+A*f+p*s+F*X,r[7]=w*i+A*v+p*l+F*Y,r[8]=m*u+x*e+C*h+k*d,r[9]=m*a+x*c+C*M+k*q,r[10]=m*o+x*f+C*s+k*X,r[11]=m*i+x*v+C*l+k*Y,r[12]=j*u+z*e+B*h+D*d,r[13]=j*a+z*c+B*M+D*q,r[14]=j*o+z*f+B*s+D*X,r[15]=j*i+z*v+B*l+D*Y,r}function pn(t,r,u){void 0===u&&(u=n(9));var a=t[0],o=t[3],i=t[6],e=t[1],c=t[4],f=t[7],v=t[2],h=t[5],M=t[8],s=r[0],l=r[3],d=r[6],q=r[1],X=r[4],Y=r[7],Z=r[2],b=r[5],g=r[8];return u[0]=a*s+o*q+i*Z,u[3]=a*l+o*X+i*b,u[6]=a*d+o*Y+i*g,u[1]=e*s+c*q+f*Z,u[4]=e*l+c*X+f*b,u[7]=e*d+c*Y+f*g,u[2]=v*s+h*q+M*Z,u[5]=v*l+h*X+M*b,u[8]=v*d+h*Y+M*g,u}function Fn(n,t,r){r||(r=t);var u=t[0],a=t[1],o=t[2];return r[0]=n[0]*u+n[4]*a+n[8]*o+n[12],r[1]=n[1]*u+n[5]*a+n[9]*o+n[13],r[2]=n[2]*u+n[6]*a+n[10]*o+n[14],r}function mn(n,t,r){return r[0]=n[0]*t[0]+n[4]*t[1]+n[8]*t[2]+n[12]*t[3],r[1]=n[1]*t[0]+n[5]*t[1]+n[9]*t[2]+n[13]*t[3],r[2]=n[2]*t[0]+n[6]*t[1]+n[10]*t[2]+n[14]*t[3],r[3]=n[3]*t[0]+n[7]*t[1]+n[11]*t[2]+n[15]*t[3],r}function xn(n,t,r){for(var u,a,o,i,e,c=r||[],f=t.length,v=n[0],h=n[1],M=n[2],s=n[3],l=n[4],d=n[5],q=n[6],X=n[7],Y=n[8],Z=n[9],b=n[10],g=n[11],y=n[12],w=n[13],A=n[14],p=n[15],F=0;F<f;++F)u=(i=t[F])[0],a=i[1],o=i[2],(e=c[F]||(c[F]=[0,0,0]))[0]=v*u+l*a+Y*o+y,e[1]=h*u+d*a+Z*o+w,e[2]=M*u+q*a+b*o+A,e[3]=s*u+X*a+g*o+p;return c.length=f,c}function Cn(n,t,r){var u;r||(r=t);var a,o,i,e=t.length,c=n[0],f=n[1],v=n[2],h=n[3],M=n[4],s=n[5],l=n[6],d=n[7],q=n[8],X=n[9],Y=n[10],Z=n[11],b=n[12],g=n[13],y=n[14],w=n[15];for(u=0;u<e;u+=3)r[u+0]=c*(a=t[u+0])+M*(o=t[u+1])+q*(i=t[u+2])+b,r[u+1]=f*a+s*o+X*i+g,r[u+2]=v*a+l*o+Y*i+y,r[u+3]=h*a+d*o+Z*i+w;return r}function kn(n,t,r){var u;r||(r=t);var a,o,i,e=t.length,c=n[0],f=n[1],v=n[2],h=n[3],M=n[4],s=n[5],l=n[6],d=n[7],q=n[8],X=n[9],Y=n[10],Z=n[11],b=n[12],g=n[13],y=n[14],w=n[15];for(u=0;u<e;u+=4)r[u+0]=c*(a=t[u+0])+M*(o=t[u+1])+q*(i=t[u+2])+b,r[u+1]=f*a+s*o+X*i+g,r[u+2]=v*a+l*o+Y*i+y,r[u+3]=h*a+d*o+Z*i+w;return r}function jn(n,t,r){var u=t[0],a=t[1],o=t[2];return(r=r||M())[0]=n[0]*u+n[4]*a+n[8]*o,r[1]=n[1]*u+n[5]*a+n[9]*o,r[2]=n[2]*u+n[6]*a+n[10]*o,r}function zn(n,t,r){var u=t[0],a=t[1],o=t[2],i=t[3];return(r=r||s())[0]=n[0]*u+n[4]*a+n[8]*o+n[12]*i,r[1]=n[1]*u+n[5]*a+n[9]*o+n[13]*i,r[2]=n[2]*u+n[6]*a+n[10]*o+n[14]*i,r[3]=n[3]*u+n[7]*a+n[11]*o+n[15]*i,r}function Bn(n,t){void 0===t&&(t=qn());var r=n[0],u=n[1],a=n[2];return t[0]*=r,t[4]*=u,t[8]*=a,t[1]*=r,t[5]*=u,t[9]*=a,t[2]*=r,t[6]*=u,t[10]*=a,t[3]*=r,t[7]*=u,t[11]*=a,t}function Dn(n,t){return void 0===t&&(t=qn()),t[0]=n[0],t[5]=n[1],t[10]=n[2],t}function En(n,t){return void 0===t&&(t=Xn()),t[0]=n[0],t[4]=n[1],t}var Gn,Hn=(Gn=n(3),function(n,t,r,u){return Gn[0]=n,Gn[1]=t,Gn[2]=r,Dn(Gn,u)});function In(n,t,r,u){return u[0]*=n,u[4]*=t,u[8]*=r,u[1]*=n,u[5]*=t,u[9]*=r,u[2]*=n,u[6]*=t,u[10]*=r,u[3]*=n,u[7]*=t,u[11]*=r,u}function Jn(n){return Hn(n,n,n)}function Kn(n,t,r,u){return void 0===u&&(u=cn()),et(t,u),Bn(r,u),Nn(n,u),u}var Ln=function(){var n=M(),t=cn();return function(r,u,a,o){n[0]=r[0],n[1]=r[1],n[2]=r[2];var i=Q(n);n[0]=r[4],n[1]=r[5],n[2]=r[6];var e=Q(n);n[8]=r[8],n[9]=r[9],n[10]=r[10];var c=Q(n);Un(r)<0&&(i=-i),u[0]=r[12],u[1]=r[13],u[2]=r[14],t.set(r);var f=1/i,v=1/e,h=1/c;t[0]*=f,t[1]*=f,t[2]*=f,t[4]*=v,t[5]*=v,t[6]*=v,t[8]*=h,t[9]*=h,t[10]*=h,nt(t,a),o[0]=i,o[1]=e,o[2]=c}}();function Nn(n,t){return void 0===t&&(t=qn()),On(n[0],n[1],n[2],t)}function On(n,t,r,u){void 0===u&&(u=qn());var a=u[3];u[0]+=a*n,u[1]+=a*t,u[2]+=a*r;var o=u[7];u[4]+=o*n,u[5]+=o*t,u[6]+=o*r;var i=u[11];u[8]+=i*n,u[9]+=i*t,u[10]+=i*r;var e=u[15];return u[12]+=e*n,u[13]+=e*t,u[14]+=e*r,u}function Pn(n,t,r){return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=n[15],r}function Qn(n,t){var r=t||qn();return r[12]=n[0],r[13]=n[1],r[14]=n[2],r}function Rn(n,t){var r=t||Xn();return r[6]=n[0],r[7]=n[1],r}var Sn=function(){var t=n(3);return function(n,r,u,a){return t[0]=n,t[1]=r,t[2]=u,Qn(t,a)}}();function Tn(n,t){return Sn(n,n,n,t)}function Un(n){var t=n[0],r=n[1],u=n[2],a=n[3],o=n[4],i=n[5],e=n[6],c=n[7],f=n[8],v=n[9],h=n[10],M=n[11],s=n[12],l=n[13],d=n[14],q=n[15];return s*v*e*a-f*l*e*a-s*i*h*a+o*l*h*a+f*i*d*a-o*v*d*a-s*v*u*c+f*l*u*c+s*r*h*c-t*l*h*c-f*r*d*c+t*v*d*c+s*i*u*M-o*l*u*M-s*r*e*M+t*l*e*M+o*r*d*M-t*i*d*M-f*i*u*q+o*v*u*q+f*r*e*q-t*v*e*q-o*r*h*q+t*i*h*q}function Vn(n,r,u){void 0===u&&(u=M());var a=n[0],o=n[4],i=n[8],e=n[1],c=n[5],f=n[9],v=n[2],h=n[6],s=n[10];return\"XYZ\"===r?(u[1]=Math.asin(t(i,-1,1)),Math.abs(i)<.99999?(u[0]=Math.atan2(-f,s),u[2]=Math.atan2(-o,a)):(u[0]=Math.atan2(h,c),u[2]=0)):\"YXZ\"===r?(u[0]=Math.asin(-t(f,-1,1)),Math.abs(f)<.99999?(u[1]=Math.atan2(i,s),u[2]=Math.atan2(e,c)):(u[1]=Math.atan2(-v,a),u[2]=0)):\"ZXY\"===r?(u[0]=Math.asin(t(h,-1,1)),Math.abs(h)<.99999?(u[1]=Math.atan2(-v,s),u[2]=Math.atan2(-o,c)):(u[1]=0,u[2]=Math.atan2(e,a))):\"ZYX\"===r?(u[1]=Math.asin(-t(v,-1,1)),Math.abs(v)<.99999?(u[0]=Math.atan2(h,s),u[2]=Math.atan2(e,a)):(u[0]=0,u[2]=Math.atan2(-o,c))):\"YZX\"===r?(u[2]=Math.asin(t(e,-1,1)),Math.abs(e)<.99999?(u[0]=Math.atan2(-f,c),u[1]=Math.atan2(-v,a)):(u[0]=0,u[1]=Math.atan2(i,s))):\"XZY\"===r&&(u[2]=Math.asin(-t(o,-1,1)),Math.abs(o)<.99999?(u[0]=Math.atan2(h,c),u[1]=Math.atan2(i,a)):(u[0]=Math.atan2(-f,s),u[1]=0)),u}function Wn(n,t,r,u,a,o){var i=o||cn(),e=(n-t)/(r-t);return i[0]=u[0]+e*(a[0]-u[0]),i[1]=u[1]+e*(a[1]-u[1]),i[2]=u[2]+e*(a[2]-u[2]),i[3]=u[3]+e*(a[3]-u[3]),i[4]=u[4]+e*(a[4]-u[4]),i[5]=u[5]+e*(a[5]-u[5]),i[6]=u[6]+e*(a[6]-u[6]),i[7]=u[7]+e*(a[7]-u[7]),i[8]=u[8]+e*(a[8]-u[8]),i[9]=u[9]+e*(a[9]-u[9]),i[10]=u[10]+e*(a[10]-u[10]),i[11]=u[11]+e*(a[11]-u[11]),i[12]=u[12]+e*(a[12]-u[12]),i[13]=u[13]+e*(a[13]-u[13]),i[14]=u[14]+e*(a[14]-u[14]),i[15]=u[15]+e*(a[15]-u[15]),i}function $n(n){return void 0===n&&(n=s()),n[0]=0,n[1]=0,n[2]=0,n[3]=1,n}function _n(n,t,u){void 0===u&&(u=s());var a=n[0]*r/2,o=n[1]*r/2,i=n[2]*r/2,e=Math.cos(a),c=Math.cos(o),f=Math.cos(i),v=Math.sin(a),h=Math.sin(o),M=Math.sin(i);return\"XYZ\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f-v*h*M):\"YXZ\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f+v*h*M):\"ZXY\"===t?(u[0]=v*c*f-e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f-v*h*M):\"ZYX\"===t?(u[0]=v*c*f-e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f+v*h*M):\"YZX\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f-v*h*M):\"XZY\"===t&&(u[0]=v*c*f-e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f+v*h*M),u}function nt(n,t){void 0===t&&(t=s());var r,u=n[0],a=n[4],o=n[8],i=n[1],e=n[5],c=n[9],f=n[2],v=n[6],h=n[10],M=u+e+h;return M>0?(r=.5/Math.sqrt(M+1),t[3]=.25/r,t[0]=(v-c)*r,t[1]=(o-f)*r,t[2]=(i-a)*r):u>e&&u>h?(r=2*Math.sqrt(1+u-e-h),t[3]=(v-c)/r,t[0]=.25*r,t[1]=(a+i)/r,t[2]=(o+f)/r):e>h?(r=2*Math.sqrt(1+e-u-h),t[3]=(o-f)/r,t[0]=(a+i)/r,t[1]=.25*r,t[2]=(c+v)/r):(r=2*Math.sqrt(1+h-u-e),t[3]=(i-a)/r,t[0]=(o+f)/r,t[1]=(c+v)/r,t[2]=.25*r),t}function tt(n,t,r){void 0===r&&(r=s());var u=Math.sqrt(v(n,n)*v(t,t)),a=u+v(n,t);return a<1e-8*u?(a=0,Math.abs(n[0])>Math.abs(n[2])?(r[0]=-n[1],r[1]=n[0],r[2]=0):(r[0]=0,r[1]=-n[2],r[2]=n[1])):J(n,t,r),r[3]=a,ct(r)}function rt(n,t){void 0===t&&(t=s());var r=n[3]/2,u=Math.sin(r);return t[0]=u*n[0],t[1]=u*n[1],t[2]=u*n[2],t[3]=Math.cos(r),t}function ut(n,t,r){return void 0===r&&(r=M()),et(n,fn),Vn(fn,t,r),r}function at(n,t,r){void 0===r&&(r=s());var u=n[0],a=n[1],o=n[2],i=n[3],e=t[0],c=t[1],f=t[2],v=t[3];return r[0]=i*e+u*v+a*f-o*c,r[1]=i*c+a*v+o*e-u*f,r[2]=i*f+o*v+u*c-a*e,r[3]=i*v-u*e-a*c-o*f,r}function ot(n,t,r){void 0===r&&(r=M());var u=t[0],a=t[1],o=t[2],i=n[0],e=n[1],c=n[2],f=n[3],v=f*u+e*o-c*a,h=f*a+c*u-i*o,s=f*o+i*a-e*u,l=-i*u-e*a-c*o;return r[0]=v*f+l*-i+h*-c-s*-e,r[1]=h*f+l*-e+s*-i-v*-c,r[2]=s*f+l*-c+v*-e-h*-i,r}function it(n,t){t=qn(t);var r=n[0],u=n[1],a=n[2],o=n[3],i=2*r,e=2*u,c=2*a,f=i*o,v=e*o,h=c*o,M=i*r,s=e*r,l=c*r,d=e*u,q=c*u,X=c*a;return t[0]=1-(d+X),t[1]=s+h,t[2]=l-v,t[4]=s-h,t[5]=1-(M+X),t[6]=q+f,t[8]=l+v,t[9]=q-f,t[10]=1-(M+d),t}function et(n,t){var r=n[0],u=n[1],a=n[2],o=n[3],i=r+r,e=u+u,c=a+a,f=r*i,v=r*e,h=r*c,M=u*e,s=u*c,l=a*c,d=o*i,q=o*e,X=o*c;return t[0]=1-(M+l),t[4]=v-X,t[8]=h+q,t[1]=v+X,t[5]=1-(f+l),t[9]=s-d,t[2]=h-q,t[6]=s+d,t[10]=1-(f+M),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ct(n,t){void 0===t&&(t=n);var r=L([n[0],n[1],n[2],n[3]]);return t[0]=n[0]/r,t[1]=n[1]/r,t[2]=n[2]/r,t[3]=n[3]/r,t}function ft(n,t){return void 0===t&&(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function vt(n,t){return ct(ft(n,t))}function ht(n,t){void 0===t&&(t=s());var r=(n=ct(n,u))[3],a=2*Math.acos(r),o=Math.sqrt(1-r*r);return o<.001?(t[0]=n[0],t[1]=n[1],t[2]=n[2]):(t[0]=n[0]/o,t[1]=n[1]/o,t[2]=n[2]/o),t[3]=a,t}function Mt(n,t,r,u,f,h){h=h||M();var s=p(u,r,a),l=p(f,r,o),d=J(t,l,i),q=v(s,d);if(q<1e-6)return null;var X=p(n,r,e),Y=v(X,d);if(Y<0||Y>q)return null;var Z=J(X,s,c),b=v(t,Z);if(b<0||Y+b>q)return null;var g=v(l,Z)/q;return h[0]=n[0]+g*t[0],h[1]=n[1]+g*t[1],h[2]=n[2]+g*t[2],h}function st(n,t,r,a,o){u[0]=t[0],u[1]=t[1],u[2]=t[2],u[3]=1,zn(n,u,f),a[0]=f[0],a[1]=f[1],a[2]=f[2],u[0]=r[0],u[1]=r[1],u[2]=r[2],jn(n,u,f),_(f),o[0]=f[0],o[1]=f[1],o[2]=f[2]}export{g as addVec3,y as addVec3Scalar,q as addVec4,X as addVec4Scalar,rt as angleAxisToQuaternion,tn as angleVec3,hn as compareMat4,A as compareVec3,Kn as composeMat4,ft as conjugateQuat,en as createMat3,cn as createMat4,h as createVec2,M as createVec3,s as createVec4,J as cross3Vec3,I as cross3Vec4,Ln as decomposeMat4,Un as determinantMat4,V as distVec2,S as distVec3,B as divScalarVec3,G as divScalarVec4,j as divVec3,D as divVec3Scalar,z as divVec4,E as divVec4Scalar,N as dotVec2,v as dotVec3,H as dotVec4,_n as eulerToQuat,dn as frustumMat4,sn as frustumMat4v,m as geometricMeanVec2,Xn as identityMat3,qn as identityMat4,$n as identityQuat,gn as inverseMat4,vt as inverseQuat,Yn as isIdentityMat4,T as lenVec2,Q as lenVec3,L as lenVec4,Wn as lerpMat4,U as lerpVec3,bn as lookAtMat4v,Vn as mat4ToEuler,nt as mat4ToQuat,pn as mulMat3,An as mulMat4,wn as mulMat4v4,at as mulQuats,b as mulVec2Scalar,Z as mulVec3Scalar,k as mulVec4,Y as mulVec4Scalar,l as negateVec3,d as negateVec4,ct as normalizeQuat,nn as normalizeVec2,_ as normalizeVec3,$ as normalizeVec4,ln as orthoMat4c,Mn as perspectiveMat4,ht as quatToAngleAxis,ut as quatToEuler,it as quatToMat4,et as quatToRotationMat4,Mt as rayTriangleIntersect,W as rcpVec3,Zn as rotationMat4v,In as scaleMat4c,Bn as scaleMat4v,En as scalingMat3v,Hn as scalingMat4c,Jn as scalingMat4s,Dn as scalingMat4v,Pn as setMat4Translation,P as sqLenVec2,O as sqLenVec3,K as sqLenVec4,C as subScalarVec4,F as subVec2,p as subVec3,w as subVec4,x as subVec4Scalar,Fn as transformPoint3,mn as transformPoint4,xn as transformPoints3,Cn as transformPositions3,kn as transformPositions4,st as transformRay,jn as transformVec3,zn as transformVec4,On as translateMat4c,Nn as translateMat4v,Rn as translationMat3v,Sn as translationMat4c,Tn as translationMat4s,Qn as translationMat4v,yn as transposeMat4,on as triangleNormal,ot as vec3ApplyQuat,rn as vec3FromMat4Scale,tt as vec3PairToQuat,un as vecToArray};\n//# sourceMappingURL=index.es.map\n","import type {FloatArrayParam} from \"@xeokit/math\";\n\nimport type {ViewLayer} from \"./ViewLayer\";\nimport type {SceneObject} from \"@xeokit/scene\";\nimport type {RendererViewObject} from \"./RendererViewObject\";\n\n/**\n * Represents and controls the visual state of a {@link @xeokit/scene!SceneModel | SceneObject} in\n * a {@link @xeokit/viewer!View |View's} canvas.\n *\n * ## Summary\n *\n * * Stored in {@link View.objects | View.objects} and {@link ViewLayer.objects | ViewLayer.objects}\n * * Viewer automatically creates one of these in each existing {@link @xeokit/viewer!View} for each {@link @xeokit/scene!SceneModel | SceneObject} created\n * * {@link SceneObject.layerId | SceneObject.layerId} determines which of the View's {@link ViewLayer | ViewLayers} to put the ViewObject in\n *\n * ## Overview\n *\n * Every View automatically maintains within itself a ViewObject for each {@link @xeokit/scene!SceneModel | SceneObject} that exists in the {@link @xeokit/viewer!Viewer}.\n *\n * Whenever we create a SceneObject, each View will automatically create a corresponding ViewObject within itself. When\n * we destroy a SceneObject, each View will automatically destroy its corresponding ViewObject. The ViewObjects in a View\n * are therefore a manifest of the ViewerObjects in the View.\n *\n * {@link ViewLayer}.\n */\nexport class ViewObject {\n\n    /**\n     * Unique ID of this ViewObject within {@link ViewLayer.objects}.\n     */\n    public readonly id: string;\n\n    /**\n     * The ViewLayer to which this ViewObject belongs.\n     */\n    public readonly layer: ViewLayer;\n\n    /**\n     * The corresponding {@link SceneObject}.\n     */\n    public readonly sceneObject: SceneObject;\n\n    /**\n     * The corresponding {@link RendererViewObject}.\n     * @internal\n     */\n    #rendererViewObject: RendererViewObject;\n\n    #state: {\n        visible: boolean;\n        culled: boolean;\n        pickable: boolean;\n        clippable: boolean;\n        collidable: boolean;\n        xrayed: boolean;\n        selected: boolean;\n        highlighted: boolean;\n        edges: boolean;\n        colorize: Float32Array;\n        colorized: boolean;\n        opacityUpdated: boolean;\n    };\n\n    /**\n     * @private\n     */\n    constructor(layer: ViewLayer, sceneObject: SceneObject, rendererViewObject: RendererViewObject) {\n\n        this.id = sceneObject.id;\n        this.layer = layer;\n        this.sceneObject = sceneObject;\n        this.#rendererViewObject = rendererViewObject;\n\n        this.#state = {\n            visible: true,\n            culled: false,\n            pickable: true,\n            clippable: true,\n            collidable: true,\n            xrayed: false,\n            selected: false,\n            highlighted: false,\n            edges: false,\n            colorize: new Float32Array(4),\n            colorized: false,\n            opacityUpdated: false,\n        };\n\n        this.#rendererViewObject.setVisible(this.layer.view.viewIndex, this.#state.visible);\n        this.layer.objectVisibilityUpdated(this, this.#state.visible, true);\n    }\n\n    /**\n     * Gets the World-space axis-aligned 3D boundary of this ViewObject.\n     */\n    get aabb(): FloatArrayParam {\n        return this.sceneObject.aabb;\n    }\n\n    /**\n     * Gets if this ViewObject is visible.\n     *\n     * * When {@link ViewObject.visible} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.visibleObjects}.\n     * * Each ViewObject is only rendered when {@link ViewObject.visible} is ````true```` and {@link ViewObject.culled} is ````false````.\n     * * Use {@link ViewLayer.setObjectsVisible} to batch-update the visibility of ViewObjects, which fires a single event for the batch.\n     */\n    get visible(): boolean {\n        return this.#state.visible;\n    }\n\n    /**\n     * Sets if this ViewObject is visible.\n     *\n     * * When {@link ViewObject.visible} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.visibleObjects}.\n     * * Each ViewObject is only rendered when {@link ViewObject.visible} is ````true```` and {@link ViewObject.culled} is ````false````.\n     * * Fires an \"objectVisibility\" event on associated {@link ViewLayer}s.\n     * * Use {@link ViewLayer.setObjectsVisible} to batch-update the visibility of ViewObjects, which fires a single event for the batch.\n     */\n    set visible(visible: boolean) {\n        if (visible === this.#state.visible) {\n            return;\n        }\n        this.#state.visible = visible;\n        this.#rendererViewObject.setVisible(this.layer.view.viewIndex, visible);\n        this.layer.objectVisibilityUpdated(this, visible, true);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is X-rayed.\n     *\n     * * When {@link ViewObject.xrayed} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.xrayedObjects | ViewLayer.xrayedObjects}.\n     * * Use {@link ViewLayer.setObjectsXRayed} to batch-update the X-rayed state of ViewObjects.\n     */\n    get xrayed(): boolean {\n        return this.#state.xrayed;\n    }\n\n    /**\n     * Sets if this ViewObject is X-rayed.\n     *\n     * * When {@link ViewObject.xrayed} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.xrayedObjects | ViewLayer.xrayedObjects}.\n     * * Use {@link ViewLayer.setObjectsXRayed} to batch-update the X-rayed state of ViewObjects.\n     */\n    set xrayed(xrayed: boolean) {\n        if (this.#state.xrayed === xrayed) {\n            return;\n        }\n        this.#state.xrayed = xrayed;\n        this.#rendererViewObject.setXRayed(this.layer.view.viewIndex, xrayed);\n        this.layer.objectXRayedUpdated(this, xrayed);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject shows edges.\n     */\n    get edges(): boolean {\n        return this.#state.edges;\n    }\n\n    /**\n     * Sets if this ViewObject shows edges.\n     */\n    set edges(edges: boolean) {\n        if (this.#state.edges === edges) {\n            return;\n        }\n        this.#state.edges = edges;\n        this.#rendererViewObject.setEdges(this.layer.view.viewIndex, edges);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is highlighted.\n     *\n     * * When {@link ViewObject.highlighted} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.highlightedObjects | ViewLayer.highlightedObjects}.\n     * * Use {@link ViewLayer.setObjectsHighlighted} to batch-update the highlighted state of ViewObjects.\n     */\n    get highlighted(): boolean {\n        return this.#state.highlighted;\n    }\n\n    /**\n     * Sets if this ViewObject is highlighted.\n     *\n     * * When {@link ViewObject.highlighted} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.highlightedObjects | ViewLayer.highlightedObjects}.\n     * * Use {@link ViewLayer.setObjectsHighlighted} to batch-update the highlighted state of ViewObjects.\n     */\n    set highlighted(highlighted: boolean) {\n        if (highlighted === this.#state.highlighted) {\n            return;\n        }\n        this.#state.highlighted = highlighted;\n        this.#rendererViewObject.setHighlighted(\n            this.layer.view.viewIndex,\n            highlighted\n        );\n        this.layer.objectHighlightedUpdated(this, highlighted);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is selected.\n     *\n     * * When {@link ViewObject.selected} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.selectedObjects | ViewLayer.selectedObjects}.\n     * * Use {@link ViewLayer.setObjectsSelected} to batch-update the selected state of ViewObjects.\n     */\n    get selected(): boolean {\n        return this.#state.selected;\n    }\n\n    /**\n     * Sets if this ViewObject is selected.\n     *\n     * * When {@link ViewObject.selected} is ````true```` the ViewObject will be registered by {@link ViewObject.id} in {@link ViewLayer.selectedObjects | ViewLayer.selectedObjects}.\n     * * Use {@link ViewLayer.setObjectsSelected} to batch-update the selected state of ViewObjects.\n     */\n    set selected(selected: boolean) {\n        if (selected === this.#state.selected) {\n            return;\n        }\n        this.#state.selected = selected;\n        this.#rendererViewObject.setSelected(this.layer.view.viewIndex, selected);\n        this.layer.objectSelectedUpdated(this, selected);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is culled.\n     *\n     * * The ViewObject is only rendered when {@link ViewObject.visible} is ````true```` and {@link ViewObject.culled} is ````false````.\n     * * Use {@link ViewLayer.setObjectsCulled} to batch-update the culled state of ViewObjects.\n     */\n    get culled(): boolean {\n        return this.#state.culled;\n    }\n\n    /**\n     * Sets if this ViewObject is culled.\n     *\n     * * The ViewObject is only rendered when {@link ViewObject.visible} is ````true```` and {@link ViewObject.culled} is ````false````.\n     * * Use {@link ViewLayer.setObjectsCulled} to batch-update the culled state of ViewObjects.\n     */\n    set culled(culled: boolean) {\n        if (culled === this.#state.culled) {\n            return;\n        }\n        this.#state.culled = culled;\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is clippable.\n     *\n     * * Clipping is done by the {@link SectionPlane}s in {@link ViewLayer.sectionPlanes}.\n     * * Use {@link ViewLayer.setObjectsClippable} to batch-update the clippable state of ViewObjects.\n     */\n    get clippable(): boolean {\n        return this.#state.clippable;\n    }\n\n    /**\n     * Sets if this ViewObject is clippable.\n     *\n     * * Clipping is done by the {@link SectionPlane}s in {@link ViewLayer.sectionPlanes}.\n     * * Use {@link ViewLayer.setObjectsClippable} to batch-update the clippable state of ViewObjects.\n     */\n    set clippable(value: boolean) {\n        if (value === this.#state.clippable) {\n            return;\n        }\n        this.#state.clippable = value;\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets if this ViewObject is included in boundary calculations.\n     *\n     * * When ````true````, the 3D World boundaries returned by {@link ViewLayer.aabb} will include this ViewObject's boundary.\n     * * The ViewObject's 3D boundary is held in {@link SceneObject.aabb}.\n     * * Use {@link ViewLayer.setObjectsCollidable} to batch-update the collidable state of ViewObjects.\n     */\n    get collidable(): boolean {\n        return this.#state.collidable;\n    }\n\n    /**\n     * Sets if this ViewObject included in boundary calculations.\n     *\n     * * When ````true````, the 3D World boundaries returned by {@link ViewLayer.aabb} will include this ViewObject's boundary.\n     * * The ViewObject's 3D boundary is held in {@link SceneObject.aabb}.\n     * * Use {@link ViewLayer.setObjectsCollidable} to batch-update the collidable state of ViewObjects.\n     */\n    set collidable(value: boolean) {\n        if (value === this.#state.collidable) {\n            return;\n        }\n        this.#state.collidable = value;\n        // this._setAABBDirty();\n        // this.layer._aabbDirty = true;\n    }\n\n    /**\n     * Gets if this ViewObject is pickable.\n     *\n     * * Picking is done with {@link ViewLayer.pick}.\n     * * Use {@link ViewLayer.setObjectsPickable} to batch-update the pickable state of ViewObjects.\n     */\n    get pickable(): boolean {\n        return this.#state.pickable;\n    }\n\n    /**\n     * Sets if this ViewObject is pickable.\n     *\n     * * Picking is done with {@link ViewLayer.pick}.\n     * * Use {@link ViewLayer.setObjectsPickable} to batch-update the pickable state of ViewObjects.\n     */\n    set pickable(pickable: boolean) {\n        if (this.#state.pickable === pickable) {\n            return;\n        }\n        this.#state.pickable = pickable;\n        // No need to trigger a render;\n        // state is only used when picking\n    }\n\n    /**\n     * Gets the RGB colorize color for this ViewObject.\n     *\n     * * Multiplies by rendered fragment colors.\n     * * Each element of the color is in range ````[0..1]````.\n     * * Use {@link ViewLayer.setObjectsColorized} to batch-update the colorized state of ViewObjects.\n     */\n    get colorize(): Float32Array {\n        return this.#state.colorize;\n    }\n\n    /**\n     * Sets the RGB colorize color for this ViewObject.\n     *\n     * * Multiplies by rendered fragment colors.\n     * * Each element of the color is in range ````[0..1]````.\n     * * Set to ````null```` or ````undefined```` to reset the colorize color to its default value of ````[1,1,1]````.\n     * * Use {@link ViewLayer.setObjectsColorized} to batch-update the colorized state of ViewObjects.\n     */\n    set colorize(value: FloatArrayParam | undefined | null) {\n        let colorize = this.#state.colorize;\n        if (value) {\n            colorize[0] = value[0];\n            colorize[1] = value[1];\n            colorize[2] = value[2];\n        } else {\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        this.#state.colorized = !!value;\n        this.layer.objectColorizeUpdated(this, this.#state.colorized);\n        this.layer.redraw();\n    }\n\n    /**\n     * Gets the opacity factor for this ViewObject.\n     *\n     * * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     * * Use {@link ViewLayer.setObjectsOpacity} to batch-update the opacities of ViewObjects.\n     */\n    get opacity(): number {\n        return this.#state.colorize[3];\n    }\n\n    /**\n     * Sets the opacity factor for this ViewObject.\n     *\n     * * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     * * Set to ````null```` or ````undefined```` to reset the opacity to its default value of ````1````.\n     * * Use {@link ViewLayer.setObjectsOpacity} to batch-update the opacities of ViewObjects.\n     */\n    set opacity(opacity: number | undefined | null) {\n        let colorize = this.#state.colorize;\n        this.#state.opacityUpdated = opacity !== null && opacity !== undefined;\n        // @ts-ignore\n        colorize[3] = this.#state.opacityUpdated ? opacity : 1.0;\n        this.layer.objectOpacityUpdated(this, this.#state.opacityUpdated);\n        this.layer.redraw();\n    }\n\n    /**\n     * @private\n     */\n    _destroy() {\n        // Called by ViewLayer#destroyViewObjects\n        if (this.#state.visible) {\n            this.layer.objectVisibilityUpdated(this, false, false);\n        }\n        if (this.#state.xrayed) {\n            this.layer.objectXRayedUpdated(this, false);\n        }\n        if (this.#state.selected) {\n            this.layer.objectSelectedUpdated(this, false);\n        }\n        if (this.#state.highlighted) {\n            this.layer.objectHighlightedUpdated(this, false);\n        }\n        if (this.#state.colorized) {\n            this.layer.objectColorizeUpdated(this, false);\n        }\n        if (this.#state.opacityUpdated) {\n            this.layer.objectOpacityUpdated(this, false);\n        }\n        this.layer.redraw();\n    }\n}\n\n","import {EventDispatcher} from \"strongly-typed-events\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\n\nimport * as matrix from '@xeokit/matrix';\n\n\nimport type {View} from \"./View\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\n\n/**\n *  An arbitrarily-aligned World-space clipping plane.\n *\n * ## Summary\n *\n * * Belongs to a {@link @xeokit/viewer!View}.\n * * Slices portions off {@link ViewObject | ViewObjects} to create cross-section views or reveal interiors.\n * * Registered by {@link SectionPlane.id} in {@link View.sectionPlanes}.\n * * Indicates its World-space position in {@link SectionPlane.pos} and orientation vector in {@link SectionPlane.dir}.\n * * Discards elements from the half-space in the direction of {@link SectionPlane.dir}.\n * * Can be be enabled or disabled via {@link SectionPlane.active}.\n *\n * ## Usage\n *\n * In the example below, we'll create two SectionPlanes to slice a model loaded from glTF. Note that we could also create them\n * using a {@link SectionPlanesPlugin}.\n *\n * ````javascript\n * import {Viewer, GLTFLoaderPlugin, SectionPlane} from \"xeokit-viewer.es.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * const gltfLoaderPlugin = new GLTFModelsPlugin(viewer, {\n *      id: \"GLTFModels\"\n * });\n *\n * const model = gltfLoaderPlugin.load({\n *      id: \"myModel\",\n *      src: \"./models/gltf/mygltfmodel.gltf\"\n * });\n *\n * // Create a SectionPlane on negative diagonal\n * const sectionPlane1 = new SectionPlane(viewer.scene, {\n *     pos: [1.0, 1.0, 1.0],\n *     dir: [-1.0, -1.0, -1.0],\n *     active: true\n * }),\n *\n * // Create a SectionPlane on positive diagonal\n * const sectionPlane2 = new SectionPlane(viewer.scene, {\n *     pos: [-1.0, -1.0, -1.0],\n *     dir: [1.0, 1.0, 1.0],\n *     active: true\n * });\n * ````\n */\nclass SectionPlane extends Component {\n\n    /**\n     ID of this SectionPlane, unique within the {@link @xeokit/viewer!View}.\n     */\n    declare public id: string;\n\n    /**\n     * The View to which this DirLight belongs.\n     *\n     * @property view\n     * @type {View}\n     * @final\n     */\n    public readonly view: View;\n\n    /**\n     * Emits an event each time {@link SectionPlane.pos} changes.\n     *\n     * @event\n     */\n    readonly onPos: EventEmitter<SectionPlane, FloatArrayParam>;\n\n    /**\n     * Emits an event each time {@link SectionPlane.dir} changes.\n     *\n     * @event\n     */\n    readonly onDir: EventEmitter<SectionPlane, FloatArrayParam>;\n\n    /**\n     * Emits an event each time {@link SectionPlane.active} changes.\n     *\n     * @event\n     */\n    readonly onActive: EventEmitter<SectionPlane, boolean>;\n\n    #state: {\n        pos: Float64Array;\n        active: boolean;\n        dist: number;\n        dir: Float32Array\n    };\n\n    /**\n     * @private\n     * @constructor\n     */\n    constructor(view: View, cfg: {\n        pos?: FloatArrayParam;\n        active?: boolean;\n        dir?: FloatArrayParam\n    } = {}) {\n\n        super(view, cfg);\n\n        this.view = view;\n\n        this.#state = {\n            active: cfg.active !== false,\n            pos: new Float64Array(cfg.pos || [0, 0, 0]),\n            dir: new Float32Array(cfg.pos || [0, 0, -1]),\n            dist: 0\n        };\n\n        this.onPos = new EventEmitter(new EventDispatcher<SectionPlane, FloatArrayParam>());\n        this.onDir = new EventEmitter(new EventDispatcher<SectionPlane, FloatArrayParam>());\n        this.onActive = new EventEmitter(new EventDispatcher<SectionPlane, boolean>());\n    }\n\n    /**\n     * Gets if this SectionPlane is active or not.\n     *\n     * Default value is ````true````.\n     *\n     * @returns Returns ````true```` if active.\n     */\n    get active(): boolean {\n        return this.#state.active;\n    }\n\n    /**\n     * Sets if this SectionPlane is active or not.\n     *\n     * Default value is ````true````.\n     *\n     * @param value Set ````true```` to activate else ````false```` to deactivate.\n     */\n    set active(value: boolean) {\n        if (this.#state.active === value) {\n            return;\n        }\n        this.#state.active = value;\n        this.view.redraw();\n        this.onActive.dispatch(this, this.#state.active);\n    }\n\n    /**\n     * Gets the World-space position of this SectionPlane's plane.\n     *\n     * Default value is ````[0, 0, 0]````.\n     *\n     * @returns  Current position.\n     */\n    get pos(): Float64Array {\n        return this.#state.pos;\n    }\n\n    /**\n     * Sets the World-space position of this SectionPlane's plane.\n     *\n     * Default value is ````[0, 0, 0]````.\n     *\n     * @param value New position.\n     */\n    set pos(value: FloatArrayParam) {\n        this.#state.pos.set(value);\n        this.#state.dist = (-matrix.dotVec3(this.#state.pos, this.#state.dir));\n        this.onPos.dispatch(this, this.#state.pos);\n    }\n\n    /**\n     * Gets the direction of this SectionPlane's plane.\n     *\n     * Default value is ````[0, 0, -1]````.\n     *\n     * @returns value Current direction.\n     */\n    get dir(): Float32Array {\n        return this.#state.dir;\n    }\n\n    /**\n     * Sets the direction of this SectionPlane's plane.\n     *\n     * Default value is ````[0, 0, -1]````.\n     *\n     * @param value New direction.\n     */\n    set dir(value: FloatArrayParam) {\n        this.#state.dir.set(value);\n        this.#state.dist = (-matrix.dotVec3(this.#state.pos, this.#state.dir));\n        this.view.redraw();\n        this.onDir.dispatch(this, this.#state.dir);\n    }\n\n    /**\n     * Gets this SectionPlane's distance to the origin of the World-space coordinate system.\n     *\n     * This is the dot product of {@link SectionPlane.pos} and {@link SectionPlane.dir} and is automatically re-calculated\n     * each time either of two properties are updated.\n     *\n     * @returns Distance to the origin of the World-space coordinate system.\n     */\n    get dist(): number {\n        return this.#state.dist;\n    }\n\n    /**\n     * Inverts the direction of {@link SectionPlane.dir}.\n     */\n    flipDir() {\n        const dir = this.#state.dir;\n        dir[0] *= -1.0;\n        dir[1] *= -1.0;\n        dir[2] *= -1.0;\n        this.#state.dist = (-matrix.dotVec3(this.#state.pos, this.#state.dir));\n        this.onDir.dispatch(this, this.#state.dir);\n        this.view.redraw();\n    }\n\n    /**\n     * Destroys this SectionPlane.\n     */\n    destroy() {\n        this.onPos.clear();\n        this.onActive.clear;\n        this.onDir.clear();\n        super.destroy();\n    }\n}\n\nexport {SectionPlane};\n","import type {View} from \"./View\";\nimport {CentimetersUnit, FeetUnit, InchesUnit, MetersUnit, MillimetersUnit, YardsUnit} from \"@xeokit/constants\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport {createVec3} from \"@xeokit/matrix\";\n\n\nconst unitsInfo = {\n    [MetersUnit]: {\n        abbrev: \"m\"\n    },\n    [CentimetersUnit]: {\n        abbrev: \"cm\"\n    },\n    [MillimetersUnit]: {\n        abbrev: \"mm\"\n    },\n    [YardsUnit]: {\n        abbrev: \"yd\"\n    },\n    [FeetUnit]: {\n        abbrev: \"ft\"\n    },\n    [InchesUnit]: {\n        abbrev: \"in\"\n    }\n};\n\n/**\n * Configures its {@link @xeokit/viewer!View}'s measurement unit and mapping between the Real-space and World-space 3D Cartesian coordinate systems.\n *\n *\n * ## Summary\n *\n * * Located at {@link View.metrics}.\n * * {@link Metrics.units} configures the Real-space unit type, which is {@link MetersUnit} by default.\n * * {@link Metrics.scale} configures the number of Real-space units represented by each unit within the World-space 3D coordinate system. This is ````1.0```` by default.\n * * {@link Metrics.origin} configures the 3D Real-space origin, in current Real-space units, at which this {@link @xeokit/viewer!View}'s World-space coordinate origin sits, This is ````[0,0,0]```` by default.\n *\n * ## Usage\n *\n * ````JavaScript\n * import {Viewer, constants} from \"xeokit-viewer.es.js\";\n *\n * const viewer = new Viewer();\n *\n * const view1 = myViewer.createView({\n *      id: \"myView\",\n *      canvasId: \"myCanvas1\"\n * });\n *\n * const metrics = view1.metrics;\n *\n * metrics.units = MetersUnit;\n * metrics.scale = 10.0;\n * metrics.origin = [100.0, 0.0, 200.0];\n * ````\n */\nclass Metrics extends Component {\n\n    #units: number;\n    #scale: number;\n    #origin: FloatArrayParam;\n\n    /**\n     * Emits an event each time {@link Metrics.units} changes.\n     *\n     * @event\n     */\n    readonly onUnits: EventEmitter<Metrics, number>;\n\n    /**\n     * Emits an event each time {@link Metrics.scale} changes.\n     *\n     * @event\n     */\n    readonly onScale: EventEmitter<Metrics, number>;\n\n    /**\n     * Emits an event each time {@link Metrics.origin} changes.\n     *\n     * @event\n     */\n    readonly onOrigin: EventEmitter<Metrics, FloatArrayParam>;\n\n\n    /**\n     * @private\n     */\n    constructor(view: View, cfg: {\n        origin?: FloatArrayParam;\n        scale?: number;\n        units?: number\n    } = {\n        units: MetersUnit,\n        scale: 1.0,\n        origin: [1, 1, 1]\n    }) {\n\n        super(view, cfg);\n\n        this.onUnits = new EventEmitter(new EventDispatcher<Metrics, number>());\n        this.onScale = new EventEmitter(new EventDispatcher<Metrics, number>());\n        this.onOrigin = new EventEmitter(new EventDispatcher<Metrics, FloatArrayParam>());\n\n        this.#units = MetersUnit;\n        this.#scale = 1.0;\n        this.#origin = createVec3([0, 0, 0]);\n\n        this.units = cfg.units;\n        this.scale = cfg.scale;\n        this.origin = cfg.origin;\n    }\n\n    /**\n     * Gets info about the supported Real-space unit types.\n     *\n     * With {@link constants} indicating each unit type, the info will be:\n     *\n     * ````javascript\n     * {\n     *     [MetersUnit]: {\n     *         abbrev: \"m\"\n     *     },\n     *     [CentimetersUnit]: {\n     *         abbrev: \"cm\"\n     *     },\n     *     [MillimetersUnit]: {\n     *         abbrev: \"mm\"\n     *     },\n     *     [YardsUnit]: {\n     *         abbrev: \"yd\"\n     *     },\n     *     [FeetUnit]: {\n     *         abbrev: \"ft\"\n     *     },\n     *     [InchesUnit]: {\n     *         abbrev: \"in\"\n     *     }\n     * }\n     * ````\n     *\n     * @type {*}\n     */\n    get unitsInfo(): {} {\n        return unitsInfo;\n    }\n\n    /**\n     * Gets the {@link @xeokit/viewer!View}'s Real-space unit type.\n     */\n    get units(): number {\n        return this.#units;\n    }\n\n    /**\n     * Sets the {@link @xeokit/viewer!View}'s Real-space unit type.\n     *\n     * Accepted values are {@link MetersUnit}, {@link CentimetersUnit}, {@link MillimetersUnit}, {@link YardsUnit}, {@link FeetUnit} and {@link InchesUnit}.\n     */\n    set units(value: number | undefined) {\n        if (!value) {\n            value = MetersUnit;\n        }\n        // @ts-ignore\n        const info = unitsInfo[value];\n        if (!info) {\n            this.error(\"Unsupported value for 'units': \" + value + \" defaulting to MetersUnit\");\n            value = MetersUnit;\n        }\n        this.#units = value;\n        this.onUnits.dispatch(this, this.#units);\n    }\n\n    /**\n     * Gets the number of Real-space units represented by each unit of the {@link @xeokit/viewer!View}'s World-space coordinate system.\n     */\n    get scale(): number {\n        return this.#scale;\n    }\n\n    /**\n     * Sets the number of Real-space units represented by each unit of the {@link @xeokit/viewer!View}'s World-space coordinate system.\n     *\n     * For example, if {@link Metrics.units} is {@link MetersUnit}, and there are ten meters per World-space coordinate system unit, then ````scale```` would have a value of ````10.0````.\n     */\n    set scale(value: number | undefined) {\n        value = value || 1;\n        if (value <= 0) {\n            this.error(\"scale value should be larger than zero\");\n            return;\n        }\n        this.#scale = value;\n        this.onScale.dispatch(this, this.#scale);\n    }\n\n    /**\n     * Gets the 3D Real-space origin, in Real-space units, at which this {@link @xeokit/viewer!View}'s World-space coordinate origin ````[0,0,0]```` sits.\n     */\n    get origin(): FloatArrayParam {\n        return this.#origin;\n    }\n\n    /**\n     * Sets the Real-space 3D origin, in Real-space units, at which this {@link @xeokit/viewer!View}'s World-space coordinate origin ````[0,0,0]```` sits.\n     */\n    set origin(value: FloatArrayParam | undefined) {\n        if (!value) {\n            this.#origin[0] = 0;\n            this.#origin[1] = 0;\n            this.#origin[2] = 0;\n            return;\n        }\n        this.#origin[0] = value[0];\n        this.#origin[1] = value[1];\n        this.#origin[2] = value[2];\n        this.onOrigin.dispatch(this, this.#origin);\n    }\n\n    /**\n     * Converts a 3D position from World-space to Real-space.\n     *\n     * This is equivalent to ````realPos = #origin + (worldPos * #scale)````.\n     *\n     * @param worldPos World-space 3D position, in World coordinate system units.\n     * @param [realPos] Destination for Real-space 3D position.\n     * @returns  Real-space 3D position, in units indicated by {@link Metrics#units}.\n     */\n    worldToRealPos(worldPos: FloatArrayParam, realPos: FloatArrayParam = createVec3()): FloatArrayParam {\n        realPos[0] = this.#origin[0] + (this.#scale * worldPos[0]);\n        realPos[1] = this.#origin[1] + (this.#scale * worldPos[1]);\n        realPos[2] = this.#origin[2] + (this.#scale * worldPos[2]);\n        return realPos;\n    }\n\n    /**\n     * Converts a 3D position from Real-space to World-space.\n     *\n     * This is equivalent to ````worldPos = (worldPos - #origin) / #scale````.\n     *\n     * @param realPos Real-space 3D position.\n     * @param [worldPos] Destination for World-space 3D position.\n     * @returns  World-space 3D position.\n     */\n    realToWorldPos(realPos: FloatArrayParam, worldPos: FloatArrayParam = createVec3()): FloatArrayParam {\n        worldPos[0] = (realPos[0] - this.#origin[0]) / this.#scale;\n        worldPos[1] = (realPos[1] - this.#origin[1]) / this.#scale;\n        worldPos[2] = (realPos[2] - this.#origin[2]) / this.#scale;\n        return worldPos;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n        this.onUnits.clear();\n        this.onScale.clear();\n        this.onOrigin.clear();\n    }\n}\n\nexport {Metrics};","import type {View} from \"./View\";\nimport {Component} from \"@xeokit/core\";\nimport {CustomProjectionType, FrustumProjectionType, QualityRender} from \"@xeokit/constants\";\n\n/**\n * Configures Scalable Ambient Obscurance (SAO) for a {@link @xeokit/viewer!View}.\n */\nexport class SAO extends Component {\n\n    /**\n     * The View to which this SAO belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        renderModes: number[];\n        intensity: number;\n        minResolution: number;\n        blendFactor: number;\n        numSamples: number;\n        bias: number;\n        scale: number;\n        blur: boolean;\n        blendCutoff: number;\n        enabled: boolean;\n        kernelRadius: number;\n    }\n\n    /** @private */\n    constructor(view: View, params: any) {\n\n        super(view, params);\n\n        this.view = view;\n\n        this.#state = {\n            renderModes: [QualityRender],\n            enabled: params.enabled !== false,\n            kernelRadius: params.kernelRadius || 100.0,\n            intensity: (params.intensity !== undefined) ? params.intensity : 0.15,\n            bias: (params.bias !== undefined) ? params.bias : 0.5,\n            scale: (params.scale !== undefined) ? params.scale : 1.0,\n            minResolution: (params.minResolution !== undefined) ? params.minResolution : 0.0,\n            numSamples: (params.numSamples !== undefined) ? params.numSamples : 10,\n            blur: !!(params.blur),\n            blendCutoff: (params.blendCutff !== undefined) ? params.blendCutoff : 0.3,\n            blendFactor: (params.blendFactor !== undefined) ? params.blendFactor : 1.0\n        };\n    }\n\n    /**\n     * Gets which rendering modes in which to render SAO.\n     *\n     * Accepted modes are {@link QualityRender} and {@link FastRender}.\n     *\n     * Default value is [{@link QualityRender}].\n     */\n    get renderModes(): number[] {\n        return this.#state.renderModes;\n    }\n\n    /**\n     * Sets which rendering modes in which to render SAO.\n     *\n     * Accepted modes are {@link QualityRender} and {@link FastRender}.\n     *\n     * Default value is [{@link QualityRender}].\n     */\n    set renderModes(value: number[]) {\n        this.#state.renderModes = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets whether or not SAO is supported by this browser and GPU.\n     *\n     * Even when enabled, SAO will only work if supported.\n     */\n    get supported(): boolean {\n        return this.view.viewer.renderer.getSAOSupported();\n    }\n\n    /**\n     * Gets whether SAO is enabled for the {@link @xeokit/viewer!View}.\n     *\n     * Even when enabled, SAO will only apply if supported.\n     *\n     * Default value is ````false````.\n     */\n    get enabled(): boolean {\n        return this.#state.enabled;\n    }\n\n    /**\n     * Sets whether SAO is enabled for the {@link @xeokit/viewer!View}.\n     *\n     * Even when enabled, SAO will only work if supported.\n     *\n     * Default value is ````false````.\n     */\n    set enabled(value: boolean) {\n        value = !!value;\n        if (this.#state.enabled === value) {\n            return;\n        }\n        this.#state.enabled = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Returns true if SAO is currently possible, where it is supported, enabled, and the current view state is compatible.\n     * Called internally by renderer logic.\n     * @private\n     */\n    get possible(): boolean {\n        if (!this.supported) {\n            return false;\n        }\n        if (!this.#state.enabled) {\n            return false;\n        }\n        const projectionType = this.view.camera.projectionType;\n        if (projectionType === CustomProjectionType) {\n            return false;\n        }\n        if (projectionType === FrustumProjectionType) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Gets the maximum area that SAO takes into account when checking for possible occlusion for each fragment.\n     *\n     * Default value is ````100.0````.\n     */\n    get kernelRadius(): number {\n        return this.#state.kernelRadius;\n    }\n\n    /**\n     * Sets the maximum area that SAO takes into account when checking for possible occlusion for each fragment.\n     *\n     * Default value is ````100.0````.\n     */\n    set kernelRadius(value: number) {\n        if (value === undefined || value === null) {\n            value = 100.0;\n        }\n        if (this.#state.kernelRadius === value) {\n            return;\n        }\n        this.#state.kernelRadius = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the degree of darkening (ambient obscurance) produced by the SAO effect.\n     *\n     * Default value is ````0.15````.\n     */\n    get intensity(): number {\n        return this.#state.intensity;\n    }\n\n    /**\n     * Sets the degree of darkening (ambient obscurance) produced by the SAO effect.\n     *\n     * Default value is ````0.15````.\n     */\n    set intensity(value: number) {\n        if (value === undefined || value === null) {\n            value = 0.15;\n        }\n        if (this.#state.intensity === value) {\n            return;\n        }\n        this.#state.intensity = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the SAO bias.\n     *\n     * Default value is ````0.5````.\n     */\n    get bias(): number {\n        return this.#state.bias;\n    }\n\n    /**\n     * Sets the SAO bias.\n     *\n     * Default value is ````0.5````.\n     */\n    set bias(value: number) {\n        if (value === undefined || value === null) {\n            value = 0.5;\n        }\n        if (this.#state.bias === value) {\n            return;\n        }\n        this.#state.bias = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the SAO occlusion scale.\n     *\n     * Default value is ````1.0````.\n     */\n    get scale(): number {\n        return this.#state.scale;\n    }\n\n    /**\n     * Sets the SAO occlusion scale.\n     *\n     * Default value is ````1.0````.\n     */\n    set scale(value: number) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (this.#state.scale === value) {\n            return;\n        }\n        this.#state.scale = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the SAO minimum resolution.\n     *\n     * Default value is ````0.0````.\n     */\n    get minResolution(): number {\n        return this.#state.minResolution;\n    }\n\n    /**\n     * Sets the SAO minimum resolution.\n     *\n     * Default value is ````0.0````.\n     */\n    set minResolution(value: number) {\n        if (value === undefined || value === null) {\n            value = 0.0;\n        }\n        if (this.#state.minResolution === value) {\n            return;\n        }\n        this.#state.minResolution = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the number of SAO samples.\n     *\n     * Default value is ````10````.\n     */\n    get numSamples(): number {\n        return this.#state.numSamples;\n    }\n\n    /**\n     * Sets the number of SAO samples.\n     *\n     * Default value is ````10````.\n     *\n     * Update this sparingly, since it causes a shader recompile.\n     */\n    set numSamples(value: number) {\n        if (value === undefined || value === null) {\n            value = 10;\n        }\n        if (this.#state.numSamples === value) {\n            return;\n        }\n        this.#state.numSamples = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets whether Guassian blur is enabled.\n     *\n     * Default value is ````true````.\n     */\n    get blur(): boolean {\n        return this.#state.blur;\n    }\n\n    /**\n     * Sets whether Guassian blur is enabled.\n     *\n     * Default value is ````true````.\n     */\n    set blur(value: boolean) {\n        value = (value !== false);\n        if (this.#state.blur === value) {\n            return;\n        }\n        this.#state.blur = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the SAO blend cutoff.\n     *\n     * Default value is ````0.3````.\n     *\n     * Normally you don't need to alter this.\n     */\n    get blendCutoff(): number {\n        return this.#state.blendCutoff;\n    }\n\n    /**\n     * Sets the SAO blend cutoff.\n     *\n     * Default value is ````0.3````.\n     *\n     * Normally you don't need to alter this.\n     */\n    set blendCutoff(value: number) {\n        if (value === undefined || value === null) {\n            value = 0.3;\n        }\n        if (this.#state.blendCutoff === value) {\n            return;\n        }\n        this.#state.blendCutoff = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the SAO blend scale.\n     *\n     * Default value is ````1.0````.\n     *\n     * Normally you don't need to alter this.\n     */\n    get blendFactor(): number {\n        return this.#state.blendFactor;\n    }\n\n    /**\n     * Sets the SAO blend factor.\n     *\n     * Default value is ````1.0````.\n     *\n     * Normally you don't need to alter this.\n     */\n    set blendFactor(value: number) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (this.#state.blendFactor === value) {\n            return;\n        }\n        this.#state.blendFactor = value;\n        this.view.redraw();\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n","import {Component} from \"@xeokit/core\";\nimport type {View} from \"./View\";\n\n\n/**\n * Configures the shape of \"lines\" geometry primitives.\n *\n * * Located at {@link View#linesMaterial}.\n */\nclass LinesMaterial extends Component {\n\n    /**\n     * The View to which this LinesMaterial belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        lineWidth: number\n    };\n\n    /**\n     * @private\n     */\n    constructor(view: View, options: { lineWidth: number } = {lineWidth: 1}) {\n\n        super(view, options);\n\n        this.view = view;\n\n        this.#state = {\n            lineWidth: (options.lineWidth !== undefined && options.lineWidth !== null) ? options.lineWidth : 1\n        };\n    }\n\n    /**\n     * Sets line width.\n     *\n     * Default value is ````1```` pixels.\n     */\n    set lineWidth(value: number) {\n        this.#state.lineWidth = value || 1;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the line width.\n     *\n     * Default value is ````1```` pixels.\n     */\n    get lineWidth(): number {\n        return this.#state.lineWidth;\n    }\n}\n\nexport {LinesMaterial};","import {EventDispatcher} from \"strongly-typed-events\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\n\nimport {ViewObject} from \"./ViewObject\";\nimport type {Viewer} from \"./Viewer\";\nimport type {View} from \"./View\";\nimport type {Scene, SceneModel} from \"@xeokit/scene\";\n\n\n\n/**\n * A layer of {@link ViewObject | ViewObjects} in a {@link @xeokit/viewer!View}.\n *\n * See {@link \"@xeokit/viewer\"} for usage.\n *\n * ## Summary\n *\n * * Automatically stores a {@link ViewObject} for each existing {@link RendererObject} that has a matching {@link RendererObject.layerId | ViewerObject.layerId}\n * * Useful for segreggating {@link ViewObject | ViewObjects} into layers\n * * Created automatically or manually (see {@link View.createLayer | View.createLayer})\n * * Stored in {@link View.layers | View.layers}\n *\n * ## Overview\n *\n * ViewLayers organize a {@link View |View's} {@link ViewObject | ViewObjects} into layers, according to which aspects of\n * the view they represent. They make it easier for us to focus our interactions on the ViewObjects that are relevant\n * to the particular aspects we're interested in.\n *\n * ### Typical use case: segregating model objects from environment objects\n *\n * A typical use case for this feature is to group environmental {@link ViewObject | ViewObjects} (e.g. ground, skybox) in an \"environment\" ViewLayer,\n * and group model ViewObjects in a \"model\" ViewLayer. Then we can focus our model interactions (show, hide, highlight,\n * save/load BCF viewpoints, etc.) on the ViewObjects in the \"model\" ViewLayer, without involving the \"environment\"\n * ViewObjects at all, which are effectively in the background. We can basically ignore the environment objects as we\n * do various batch operations on our model objects, i.e. \"X-ray all\", \"X-ray everything except for walls\" and so on.\n *\n * ### Automatic ViewLayers\n *\n * By default, each {@link @xeokit/viewer!View} automatically lazy-creates ViewLayers within itself as required. As {@link RendererObject | ViewerObjects} appear in the\n * {@link @xeokit/viewer!Viewer}, {@link ViewObject | ViewObjects} and Viewlayers magically appear in each existing View.\n *\n * Recall that, whenever a {@link RendererObject} is created, each existing {@link @xeokit/viewer!View} will automatically create a\n * corresponding {@link ViewObject} to represent and control that ViewerObject's appearance within the View's canvas.\n *\n * If the {@link RendererObject} also happens to have a value set on its {@link RendererObject.layerId} ID property, then the View\n * will also automatically ensure that it contains a matching {@link ViewLayer}, and will register the new ViewObject\n * in that ViewLayer. Note that each ViewObject can belong to a maximum of one ViewLayer.\n *\n * When a {@link @xeokit/viewer!View} automatically creates Viewlayers, it will also automatically destroy them again whenever\n * their {@link RendererObject | ViewerObjects} have all been destroyed.\n *\n * ### Manual ViewLayers\n *\n * We can configure a {@link @xeokit/viewer!View} to **not** automatically create ViewLayers, and instead rely on us to manually create them.\n *\n * When we do that, the View will only create the {@link ViewObject | ViewObjects} within itself for the ViewLayers that we created. The\n * View will ignore all ViewerObjects that don't have {@link RendererObject.layerId} values that match the IDs of our\n * manually-created ViewLayers.\n *\n * This feature is useful for ensuring that aspect-focused Views don't contain huge numbers of unused ViewObjects for\n * ViewerObjects that they never need to show.\n *\n * When we manually create ViewLayers like this, then the View will not automatically destroy them whenever\n * their {@link RendererObject | ViewerObjects} have all been destroyed. This keeps the ViewLayers around, in case\n * we create matching ViewerObjects again in future.\n *\n * ## Examples\n *\n * ### Exampe 1: Automatic ViewLayers\n *\n * Create a {@link @xeokit/viewer!Viewer}:\n *\n *````javascript\n * import {Viewer} from \"@xeokit/viewer\";\n *\n * const myViewer = new Viewer({\n *      id: \"myViewer\"\n * });\n *````\n *\n * Create a {@link @xeokit/viewer!View}, with the default setting of ````false```` for {@link ViewParams.autoLayers}:\n *\n * ````javascript\n * const view1 = myViewer.createView({\n *      id: \"myView\",\n *      canvasId: \"myView1\",\n *      autoLayers: true // <<----------- Default\n * });\n *\n * view1.camera.eye = [-3.933, 2.855, 27.018];\n * view1.camera.look = [4.400, 3.724, 8.899];\n * view1.camera.up = [-0.018, 0.999, 0.039];\n * ````\n *\n * Next, we'll create a {@link @xeokit/scene!SceneModel | SceneModel} containing two model {@link RendererObject | ViewerObjects} that represent a building\n * foundation and walls, along with two environmental ViewerObjects that represent a skybox and ground plane.\n *\n * The ground and skybox ViewerObjects specify that their {@link ViewObject | ViewObjects} belong\n * to \"environment\" ViewLayers, while the model ViewerObjects specify that their ViewObjects belong to \"model\" ViewLayers.\n *\n * ````javascript\n * const sceneModel = myViewer.scene.createModel({\n *      id: \"myModel\"\n * });\n *\n * // (calls to SceneModel createGeometry and\n * // createMesh omitted for brevity)\n *\n * sceneModel.createObject({\n *      id: \"ground\",\n *      meshIds: [\"groundMesh}],\n *      layerId: \"environment\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"skyBox\",\n *      meshIds: [\"skyBoxMesh}],\n *      layerId: \"environment\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"houseFoundation\",\n *      meshIds: [\"myMesh}],\n *      layerId: \"model\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"houseWalls\",\n *      meshIds: [\"myMesh}],\n *      layerId: \"model\"\n * });\n *\n * sceneModel.build();\n * ````\n *\n * Our {@link @xeokit/viewer!View} has now automatically created an \"environment\" {@link ViewLayer}, which contains {@link ViewObject | ViewObjects} for the skybox and\n * ground plane ViewerObjects, and a \"model\" ViewLayer, which contains ViewObjects for the house foundation and walls.\n *\n * We can now batch-update the ViewObjects in each ViewLayer independently. As mentioned, this is useful when we need to ignore things\n * like UI or environmental objects in batch-updates, BCF viewpoints etc.\n *\n * ````javascript\n * // viewer.objects contains four ViewerObjects with IDs \"ground\", \"skyBox\", \"houseFoundation\" and \"houseWalls\"\n *\n * // viewer.views.view1.objects contains four ViewObjects with IDs \"ground\", \"skyBox\", \"houseFoundation\" and \"houseWalls\"\n *\n * // viewer.views.view1.layers contains two ViewLayers with IDs \"environment\" and \"model\"\n *\n * const environmentLayer = view1.layers[\"environment\"];\n * environmentLayer.setObjectsVisible(environmentLayer.objectIds, true);\n\n * const modelLayer = view1.layers[\"model\"];\n * modelLayer.setObjectsVisible(modelLayer.objectIds, true);\n * ````\n *\n * ### Example 2: Manual ViewLayers\n *\n * Create a {@link @xeokit/viewer!Viewer}:\n *\n * ````javascript\n * import {Viewer} from \"@xeokit/viewer\";\n *\n * const myViewer = new Viewer({\n *      id: \"myViewer\"\n * });\n * ````\n *\n * Create a {@link @xeokit/viewer!View}, this time with ````false```` for {@link ViewParams.autoLayers}, in order to **not**\n * automatically create ViewLayers on demand:\n *\n * ````javascript\n * const view1 = myViewer.createView({\n *      id: \"myView\",\n *      canvasId: \"myCanvas1\",\n *      autoLayers: false // <<----------- Override default\n * });\n *\n * view1.camera.eye = [-3.933, 2.855, 27.018];\n * view1.camera.look = [4.400, 3.724, 8.899];\n * view1.camera.up = [-0.018, 0.999, 0.039];\n * ````\n *\n * We'll manually create the \"model\" ViewLayer, and won't create an \"environment\" ViewLayer:\n *\n * ````javascript\n * const modelViewLayer = view1.createLayer({\n *     id: \"model\",\n *     visible: true\n * });\n * ````\n *\n * As we did in the previous example, we'll now create a {@link @xeokit/scene!SceneModel | SceneModel} containing two model\n * {@link RendererObject | ViewerObjects} that represent a building foundation and walls, along with two environmental\n * ViewerObjects that represent a skybox and ground plane.\n *\n * As before, the ground and skybox ViewerObjects specify that their {@link ViewObject | ViewObjects} belong to \"environment\" ViewLayers,\n * while the model ViewerObjects specify that their ViewObjects belong to \"model\" ViewLayers.\n *\n * ````javascript\n * const sceneModel = myViewer.scene.createModel({\n *      id: \"myModel\"\n * });\n *\n * // (calls to SceneModel createGeometry and\n * // createMesh omitted for brevity)\n *\n * sceneModel.createObject({\n *      id: \"ground\",\n *      meshIds: [\"groundMesh}],\n *      layerId: \"environment\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"skyBox\",\n *      meshIds: [\"skyBoxMesh}],\n *      layerId: \"environment\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"houseFoundation\",\n *      meshIds: [\"myMesh}],\n *      layerId: \"model\"\n * });\n *\n * sceneModel.createObject({\n *      id: \"houseWalls\",\n *      meshIds: [\"myMesh}],\n *      layerId: \"model\"\n * });\n *\n * sceneModel.build();\n * ````\n *\n * This time, however, our {@link @xeokit/viewer!View} has now created {@link ViewObject | ViewObjects} for the \"model\" ViewerObjects, while\n * ignoring the \"environment\" ViewerObjects.\n *\n * As far as this View is concerned, the \"environment\" ViewerObjects do not exist.\n *\n * ````javascript\n * // viewer.scene.objects contains four SceneObjects with IDs \"ground\", \"skyBox\", \"houseFoundation\" and \"houseWalls\"\n *\n * // viewer.views.view1.objects contains two ViewObjects with IDs \"houseFoundation\" and \"houseWalls\"\n *\n * // viewer.views.view1.layers contains one ViewLayer with ID \"model\"\n *\n * const modelLayer = view1.layers[\"model\"];\n * modelLayer.setObjectsVisible(modelLayer.objectIds, true);\n * ````\n */\nclass ViewLayer extends Component {\n\n    /**\n     ID of this ViewLayer, unique within the {@link @xeokit/viewer!View}.\n\n     This ViewLayer is mapped by this ID in {@link View.layers}.\n     */\n    declare readonly id: string;\n\n    /**\n     * The Viewer to which this ViewLayer belongs.\n     */\n    declare readonly viewer: Viewer;\n\n    /**\n     * The View to which this ViewLayer belongs.\n     */\n    declare readonly view: View;\n\n    /**\n     * Map of the all {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * These are the ViewObjects for which {@link ViewObject.layerId} has the same value as {@link ViewLayer.id}.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     *\n     * The ViewLayer automatically ensures that there is a {@link ViewObject} here for\n     * each {@link RendererObject} in the {@link @xeokit/viewer!Viewer}\n     */\n    readonly objects: { [key: string]: ViewObject };\n\n    /**\n     * Map of the currently visible {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * A ViewObject is visible when {@link ViewObject.visible} is true.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly visibleObjects: { [key: string]: ViewObject };\n\n    /**\n     * Map of currently x-rayed {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * A ViewObject is x-rayed when {@link ViewObject.xrayed} is true.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly xrayedObjects: { [key: string]: ViewObject };\n\n    /**\n     * Map of currently highlighted {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * A ViewObject is highlighted when {@link ViewObject.highlighted} is true.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly highlightedObjects: { [key: string]: ViewObject };\n\n    /**\n     * Map of currently selected {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * A ViewObject is selected when {@link ViewObject.selected} is true.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly selectedObjects: { [key: string]: ViewObject };\n\n    /**\n     * Map of currently colorized {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly colorizedObjects: { [key: string]: ViewObject };\n\n    /**\n     * Map of {@link ViewObject | ViewObjects} in this ViewLayer whose opacity has been updated.\n     *\n     * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n     */\n    readonly opacityObjects: { [key: string]: ViewObject };\n\n    /**\n     * When true, View destroys this ViewLayer as soon as there are no ViewObjects\n     * that need it. When false, View retains it.\n     * @private\n     */\n    autoDestroy: boolean;\n\n    /**\n     * Emits an event each time the visibility of a {@link ViewObject} changes.\n     *\n     * ViewObjects are shown and hidden with {@link View.setObjectsVisible}, {@link ViewLayer.setObjectsVisible} or {@link ViewObject.visible}.\n     *\n     * @event\n     */\n    readonly onObjectVisibility: EventEmitter<ViewLayer, ViewObject>;\n\n    #numObjects: number;\n    #objectIds: string[] | null;\n    #numVisibleObjects: number;\n    #visibleObjectIds: string[] | null;\n    #numXRayedObjects: number;\n    #xrayedObjectIds: string[] | null;\n    #numHighlightedObjects: number;\n    #highlightedObjectIds: string[] | null;\n    #numSelectedObjects: number;\n    #selectedObjectIds: string[] | null;\n    #numColorizedObjects: number;\n    #colorizedObjectIds: string[] | null;\n    #numOpacityObjects: number;\n    #opacityObjectIds: string[] | null;\n\n    #qualityRender: boolean;\n\n    gammaOutput: boolean;\n\n    constructor(options: {\n        id: string;\n        viewer: Viewer;\n        view: View;\n        qualityRender?: boolean;\n        autoDestroy?: boolean;\n    }) {\n\n        super(options.view, options);\n\n        this.id = options.id;\n        this.viewer = options.viewer;\n        this.view = options.view;\n\n        this.objects = {};\n        this.visibleObjects = {};\n        this.xrayedObjects = {};\n        this.highlightedObjects = {};\n        this.selectedObjects = {};\n        this.colorizedObjects = {};\n        this.opacityObjects = {};\n\n        this.autoDestroy = (options.autoDestroy !== false);\n\n        this.#numObjects = 0;\n        this.#numVisibleObjects = 0;\n        this.#numXRayedObjects = 0\n        this.#numHighlightedObjects = 0;\n        this.#numSelectedObjects = 0;\n        this.#numColorizedObjects = 0;\n        this.#numOpacityObjects = 0;\n\n        this.#qualityRender = !!options.qualityRender;\n\n        this.onObjectVisibility = new EventEmitter(new EventDispatcher<ViewLayer, ViewObject>());\n\n        this.#initObjects();\n    }\n\n    /**\n     * Gets the gamma factor.\n     */\n    get gammaFactor() { // TODO\n        return 1.0;\n    }\n\n    /**\n     * Sets whether quality rendering is enabled for this ViewLayer.\n     *\n     * Default is ````false````.\n     */\n    set qualityRender(value: boolean) {\n        if (this.#qualityRender === value) {\n            return;\n        }\n        this.#qualityRender = value;\n        this.redraw();\n    }\n\n    /**\n     * Gets whether quality rendering is enabled for this ViewLayer.\n     *\n     * Default is ````false````.\n     */\n    get qualityRender(): boolean {\n        return this.#qualityRender;\n    }\n\n    /**\n     * Gets the number of {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numObjects(): number {\n        return this.#numObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get objectIds(): string[] {\n        if (!this.#objectIds) {\n            this.#objectIds = Object.keys(this.objects);\n        }\n        return this.#objectIds;\n    }\n\n    /**\n     * Gets the number of visible {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numVisibleObjects(): number {\n        return this.#numVisibleObjects;\n    }\n\n    /**\n     * Gets the IDs of the visible {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get visibleObjectIds(): string[] {\n        if (!this.#visibleObjectIds) {\n            this.#visibleObjectIds = Object.keys(this.visibleObjects);\n        }\n        return this.#visibleObjectIds;\n    }\n\n    /**\n     * Gets the number of X-rayed {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numXRayedObjects(): number {\n        return this.#numXRayedObjects;\n    }\n\n    /**\n     * Gets the IDs of the X-rayed {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get xrayedObjectIds(): string[] {\n        if (!this.#xrayedObjectIds) {\n            this.#xrayedObjectIds = Object.keys(this.xrayedObjects);\n        }\n        return this.#xrayedObjectIds;\n    }\n\n    /**\n     * Gets the number of highlighted {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numHighlightedObjects(): number {\n        return this.#numHighlightedObjects;\n    }\n\n    /**\n     * Gets the IDs of the highlighted {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get highlightedObjectIds(): string[] {\n        if (!this.#highlightedObjectIds) {\n            this.#highlightedObjectIds = Object.keys(this.highlightedObjects);\n        }\n        return this.#highlightedObjectIds;\n    }\n\n    /**\n     * Gets the number of selected {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numSelectedObjects(): number {\n        return this.#numSelectedObjects;\n    }\n\n    /**\n     * Gets the IDs of the selected {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get selectedObjectIds(): string[] {\n        if (!this.#selectedObjectIds) {\n            this.#selectedObjectIds = Object.keys(this.selectedObjects);\n        }\n        return this.#selectedObjectIds;\n    }\n\n    /**\n     * Gets the number of colorized {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get numColorizedObjects(): number {\n        return this.#numColorizedObjects;\n    }\n\n    /**\n     * Gets the IDs of the colorized {@link ViewObject | ViewObjects} in this ViewLayer.\n     */\n    get colorizedObjectIds(): string[] {\n        if (!this.#colorizedObjectIds) {\n            this.#colorizedObjectIds = Object.keys(this.colorizedObjects);\n        }\n        return this.#colorizedObjectIds;\n    }\n\n    /**\n     * Gets the IDs of the {@link ViewObject | ViewObjects} in this ViewLayer that have updated opacities.\n     */\n    get opacityObjectIds(): string[] {\n        if (!this.#opacityObjectIds) {\n            this.#opacityObjectIds = Object.keys(this.opacityObjects);\n        }\n        return this.#opacityObjectIds;\n    }\n\n    /**\n     * Gets the number of {@link ViewObject | ViewObjects} in this ViewLayer that have updated opacities.\n     */\n    get numOpacityObjects(): number {\n        return this.#numOpacityObjects;\n    }\n\n    /**\n     * @private\n     */\n    registerViewObject(viewObject: ViewObject) {\n        this.objects[viewObject.id] = viewObject;\n        this.#numObjects++;\n        this.#objectIds = null; // Lazy regenerate\n    }\n\n    /**\n     * @private\n     */\n    deregisterViewObject(viewObject: ViewObject) {\n        delete this.objects[viewObject.id];\n        delete this.visibleObjects[viewObject.id];\n        delete this.xrayedObjects[viewObject.id];\n        delete this.highlightedObjects[viewObject.id];\n        delete this.selectedObjects[viewObject.id];\n        delete this.colorizedObjects[viewObject.id];\n        delete this.opacityObjects[viewObject.id];\n        this.#numObjects--;\n        this.#objectIds = null; // Lazy regenerate\n    }\n\n    /**\n     * @private\n     */\n    redraw() {\n        this.viewer.renderer.setImageDirty(this.view.viewIndex);\n    }\n\n    /**\n     * @private\n     */\n    objectVisibilityUpdated(viewObject: ViewObject, visible: boolean, notify: boolean = true) {\n        if (visible) {\n            this.visibleObjects[viewObject.id] = viewObject;\n            this.#numVisibleObjects++;\n        } else {\n            delete this.visibleObjects[viewObject.id];\n            this.#numVisibleObjects--;\n        }\n        this.#visibleObjectIds = null; // Lazy regenerate\n        if (notify) {\n            this.onObjectVisibility.dispatch(this, viewObject);\n        }\n        this.view.objectVisibilityUpdated(viewObject, visible, notify);\n    }\n\n    /**\n     * @private\n     */\n    objectXRayedUpdated(viewObject: ViewObject, xrayed: boolean) {\n        if (xrayed) {\n            this.xrayedObjects[viewObject.id] = viewObject;\n            this.#numXRayedObjects++;\n        } else {\n            delete this.xrayedObjects[viewObject.id];\n            this.#numXRayedObjects--;\n        }\n        this.#xrayedObjectIds = null; // Lazy regenerate\n        this.view.objectXRayedUpdated(viewObject, xrayed);\n    }\n\n    /**\n     * @private\n     */\n    objectHighlightedUpdated(viewObject: ViewObject, highlighted: boolean) {\n        if (highlighted) {\n            this.highlightedObjects[viewObject.id] = viewObject;\n            this.#numHighlightedObjects++;\n        } else {\n            delete this.highlightedObjects[viewObject.id];\n            this.#numHighlightedObjects--;\n        }\n        this.#highlightedObjectIds = null; // Lazy regenerate\n        this.view.objectHighlightedUpdated(viewObject, highlighted);\n    }\n\n    /**\n     * @private\n     */\n    objectSelectedUpdated(viewObject: ViewObject, selected: boolean) {\n        if (selected) {\n            this.selectedObjects[viewObject.id] = viewObject;\n            this.#numSelectedObjects++;\n        } else {\n            delete this.selectedObjects[viewObject.id];\n            this.#numSelectedObjects--;\n        }\n        this.#selectedObjectIds = null; // Lazy regenerate\n        this.view.objectSelectedUpdated(viewObject, selected);\n    }\n\n    /**\n     * @private\n     */\n    objectColorizeUpdated(viewObject: ViewObject, colorized: boolean) {\n        if (colorized) {\n            this.colorizedObjects[viewObject.id] = viewObject;\n            this.#numColorizedObjects++;\n        } else {\n            delete this.colorizedObjects[viewObject.id];\n            this.#numColorizedObjects--;\n        }\n        this.#colorizedObjectIds = null; // Lazy regenerate\n        this.view.objectColorizeUpdated(viewObject, colorized);\n    }\n\n    /**\n     * @private\n     */\n    objectOpacityUpdated(viewObject: ViewObject, opacityUpdated: boolean) {\n        if (opacityUpdated) {\n            this.opacityObjects[viewObject.id] = viewObject;\n            this.#numOpacityObjects++;\n        } else {\n            delete this.opacityObjects[viewObject.id];\n            this.#numOpacityObjects--;\n        }\n        this.#opacityObjectIds = null; // Lazy regenerate\n        this.view.objectOpacityUpdated(viewObject, opacityUpdated);\n    }\n\n    /**\n     * Updates the visibility of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.visible} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.visibleObjects} and {@link ViewLayer.numVisibleObjects}.\n     *\n     * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n     * @param visible Whether or not to cull.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsVisible(objectIds: string[], visible: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.visible !== visible);\n            viewObject.visible = visible;\n            return changed;\n        });\n    }\n\n    /**\n     * Updates the collidability of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * Updates {@link ViewObject.collidable} on the Objects with the given IDs.\n     *\n     * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n     * @param collidable Whether or not to cull.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsCollidable(objectIds: string[], collidable: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.collidable !== collidable);\n            viewObject.collidable = collidable;\n            return changed;\n        });\n    }\n\n    /**\n     * Updates the culled status of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * Updates {@link ViewObject.culled} on the Objects with the given IDs.\n     *\n     * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n     * @param culled Whether or not to cull.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsCulled(objectIds: string[], culled: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.culled !== culled);\n            viewObject.culled = culled;\n            return changed;\n        });\n    }\n\n    /**\n     * Selects or deselects the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.selected} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.selectedObjects} and {@link ViewLayer.numSelectedObjects}.\n     *\n     * @param  objectIds One or more {@link ViewObject.id} values.\n     * @param selected Whether or not to select.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsSelected(objectIds: string[], selected: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.selected !== selected);\n            viewObject.selected = selected;\n            return changed;\n        });\n    }\n\n    /**\n     * Highlights or un-highlights the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.highlighted} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.highlightedObjects} and {@link ViewLayer.numHighlightedObjects}.\n     *\n     * @param  objectIds One or more {@link ViewObject.id} values.\n     * @param highlighted Whether or not to highlight.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsHighlighted(objectIds: string[], highlighted: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.highlighted !== highlighted);\n            viewObject.highlighted = highlighted;\n            return changed;\n        });\n    }\n\n    /**\n     * Applies or removes X-ray rendering for the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.xrayed} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.xrayedObjects} and {@link ViewLayer.numXRayedObjects}.\n     *\n     * @param  objectIds One or more {@link ViewObject.id} values.\n     * @param xrayed Whether or not to xray.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsXRayed(objectIds: string[], xrayed: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.xrayed !== xrayed);\n            if (changed) {\n                viewObject.xrayed = xrayed;\n            }\n            return changed;\n        });\n    }\n\n    /**\n     * Colorizes the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.colorize} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.colorizedObjects} and {@link ViewLayer.numColorizedObjects}.\n     *\n     * @param  objectIds One or more {@link ViewObject.id} values.\n     * @param colorize - RGB colorize factors in range ````[0..1,0..1,0..1]````.\n     * @returns True if any {@link ViewObject | ViewObjects} changed opacity, else false if all updates were redundant and not applied.\n     */\n    setObjectsColorized(objectIds: string[], colorize: number[]) {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            viewObject.colorize = colorize;\n        });\n    }\n\n    /**\n     * Sets the opacity of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.opacity} on the Objects with the given IDs.\n     * - Updates {@link ViewLayer.opacityObjects} and {@link ViewLayer.numOpacityObjects}.\n     *\n     * @param  objectIds - One or more {@link ViewObject.id} values.\n     * @param opacity - Opacity factor in range ````[0..1]````.\n     * @returns True if any {@link ViewObject | ViewObjects} changed opacity, else false if all updates were redundant and not applied.\n     */\n    setObjectsOpacity(objectIds: string[], opacity: number): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.opacity !== opacity);\n            if (changed) {\n                viewObject.opacity = opacity;\n            }\n            return changed;\n        });\n    }\n\n    /**\n     * Sets the pickability of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.pickable} on the Objects with the given IDs.\n     * - Enables or disables the ability to pick the given Objects with {@link ViewLayer.pick}.\n     *\n     * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n     * @param pickable Whether or not to set pickable.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsPickable(objectIds: string[], pickable: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.pickable !== pickable);\n            if (changed) {\n                viewObject.pickable = pickable;\n            }\n            return changed;\n        });\n    }\n\n    /**\n     * Sets the clippability of the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * - Updates {@link ViewObject.clippable} on the Objects with the given IDs.\n     * - Enables or disables the ability to pick the given Objects with {@link ViewLayer.pick}.\n     *\n     * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n     * @param clippable Whether or not to set clippable.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsClippable(objectIds: string[], clippable: boolean): boolean {\n        return this.withObjects(objectIds, (viewObject: ViewObject) => {\n            const changed = (viewObject.clippable !== clippable);\n            if (changed) {\n                viewObject.clippable = clippable;\n            }\n            return changed;\n        });\n    }\n\n    /**\n     * Iterates with a callback over the given {@link ViewObject | ViewObjects} in this ViewLayer.\n     *\n     * @param  objectIds One or more {@link ViewObject.id} values.\n     * @param callback Callback to execute on each {@link ViewObject}.\n     * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n     */\n    withObjects(objectIds: string[], callback: Function): boolean {\n        let changed = false;\n        for (let i = 0, len = objectIds.length; i < len; i++) {\n            const id = objectIds[i];\n            let viewObject = this.objects[id];\n            if (viewObject) {\n                changed = callback(viewObject) || changed;\n            }\n        }\n        return changed;\n    }\n\n    #initObjects() {\n        const models = this.viewer.scene.models;\n        for (const id in models) {\n            const model = models[id];\n            this.#createObjects(model);\n        }\n        this.viewer.scene.onModelCreated.subscribe((scene: Scene, model: SceneModel) => {\n            this.#createObjects(model);\n        });\n        this.viewer.scene.onModelDestroyed.subscribe((scene:Scene, model: SceneModel) => {\n            this.#destroyObjects(model);\n        });\n    }\n\n    #createObjects(model: SceneModel) {\n        const sceneObjects = model.objects;\n        for (let id in sceneObjects) {\n            const sceneObject = sceneObjects[id];\n            const rendererViewObject = this.viewer.renderer.rendererViewObjects[id];\n            if (rendererViewObject.layerId == this.id) {\n                const viewObject = new ViewObject(this, sceneObject, rendererViewObject);\n                this.objects[viewObject.id] = viewObject;\n                this.#numObjects++;\n                this.#objectIds = null; // Lazy regenerate\n            }\n        }\n    }\n\n    #destroyObjects(model: SceneModel) {\n        const viewerObjects = model.objects;\n        for (let id in viewerObjects) {\n            const viewerObject = viewerObjects[id];\n            const viewObject = this.objects[viewerObject.id];\n            viewObject._destroy();\n            this.#numObjects--;\n            this.#objectIds = null; // Lazy regenerate\n        }\n    }\n\n    /**\n     * Destroys this ViewLayer.\n     *\n     * Causes {@link @xeokit/viewer!Viewer} to fire a \"viewDestroyed\" event.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {ViewLayer};\n","import {Component} from \"@xeokit/core\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\nimport type {View} from \"./View\";\n\n/**\n * Configures the appearance of {@link ViewObject | ViewObjects} when they are xrayed, highlighted or selected.\n *\n * ## Summary\n *\n * * Located at {@link View.xrayMaterial}, {@link View.highlightMaterial} and {@link View.selectedMaterial}.\n * * XRay a {@link ViewObject} by setting {@link ViewObject.xrayed} ````true````.\n * * Highlight a {@link ViewObject} by setting {@link ViewObject.highlighted} ````true````.\n * * Select a {@link ViewObject} by setting {@link ViewObject.selected} ````true````.\n */\nclass EmphasisMaterial extends Component {\n\n    /**\n     * The View to which this EmphasisMaterial belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        fillColor: Float32Array;\n        backfaces: boolean;\n        edgeColor: Float32Array;\n        edgeWidth: number;\n        edgeAlpha: number;\n        edges: boolean;\n        fillAlpha: number;\n        fill: boolean\n    };\n\n    /**\n     * @private\n     */\n    constructor(view: View, options: {\n        fillColor?: FloatArrayParam;\n        backfaces?: boolean;\n        edgeColor?: FloatArrayParam;\n        edgeWidth?: number;\n        edgeAlpha?: number;\n        edges?: boolean;\n        fillAlpha?: number;\n        fill?: boolean;\n    } = {}) {\n\n        super(view, options);\n\n        this.view = view;\n\n        this.#state = {\n            fill: !!options.fill,\n            fillColor: new Float32Array(options.fillColor || [0.4, 0.4, 0.4]),\n            fillAlpha: (options.fillAlpha !== undefined && options.fillAlpha !== null) ? options.fillAlpha : 0.2,\n            edges: options.edges !== false,\n            edgeColor: new Float32Array(options.edgeColor || [0.2, 0.2, 0.2]),\n            edgeAlpha: (options.edgeAlpha !== undefined && options.edgeAlpha !== null) ? options.edgeAlpha : 0.5,\n            edgeWidth: (options.edgeWidth !== undefined && options.edgeWidth !== null) ? options.edgeWidth : 1,\n            backfaces: !!options.backfaces\n        };\n    }\n\n    /**\n     * Sets if the surfaces of emphasized {@link ViewObject | ViewObjects} are filled with color.\n     *\n     * Default is ````true````.\n     */\n    set fill(value: boolean) {\n        if (this.#state.fill === value) {\n            return;\n        }\n        this.#state.fill = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets if the surfaces of emphasized {@link ViewObject | ViewObjects} are filled with color.\n     *\n     * Default is ````true````.\n     */\n    get fill(): boolean {\n        return this.#state.fill;\n    }\n\n    /**\n     * Sets the RGB surface fill color for the surfaces of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * Default is ````[0.4, 0.4, 0.4]````.\n     */\n    set fillColor(value: FloatArrayParam) {\n        const fillColor = this.#state.fillColor;\n        if (fillColor[0] === value[0] && fillColor[1] === value[1] && fillColor[2] === value[2]) {\n            return;\n        }\n        fillColor[0] = 0.4;\n        fillColor[1] = 0.4;\n        fillColor[2] = 0.4;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the RGB surface fill color for the surfaces of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * Default is ````[0.4, 0.4, 0.4]````.\n     */\n    get fillColor(): Float32Array {\n        return this.#state.fillColor;\n    }\n\n    /**\n     * Sets the transparency of the surfaces of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     */\n    set fillAlpha(value: number) {\n        if (this.#state.fillAlpha === value) {\n            return;\n        }\n        this.#state.fillAlpha = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the transparency of the surfaces of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     */\n    get fillAlpha(): number {\n        return this.#state.fillAlpha;\n    }\n\n    /**\n     * Sets if the edges on emphasized {@link ViewObject | ViewObjects} are visible.\n     *\n     * Default is ````true````.\n     */\n    set edges(value: boolean) {\n        if (this.#state.edges === value) {\n            return;\n        }\n        this.#state.edges = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets if the edges on emphasized {@link ViewObject | ViewObjects} are visible.\n     *\n     * Default is ````true````.\n     */\n    get edges(): boolean {\n        return this.#state.edges;\n    }\n\n    /**\n     * Sets the RGB color of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * Default is ```` [0.2, 0.2, 0.2]````.\n     */\n    set edgeColor(value: FloatArrayParam) {\n        let edgeColor = this.#state.edgeColor;\n        if (edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        edgeColor[0] = 0.2;\n        edgeColor[1] = 0.2;\n        edgeColor[2] = 0.2;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the RGB color of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * Default is ```` [0.2, 0.2, 0.2]````.\n     */\n    get edgeColor(): Float32Array {\n        return this.#state.edgeColor;\n    }\n\n    /**\n     * Sets the transparency of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     */\n    set edgeAlpha(value: number) {\n        if (this.#state.edgeAlpha === value) {\n            return;\n        }\n        this.#state.edgeAlpha = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the transparency of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     */\n    get edgeAlpha(): number {\n        return this.#state.edgeAlpha;\n    }\n\n    /**\n     * Sets the width of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * Default value is ````1.0```` pixels.\n     */\n    set edgeWidth(value: number) {\n        this.#state.edgeWidth = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the width of the edges of emphasized {@link ViewObject | ViewObjects}.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     */\n    get edgeWidth(): number {\n        return this.#state.edgeWidth;\n    }\n\n    /**\n     * Sets whether to render backfaces of emphasized {@link ViewObject | ViewObjects} when {@link EmphasisMaterial.fill} is ````true````.\n     *\n     * Default is ````false````.\n     */\n    set backfaces(value: boolean) {\n        if (this.#state.backfaces === value) {\n            return;\n        }\n        this.#state.backfaces = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets whether to render backfaces of emphasized {@link ViewObject | ViewObjects} when {@link EmphasisMaterial.fill} is ````true````.\n     *\n     * Default is ````false````.\n     */\n    get backfaces(): boolean {\n        return this.#state.backfaces;\n    }\n\n    /**\n     * @private\n     */\n    get hash(): string {\n        return \"\";\n    }\n\n    /**\n     * @private\n     */\n    destroy(): void {\n        super.destroy();\n    }\n}\n\nexport {EmphasisMaterial};","import {Component} from \"@xeokit/core\";\n\n\n\nimport type {View} from \"./View\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {QualityRender} from \"@xeokit/constants\";\n\n\n/**\n * Configures the appearance of {@link ViewObject | ViewObjects} when their edges are emphasised.\n *\n * ## Summary\n *\n * * Located at {@link View.edgeMaterial}.\n * * Emphasise edges of a {@link ViewObject} by setting {@link ViewObject.edges} ````true````.\n */\nclass EdgeMaterial extends Component {\n\n    /**\n     * The View to which this EdgeMaterial belongs.\n     */\n    public readonly view: View;\n\n    /**\n     * @private\n     */\n    #state: {\n        edgeColor: Float32Array;\n        edgeWidth: number;\n        edgeAlpha: number;\n        edges: boolean;\n        renderModes: number[];\n    };\n\n    /**\n     * @private\n     */\n    constructor(view: View, options: {\n        edgeColor?: FloatArrayParam;\n        edgeWidth?: number;\n        edgeAlpha?: number;\n        edges?: boolean;\n        renderModes?: number[];\n    } = {}) {\n\n        super(view, options);\n\n        this.view = view;\n\n        this.#state = {\n            renderModes: options.renderModes || [QualityRender],\n            edges: options.edges !== false,\n            edgeColor: new Float32Array(options.edgeColor || [0.2, 0.2, 0.2]),\n            edgeAlpha: (options.edgeAlpha !== undefined && options.edgeAlpha !== null) ? options.edgeAlpha : 0.5,\n            edgeWidth: (options.edgeWidth !== undefined && options.edgeWidth !== null) ? options.edgeWidth : 1\n        };\n    }\n\n    /**\n     * Sets which rendering modes in which to render edges.\n     *\n     * Accepted modes are {@link QualityRender} and {@link FastRender}.\n     *\n     * Default value is [{@link QualityRender}].\n     */\n    set renderModes(value: number[]) {\n        this.#state.renderModes = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets which rendering modes in which to render edges.\n     *\n     * Accepted modes are {@link QualityRender} and {@link FastRender}.\n     *\n     * Default value is [{@link QualityRender}].\n     */\n    get renderModes(): number[] {\n        return this.#state.renderModes;\n    }\n\n    /**\n     * Sets if edges of {@link ViewObjects} are visible.\n     *\n     * Default is ````true````.\n     */\n    set edges(value: boolean) {\n        if (this.#state.edges === value) {\n            return;\n        }\n        this.#state.edges = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets if edges of {@link ViewObjects} are visible.\n     *\n     * Default is ````true````.\n     */\n    get edges(): boolean {\n        return this.#state.edges;\n    }\n\n    /**\n     * Sets RGB edge color for {@link ViewObjects}.\n     *\n     * Default value is ````[0.2, 0.2, 0.2]````.\n     */\n    set edgeColor(value: FloatArrayParam) {\n        let edgeColor = this.#state.edgeColor;\n        if (value && edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        edgeColor[0] = 0.2;\n        edgeColor[1] = 0.2;\n        edgeColor[2] = 0.2;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets RGB edge color for {@link ViewObjects}.\n     *\n     * Default value is ````[0.2, 0.2, 0.2]````.\n     */\n    get edgeColor(): Float32Array {\n        return this.#state.edgeColor;\n    }\n\n    /**\n     * Sets edge transparency for {@link ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default value is ````1.0````.\n     */\n    set edgeAlpha(value: number) {\n        if (this.#state.edgeAlpha === value) {\n            return;\n        }\n        this.#state.edgeAlpha = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets edge transparency for {@link ViewObjects}.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default value is ````1.0````.\n     */\n    get edgeAlpha(): number {\n        return this.#state.edgeAlpha;\n    }\n\n    /**\n     * Sets edge width for {@link ViewObjects}.\n     *\n     * Default value is ````1.0```` pixels.\n     */\n    set edgeWidth(value: number) {\n        if (this.#state.edgeWidth === value) {\n            return;\n        }\n        this.#state.edgeWidth = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets edge width for {@link ViewObjects}.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     */\n    get edgeWidth(): number {\n        return this.#state.edgeWidth;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {EdgeMaterial};","import {Component} from \"@xeokit/core\";\nimport type {View} from \"./View\";\n\n/**\n * Configures the size and shape of {@link ViewObject | ViewObjects} that represent clouds of points.\n *\n * ## Summary\n *\n * * Located at {@link View.pointsMaterial}.\n * * Supports round and square points.\n * * Optional perspective point scaling.\n */\nclass PointsMaterial extends Component {\n\n    /**\n     * The View to which this PointsMaterial belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        pointSize: number,\n        roundPoints: boolean,\n        perspectivePoints: boolean,\n        minPerspectivePointSize: number,\n        maxPerspectivePointSize: number,\n        filterIntensity: boolean,\n        minIntensity: number,\n        maxIntensity: number\n    };\n\n    /**\n     * @private\n     */\n    constructor(view: View, options: {\n        pointSize?: number,\n        roundPoints?: boolean,\n        perspectivePoints?: boolean,\n        minPerspectivePointSize?: number,\n        maxPerspectivePointSize?: number,\n        filterIntensity?: boolean,\n        minIntensity?: number,\n        maxIntensity?: number\n    } = {}) {\n\n        super(view, options);\n\n        this.view = view;\n\n        this.#state = {\n            pointSize: (options.pointSize !== undefined && options.pointSize !== null) ? options.pointSize : 1,\n            roundPoints: options.roundPoints !== false,\n            perspectivePoints: options.perspectivePoints !== false,\n            minPerspectivePointSize: (options.minPerspectivePointSize !== undefined && options.minPerspectivePointSize !== null) ? options.minPerspectivePointSize : 1,\n            maxPerspectivePointSize: (options.maxPerspectivePointSize !== undefined && options.maxPerspectivePointSize !== null) ? options.maxPerspectivePointSize : 6,\n            filterIntensity: !!options.filterIntensity,\n            minIntensity: (options.minIntensity !== undefined && options.minIntensity !== null) ? options.minIntensity : 0,\n            maxIntensity: (options.maxIntensity !== undefined && options.maxIntensity !== null) ? options.maxIntensity : 1\n        };\n    }\n\n    /**\n     * Sets point size.\n     *\n     * Default value is ````2.0```` pixels.\n     */\n    set pointSize(value: number) {\n        this.#state.pointSize = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets point size.\n     *\n     * Default value is ````2.0```` pixels.\n     */\n    get pointSize(): number {\n        return this.#state.pointSize;\n    }\n\n\n    /**\n     * Sets if points are round or square.\n     *\n     * Default is ````true```` to set points round.\n     */\n    set roundPoints(value: boolean) {\n        if (this.#state.roundPoints === value) {\n            return;\n        }\n        this.#state.roundPoints = value;\n        this.view.rebuild();\n    }\n\n    /**\n     * Gets if points are round or square.\n     *\n     * Default is ````true```` to set points round.\n     */\n    get roundPoints(): boolean {\n        return this.#state.roundPoints;\n    }\n\n    /**\n     * Sets if rendered point size reduces with distance when {@link Camera.projection} is set to ````PerspectiveProjectionType````.\n     *\n     * Default is ````true````.\n     */\n    set perspectivePoints(value: boolean) {\n        if (this.#state.perspectivePoints === value) {\n            return;\n        }\n        this.#state.perspectivePoints = value;\n        this.view.rebuild();\n    }\n\n    /**\n     * Gets if rendered point size reduces with distance when {@link Camera.projection} is set to PerspectiveProjectionType.\n     *\n     * Default is ````false````.\n     */\n    get perspectivePoints(): boolean {\n        return this.#state.perspectivePoints;\n    }\n\n    /**\n     * Sets the minimum rendered size of points when {@link PointsMaterial.perspectivePoints} is ````true````.\n     *\n     * Default value is ````1.0```` pixels.\n     */\n    set minPerspectivePointSize(value: number) {\n        if (this.#state.minPerspectivePointSize === value) {\n            return;\n        }\n        this.#state.minPerspectivePointSize = value;\n        this.view.rebuild();\n    }\n\n    /**\n     * Gets the minimum rendered size of points when {@link PointsMaterial.perspectivePoints} is ````true````.\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    get minPerspectivePointSize(): number {\n        return this.#state.minPerspectivePointSize;\n    }\n\n    /**\n     * Sets the maximum rendered size of points when {@link PointsMaterial.perspectivePoints} is ````true````.\n     *\n     * Default value is ````6```` pixels.\n     */\n    set maxPerspectivePointSize(value: number) {\n        if (this.#state.maxPerspectivePointSize === value) {\n            return;\n        }\n        this.#state.maxPerspectivePointSize = value;\n        this.view.rebuild();\n    }\n\n    /**\n     * Gets the maximum rendered size of points when {@link PointsMaterial.perspectivePoints} is ````true````.\n     *\n     * Default value is ````6```` pixels.\n     */\n    get maxPerspectivePointSize(): number {\n        return this.#state.maxPerspectivePointSize;\n    }\n\n    /**\n     * Sets if rendered point size reduces with distance when {@link Camera.projection} is set to ````PerspectiveProjectionType````.\n     *\n     * Default is ````false````.\n     */\n    set filterIntensity(value: boolean) {\n        if (this.#state.filterIntensity === value) {\n            return;\n        }\n        this.#state.filterIntensity = value;\n        this.view.rebuild();\n    }\n\n    /**\n     * Gets if rendered point size reduces with distance when {@link Camera.projection} is set to PerspectiveProjectionType.\n     *\n     * Default is ````false````.\n     */\n    get filterIntensity(): boolean {\n        return this.#state.filterIntensity;\n    }\n\n    /**\n     * Sets the minimum rendered size of points when {@link PointsMaterial.perspectivePoints} is ````true````.\n     *\n     * Default value is ````0````.\n     */\n    set minIntensity(value: number) {\n        if (this.#state.minIntensity === value) {\n            return;\n        }\n        this.#state.minIntensity = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the minimum rendered size of points when {@link PointsMaterial.filterIntensity} is ````true````.\n     *\n     * Default value is ````0````.\n     */\n    get minIntensity(): number {\n        return this.#state.minIntensity;\n    }\n\n    /**\n     * Sets the maximum rendered size of points when {@link PointsMaterial.filterIntensity} is ````true````.\n     *\n     * Default value is ````1````.\n     */\n    set maxIntensity(value: number) {\n        if (this.#state.maxIntensity === value) {\n            return;\n        }\n        this.#state.maxIntensity = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the maximum rendered size of points when {@link PointsMaterial.filterIntensity} is ````true````.\n     *\n     * Default value is ````1````.\n     */\n    get maxIntensity(): number {\n        return this.#state.maxIntensity;\n    }\n\n    /**\n     * @private\n     */\n    get hash(): string {\n        const state = this.#state;\n        return `${state.pointSize};\n        ${state.roundPoints};\n        ${state.perspectivePoints};\n        ${state.minPerspectivePointSize};\n        ${state.maxPerspectivePointSize};\n        ${state.filterIntensity}`;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {PointsMaterial};","import {EventDispatcher} from \"strongly-typed-events\";\n\n\nimport type {Camera} from \"./Camera\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport {PerspectiveProjectionType} from \"@xeokit/constants\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {inverseMat4, createMat4, mulMat4v4, mulVec3Scalar, perspectiveMat4, transposeMat4} from \"@xeokit/matrix\";\n\n/**\n * PerspectiveProjection projection configuration for a {@link @xeokit/viewer!Camera} .\n *\n * ## Summary\n *\n * * Located at {@link Camera.perspectiveProjection}.\n * * Implicitly sets the left, right, top, bottom frustum planes using {@link PerspectiveProjection.fov}.\n * * {@link PerspectiveProjection.near} and {@link PerspectiveProjection.far} specify the distances to the clipping planes.\n * * {@link PerspectiveProjection.onProjMatrix} will fire an event whenever {@link PerspectiveProjection.projMatrix} updates, which indicates that one or more other properties have updated.\n */\nexport class PerspectiveProjection extends Component {\n\n    /**\n     * The Camera this PerspectiveProjection belongs to.\n     */\n    public readonly camera: Camera;\n\n    /**\n     * Emits an event each time {@link PerspectiveProjection.projMatrix} updates.\n     *\n     * @event\n     */\n    readonly onProjMatrix: EventEmitter<PerspectiveProjection, FloatArrayParam>;\n\n    /**\n     * The type of this projection.\n     */\n    static readonly type: number = PerspectiveProjectionType;\n\n    #state: {\n        far: number;\n        near: number;\n        fov: number;\n        fovAxis: string;\n        projMatrix: FloatArrayParam;\n        inverseProjMatrix: FloatArrayParam;\n        transposedProjMatrix: FloatArrayParam;\n    };\n\n    #inverseMatrixDirty: boolean;\n    #transposedProjMatrixDirty: boolean;\n    #onViewBoundary: any;\n\n\n    /**\n     * @private\n     */\n    constructor(camera: Camera, cfg: {\n        fov?: number,\n        fovAxis?: string,\n        near?: number,\n        far?: number\n    } = {}) {\n\n        super(camera, cfg);\n\n        this.camera = camera;\n\n        this.#state = {\n            near: cfg.near || 0.1,\n            far: cfg.far || 2000.0,\n            fov: cfg.fov || 60.0,\n            fovAxis: cfg.fovAxis || \"min\",\n            projMatrix: createMat4(),\n            inverseProjMatrix: createMat4(),\n            transposedProjMatrix: createMat4()\n        };\n\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n\n        this.#onViewBoundary = this.camera.view.onBoundary.subscribe( () => {\n            this.setDirty();\n        });\n\n        this.onProjMatrix = new EventEmitter(new EventDispatcher<PerspectiveProjection, FloatArrayParam>());\n    }\n\n    /**\n     * Gets the PerspectiveProjection's field-of-view angle (FOV).\n     *\n     * Default value is ````60.0````.\n     *\n     * @returns {Number} Current field-of-view.\n     */\n    get fov(): number {\n        return this.#state.fov;\n    }\n\n    /**\n     * Sets the PerspectiveProjection's field-of-view angle (FOV).\n     *\n     * Default value is ````60.0````.\n     *\n     * @param value New field-of-view.\n     */\n    set fov(value: number) {\n        if (value === this.#state.fov) {\n            return;\n        }\n        this.#state.fov = value;\n        this.setDirty();\n     }\n\n    /**\n     * Gets the PerspectiveProjection's FOV axis.\n     *\n     * Options are ````\"x\"````, ````\"y\"```` or ````\"min\"````, to use the minimum axis.\n     *\n     * Default value is ````\"min\"````.\n     *\n     * @returns {String} The current FOV axis value.\n     */\n    get fovAxis(): string {\n        return this.#state.fovAxis;\n    }\n\n    /**\n     * Sets the PerspectiveProjection's FOV axis.\n     *\n     * Options are ````\"x\"````, ````\"y\"```` or ````\"min\"````, to use the minimum axis. \n     *\n     * Default value ````\"min\"````.\n     *\n     * @param value New FOV axis value.\n     */\n    set fovAxis(value: string) {\n        value = value || \"min\";\n        if (this.#state.fovAxis === value) {\n            return;\n        }\n        if (value !== \"x\" && value !== \"y\" && value !== \"min\") {\n            this.error(\"Unsupported value for 'fovAxis': \" + value + \" - defaulting to 'min'\");\n            value = \"min\";\n        }\n        this.#state.fovAxis = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the PerspectiveProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @returns The PerspectiveProjection's near plane position.\n     */\n    get near(): number {\n        return this.#state.near;\n    }\n\n    /**\n     * Sets the position of the PerspectiveProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param value New PerspectiveProjection near plane position.\n     */\n    set near(value: number) {\n        if (this.#state.near === value) {\n            return;\n        }\n        this.#state.near = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of this PerspectiveProjection's far plane on the positive View-space Z-axis.\n     *\n     * @return {Number} The PerspectiveProjection's far plane position.\n     */\n    get far(): number {\n        return this.#state.far;\n    }\n\n    /**\n     * Sets the position of this PerspectiveProjection's far plane on the positive View-space Z-axis.\n     *\n     * @param value New PerspectiveProjection far plane position.\n     */\n    set far(value: number) {\n        if (this.#state.far === value) {\n            return;\n        }\n        this.#state.far = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the PerspectiveProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns  The PerspectiveProjection's projection matrix.\n     */\n    get projMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#state.projMatrix;\n    }\n\n    /**\n     * Gets the inverse of {@link PerspectiveProjection.projMatrix}.\n     *\n     * @returns  The inverse of {@link PerspectiveProjection.projMatrix}.\n     */\n    get inverseProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#inverseMatrixDirty) {\n            inverseMat4(this.#state.projMatrix, this.#state.inverseProjMatrix);\n            this.#inverseMatrixDirty = false;\n        }\n        return this.#state.inverseProjMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link PerspectiveProjection.projMatrix}.\n     *\n     * @returns  The transpose of {@link PerspectiveProjection.projMatrix}.\n     */\n    get transposedProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#transposedProjMatrixDirty) {\n            transposeMat4(this.#state.projMatrix, this.#state.transposedProjMatrix);\n            this.#transposedProjMatrixDirty = false;\n        }\n        return this.#state.transposedProjMatrix;\n    }\n\n    /**\n     * @private\n     */\n    clean() {\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n        const boundary = this.camera.view.boundary;\n        const aspect = boundary[WIDTH_INDEX] / boundary[HEIGHT_INDEX];\n        const fovAxis = this.#state.fovAxis;\n        let fov = this.#state.fov;\n        if (fovAxis === \"x\" || (fovAxis === \"min\" && aspect < 1) || (fovAxis === \"max\" && aspect > 1)) {\n            fov = fov / aspect;\n        }\n        fov = Math.min(fov, 120);\n        perspectiveMat4(fov * (Math.PI / 180.0), aspect, this.#state.near, this.#state.far, this.#state.projMatrix);\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n        this.camera.view.redraw();\n        this.onProjMatrix.dispatch(this, this.#state.projMatrix);\n    }\n\n    /**\n     * Un-projects the given View-space coordinates and Screen-space depth, using this PerspectiveProjection projection.\n     *\n     * @param canvasPos Inputs 2D View-space coordinates.\n     * @param screenZ Inputs Screen-space Z coordinate.\n     * @param screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param viewPos Outputs un-projected 3D View-space coordinates.\n     * @param worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(canvasPos: FloatArrayParam, screenZ: number, screenPos: FloatArrayParam, viewPos: FloatArrayParam, worldPos: FloatArrayParam): FloatArrayParam {\n\n        const canvasElement = this.camera.view.canvasElement;\n        const halfViewWidth = canvasElement.offsetWidth / 2.0;\n        const halfViewHeight = canvasElement.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfViewWidth) / halfViewWidth;\n        screenPos[1] = (canvasPos[1] - halfViewHeight) / halfViewHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        mulMat4v4(this.inverseProjMatrix, screenPos, viewPos);\n        mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this.camera.view.onBoundary.unsubscribe(this.#onViewBoundary);\n        this.onProjMatrix.clear();\n    }\n}\n","\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport type {Camera} from \"./Camera\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {OrthoProjectionType} from \"@xeokit/constants\";\nimport {inverseMat4, createMat4, mulMat4v4, mulVec3Scalar, orthoMat4c, transposeMat4} from \"@xeokit/matrix\";\n\n/**\n * Orthographic projection configuration for a {@link @xeokit/viewer!Camera} .\n *\n * * Located at {@link Camera.orthoProjection}.\n * * Works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are implicitly\n * indicated with a single {@link OrthoProjection.scale} property, which causes the frustum to be symmetrical on X and Y axis, large enough to\n * contain the number of units given by {@link OrthoProjection.scale}.\n * * {@link OrthoProjection.near} and {@link OrthoProjection.far} indicated the distances to the clipping planes.\n * * {@link OrthoProjection.onProjMatrix} will fire an event whenever {@link OrthoProjection.projMatrix} updates, which indicates that one or more other properties have updated.\n */\nexport class OrthoProjection extends Component {\n\n    /**\n     * The Camera this OrthoProjection belongs to.\n     */\n    public readonly camera: Camera;\n\n    /**\n     * Emits an event each time {@link OrthoProjection.projMatrix} updates.\n     *\n     * @event\n     */\n    readonly onProjMatrix: EventEmitter<OrthoProjection, FloatArrayParam>;\n\n    /**\n     * The type of this projection.\n     */\n    static readonly type: number = OrthoProjectionType;\n\n    #state: {\n        far: number;\n        near: number;\n        scale: number;\n        projMatrix: FloatArrayParam;\n        inverseProjMatrix: FloatArrayParam;\n        transposedProjMatrix: FloatArrayParam;\n    };\n\n    #inverseMatrixDirty: boolean;\n    #transposedProjMatrixDirty: boolean;\n    #onViewBoundary: any;\n\n    /**\n     * @private\n     */\n    constructor(camera: Camera, cfg: {\n        far?: number;\n        near?: number;\n        scale?: number;\n    } = {}) {\n\n        super(camera, cfg);\n\n        this.camera = camera;\n\n        this.#state = {\n            near: cfg.near || 0.1,\n            far: cfg.far || 2000.0,\n            scale: cfg.scale || 1.0,\n            projMatrix: createMat4(),\n            inverseProjMatrix: createMat4(),\n            transposedProjMatrix: createMat4()\n        };\n\n        this.onProjMatrix = new EventEmitter(new EventDispatcher<OrthoProjection, FloatArrayParam>());\n\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n\n        this.#onViewBoundary = this.camera.view.onBoundary.subscribe(() => {\n            this.setDirty();\n        });\n    }\n\n    /**\n     * Gets scale factor for this OrthoProjection's extents on X and Y axis.\n     *\n     * Clamps to minimum value of ````0.01```.\n     *\n     * Default value is ````1.0````\n     *\n     * returns New OrthoProjection scale value.\n     */\n    get scale(): number {\n        return this.#state.scale;\n    }\n\n    /**\n     * Sets scale factor for this OrthoProjection's extents on X and Y axis.\n     *\n     * Clamps to minimum value of ````0.01```.\n     *\n     * Default value is ````1.0````\n     * @param value New scale value.\n     */\n    set scale(value: number) {\n        if (value <= 0) {\n            value = 0.01;\n        }\n        this.#state.scale = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the OrthoProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * returns New OrthoProjection near plane position.\n     */\n    get near(): number {\n        return this.#state.near;\n    }\n\n    /**\n     * Sets the position of the OrthoProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param value New OrthoProjection near plane position.\n     */\n    set near(value: number) {\n        if (this.#state.near === value) {\n            return;\n        }\n        this.#state.near = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the OrthoProjection's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````10000.0````.\n     *\n     * returns New far ortho plane position.\n     */\n    get far(): number {\n        return this.#state.far;\n    }\n\n    /**\n     * Sets the position of the OrthoProjection's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````2000.0````.\n     *\n     * @param value New far ortho plane position.\n     */\n    set far(value: number) {\n        if (this.#state.far === value) {\n            return;\n        }\n        this.#state.far = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the OrthoProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns  The OrthoProjection's projection matrix.\n     */\n    get projMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#state.projMatrix;\n    }\n\n    /**\n     * Gets the inverse of {@link OrthoProjection.projMatrix}.\n     *\n     * @returns  The inverse of {@link OrthoProjection.projMatrix}.\n     */\n    get inverseProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#inverseMatrixDirty) {\n            inverseMat4(this.#state.projMatrix, this.#state.inverseProjMatrix);\n            this.#inverseMatrixDirty = false;\n        }\n        return this.#state.inverseProjMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link OrthoProjection.projMatrix}.\n     *\n     * @returns  The transpose of {@link OrthoProjection.projMatrix}.\n     */\n    get transposedProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#transposedProjMatrixDirty) {\n            transposeMat4(this.#state.projMatrix, this.#state.transposedProjMatrix);\n            this.#transposedProjMatrixDirty = false;\n        }\n        return this.#state.transposedProjMatrix;\n    }\n\n    /**\n     * @private\n     */\n    clean() {\n\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n\n        const view = this.camera.view;\n        const scale = this.#state.scale;\n        const halfSize = 0.5 * scale;\n\n        const boundary = view.boundary;\n        const boundaryWidth = boundary[WIDTH_INDEX];\n        const boundaryHeight = boundary[HEIGHT_INDEX];\n        const aspect = boundaryWidth / boundaryHeight;\n\n        let left;\n        let right;\n        let top;\n        let bottom;\n\n        if (boundaryWidth > boundaryHeight) {\n            left = -halfSize;\n            right = halfSize;\n            top = halfSize / aspect;\n            bottom = -halfSize / aspect;\n\n        } else {\n            left = -halfSize * aspect;\n            right = halfSize * aspect;\n            top = halfSize;\n            bottom = -halfSize;\n        }\n\n        orthoMat4c(left, right, bottom, top, this.#state.near, this.#state.far, this.#state.projMatrix);\n\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n\n        this.camera.view.redraw();\n\n        this.onProjMatrix.dispatch(this, this.#state.projMatrix);\n    }\n\n    /**\n     * Un-projects the given View-space coordinates, using this OrthoProjection projection.\n     *\n     * @param canvasPos Inputs 2D View-space coordinates.\n     * @param screenZ Inputs Screen-space Z coordinate.\n     * @param screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param viewPos Outputs un-projected 3D View-space coordinates.\n     * @param worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(\n        canvasPos: FloatArrayParam,\n        screenZ: number,\n        screenPos: FloatArrayParam,\n        viewPos: FloatArrayParam,\n        worldPos: FloatArrayParam): FloatArrayParam {\n\n        const canvas = this.camera.view.canvasElement;\n\n        const halfViewWidth = canvas.offsetWidth / 2.0;\n        const halfViewHeight = canvas.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfViewWidth) / halfViewWidth;\n        screenPos[1] = (canvasPos[1] - halfViewHeight) / halfViewHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        mulMat4v4(this.inverseProjMatrix, screenPos, viewPos);\n        mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this.camera.view.onBoundary.unsubscribe(this.#onViewBoundary);\n        this.onProjMatrix.clear();\n    }\n}\n\n","\nimport {EventDispatcher} from \"strongly-typed-events\";\n\nimport type {Camera} from \"./Camera\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {CustomProjectionType} from \"@xeokit/constants\";\nimport {identityMat4, inverseMat4, createMat4, mulMat4v4, mulVec3Scalar, transposeMat4} from \"@xeokit/matrix\";\n\n/**\n * Configures a custom projection for a {@link @xeokit/viewer!Camera} .\n *\n * * Located at {@link Camera.customProjection}.\n * * {@link CustomProjection.onProjMatrix} will fire an event whenever {@link CustomProjection.projMatrix} updates, which indicates that one or more other properties have updated.\n */\nclass CustomProjection extends Component {\n\n    /**\n     * The Camera this CustomProjection belongs to.\n     */\n    public readonly camera: Camera;\n\n    /**\n     * Emits an event each time {@link CustomProjection.projMatrix} updates.\n     *\n     * @event\n     */\n    readonly onProjMatrix: EventEmitter<CustomProjection, FloatArrayParam>;\n\n    /**\n     * The type of this projection.\n     */\n    static readonly type: number = CustomProjectionType;\n\n    #state: {\n        projMatrix: FloatArrayParam;\n        transposedProjMatrix: FloatArrayParam;\n        inverseProjMatrix: FloatArrayParam\n    };\n\n    #inverseProjMatrixDirty: boolean;\n    #transposedProjMatrixDirty: boolean;\n\n    /**\n     * @private\n     */\n    constructor(camera: Camera, cfg: {\n        projMatrix?: FloatArrayParam\n    } = {}) {\n\n        super(camera, cfg);\n\n        this.camera = camera;\n\n        this.#state = {\n            projMatrix: createMat4(cfg.projMatrix || identityMat4()),\n            inverseProjMatrix: createMat4(),\n            transposedProjMatrix: createMat4()\n        };\n\n        this.onProjMatrix = new EventEmitter(new EventDispatcher<CustomProjection, FloatArrayParam>());\n\n        this.#inverseProjMatrixDirty = true;\n        this.#transposedProjMatrixDirty = false;\n    }\n\n    /**\n     * Gets the CustomProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @return  New value for the CustomProjection's matrix.\n     */\n    get projMatrix(): FloatArrayParam {\n        return this.#state.projMatrix;\n    }\n\n    /**\n     * Sets the CustomProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @param projMatrix New value for the CustomProjection's matrix.\n     */\n    set projMatrix(projMatrix: FloatArrayParam) {\n        // @ts-ignore\n        this.#state.projMatrix.set(projMatrix);\n        this.#inverseProjMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n        this.setDirty();\n        this.camera.view.redraw();\n        this.onProjMatrix.dispatch(this, this.#state.projMatrix);\n    }\n\n    /**\n     * Gets the inverse of {@link CustomProjection.projMatrix}.\n     *\n     * @returns The inverse of {@link CustomProjection.projMatrix}.\n     */\n    get inverseProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#inverseProjMatrixDirty) {\n            inverseMat4(this.#state.projMatrix, this.#state.inverseProjMatrix);\n            this.#inverseProjMatrixDirty = false;\n        }\n        return this.#state.inverseProjMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link CustomProjection.projMatrix}.\n     *\n     * @returns The transpose of {@link CustomProjection.projMatrix}.\n     */\n    get transposedProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#transposedProjMatrixDirty) {\n            transposeMat4(this.#state.projMatrix, this.#state.transposedProjMatrix);\n            this.#transposedProjMatrixDirty = false;\n        }\n        return this.#state.transposedProjMatrix;\n    }\n\n    /**\n     * Un-projects the given View-space coordinates, using this CustomProjection.\n     *\n     * @param canvasPos Inputs 2D View-space coordinates.\n     * @param screenZ Inputs Screen-space Z coordinate.\n     * @param screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param viewPos Outputs un-projected 3D View-space coordinates.\n     * @param worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(\n        canvasPos: FloatArrayParam,\n        screenZ: number,\n        screenPos: FloatArrayParam,\n        viewPos: FloatArrayParam,\n        worldPos: FloatArrayParam) {\n        const canvasElement = this.camera.view.canvasElement;\n        const halfViewWidth = canvasElement.offsetWidth / 2.0;\n        const halfViewHeight = canvasElement.offsetHeight / 2.0;\n        screenPos[0] = (canvasPos[0] - halfViewWidth) / halfViewWidth;\n        screenPos[1] = (canvasPos[1] - halfViewHeight) / halfViewHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n        mulMat4v4(this.inverseProjMatrix, screenPos, viewPos);\n        mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n        mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this.onProjMatrix.clear();\n    }\n}\n\nexport {CustomProjection};","import{createVec3 as t,createMat4 as n,subVec3 as r,lenVec3 as e,createVec2 as o,mulMat4 as i}from\"@xeokit/matrix\";import{newFloatArray as u,MAX_DOUBLE as f,MIN_DOUBLE as a}from\"@xeokit/math\";import{decompressPoint3 as s}from\"@xeokit/compression\";var c=t(),v=t(),l=n();function h(t){return new Float64Array(t||6)}function m(t){return new Int16Array(t||6)}function p(t){return u(t||4)}function x(t){return u(t||32)}function d(t){return u(t||16)}function V(t,n,r,e){return u([t,n,r,e])}function w(t,n,r){var e;void 0===r&&(r=n);var o,i,u,f=n.length,a=t[0],s=t[1],c=t[2],v=t[3],l=t[4],h=t[5],m=t[6],p=t[7],x=t[8],d=t[9],V=t[10],w=t[11],g=t[12],k=t[13],y=t[14],M=t[15];for(e=0;e<f;e+=4)r[e+0]=a*(o=n[e+0])+l*(i=n[e+1])+x*(u=n[e+2])+g,r[e+1]=s*o+h*i+d*u+k,r[e+2]=c*o+m*i+V*u+y,r[e+3]=v*o+p*i+w*u+M;return r}function g(t,n){return t[0]<=n[0]&&n[3]<=t[3]&&t[1]<=n[1]&&t[2]<=n[2]}function k(t,n){return t[0]<=n[0]&&n[3]<=t[3]&&t[1]<=n[1]&&n[4]<=t[4]&&t[2]<=n[2]&&n[5]<=t[5]}var y,M,b,A=(y=u(3),M=u(3),b=u(3),function(t){return y[0]=t[0],y[1]=t[1],y[2]=t[2],M[0]=t[3],M[1]=t[4],M[2]=t[5],r(M,y,b),Math.abs(e(b))}),q=function(){var t=u(3),n=u(3),o=u(3);return function(i,u){t[0]=i[0],t[1]=i[1],t[2]=i[2],n[0]=i[3],n[1]=i[4],n[2]=i[5];var f=r(n,t,o),a=u[0]-i[0],s=i[3]-u[0],c=u[1]-i[1],v=i[4]-u[1],l=u[2]-i[2],h=i[5]-u[2];return f[0]+=a>s?a:s,f[1]+=c>v?c:v,f[2]+=l>h?l:h,Math.abs(e(f))}}();function F(t){return(t[3]-t[0])*(t[4]-t[1])*(t[5]-t[2])}function I(n,r){return void 0===r&&(r=t()),r[0]=(n[0]+n[3])/2,r[1]=(n[1]+n[4])/2,r[2]=(n[2]+n[5])/2,r}function j(t,n){return void 0===n&&(n=o()),n[0]=(t[2]+t[0])/2,n[1]=(t[3]+t[1])/2,n}function z(t){return void 0===t&&(t=h()),t[0]=f,t[1]=f,t[2]=f,t[3]=a,t[4]=a,t[5]=a,t}function B(t){return void 0===t&&(t=m()),t[0]=65535,t[1]=65535,t[2]=65535,t[3]=-65535,t[4]=-65535,t[5]=-65535,t}function C(t,n){return void 0===t&&(t=h()),void 0===n&&(n=x()),n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=1,n[4]=t[3],n[5]=t[1],n[6]=t[2],n[7]=1,n[8]=t[3],n[9]=t[4],n[10]=t[2],n[11]=1,n[12]=t[0],n[13]=t[4],n[14]=t[2],n[15]=1,n[16]=t[0],n[17]=t[1],n[18]=t[5],n[19]=1,n[20]=t[3],n[21]=t[1],n[22]=t[5],n[23]=1,n[24]=t[3],n[25]=t[4],n[26]=t[5],n[27]=1,n[28]=t[0],n[29]=t[4],n[30]=t[5],n[31]=1,n}function D(t,n){return t[0]>n[0]&&(t[0]=n[0]),t[1]>n[1]&&(t[1]=n[1]),t[2]>n[2]&&(t[2]=n[2]),t[3]<n[3]&&(t[3]=n[3]),t[4]<n[4]&&(t[4]=n[4]),t[5]<n[5]&&(t[5]=n[5]),t}function E(t,n){return t[0]>n[0]&&(t[0]=n[0]),t[1]>n[1]&&(t[1]=n[1]),t[3]<n[3]&&(t[3]=n[3]),t[4]<n[4]&&(t[4]=n[4]),t}function G(t,n){return t[0]>n[0]&&(t[0]=n[0]),t[1]>n[1]&&(t[1]=n[1]),t[2]>n[2]&&(t[2]=n[2]),t[3]<n[0]&&(t[3]=n[0]),t[4]<n[1]&&(t[4]=n[1]),t[5]<n[2]&&(t[5]=n[2]),t}function H(t,n){return t[0]>n[0]&&(t[0]=n[0]),t[1]>n[1]&&(t[1]=n[1]),t[3]<n[0]&&(t[3]=n[0]),t[4]<n[1]&&(t[4]=n[1]),t}function J(t,n){for(var r,e,o,i=0,u=n.length;i<u;i+=3)e=n[i+1],o=n[i+2],t[0]>(r=n[i])&&(t[0]=r),t[1]>e&&(t[1]=e),t[2]>o&&(t[2]=o),t[3]<r&&(t[3]=r),t[4]<e&&(t[4]=e),t[5]<o&&(t[5]=o);return t}function K(t,n){return void 0===n&&(n=x()),n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=1,n[4]=t[3],n[5]=t[1],n[6]=t[2],n[7]=1,n[8]=t[3],n[9]=t[4],n[10]=t[2],n[11]=1,n[12]=t[0],n[13]=t[4],n[14]=t[2],n[15]=1,n[16]=t[0],n[17]=t[1],n[18]=t[5],n[19]=1,n[20]=t[3],n[21]=t[1],n[22]=t[5],n[23]=1,n[24]=t[3],n[25]=t[4],n[26]=t[5],n[27]=1,n[28]=t[0],n[29]=t[4],n[30]=t[5],n[31]=1,n}var L,N=(L=u(3),function(t,n,r){n=n||h();for(var e,o,i,u=f,c=f,v=f,l=a,m=a,p=a,x=0,d=t.length;x<d;x+=3)r?(L[0]=t[x+0],L[1]=t[x+1],L[2]=t[x+2],s(L,r,L),e=L[0],o=L[1],i=L[2]):(e=t[x+0],o=t[x+1],i=t[x+2]),e<u&&(u=e),o<c&&(c=o),i<v&&(v=i),e>l&&(l=e),o>m&&(m=o),i>p&&(p=i);return n[0]=u,n[1]=c,n[2]=v,n[3]=l,n[4]=m,n[5]=p,n});function O(t,n){void 0===n&&(n=h());for(var r,e,o,i=f,u=f,s=f,c=a,v=a,l=a,m=0,p=t.length;m<p;m+=4)(r=t[m+0])<i&&(i=r),(e=t[m+1])<u&&(u=e),(o=t[m+2])<s&&(s=o),r>c&&(c=r),e>v&&(v=e),o>l&&(l=o);return n[0]=i,n[1]=u,n[2]=s,n[3]=c,n[4]=v,n[5]=l,n}function P(t,n){void 0===n&&(n=h());for(var r,e,o,i=f,u=f,s=f,c=a,v=a,l=a,m=0,p=t.length;m<p;m++)(r=t[m][0])<i&&(i=r),(e=t[m][1])<u&&(u=e),(o=t[m][2])<s&&(s=o),r>c&&(c=r),e>v&&(v=e),o>l&&(l=o);return n[0]=i,n[1]=u,n[2]=s,n[3]=c,n[4]=v,n[5]=l,n}function Q(n,r){void 0===r&&(r=t());for(var e=0,o=0,i=0,u=0,f=n.length;u<f;u+=3)e+=n[u+0],o+=n[u+1],i+=n[u+2];var a=n.length/3;return r[0]=e/a,r[1]=o/a,r[2]=i/a,r}var R=/*#__PURE__*/function(){function n(){this.testVertex=void 0,this.offset=void 0,this.normal=void 0,this.normal=t(),this.offset=0,this.testVertex=t()}return n.prototype.set=function(t,n,r,e){var o=1/Math.sqrt(t*t+n*n+r*r);this.normal[0]=t*o,this.normal[1]=n*o,this.normal[2]=r*o,this.offset=e*o,this.testVertex[0]=this.normal[0]>=0?1:0,this.testVertex[1]=this.normal[1]>=0?1:0,this.testVertex[2]=this.normal[2]>=0?1:0},n}(),S=1,T=2,U=3,W=function(){this.planes=void 0,this.planes=[new R,new R,new R,new R,new R,new R]};function X(t,n,r){var e=i(n,t,l),o=e[0],u=e[1],f=e[2],a=e[3],s=e[4],c=e[5],v=e[6],h=e[7],m=e[8],p=e[9],x=e[10],d=e[11],V=e[12],w=e[13],g=e[14],k=e[15];return(r=r||new W).planes[0].set(a-o,h-s,d-m,k-V),r.planes[1].set(a+o,h+s,d+m,k+V),r.planes[2].set(a-u,h-c,d-p,k-w),r.planes[3].set(a+u,h+c,d+p,k+w),r.planes[4].set(a-f,h-v,d-x,k-g),r.planes[5].set(a+f,h+v,d+x,k+g),r}function Y(t,n){var r=1,e=c,o=v;e[0]=n[0],e[1]=n[1],e[2]=n[2],o[0]=n[3],o[1]=n[4],o[2]=n[5];for(var i=[e,o],u=0;u<6;++u){var f=t.planes[u];if(f.normal[0]*i[f.testVertex[0]][0]+f.normal[1]*i[f.testVertex[1]][1]+f.normal[2]*i[f.testVertex[2]][2]+f.offset<0)return 3;f.normal[0]*i[1-f.testVertex[0]][0]+f.normal[1]*i[1-f.testVertex[1]][1]+f.normal[2]*i[1-f.testVertex[2]][2]+f.offset<0&&(r=2)}return r}function Z(t,n){return 2}function $(t,n,r){return!0}function _(t,n,r,e){return!0}function tt(t,n,r){return!0}function nt(t,n){return!0}function rt(t,n){return!0}function et(t,n,r){return!1}function ot(t,n,r){return!1}function it(t,n){for(var r=t[0],e=t[1],o=t[2],i=t[3],u=t[4],f=t[5],a=0,s=n.length;a<s;a+=3){var c=n[a];if(r<=c&&c<=i){var v=n[a+1];if(e<=v&&v<=u){var l=n[a+2];if(o<=l&&l<=f)return!0}}}return!1}function ut(t,n){return t[0]<=n[0]&&n[0]<=t[3]&&t[1]<=n[1]&&n[1]<=t[4]&&t[2]<=n[2]&&n[2]<=t[5]}function ft(t,n){return t[0]<=n[0]&&n[0]<=t[3]&&t[1]<=n[1]&&n[1]<=t[4]}export{C as AABB3ToOBB3,K as ABB3ToOBB3,W as Frustum3,R as FrustumPlane3,S as INSIDE,T as INTERSECT,O as OBB3ToAABB3,U as OUTSIDE,z as collapseAABB3,B as collapseAABB3Int16,g as containsAABB2,ft as containsAABB2Point2,k as containsAABB3,ut as containsAABB3Point3,p as createAABB2,h as createAABB3,m as createAABB3Int16,d as createOBB2,x as createOBB3,V as createSphere3,E as expandAABB2,H as expandAABB2Point2,D as expandAABB3,G as expandAABB3Point3,J as expandAABB3Points3,j as getAABB2Center,F as getAABB3Area,I as getAABB3Center,A as getAABB3Diag,q as getAABB3DiagPoint,Q as getPositions3Center,ot as intersectAABB3Lines3,it as intersectAABB3Positions3,et as intersectAABB3Triangles3,Z as intersectAABB3s,Y as intersectFrustum3AABB3,tt as intersectFrustum3Lines3,rt as intersectFrustum3Point3,nt as intersectFrustum3Positions3,_ as intersectFrustum3Triangle3,$ as intersectFrustum3Triangles3,P as points3ToAABB3,N as positions3ToAABB3,X as setFrustum3,w as transformOBB3};\n//# sourceMappingURL=index.es.map\n","import {EventDispatcher} from \"strongly-typed-events\";\nimport {\n    addVec3,\n    createMat4,\n    createVec3,\n    cross3Vec3,\n    dotVec3,\n    identityMat4,\n    inverseMat4,\n    lenVec3,\n    lookAtMat4v,\n    mulMat4,\n    mulVec3Scalar,\n    normalizeVec3,\n    rotationMat4v,\n    subVec3,\n    transformPoint3,\n    transposeMat4\n} from \"@xeokit/matrix\";\n\nimport {PerspectiveProjection} from './PerspectiveProjection';\nimport {OrthoProjection} from './OrthoProjection';\nimport type {FrustumProjection} from './FrustumProjection';\nimport {CustomProjection} from './CustomProjection';\nimport type {View} from \"./View\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport {DEGTORAD, FloatArrayParam} from \"@xeokit/math\";\nimport {\n    CustomProjectionType,\n    FrustumProjectionType,\n    OrthoProjectionType,\n    PerspectiveProjectionType\n} from \"@xeokit/constants\";\nimport {Frustum3, setFrustum3} from \"@xeokit/boundaries\";\n\n\nconst tempVec3 = createVec3();\nconst tempVec3b = createVec3();\nconst tempVec3c = createVec3();\nconst tempVec3d = createVec3();\nconst tempVec3e = createVec3();\nconst tempVec3f = createVec3();\nconst tempMat = createMat4();\nconst tempMatb = createMat4();\nconst eyeLookVec = createVec3();\nconst eyeLookVecNorm = createVec3();\nconst eyeLookOffset = createVec3();\nconst offsetEye = createVec3();\n\n\n/**\n * Controls the viewpoint and projection for a {@link @xeokit/viewer!View}.\n *\n * ## Summary\n *\n * * Located at {@link View.camera}\n * * Views are located at {@link Viewer.views}\n * * Controls camera viewing and projection transforms\n * * Provides methods to pan, zoom and orbit\n * * Dynamically configurable World-space axis\n * * Has {@link PerspectiveProjection}, {@link OrthoProjection} and {@link FrustumProjection} and {@link CustomProjection}, which you can dynamically switch between\n * * Switchable gimbal lock\n * * Can be flown to look at targets using the View's {@link CameraFlightAnimation}\n * * Can be animated along a path using a {@link CameraPathAnimation}\n *\n * ## Getting a View's Camera\n *\n * Let's create a {@link @xeokit/viewer!Viewer} with a single {@link @xeokit/viewer!View}, from which we'll get a Camera:\n *\n * ````javascript\n * const viewer = new Viewer();\n *\n * const view = new View(viewer, {\n *      canvasId: \"myCanvas1\"\n * });\n *\n * const camera = view.camera;\n * ````\n *\n * ## Setting the Camera Position\n *\n * Get and set the Camera's absolute position:\n *\n * ````javascript\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n * ````\n *\n * ## Camera View and Projection Matrices\n *\n * The Camera's *view matrix* transforms coordinates from World-space to View-space:\n *\n * ````javascript\n * var viewMatrix = camera.viewMatrix;\n * ````\n *\n * {@link Camera.onViewMatrix} fires whenever {@link Camera.viewMatrix} updates:\n *\n * ````javascript\n * camera.onViewMatrix.subscribe((camera, matrix) => { ... });\n * ````\n *\n * ## Rotating the Camera\n *\n * Orbiting the {@link Camera.look} position:\n *\n * ````javascript\n * camera.orbitYaw(20.0);\n * camera.orbitPitch(10.0);\n * ````\n *\n * Perform a *first-person* rotation, in which we rotate {@link Camera.look} and {@link Camera.up} about {@link Camera.eye}:\n *\n * ````javascript\n * camera.yaw(5.0);\n * camera.pitch(-10.0);\n * ````\n *\n * ## Panning the Camera\n *\n * Pan along the Camera's local axis (ie. left/right, up/down, forward/backward):\n *\n * ````javascript\n * camera.pan([-20, 0, 10]);\n * ````\n *\n * ## Zooming the Camera\n *\n * Zoom to vary distance between {@link Camera.eye} and {@link Camera.look}:\n *\n * ````javascript\n * camera.zoom(-5); // Move five units closer\n * ````\n *\n * Get the current distance between {@link Camera.eye} and {@link Camera.look}:\n *\n * ````javascript\n * var distance = camera.eyeLookDist;\n * ````\n *\n * ## Projection\n *\n * The Camera has a Component to manage each projection type, which are: {@link PerspectiveProjection}, {@link OrthoProjection}\n * and {@link FrustumProjection} and {@link CustomProjection}.\n *\n * You can configure those components at any time, regardless of which is currently active:\n *\n * The Camera has a {@link PerspectiveProjection} to manage perspective\n * ````javascript\n *\n * // Set some properties on PerspectiveProjection\n * camera.perspectiveProjection.near = 0.4;\n * camera.perspectiveProjection.fov = 45;\n *\n * // Set some properties on OrthoProjection\n * camera.orthoProjection.near = 0.8;\n * camera.orthoProjection.far = 1000;\n *\n * // Set some properties on FrustumProjection\n * camera.frustumProjection.left = -1.0;\n * camera.frustumProjection.right = 1.0;\n * camera.frustumProjection.far = 1000.0;\n *\n * // Set the matrix property on CustomProjection\n * camera.customProjection.projMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n *\n * // Switch between the projection types\n * Camera.projectionType = PerspectiveProjectionType; // Switch to perspective\n * Camera.projectionType = FrustumProjectiontype; // Switch to frustum\n * Camera.projectionType = OrthoProjectionType; // Switch to ortho\n * Camera.projectionType = CustomProjectionType; // Switch to custom\n * ````\n *\n * Camera provides the projection matrix for the currently active projection in {@link Camera.projMatrix}.\n *\n * Get the projection matrix:\n *\n * ````javascript\n * var projMatrix = camera.projMatrix;\n * ````\n *\n * Listen for projection matrix updates:\n *\n * ````javascript\n * camera.onProjMatrix((camera, matrix) => { ... });\n * ````\n *\n * ## Configuring World up direction\n *\n * We can dynamically configure the directions of the World-space coordinate system.\n *\n * Setting the +Y axis as World \"up\", +X as right and -Z as forwards (convention in some modeling software):\n *\n * ````javascript\n * camera.worldAxis = [\n *     1, 0, 0,    // Right\n *     0, 1, 0,    // Up\n *     0, 0,-1     // Forward\n * ];\n * ````\n *\n * Setting the +Z axis as World \"up\", +X as right and -Y as \"up\" (convention in most CAD and BIM viewers):\n *\n * ````javascript\n * camera.worldAxis = [\n *     1, 0, 0, // Right\n *     0, 0, 1, // Up\n *     0,-1, 0  // Forward\n * ];\n * ````\n *\n * The Camera has read-only convenience properties that provide each axis individually:\n *\n * ````javascript\n * var worldRight = camera.worldRight;\n * var worldForward = camera.worldForward;\n * var worldUp = camera.worldUp;\n * ````\n *\n * ## Gimbal locking\n *\n * By default, the Camera locks yaw rotation to pivot about the World-space \"up\" axis. We can dynamically lock and unlock that at any time:\n *\n * ````javascript\n * camera.gimbalLock = false; // Yaw rotation now happens about Camera's local Y-axis\n * camera.gimbalLock = true; // Yaw rotation now happens about World's \"up\" axis\n * ````\n *\n * See: <a href=\"https://en.wikipedia.org/wiki/Gimbal_lock\">https://en.wikipedia.org/wiki/Gimbal_lock</a>\n */\nclass Camera extends Component {\n\n    /**\n     * The View to which this Camera belongs.\n     *\n     * @property view\n     * @type {View}\n     * @final\n     */\n    public readonly view: View;\n\n    /**\n     * The perspective projection.\n     *\n     * The Camera uses this while {@link Camera.projectionType} equals {@link PerspectiveProjectionType}.\n     */\n    public readonly perspectiveProjection: PerspectiveProjection;\n\n    /**\n     * The orthographic projection.\n     *\n     * The Camera uses this while {@link Camera.projectionType} equals {@link OrthoProjectionType}.\n     */\n    public readonly orthoProjection: OrthoProjection;\n\n    /**\n     * The frustum projection.\n     *\n     * The Camera uses this while {@link Camera.projectionType} equals {@link FrustumProjectionType}.\n     */\n    public readonly frustumProjection: FrustumProjection;\n\n    /**\n     * The custom projection.\n     *\n     * The Camera uses this while {@link Camera.projectionType} equals {@link CustomProjectionType}.\n     */\n    public readonly customProjection: CustomProjection;\n\n    /**\n     * Emits an event each time {@link Camera.projectionType} updates.\n     *\n     * ````javascript\n     * myView.camera.onProjectionType.subscribe((camera, projType) => { ... });\n     * ````\n     *\n     * @event\n     */\n    readonly onProjectionType: EventEmitter<Camera, number>;\n\n    /**\n     * Emits an event each time {@link Camera.viewMatrix} updates.\n     *\n     * ````javascript\n     * myView.camera.onViewMatrix.subscribe((camera, viewMatrix) => { ... });\n     * ````\n     *\n     * @event\n     */\n    readonly onViewMatrix: EventEmitter<Camera, FloatArrayParam>;\n\n    /**\n     * Emits an event each time {@link Camera.projMatrix} updates.\n     *\n     * ````javascript\n     * myView.camera.onProjMatrix.subscribe((camera, projMatrix) => { ... });\n     * ````\n     *\n     * @event\n     */\n    readonly onProjMatrix: EventEmitter<Camera, FloatArrayParam>;\n\n    /**\n     * Emits an event each time {@link Camera.worldAxis} updates.\n     *\n     * ````javascript\n     * myView.camera.onWorldAxis.subscribe((camera, worldAxis) => { ... });\n     * ````\n     *\n     * @event\n     */\n    readonly onWorldAxis: EventEmitter<Camera, FloatArrayParam>;\n\n    /**\n     * Emits an event each time {@link Camera.frustum} updates.\n     *\n     * ````javascript\n     * myView.camera.onFrustum.subscribe((camera, frustum) => { ... });\n     * ````\n     *\n     * @event\n     */\n    readonly onFrustum: EventEmitter<Camera, Frustum3>;\n\n    readonly #state: {\n        deviceMatrix: FloatArrayParam,\n        viewNormalMatrix: FloatArrayParam,\n        hasDeviceMatrix: boolean,\n        viewMatrix: FloatArrayParam,\n        inverseViewMatrix: FloatArrayParam,\n        eye: FloatArrayParam,\n        look: FloatArrayParam,\n        up: FloatArrayParam,\n        worldAxis: FloatArrayParam,\n        worldUp: FloatArrayParam,\n        worldRight: FloatArrayParam,\n        worldForward: FloatArrayParam,\n        gimbalLock: boolean,\n        constrainPitch: boolean,\n        projectionType: number\n    };\n\n    /**\n     * The viewing frustum.\n     */\n    #frustum: Frustum3;\n    #activeProjection: PerspectiveProjection | OrthoProjection | FrustumProjection | CustomProjection;\n\n    /**\n     * @private\n     */\n    constructor(view: View, cfg: {\n        eye?: FloatArrayParam;\n        look?: FloatArrayParam,\n        up?: FloatArrayParam;\n        deviceMatrix?: FloatArrayParam;\n        gimbalLock?: boolean;\n        worldAxis?: FloatArrayParam;\n        constrainPitch?: boolean;\n        projectionType?: number\n    } = {}) {\n\n        super(view, cfg);\n\n        this.onProjectionType = new EventEmitter(new EventDispatcher<Camera, number>());\n        this.onViewMatrix = new EventEmitter(new EventDispatcher<Camera, FloatArrayParam>());\n        this.onProjMatrix = new EventEmitter(new EventDispatcher<Camera, FloatArrayParam>());\n        this.onWorldAxis = new EventEmitter(new EventDispatcher<Camera, FloatArrayParam>());\n        this.onFrustum = new EventEmitter(new EventDispatcher<Camera, Frustum3>());\n\n        this.view = view;\n\n        this.#state = {\n            eye: createVec3(cfg.eye || [0, 0, 10]),\n            look: createVec3(cfg.look || [0, 0, 0]),\n            up: createVec3(cfg.up || [0, 1, 0]),\n            worldUp: createVec3([0, 1, 0]),\n            worldRight: createVec3([1, 0, 0]),\n            worldForward: createVec3([0, 0, -1]),\n            worldAxis: new Float32Array(cfg.worldAxis || [1, 0, 0, 0, 1, 0, 0, 0, 1]),\n            gimbalLock: cfg.gimbalLock !== false,\n            constrainPitch: cfg.constrainPitch === true,\n            projectionType: cfg.projectionType || PerspectiveProjectionType,\n            deviceMatrix: cfg.deviceMatrix ? createMat4(cfg.deviceMatrix) : identityMat4(),\n            hasDeviceMatrix: !!cfg.deviceMatrix,\n            viewMatrix: createMat4(),\n            viewNormalMatrix: createMat4(),\n            inverseViewMatrix: createMat4()\n        };\n\n        this.#frustum = new Frustum3();\n\n        this.perspectiveProjection = new PerspectiveProjection(this);\n        this.orthoProjection = new OrthoProjection(this);\n        this.customProjection = new CustomProjection(this);\n\n        this.#activeProjection = this.perspectiveProjection;\n\n        this.perspectiveProjection.onProjMatrix.subscribe(() => {\n            if (this.#state.projectionType === PerspectiveProjectionType) {\n                this.onProjMatrix.dispatch(this, this.perspectiveProjection.projMatrix);\n            }\n        });\n\n        this.orthoProjection.onProjMatrix.subscribe(() => {\n            if (this.#state.projectionType === OrthoProjectionType) {\n                this.onProjMatrix.dispatch(this, this.orthoProjection.projMatrix);\n            }\n        });\n\n        this.frustumProjection.onProjMatrix.subscribe(() => {\n            if (this.#state.projectionType === FrustumProjectionType) {\n                this.onProjMatrix.dispatch(this, this.frustumProjection.projMatrix);\n            }\n        });\n\n        this.customProjection.onProjMatrix.subscribe(() => {\n            if (this.#state.projectionType === CustomProjectionType) {\n                this.onProjMatrix.dispatch(this, this.customProjection.projMatrix);\n            }\n        });\n    }\n\n    /**\n     * Gets the currently active projection for this Camera.\n     *\n     * The currently active project is selected with {@link Camera.projectionType}.\n     *\n     * @returns {PerspectiveProjection|OrthoProjection|FrustumProjection|CustomProjection} The currently active projection is active.\n     */\n    get project(): PerspectiveProjection | OrthoProjection | FrustumProjection | CustomProjection {\n        return this.#activeProjection;\n    }\n\n    /**\n     * Gets the position of the Camera's eye.\n     *\n     * Default vale is ````[0,0,10]````.\n     *\n     * @type {Number[]} New eye position.\n     */\n    get eye(): FloatArrayParam {\n        return this.#state.eye;\n    }\n\n    /**\n     * Sets the position of the Camera's eye.\n     *\n     * Default value is ````[0,0,10]````.\n     *\n     * @emits \"eye\" event on change, with the value of this property.\n     * @type {Number[]} New eye position.\n     */\n    set eye(eye: FloatArrayParam) {\n        // @ts-ignore\n        this.#state.eye.set(eye);\n        this.setDirty(); // Ensure matrix built on next \"tick\"\n    }\n\n    /**\n     * Gets the position of this Camera's point-of-interest.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @returns {Number[]} Camera look position.\n     */\n    get look(): FloatArrayParam {\n        return this.#state.look;\n    }\n\n    /**\n     * Sets the position of this Camera's point-of-interest.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @param look Camera look position.\n     */\n    set look(look: FloatArrayParam) {\n        // @ts-ignore\n        this.#state.look.set(look);\n        this.setDirty(); // Ensure matrix built on next \"tick\"\n    }\n\n    /**\n     * Gets the direction of this Camera's {@link Camera.up} vector.\n     *\n     * @returns {Number[]} Direction of \"up\".\n     */\n    get up(): FloatArrayParam {\n        return this.#state.up;\n    }\n\n    /**\n     * Sets the direction of this Camera's {@link Camera.up} vector.\n     *\n     * @param up Direction of \"up\".\n     */\n    set up(up: FloatArrayParam) {\n        // @ts-ignore\n        this.#state.up.set(up);\n        this.setDirty();\n    }\n\n    /**\n     * Gets the direction of World-space \"up\".\n     *\n     * This is set by {@link Camera.worldAxis}.\n     *\n     * Default value is ````[0,1,0]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldUp(): FloatArrayParam {\n        return this.#state.worldUp;\n    }\n\n    /**\n     * Gets the direction of World-space \"right\".\n     *\n     * This is set by {@link Camera.worldAxis}.\n     *\n     * Default value is ````[1,0,0]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldRight(): FloatArrayParam {\n        return this.#state.worldRight;\n    }\n\n    /**\n     * Gets the direction of World-space \"forwards\".\n     *\n     * This is set by {@link Camera.worldAxis}.\n     *\n     * Default value is ````[0,0,1]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldForward(): FloatArrayParam {\n        return this.#state.worldForward;\n    }\n\n    /**\n     * Gets whether to prevent camera from being pitched upside down.\n     *\n     * The camera is upside down when the angle between {@link Camera.up} and {@link Camera.worldUp} is less than one degree.\n     *\n     * Default value is ````false````.\n     *\n     * @returns {Boolean} ````true```` if pitch rotation is currently constrained.\n     */\n    get constrainPitch(): boolean {\n        return this.#state.constrainPitch;\n    }\n\n    /**\n     * Sets whether to prevent camera from being pitched upside down.\n     *\n     * The camera is upside down when the angle between {@link Camera.up} and {@link Camera.worldUp} is less than one degree.\n     *\n     * Default value is ````false````.\n     *\n     * @param value Set ````true```` to contrain pitch rotation.\n     */\n    set constrainPitch(value: boolean) {\n        this.#state.constrainPitch = value;\n    }\n\n    /**\n     * Gets whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n     *\n     * @returns {Boolean} Returns ````true```` if gimbal is locked.\n     */\n    get gimbalLock(): boolean {\n        return this.#state.gimbalLock;\n    }\n\n    /**\n     * Sets whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n     *\n     * @params {Boolean} gimbalLock Set true to lock gimbal.\n     */\n    set gimbalLock(value: boolean) {\n        this.#state.gimbalLock = value;\n    }\n\n    /**\n     * Gets the up, right and forward axis of the World coordinate system.\n     *\n     * Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n     *\n     * Default axis is ````[1, 0, 0, 0, 1, 0, 0, 0, 1]````\n     *\n     * @returns {Number[]} The current World coordinate axis.\n     */\n    get worldAxis(): FloatArrayParam {\n        return this.#state.worldAxis;\n    }\n\n    /**\n     * Sets the up, right and forward axis of the World coordinate system.\n     *\n     * Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n     *\n     * Default axis is ````[1, 0, 0, 0, 1, 0, 0, 0, 1]````\n     *\n     * @param axis The new Wworld coordinate axis.\n     */\n    set worldAxis(axis: FloatArrayParam) {\n        const state = this.#state;\n        // @ts-ignore\n        state.worldAxis.set(axis);\n        state.worldRight[0] = state.worldAxis[0];\n        state.worldRight[1] = state.worldAxis[1];\n        state.worldRight[2] = state.worldAxis[2];\n        state.worldUp[0] = state.worldAxis[3];\n        state.worldUp[1] = state.worldAxis[4];\n        state.worldUp[2] = state.worldAxis[5];\n        state.worldForward[0] = state.worldAxis[6];\n        state.worldForward[1] = state.worldAxis[7];\n        state.worldForward[2] = state.worldAxis[8];\n        this.onWorldAxis.dispatch(this, state.worldAxis);\n    }\n\n    /**\n     * Gets an optional matrix to premultiply into {@link Camera.projMatrix} matrix.\n     *\n     * @returns {Number[]} The matrix.\n     */\n    get deviceMatrix(): FloatArrayParam {\n        // @ts-ignore\n        return this.#state.deviceMatrix;\n    }\n\n    /**\n     * Sets an optional matrix to premultiply into {@link Camera.projMatrix} matrix.\n     *\n     * This is intended to be used for stereo rendering with WebVR etc.\n     *\n     * @param matrix The matrix.\n     */\n    set deviceMatrix(matrix: FloatArrayParam) {\n        // @ts-ignore\n        this.#state.deviceMatrix.set(matrix || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        this.#state.hasDeviceMatrix = !!matrix;\n        this.setDirty();\n    }\n\n    /**\n     * Gets if the World-space X-axis is \"up\".\n     * @returns {boolean}\n     */\n    get xUp(): boolean {\n        return this.#state.worldUp[0] > this.#state.worldUp[1] && this.#state.worldUp[0] > this.#state.worldUp[2];\n    }\n\n    /**\n     * Gets if the World-space Y-axis is \"up\".\n     * @returns {boolean}\n     */\n    get yUp(): boolean {\n        return this.#state.worldUp[1] > this.#state.worldUp[0] && this.#state.worldUp[1] > this.#state.worldUp[2];\n    }\n\n    /**\n     * Gets if the World-space Z-axis is \"up\".\n     * @returns {boolean}\n     */\n    get zUp(): boolean {\n        return this.#state.worldUp[2] > this.#state.worldUp[0] && this.#state.worldUp[2] > this.#state.worldUp[1];\n    }\n\n    /**\n     * Gets distance from {@link Camera.look} to {@link Camera.eye}.\n     *\n     * @returns {Number} The distance.\n     */\n    get eyeLookDist(): number {\n        return lenVec3(subVec3(this.#state.look, this.#state.eye, tempVec3));\n    }\n\n    /**\n     * Gets the Camera's viewing transformation matrix.\n     *\n     * @returns {Number[]} The viewing transform matrix.\n     */\n    get viewMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#state.viewMatrix;\n    }\n\n    /**\n     * Gets the inverse of the Camera's viewing transform matrix.\n     *\n     * @returns {Number[]} The inverse viewing transform matrix.\n     */\n    get inverseViewMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#state.inverseViewMatrix;\n    }\n\n    /**\n     * Gets the Camera's projection transformation projMatrix.\n     *\n     * @returns {Number[]} The projection matrix.\n     */\n    get projMatrix(): FloatArrayParam {\n        // @ts-ignore\n        return this.#activeProjection.projMatrix;\n    }\n\n    /**\n     * Gets the Camera's 3D World-space viewing frustum.\n     *\n     * @returns {Frustum3} The frustum.\n     */\n    get frustum() {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#frustum;\n    }\n\n    /**\n     * Gets the active projection type.\n     *\n     * Possible values are ````PerspectiveProjectionType````, ````OrthoProjectionType````, ````\"frustum\"```` and ````\"customProjection\"````.\n     *\n     * Default value is ````PerspectiveProjectionType````.\n     *\n     * @returns {number} Identifies the active projection type.\n     */\n    get projectionType(): number {\n        return this.#state.projectionType;\n    }\n\n    /**\n     * Sets the active projection type.\n     *\n     * Accepted values are ````PerspectiveProjectionType````, ````OrthoProjectionType````, ````\"frustum\"```` and ````\"customProjection\"````.\n     *\n     * Default value is ````PerspectiveProjectionType````.\n     *\n     * @param value Identifies the active projection type.\n     */\n    set projectionType(value: number | undefined) {\n        value = value || PerspectiveProjectionType;\n        if (this.#state.projectionType === value) {\n            return;\n        }\n        if (value === PerspectiveProjectionType) {\n            this.#activeProjection = this.perspectiveProjection;\n        } else if (value === OrthoProjectionType) {\n            this.#activeProjection = this.orthoProjection;\n        } else if (value === FrustumProjectionType) {\n            this.#activeProjection = this.frustumProjection;\n        } else if (value === CustomProjectionType) {\n            this.#activeProjection = this.customProjection;\n        } else {\n            this.error(\"Unsupported value for 'projection': \" + value + \" defaulting to PerspectiveProjectionType\");\n            this.#activeProjection = this.perspectiveProjection;\n            value = PerspectiveProjectionType;\n        }\n        // @ts-ignore\n        this.#activeProjection.clean();\n        this.#state.projectionType = value;\n        this.clean();\n        this.onProjectionType.dispatch(this, this.#state.projectionType);\n        this.onProjMatrix.dispatch(this, this.#activeProjection.projMatrix);\n    }\n\n    clean() {\n        const state = this.#state;\n        // In ortho mode, build the view matrix with an eye position that's translated\n        // well back from look, so that the front sectionPlane plane doesn't unexpectedly cut\n        // the front off the view (not a problem with perspective, since objects close enough\n        // to be clipped by the front plane are usually too big to see anything of their cross-sections).\n        let eye;\n        if (this.projectionType === OrthoProjectionType) {\n            subVec3(this.#state.eye, this.#state.look, eyeLookVec);\n            normalizeVec3(eyeLookVec, eyeLookVecNorm);\n            mulVec3Scalar(eyeLookVecNorm, 1000.0, eyeLookOffset);\n            addVec3(this.#state.look, eyeLookOffset, offsetEye);\n            eye = offsetEye;\n        } else {\n            eye = this.#state.eye;\n        }\n        if (state.hasDeviceMatrix) {\n            lookAtMat4v(eye, this.#state.look, this.#state.up, tempMatb);\n            mulMat4(state.deviceMatrix, tempMatb, state.viewMatrix);\n        } else {\n            lookAtMat4v(eye, this.#state.look, this.#state.up, state.viewMatrix);\n        }\n        inverseMat4(this.#state.viewMatrix, this.#state.inverseViewMatrix);\n        transposeMat4(this.#state.inverseViewMatrix, this.#state.viewNormalMatrix);\n        this.view.redraw();\n        setFrustum3(this.#state.viewMatrix, this.#activeProjection.projMatrix, this.#frustum);\n        this.onViewMatrix.dispatch(this, this.#state.viewMatrix);\n        this.onFrustum.dispatch(this, this.#frustum);\n    }\n\n    /**\n     * Rotates {@link Camera.eye} about {@link Camera.look}, around the {@link Camera.up} vector\n     *\n     * @param angleInc Angle of rotation in degrees\n     */\n    orbitYaw(angleInc: number) {\n        let lookEyeVec = subVec3(this.#state.eye, this.#state.look, tempVec3);\n        rotationMat4v(angleInc * 0.0174532925, this.#state.gimbalLock ? this.#state.worldUp : this.#state.up, tempMat);\n        lookEyeVec = transformPoint3(tempMat, lookEyeVec, tempVec3b);\n        this.eye = addVec3(this.#state.look, lookEyeVec, tempVec3c); // Set eye position as 'look' plus 'eye' vector\n        this.up = transformPoint3(tempMat, this.#state.up, tempVec3d); // Rotate 'up' vector\n    }\n\n    /**\n     * Rotates {@link Camera.eye} about {@link Camera.look} around the right axis (orthogonal to {@link Camera.up} and \"look\").\n     *\n     * @param angleInc Angle of rotation in degrees\n     */\n    orbitPitch(angleInc: number) {\n        if (this.#state.constrainPitch) {\n            angleInc = dotVec3(this.#state.up, this.#state.worldUp) / DEGTORAD;\n            if (angleInc < 1) {\n                return;\n            }\n        }\n        let eye2 = subVec3(this.#state.eye, this.#state.look, tempVec3);\n        const left = cross3Vec3(normalizeVec3(eye2, tempVec3b), normalizeVec3(this.#state.up, tempVec3c));\n        rotationMat4v(angleInc * 0.0174532925, left, tempMat);\n        eye2 = transformPoint3(tempMat, eye2, tempVec3d);\n        this.up = transformPoint3(tempMat, this.#state.up, tempVec3e);\n        this.eye = addVec3(eye2, this.#state.look, tempVec3f);\n    }\n\n    /**\n     * Rotates {@link Camera.look} about {@link Camera.eye}, around the {@link Camera.up} vector.\n     *\n     * @param angleInc Angle of rotation in degrees\n     */\n    yaw(angleInc: number) {\n        let look2 = subVec3(this.#state.look, this.#state.eye, tempVec3);\n        rotationMat4v(angleInc * 0.0174532925, this.#state.gimbalLock ? this.#state.worldUp : this.#state.up, tempMat);\n        look2 = transformPoint3(tempMat, look2, tempVec3b);\n        this.look = addVec3(look2, this.#state.eye, tempVec3c);\n        if (this.#state.gimbalLock) {\n            this.up = transformPoint3(tempMat, this.#state.up, tempVec3d);\n        }\n    }\n\n    /**\n     * Rotates {@link Camera.look} about {@link Camera.eye}, around the right axis (orthogonal to {@link Camera.up} and \"look\").\n\n     * @param angleInc Angle of rotation in degrees\n     */\n    pitch(angleInc: number) {\n        if (this.#state.constrainPitch) {\n            angleInc = dotVec3(this.#state.up, this.#state.worldUp) / DEGTORAD;\n            if (angleInc < 1) {\n                return;\n            }\n        }\n        let look2 = subVec3(this.#state.look, this.#state.eye, tempVec3);\n        const left = cross3Vec3(normalizeVec3(look2, tempVec3b), normalizeVec3(this.#state.up, tempVec3c));\n        rotationMat4v(angleInc * 0.0174532925, left, tempMat);\n        this.up = transformPoint3(tempMat, this.#state.up, tempVec3f);\n        look2 = transformPoint3(tempMat, look2, tempVec3d);\n        this.look = addVec3(look2, this.#state.eye, tempVec3e);\n    }\n\n    /**\n     * Pans the Camera along its local X, Y and Z axis.\n     *\n     * @param pan The pan vector\n     */\n    pan(pan: FloatArrayParam) {\n        const eye2 = subVec3(this.#state.eye, this.#state.look, tempVec3);\n        const vec = [0, 0, 0];\n        let v;\n        if (pan[0] !== 0) {\n            const left = cross3Vec3(normalizeVec3(eye2, []), normalizeVec3(this.#state.up, tempVec3b));\n            v = mulVec3Scalar(left, pan[0]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[1] !== 0) {\n            v = mulVec3Scalar(normalizeVec3(this.#state.up, tempVec3c), pan[1]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[2] !== 0) {\n            v = mulVec3Scalar(normalizeVec3(eye2, tempVec3d), pan[2]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        this.eye = addVec3(this.#state.eye, vec, tempVec3e);\n        this.look = addVec3(this.#state.look, vec, tempVec3f);\n    }\n\n    /**\n     * Increments/decrements the Camera's zoom factor, which is the distance between {@link Camera.eye} and {@link Camera.look}.\n     *\n     * @param delta Zoom factor increment.\n     */\n    zoom(delta: number) {\n        const vec = subVec3(this.#state.eye, this.#state.look, tempVec3);\n        const lenLook = Math.abs(lenVec3(vec));\n        const newLenLook = Math.abs(lenLook + delta);\n        if (newLenLook < 0.5) {\n            return;\n        }\n        const dir = normalizeVec3(vec, tempVec3c);\n        this.eye = addVec3(this.#state.look, mulVec3Scalar(dir, newLenLook), tempVec3d);\n    }\n\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n        this.onProjectionType.clear();\n        this.onViewMatrix.clear();\n        this.onProjMatrix.clear();\n        this.onWorldAxis.clear();\n    }\n\n\n}\n\nexport {Camera};\n","import {Queue, Map, inQuotes} from \"@xeokit/utils\";\n\nimport {stats} from './stats';\nimport type {Viewer} from \"./Viewer\";\n\n\nexport interface TickEvent {\n    viewerId: string;\n    time: number;\n    startTime: number;\n    prevTime: number;\n    deltaTime: number;\n}\n\nconst tickEvent: TickEvent = {\n    viewerId: \"\",\n    time: 0,\n    startTime: 0,\n    prevTime: 0,\n    deltaTime: 0\n};\n\nclass Scheduler {\n\n    public readonly viewers: { [key: string]: Viewer };\n\n    #viewersRenderInfo: { [key: string]: any } = {};\n\n    // @ts-ignore\n    #viewerIDMap: Map = new Map(); // Ensures unique viewer IDs\n    #taskQueue: Queue = new Queue(); // Task queue, which is pumped on each frame; tasks are pushed to it with calls to xeokit.schedule\n    #taskBudget: number = 10; // Millisecs we're allowed to spend on tasks in each frame\n    #lastTime: number = 0;\n    #elapsedTime: number = 0;\n\n    /**\n     * @private\n     */\n    constructor() {\n\n        this.viewers = {};\n\n        const frame = () => {\n            const time = Date.now();\n            if (this.#lastTime > 0) {\n                this.#elapsedTime = time - this.#lastTime;\n            }\n            this.#runTasks(time);\n            this.#fireTickEvents(time);\n            this.#renderViewers();\n            this.#lastTime = time;\n\n            requestAnimationFrame(frame);\n        };\n\n        requestAnimationFrame(frame);\n    }\n\n    #runTasks(time: number) {\n        const tasksRun = this.#runTasksUntil(time + this.#taskBudget);\n        const tasksScheduled = this.getNumTasks();\n        stats.frame.tasksRun = tasksRun;\n        stats.frame.tasksScheduled = tasksScheduled;\n        stats.frame.tasksBudget = this.#taskBudget;\n    }\n\n    #runTasksUntil(until: number = -1) {\n        let time = (new Date()).getTime();\n        let tasksRun = 0;\n        while (this.#taskQueue.length > 0 && (until < 0 || time < until)) {\n            const callback = this.#taskQueue.shift();\n            const scope = this.#taskQueue.shift();\n            if (scope) {\n                callback.call(scope);\n            } else {\n                callback();\n            }\n            time = (new Date()).getTime();\n            tasksRun++;\n        }\n        return tasksRun;\n    }\n\n    #fireTickEvents(time: number) {\n        tickEvent.time = time;\n        for (let id in scheduler.viewers) {\n            if (this.viewers.hasOwnProperty(id)) {\n                const viewer = this.viewers[id];\n                tickEvent.viewerId = id;\n                tickEvent.startTime = viewer.startTime;\n                tickEvent.deltaTime = tickEvent.prevTime != null ? tickEvent.time - tickEvent.prevTime : 0;\n                viewer.onTick.dispatch(viewer, tickEvent);\n            }\n        }\n        tickEvent.prevTime = time;\n    }\n\n    #renderViewers() {\n        for (let id in this.viewers) {\n            if (this.viewers.hasOwnProperty(id)) {\n                const viewer = this.viewers[id];\n                let renderInfo = this.#viewersRenderInfo[id];\n                if (!renderInfo) {\n                    renderInfo = this.#viewersRenderInfo[id] = {}; // FIXME\n                }\n\n\n                // const ticksPerOcclusionTest = viewer.ticksPerOcclusionTest;\n                // if (renderInfo.ticksPerOcclusionTest !== ticksPerOcclusionTest) {\n                //     renderInfo.ticksPerOcclusionTest = ticksPerOcclusionTest;\n                //     renderInfo.renderCountdown = ticksPerOcclusionTest;\n                // }\n                // if (--viewer.occlusionTestCountdown <= 0) {\n                //     viewer.doOcclusionTest();\n                //     viewer.occlusionTestCountdown = ticksPerOcclusionTest;\n                // }\n                //\n                // ticksPerRender = viewer.ticksPerRender;\n                // if (renderInfo.ticksPerRender !== ticksPerRender) {\n                //     renderInfo.ticksPerRender = ticksPerRender;\n                //     renderInfo.renderCountdown = ticksPerRender;\n                // }\n                // if (--renderInfo.renderCountdown === 0) {\n                    viewer.render({});\n                //     renderInfo.renderCountdown = ticksPerRender;\n                // }\n            }\n        }\n    }\n\n    registerViewer(viewer: Viewer) {\n        if (viewer.id) {\n            if (this.viewers[viewer.id]) {\n                console.error(`[ERROR] Viewer ${inQuotes(viewer.id)} already exists`);\n                return;\n            }\n        } else { // Auto-generated ID\n            // @ts-ignore\n            // noinspection JSConstantReassignment\n            viewer.id = this.#viewerIDMap.addItem({});\n        }\n        this.viewers[viewer.id] = viewer;\n        // const ticksPerOcclusionTest = viewer.ticksPerOcclusionTest;\n        // const ticksPerRender = viewer.ticksPerRender;\n        this.#viewersRenderInfo[viewer.id] = {\n            // ticksPerOcclusionTest: ticksPerOcclusionTest,\n            // ticksPerRender: ticksPerRender,\n            // renderCountdown: ticksPerRender\n        };\n        stats.components.viewers++;\n    }\n\n    deregisterViewer(viewer:Viewer) {\n        if (!this.viewers[viewer.id]) {\n            return;\n        }\n        this.#viewerIDMap.removeItem(viewer.id);\n        delete this.viewers[viewer.id];\n        delete this.#viewersRenderInfo[viewer.id];\n        stats.components.viewers--;\n    }\n\n    scheduleTask(callback: Function, scope: any) {\n        this.#taskQueue.push(callback);\n        this.#taskQueue.push(scope);\n    }\n\n    getNumTasks() {\n        return this.#taskQueue.length;\n    }\n}\n\nconst scheduler = new Scheduler();\n\nexport {scheduler};","import {EventDispatcher} from \"strongly-typed-events\";\n\n\nimport {scheduler} from './scheduler';\nimport type {View} from \"./View\";\nimport type {Camera} from \"./Camera\";\nimport {addVec3, lenVec3, lerpMat4, lerpVec3, mulVec3Scalar, normalizeVec3, subVec3, createVec3} from \"@xeokit/matrix\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport {DEGTORAD, FloatArrayParam} from \"@xeokit/math\";\nimport {getAABB3Center, getAABB3Diag, getAABB3DiagPoint} from \"@xeokit/boundaries\";\nimport {CustomProjectionType, OrthoProjectionType, PerspectiveProjectionType} from \"@xeokit/constants\";\n\nconst tempVec3 = createVec3();\nconst newLook = createVec3();\nconst newEye = createVec3();\nconst newUp = createVec3();\nconst newLookEyeVec = createVec3();\n\n/**\n * Animates its {@link View |View's} {@link @xeokit/viewer!Camera}  to look at specified objects, boundaries or locations.\n *\n * ## Summary\n *\n * * Belongs to a {@link @xeokit/viewer!View}, and is located at {@link View.cameraFlight}\n * * Controls the View's {@link @xeokit/viewer!Camera} , which is located at {@link View.camera}\n * * Navigates the Camera to look at a {@link ViewerObject} or boundary\n * * Navigates the Camera to an explicit position given as ````eye````, ````look```` and ````up```` vectors\n * * Jumps or flies the Camera\n * * Smoothly transitions between projections\n */\nclass CameraFlightAnimation extends Component {\n\n    /**\n     * The View that owns this CameraFlightAnimation.\n     */\n    public readonly view: View;\n\n    /**\n     * The Camera controlled by this CameraFlightAnimation.\n     */\n    public readonly camera: Camera;\n\n    #duration: number;\n    #look1: FloatArrayParam;\n    #eye1: FloatArrayParam;\n    #up1: FloatArrayParam;\n    #look2: FloatArrayParam;\n    #eye2: FloatArrayParam;\n    #up2: FloatArrayParam;\n    #orthoScale1: number;\n    #orthoScale2: number;\n    #fit: boolean;\n    #trail: boolean;\n    #flying: boolean;\n    #flyEyeLookUp: boolean;\n    #flyingEye: boolean;\n    #flyingLook: boolean;\n    #callback: any;\n    #callbackScope: any;\n    #time1: number | null;\n    #time2: number | null;\n    easing: boolean;\n    #flyingEyeLookUp: boolean;\n    #fitFOV: number;\n    #projection2: number;\n    #projMatrix1: FloatArrayParam;\n    #projMatrix2: FloatArrayParam;\n\n\n    /**\n     * Emits an event each time the animation starts.\n     *\n     * @event\n     */\n    readonly onStarted: EventEmitter<CameraFlightAnimation, null>;\n\n    /**\n     * Emits an event each time the animation stops.\n     *\n     * @event\n     */\n    readonly onStopped: EventEmitter<CameraFlightAnimation, null>;\n\n    /**\n     * Emits an event each time the animation stops.\n     *\n     * @event\n     */\n    readonly onCancelled: EventEmitter<CameraFlightAnimation, null>;\n\n    /**\n     @private\n     */\n    constructor(view: View, cfg?: {\n        duration: number\n    }) {\n\n        super(view, cfg);\n\n        this.view = view;\n        this.camera = view.camera;\n\n        this.#look1 = createVec3();\n        this.#eye1 = createVec3();\n        this.#up1 = createVec3();\n        this.#look2 = createVec3();\n        this.#eye2 = createVec3();\n        this.#up2 = createVec3();\n        this.#orthoScale1 = 1;\n        this.#orthoScale2 = 1;\n        this.#flying = false;\n        this.#flyEyeLookUp = false;\n        this.#flyingEye = false;\n        this.#flyingLook = false;\n        this.#callback = null;\n        this.#callbackScope = null;\n        this.#time1 = null;\n        this.#time2 = null;\n        this.easing = true;\n        this.#trail = false;\n        this.#fit = true;\n        this.#duration = 500;\n\n        this.onStarted = new EventEmitter(new EventDispatcher<CameraFlightAnimation, null>());\n        this.onStopped = new EventEmitter(new EventDispatcher<CameraFlightAnimation, null>());\n        this.onCancelled = new EventEmitter(new EventDispatcher<CameraFlightAnimation, null>());\n    }\n\n    /**\n     * Flies the {@link @xeokit/viewer!Camera}  to a target.\n     *\n     *  * When the target is a boundary, the {@link @xeokit/viewer!Camera}  will fly towards the target and stop when the target fills most of the canvas.\n     *  * When the target is an explicit {@link @xeokit/viewer!Camera}  position, given as ````eye````, ````look```` and ````up````, then CameraFlightAnimation will interpolate the {@link @xeokit/viewer!Camera}  to that target and stop there.\n     *\n     * @param {Object|Component} [params=Scene] Either a parameters object or a {@link @xeokit/core!Component} subtype that has\n     * an AABB. Defaults to the {@link Scene}, which causes the {@link @xeokit/viewer!Camera}  to fit the Scene in view.\n     * @param [params.arc=0] Factor in range ````[0..1]```` indicating how much the {@link Camera.eye} position\n     * will swing away from its {@link Camera.look} position as it flies to the target.\n     * @param {Number|String|Component} [params.component] ID or instance of a component to fly to. Defaults to the entire {@link Scene}.\n     * @param [params.aabb] World-space axis-aligned bounding box (AABB) target to fly to.\n     * @param [params.eye] Position to fly the eye position to.\n     * @param [params.look] Position to fly the look position to.\n     * @param [params.up] Position to fly the up vector to.\n     * @param [params.projection] Projection type to transition into as we fly. Can be any of the values of {@link Camera.projectionType}.\n     * @param [params.fit=true] Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation.fit}.\n     * @param [params.fitFOV] How much of field-of-view, in degrees, that a target {@link ViewerObject} or its AABB should\n     * fill the canvas on arrival. Overrides {@link CameraFlightAnimation.fitFOV}.\n     * @param [params.duration] Flight duration in seconds.  Overrides {@link CameraFlightAnimation.duration}.\n     * @param [params.orthoScale] Animate the Camera's orthographic scale to this target value. See {@link Ortho.scale}.\n     * @param {Function} [callback] Callback fired on arrival.\n     * @param {Object} [scope] Optional scope for callback.\n     */\n    flyTo(params: {\n              projection?: number;\n              orthoScale?: number;\n              aabb?: FloatArrayParam;\n              length?: number;\n              eye?: FloatArrayParam;\n              look?: FloatArrayParam;\n              up?: FloatArrayParam;\n              poi?: FloatArrayParam;\n              fitFOV?: number;\n              duration?: number;\n          } = {},\n          callback: {\n              (): void; call: (arg0: any) => void;\n          }) {\n\n        if (this.#flying) {\n            this.stop();\n        }\n\n        this.#flying = false;\n        this.#flyingEye = false;\n        this.#flyingLook = false;\n        this.#flyingEyeLookUp = false;\n\n        this.#callback = callback;\n\n        const camera = this.camera;\n        const flyToProjection = (!!params.projection) && (params.projection !== camera.projectionType);\n\n        this.#eye1[0] = camera.eye[0];\n        this.#eye1[1] = camera.eye[1];\n        this.#eye1[2] = camera.eye[2];\n\n        this.#look1[0] = camera.look[0];\n        this.#look1[1] = camera.look[1];\n        this.#look1[2] = camera.look[2];\n\n        this.#up1[0] = camera.up[0];\n        this.#up1[1] = camera.up[1];\n        this.#up1[2] = camera.up[2];\n\n        this.#orthoScale1 = camera.orthoProjection.scale;\n        this.#orthoScale2 = params.orthoScale || this.#orthoScale1;\n\n        let aabb: FloatArrayParam;\n        let eye: FloatArrayParam;\n        let look: FloatArrayParam;\n        let up: FloatArrayParam;\n\n        if (params.aabb) {\n            aabb = params.aabb;\n\n        } else if ((params.eye && params.look) || params.up) {\n            // @ts-ignore\n            eye = params.eye;\n            // @ts-ignore\n            look = params.look;\n            // @ts-ignore\n            up = params.up;\n\n        } else if (params.eye) {\n            eye = params.eye;\n\n        } else if (params.look) {\n            look = params.look;\n\n        } else {\n            if (!flyToProjection) {\n                aabb = this.view.aabb;\n            }\n        }\n\n        const poi = params.poi;\n        // @ts-ignore\n        if (aabb) {\n\n            if (aabb[3] < aabb[0] || aabb[4] < aabb[1] || aabb[5] < aabb[2]) { // Don't fly to an inverted boundary\n                return;\n            }\n\n            if (aabb[3] === aabb[0] && aabb[4] === aabb[1] && aabb[5] === aabb[2]) { // Don't fly to an empty boundary\n                return;\n            }\n\n            aabb = aabb.slice();\n            const aabbCenter = getAABB3Center(aabb);\n\n            this.#look2 = poi || aabbCenter;\n\n            const eyeLookVec = subVec3(this.#eye1, this.#look1, tempVec3);\n            const eyeLookVecNorm = normalizeVec3(eyeLookVec);\n            const diag = poi ? getAABB3DiagPoint(aabb, poi) : getAABB3Diag(aabb);\n            const fitFOV = params.fitFOV || this.#fitFOV;\n            const sca = Math.abs(diag / Math.tan(fitFOV * DEGTORAD));\n\n            this.#orthoScale2 = diag * 1.1;\n\n            this.#eye2[0] = this.#look2[0] + (eyeLookVecNorm[0] * sca);\n            this.#eye2[1] = this.#look2[1] + (eyeLookVecNorm[1] * sca);\n            this.#eye2[2] = this.#look2[2] + (eyeLookVecNorm[2] * sca);\n\n            this.#up2[0] = this.#up1[0];\n            this.#up2[1] = this.#up1[1];\n            this.#up2[2] = this.#up1[2];\n\n            this.#flyingEyeLookUp = true;\n\n            // @ts-ignore\n        } else if (eye || look || up) {\n            // @ts-ignore\n            this.#flyingEyeLookUp = !!eye && !!look && !!up;\n            // @ts-ignore\n            this.#flyingEye = !!eye && !look;\n            // @ts-ignore\n            this.#flyingLook = !!look && !eye;\n            // @ts-ignore\n            if (eye) {\n                this.#eye2[0] = eye[0];\n                this.#eye2[1] = eye[1];\n                this.#eye2[2] = eye[2];\n            }\n            // @ts-ignore\n            if (look) {\n                this.#look2[0] = look[0];\n                this.#look2[1] = look[1];\n                this.#look2[2] = look[2];\n            }\n            // @ts-ignore\n            if (up) {\n                this.#up2[0] = up[0];\n                this.#up2[1] = up[1];\n                this.#up2[2] = up[2];\n            }\n        }\n\n        if (flyToProjection) {\n\n            if (params.projection === OrthoProjectionType && camera.projectionType !== OrthoProjectionType) {\n                this.#projection2 = OrthoProjectionType;\n                this.#projMatrix1 = camera.projMatrix.slice();\n                this.#projMatrix2 = camera.orthoProjection.projMatrix.slice();\n                camera.projectionType = CustomProjectionType;\n            }\n\n            if (params.projection === PerspectiveProjectionType && camera.projectionType !== PerspectiveProjectionType) {\n                this.#projection2 = PerspectiveProjectionType;\n                this.#projMatrix1 = camera.projMatrix.slice();\n                this.#projMatrix2 = camera.perspectiveProjection.projMatrix.slice();\n                camera.projectionType = CustomProjectionType;\n            }\n        } else {\n            // @ts-ignore\n            this.#projection2 = null;\n        }\n\n        this.onStarted.dispatch(this, null);\n\n        this.#time1 = Date.now();\n        this.#time2 = this.#time1 + (params.duration ? params.duration * 1000 : this.#duration);\n\n        this.#flying = true; // False as soon as we stop\n\n        scheduler.scheduleTask(this.#update, this);\n    }\n\n    /**\n     * Jumps the {@link @xeokit/viewer!View}'s {@link @xeokit/viewer!Camera}  to the given target.\n     *\n     * * When the target is a boundary, this CameraFlightAnimation will position the {@link @xeokit/viewer!Camera}  at where the target fills most of the canvas.\n     * * When the target is an explicit {@link @xeokit/viewer!Camera}  position, given as ````eye````, ````look```` and ````up```` vectors, then this CameraFlightAnimation will jump the {@link @xeokit/viewer!Camera}  to that target.\n     *\n     * @param {*|Component} params  Either a parameters object or a {@link @xeokit/core!Component} subtype that has a World-space AABB.\n     * @param [params.arc=0]  Factor in range [0..1] indicating how much the {@link Camera.eye} will swing away from its {@link Camera.look} as it flies to the target.\n     * @param {Number|String|Component} [params.component] ID or instance of a component to fly to.\n     * @param [params.aabb]  World-space axis-aligned bounding box (AABB) target to fly to.\n     * @param [params.eye] Position to fly the eye position to.\n     * @param [params.look]  Position to fly the look position to.\n     * @param [params.up] Position to fly the up vector to.\n     * @param [params.projection] Projection type to transition into. Can be any of the values of {@link Camera.projectionType}.\n     * @param [params.fitFOV] How much of field-of-view, in degrees, that a target {@link ViewerObject} or its AABB should fill the canvas on arrival. Overrides {@link CameraFlightAnimation.fitFOV}.\n     * @param [params.fit] Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation.fit}.\n     */\n    jumpTo(params: any) {\n        this.#jumpTo(params);\n    }\n\n    #jumpTo(params: any) {\n\n        if (this.#flying) {\n            this.stop();\n        }\n\n        const camera = this.camera;\n\n        let aabb: FloatArrayParam;\n        let newEye: FloatArrayParam;\n        let newLook: FloatArrayParam;\n        let newUp: FloatArrayParam;\n\n        if (params.aabb) { // Boundary3D\n            aabb = params.aabb;\n        } else if (params.eye || params.look || params.up) { // Camera pose\n            newEye = params.eye;\n            newLook = params.look;\n            newUp = params.up;\n        } else {\n            aabb = this.view.aabb;\n        }\n\n        const poi = params.poi;\n        // @ts-ignore\n        if (aabb) {\n\n            if (aabb[3] <= aabb[0] || aabb[4] <= aabb[1] || aabb[5] <= aabb[2]) { // Don't fly to an empty boundary\n                return;\n            }\n\n            const diag = poi ? getAABB3DiagPoint(aabb, poi) : getAABB3Diag(aabb);\n            // @ts-ignore\n            newLook = poi || getAABB3Center(aabb, newLook);\n\n            if (this.#trail) {\n                subVec3(camera.look, newLook, newLookEyeVec);\n            } else {\n                subVec3(camera.eye, camera.look, newLookEyeVec);\n            }\n\n            normalizeVec3(newLookEyeVec);\n            let dist;\n            const fit = (params.fit !== undefined) ? params.fit : this.#fit;\n\n            if (fit) {\n                dist = Math.abs((diag) / Math.tan((params.fitFOV || this.#fitFOV) * DEGTORAD));\n\n            } else {\n                dist = lenVec3(subVec3(camera.eye, camera.look, tempVec3));\n            }\n\n            mulVec3Scalar(newLookEyeVec, dist);\n\n            camera.eye = addVec3(newLook, newLookEyeVec, tempVec3);\n            camera.look = newLook;\n\n            this.camera.orthoProjection.scale = diag * 1.1;\n            // @ts-ignore\n        } else if (newEye || newLook || newUp) {\n            // @ts-ignore\n            if (newEye) {\n                camera.eye = newEye;\n            } // @ts-ignore\n            if (newLook) {\n                camera.look = newLook;\n            } // @ts-ignore\n            if (newUp) {\n                camera.up = newUp;\n            }\n        }\n\n        if (params.projection) {\n            camera.projectionType = params.projection;\n        }\n    }\n\n    #update() {\n        if (!this.#flying) {\n            return;\n        }\n        const time = Date.now();\n        // @ts-ignore\n        let t = (time - this.#time1) / (this.#time2 - this.#time1);\n        const stopping = (t >= 1);\n\n        if (t > 1) {\n            t = 1;\n        }\n\n        const tFlight = this.easing ? CameraFlightAnimation.#ease(t, 0, 1, 1) : t;\n        const camera = this.camera;\n\n        if (this.#flyingEye || this.#flyingLook) {\n\n            if (this.#flyingEye) {\n                subVec3(camera.eye, camera.look, newLookEyeVec);\n                camera.eye = lerpVec3(tFlight, 0, 1, this.#eye1, this.#eye2, newEye);\n                camera.look = subVec3(newEye, newLookEyeVec, newLook);\n            } else if (this.#flyingLook) {\n                camera.look = lerpVec3(tFlight, 0, 1, this.#look1, this.#look2, newLook);\n                camera.up = lerpVec3(tFlight, 0, 1, this.#up1, this.#up2, newUp);\n            }\n\n        } else if (this.#flyingEyeLookUp) {\n\n            camera.eye = lerpVec3(tFlight, 0, 1, this.#eye1, this.#eye2, newEye);\n            camera.look = lerpVec3(tFlight, 0, 1, this.#look1, this.#look2, newLook);\n            camera.up = lerpVec3(tFlight, 0, 1, this.#up1, this.#up2, newUp);\n        }\n\n        if (this.#projection2) {\n            const tProj = (this.#projection2 === OrthoProjectionType) ? CameraFlightAnimation.#easeOutExpo(t, 0, 1, 1) : CameraFlightAnimation.#easeInCubic(t, 0, 1, 1);\n            camera.customProjection.projMatrix = lerpMat4(tProj, 0, 1, this.#projMatrix1, this.#projMatrix2);\n\n        } else {\n            camera.orthoProjection.scale = this.#orthoScale1 + (t * (this.#orthoScale2 - this.#orthoScale1));\n        }\n\n        if (stopping) {\n            camera.orthoProjection.scale = this.#orthoScale2;\n            this.stop();\n            return;\n        }\n        scheduler.scheduleTask(this.#update, this); // Keep flying\n    }\n\n    static #ease(t: number, b: number, c: number, d: number) { // Quadratic easing out - decelerating to zero velocity http://gizma.com/easing\n        t /= d;\n        return -c * t * (t - 2) + b;\n    }\n\n    static #easeInCubic(t: number, b: number, c: number, d: number) {\n        t /= d;\n        return c * t * t * t + b;\n    }\n\n    static #easeOutExpo(t: number, b: number, c: number, d: number) {\n        return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    }\n\n    /**\n     * Stops an earlier {@link CameraFlightAnimation.flyTo}, fires arrival callback, then \"stopped\" event.\n     */\n    stop() {\n        if (!this.#flying) {\n            return;\n        }\n        this.#flying = false;\n        this.#time1 = null;\n        this.#time2 = null;\n        if (this.#projection2) {\n            this.camera.projectionType = this.#projection2;\n        }\n        const callback = this.#callback;\n        if (callback) {\n            this.#callback = null;\n            callback();\n        }\n        this.onStopped.dispatch(this, null);\n    }\n\n    /**\n     * Cancels a flight in progress, without calling the arrival callback.\n     */\n    cancel() {\n        if (!this.#flying) {\n            return;\n        }\n        this.#flying = false;\n        this.#time1 = null;\n        this.#time2 = null;\n        if (this.#callback) {\n            this.#callback = null;\n        }\n        this.onCancelled.dispatch(this, null);\n    }\n\n    /**\n     * Sets the flight duration in seconds.\n     *\n     * Stops any flight currently in progress.\n     *\n     * Default value is ````0.5````.\n     */\n    set duration(value: number) {\n        this.#duration = value ? (value * 1000.0) : 500;\n        this.stop();\n    }\n\n    /**\n     * Gets the flight duration in seconds.\n     *\n     * Default value is ````0.5````.\n     */\n    get duration(): number {\n        return this.#duration / 1000.0;\n    }\n\n    /**\n     * When flying to a {@link @xeokit/scene!SceneModel | SceneModel}, {@link ViewerObject} or boundary, indicates if the CameraFlightAnimation always adjusts\n     * the distance of {@link Camera.eye} from {@link Camera.look} to ensure that the target always fits in view.\n     *\n     * When false, the eye will remain fixed at its current distance from the look position.\n     *\n     * Default value is ````true````.\n     */\n    set fit(value: boolean) {\n        this.#fit = value;\n    }\n\n    /**\n     * When flying to a {@link @xeokit/scene!SceneModel | SceneModel}, {@link ViewerObject} or boundary, indicates if the CameraFlightAnimation always adjusts\n     * the distance of {@link Camera.eye} from {@link Camera.look} to ensure that the target always fits in view.\n     *\n     * When false, the eye will remain fixed at its current distance from the look position.\n     *\n     * Default value is ````true````.\n     */\n    get fit(): boolean {\n        return this.#fit;\n    }\n\n    /**\n     * Sets how much of the perspective field-of-view, in degrees, that a target {@link ViewerObject.aabb} should\n     * fill the canvas when calling {@link CameraFlightAnimation.flyTo} or {@link CameraFlightAnimation.jumpTo}.\n     *\n     * Default value is ````45````.\n     */\n    set fitFOV(value: number) {\n        this.#fitFOV = value;\n    }\n\n    /**\n     * Gets how much of the perspective field-of-view, in degrees, that a target {@link ViewerObject.aabb} should\n     * fill the canvas when calling {@link CameraFlightAnimation.flyTo} or {@link CameraFlightAnimation.jumpTo}.\n     *\n     * Default value is ````45````.\n     */\n    get fitFOV(): number {\n        return this.#fitFOV;\n    }\n\n    /**\n     * Indicates if this CameraFlightAnimation will orient the {@link @xeokit/viewer!Camera} \n     * in the direction that it is flying.\n     *\n     * Default value is ````false````.\n     */\n    set trail(value: boolean) {\n        this.#trail = value;\n    }\n\n    /**\n     * Indicates if this CameraFlightAnimation will orient the {@link @xeokit/viewer!Camera} \n     * in the direction that it is flying.\n     *\n     * Default value is ````false````.\n     */\n    get trail(): boolean {\n        return this.#trail;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        this.stop();\n        super.destroy();\n        this.onStarted.clear();\n        this.onStopped.clear();\n        this.onCancelled.clear();\n    }\n}\n\nexport {CameraFlightAnimation};\n","import { EventDispatcher } from \"strongly-typed-events\";\nimport { Component, EventEmitter } from \"@xeokit/core\";\nimport { createUUID } from \"@xeokit/utils\";\nimport { QualityRender } from \"@xeokit/constants\";\nimport type { FloatArrayParam, IntArrayParam } from \"@xeokit/math\";\nimport { createVec3 } from \"@xeokit/matrix\";\nimport type { Scene, SceneModel } from \"@xeokit/scene\";\n\nimport { ViewObject } from \"./ViewObject\";\nimport { SectionPlane } from \"./SectionPlane\";\nimport type { Viewer } from \"./Viewer\";\nimport { Metrics } from \"./Metriqs\";\nimport { SAO } from \"./SAO\";\nimport { LinesMaterial } from \"./LinesMaterial\";\nimport { ViewLayer } from \"./ViewLayer\";\nimport type { ViewLayerParams } from \"./ViewLayerParams\";\nimport type { SectionPlaneParams } from \"./SectionPlaneParams\";\nimport { EmphasisMaterial } from \"./EmphasisMaterial\";\nimport { EdgeMaterial } from \"./EdgeMaterial\";\nimport { PointsMaterial } from \"./PointsMaterial\";\nimport { Camera } from \"./Camera\";\nimport type { PointLight } from \"./PointLight\";\nimport { CameraFlightAnimation } from \"./CameraFlightAnimation\";\nimport type { AmbientLight } from \"./AmbientLight\";\nimport type { DirLight } from \"./DirLight\";\nimport type { RendererViewObject } from \"./RendererViewObject\";\n\n/**\n * An independently-configurable view of the models in a {@link @xeokit/viewer!Viewer}.\n *\n * See {@link @xeokit/viewer} for usage.\n *\n * ## Overview\n *\n * A View is an independently-configurable view of the {@link RendererViewObject | ViewerObjects} existing within a Viewer, with\n * its own HTML canvas. A View automatically contains a {@link ViewObject} for each existing ViewerObject. ViewObjects\n * function as a kind of proxy for the ViewerObjects, through which we control their appearance\n * (show/hide/highlight etc.) within that particular View's canvas.\n *\n * Using Views, we can essentially have multiple canvases viewing the same model, each canvas perhaps showing a different subset\n * of the objects, with different visual effects, camera position etc.\n *\n * ## Quickstart\n *\n * * Create a View with {@link Viewer.createView}\n * * Control the View's viewpoint and projection with {@link View.camera}\n * * Create light sources with {@link View.createLightSource}\n * * Create slicing planes with {@link View createSectionPlane}\n * * Each View automatically has a {@link ViewObject} for every {@link RendererViewObject}\n * * Uses {@link ViewLayer | ViewLayers} to organize ViewObjects into layers\n * * Optionally uses ViewLayers to mask which ViewObjects are automatically maintained\n * * Control the visibility of ViewObjects with {@link View.setObjectsVisible}\n * * Emphasise ViewObjects with {@link View.setObjectsHighlighted}, {@link View.setObjectsSelected}, {@link View.setObjectsXRayed} and {@link View.setObjectsColorized}\n *\n * ## Examples\n *\n * Create a view in a given canvas, with three objects visible and a couple of object X-rayed (rendered translucent):\n *\n * ````javascript\n * const view1 = myViewer.createView({\n *      id: \"myView\",\n *      canvasId: \"myView1\"\n * });\n *\n * view1.camera.eye = [-3.933, 2.855, 27.018];\n * view1.camera.look = [4.400, 3.724, 8.899];\n * view1.camera.up = [-0.018, 0.999, 0.039];\n *\n * view1.setObjectsVisible([\"myObject1\", \"myObject2\", \"myObject3\", ...], true);\n * view1.setObjectsXRayed([\"myObject1\", \"myObject\", ...], true);\n * ````\n *\n * Create a second view, using a different canvas, that shows two objects visible, with one of them highlighted:\n *\n * ```` javascript\n * const view2 = myViewer.createView({\n *      id: \"myView2\",\n *      canvasId: \"myView2\"\n * });\n *\n * view2.camera.eye = [-1.4, 1.5, 15.8];\n * view2.camera.look = [4.0, 3.7, 1.8];\n * view2.camera.up = [0.0, 0.9, 0.0];\n *\n * view2.setObjectsVisible([\"myObject1\", \"myObject3\", ...], true);\n * view2.setObjectsHighlighted([\"myObject3\", ...], true);\n * ````\n */\nclass View extends Component {\n  /**\n     ID of this View, unique within the {@link @xeokit/viewer!Viewer}.\n     */\n  declare viewId: string;\n\n  /**\n   * The Viewer to which this View belongs.\n   */\n  declare readonly viewer: Viewer;\n\n  /**\n   * The index of this View in {@link Viewer.viewList}.\n   * @private\n   */\n  viewIndex: number;\n\n  /**\n   * Manages the Camera for this View.\n   */\n  readonly camera: Camera;\n\n  /**\n   * The HTML canvas.\n   */\n  public canvasElement: HTMLCanvasElement;\n\n  /**\n   * Indicates if this View is transparent.\n   */\n  public readonly transparent: boolean;\n\n  /**\n   * Boundary of the canvas in absolute browser window coordinates.\n   * Format is ````[xmin, ymin, xwidth, ywidth]````.\n   */\n  public readonly boundary: number[];\n  /**\n   * Whether the logarithmic depth buffer is enabled for this View.\n   */\n  readonly logarithmicDepthBufferEnabled: boolean;\n  /**\n   * Configures Scalable Ambient Obscurance (SAO) for this View.\n   */\n  readonly sao: SAO;\n  /**\n   * Flies or jumps the View's {@link @xeokit/viewer!Camera}  to given positions.\n   */\n  readonly cameraFlight: CameraFlightAnimation;\n  /**\n   * Manages measurement units, origin and scale for this View.\n   */\n  readonly metrics: Metrics;\n  /**\n   * Configures the X-rayed appearance of {@link ViewObject | ViewObjects} in this View.\n   */\n  readonly xrayMaterial: EmphasisMaterial;\n  /**\n   * Configures the highlighted appearance of {@link ViewObject | ViewObjects} in this View.\n   */\n  readonly highlightMaterial: EmphasisMaterial;\n  /**\n   * Configures the appearance of {@link ViewObject | ViewObjects} in this View.\n   */\n  readonly selectedMaterial: EmphasisMaterial;\n  /**\n   * Configures the appearance of edges belonging to {@link ViewObject} in this View.\n   */\n  readonly edgeMaterial: EdgeMaterial;\n  /**\n   * Configures the appearance of point primitives belonging to {@link ViewObject | ViewObjects} in this View .\n   */\n  readonly pointsMaterial: PointsMaterial;\n  /**\n   * Configures the appearance of lines belonging to {@link ViewObject | ViewObjects} in this View.\n   */\n  readonly linesMaterial: LinesMaterial;\n\n  /**\n   * Map of the all {@link ViewObject | ViewObjects} in this View.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   *\n   * The View automatically ensures that there is a {@link ViewObject} here for\n   * each {@link RendererViewObject} in the {@link @xeokit/viewer!Viewer}\n   */\n  readonly objects: { [key: string]: ViewObject };\n\n  /**\n   * Map of the currently visible {@link ViewObject | ViewObjects} in this View.\n   *\n   * A ViewObject is visible when {@link ViewObject.visible} is true.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly visibleObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of currently x-rayed {@link ViewObject | ViewObjects} in this View.\n   *\n   * A ViewObject is x-rayed when {@link ViewObject.xrayed} is true.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly xrayedObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of currently highlighted {@link ViewObject | ViewObjects} in this View.\n   *\n   * A ViewObject is highlighted when {@link ViewObject.highlighted} is true.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly highlightedObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of currently selected {@link ViewObject | ViewObjects} in this View.\n   *\n   * A ViewObject is selected when {@link ViewObject.selected} is true.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly selectedObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of currently colorized {@link ViewObject | ViewObjects} in this View.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly colorizedObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of {@link ViewObject | ViewObjects} in this View whose opacity has been updated.\n   *\n   * Each {@link ViewObject} is mapped here by {@link ViewObject.id}.\n   */\n  readonly opacityObjects: { [key: string]: ViewObject };\n\n  /**\n   * Map of {@link SectionPlane}s in this View.\n   *\n   * Each {@link SectionPlane} is mapped here by {@link SectionPlane.id}.\n   */\n  readonly sectionPlanes: { [key: string]: SectionPlane };\n\n  /**\n   * List of {@link SectionPlane}s in this View.\n   */\n  readonly sectionPlanesList: SectionPlane[] = [];\n\n  /**\n   * Map of light sources in this View.\n   */\n  readonly lights: { [key: string]: AmbientLight | PointLight | DirLight };\n\n  /**\n   * List of light sources in this View.\n   */\n  readonly lightsList: (AmbientLight | PointLight | DirLight)[] = [];\n  gammaOutput: boolean;\n\n  /**\n   * Map of the all {@link ViewLayer}s in this View.\n   *\n   * Each {@link ViewLayer} is mapped here by {@link ViewLayer.id}.\n   */\n  readonly layers: { [key: string]: ViewLayer };\n\n  /**\n   * Whether the View will automatically create {@link ViewLayer | ViewLayers} on-demand\n   * as {@link RendererViewObject | ViewerObjects} are created.\n   *\n   * When ````true```` (default), the View will automatically create {@link ViewLayer | ViewLayers} as needed for each new\n   * {@link RendererViewObject.layerId} encountered, including a \"default\" ViewLayer for ViewerObjects that have no\n   * layerId. This default setting therefore ensures that a ViewObject is created in the View for every ViewerObject that is created.\n   *\n   * If you set this ````false````, however, then the View will only create {@link ViewObject | ViewObjects} for {@link RendererViewObject | ViewerObjects} that have\n   * a {@link RendererViewObject.layerId} that matches the ID of a {@link ViewLayer} that you have explicitly created previously with {@link View.createLayer}.\n   *\n   * Setting this parameter false enables Views to contain only the ViewObjects that they actually need to show, i.e. to represent only\n   * ViewerObjects that they need to view. This enables a View to avoid wastefully creating and maintaining ViewObjects for ViewerObjects\n   * that it never needs to show.\n   */\n  readonly autoLayers: boolean;\n\n  /**\n   * Emits an event each time the canvas boundary changes.\n   *\n   * @event\n   */\n  readonly onBoundary: EventEmitter<View, IntArrayParam>;\n\n  /**\n   * Emits an event each time the visibility of a {@link ViewObject} changes in this View.\n   *\n   * ViewObjects are shown and hidden with {@link View.setObjectsVisible}, {@link ViewLayer.setObjectsVisible} or {@link ViewObject.visible}.\n   *\n   * @event\n   */\n  readonly onObjectVisibility: EventEmitter<View, ViewObject>;\n\n  /**\n   * Emits an event each time the X-ray state of a {@link ViewObject} changes in this View.\n   *\n   * ViewObjects are X-rayed with {@link View.setObjectsXRayed}, {@link ViewLayer.setObjectsXRayed} or {@link ViewObject.xrayed}.\n   *\n   * @event\n   */\n  readonly onObjectXRayed: EventEmitter<View, ViewObject>;\n\n  /**\n   * Emits an event each time a {@link ViewLayer} is created in this View.\n   *\n   * Layers are created explicitly with {@link View.createLayer}, or implicitly with {@link View.createModel} and {@link CreateModelParams.layerId}.\n   *\n   * @event\n   */\n  readonly onLayerCreated: EventEmitter<View, ViewLayer>;\n\n  /**\n   * Emits an event each time a {@link ViewLayer} in this View is destroyed.\n   *\n   * ViewLayers are destroyed explicitly with {@link ViewLayer.destroy}, or implicitly when they become empty and {@link View.autoLayers} is false.\n   *\n   * @event\n   */\n  readonly onLayerDestroyed: EventEmitter<View, ViewLayer>;\n\n  /**\n   * Emits an event each time a {@link SectionPlane} is created in this View.\n   *\n   * @event\n   */\n  readonly onSectionPlaneCreated: EventEmitter<View, SectionPlane>;\n\n  /**\n   * Emits an event each time a {@link SectionPlane} in this View is destroyed.\n   *\n   * @event\n   */\n  readonly onSectionPlaneDestroyed: EventEmitter<View, SectionPlane>;\n\n  #onTick: () => void;\n\n  #backgroundColor: FloatArrayParam;\n  #backgroundColorFromAmbientLight: boolean;\n  #resolutionScale: number;\n  #numObjects: number;\n  #objectIds: string[] | null;\n  #numVisibleObjects: number;\n  #visibleObjectIds: string[] | null;\n  #numXRayedObjects: number;\n  #xrayedObjectIds: string[] | null;\n  #numHighlightedObjects: number;\n  #highlightedObjectIds: string[] | null;\n  #numSelectedObjects: number;\n  #selectedObjectIds: string[] | null;\n  #numColorizedObjects: number;\n  #colorizedObjectIds: string[] | null;\n  #numOpacityObjects: number;\n  #opacityObjectIds: string[] | null;\n  #qualityRender: boolean;\n  #lightsHash: string | null = null;\n  #sectionPlanesHash: string | null = null;\n\n  /**\n   * @private\n   */\n  constructor(options: {\n    viewer: Viewer;\n    origin?: number[];\n    scale?: number;\n    units?: number;\n    canvasId?: string;\n    canvasElement: HTMLCanvasElement;\n    backgroundColor?: any[];\n    backgroundColorFromAmbientLight?: boolean;\n    premultipliedAlpha?: boolean;\n    transparent?: boolean;\n    qualityRender?: boolean;\n    logarithmicDepthBufferEnabled?: boolean;\n    autoLayers?: boolean;\n  }) {\n    super(null, options);\n\n    this.viewer = options.viewer;\n\n    const canvas =\n      options.canvasElement ||\n      document.getElementById(<string>options.canvasId);\n    if (!(canvas instanceof HTMLCanvasElement)) {\n      throw \"Mandatory View config expected: valid canvasId or canvasElement\";\n    }\n\n    this.viewIndex = 0;\n    this.objects = {};\n    this.visibleObjects = {};\n    this.xrayedObjects = {};\n    this.highlightedObjects = {};\n    this.selectedObjects = {};\n    this.colorizedObjects = {};\n    this.opacityObjects = {};\n    this.sectionPlanes = {};\n    this.sectionPlanesList = [];\n    this.lights = {};\n    this.lightsList = [];\n    this.layers = {};\n\n    this.#numObjects = 0;\n    this.#objectIds = null;\n    this.#numVisibleObjects = 0;\n    this.#visibleObjectIds = null;\n    this.#numXRayedObjects = 0;\n    this.#xrayedObjectIds = null;\n    this.#numHighlightedObjects = 0;\n    this.#highlightedObjectIds = null;\n    this.#numSelectedObjects = 0;\n    this.#selectedObjectIds = null;\n    this.#numColorizedObjects = 0;\n    this.#colorizedObjectIds = null;\n    this.#numOpacityObjects = 0;\n    this.#opacityObjectIds = null;\n    this.#qualityRender = !!options.qualityRender;\n    this.gammaOutput = true;\n\n    this.#sectionPlanesHash = null;\n    this.#lightsHash = null;\n\n    // this.canvas = new View(this, {\n    //     canvas: canvas,\n    //     transparent: !!options.transparent,\n    //     backgroundColor: options.backgroundColor,\n    //     backgroundColorFromAmbientLight: !!options.backgroundColorFromAmbientLight,\n    //     premultipliedAlpha: !!options.premultipliedAlpha\n    // });\n    //\n    // this.canvas.onBoundary.subscribe(() => {\n    //     this.redraw();\n    // });\n\n    this.onBoundary = new EventEmitter(\n      new EventDispatcher<View, IntArrayParam>()\n    );\n\n    this.#resolutionScale = 1;\n    this.#backgroundColor = createVec3([\n      options.backgroundColor ? options.backgroundColor[0] : 1,\n      options.backgroundColor ? options.backgroundColor[1] : 1,\n      options.backgroundColor ? options.backgroundColor[2] : 1,\n    ]);\n    this.#backgroundColorFromAmbientLight =\n      !!options.backgroundColorFromAmbientLight;\n\n    this.canvasElement = options.canvasElement;\n    this.transparent = !!options.transparent;\n    this.canvasElement.width = this.canvasElement.clientWidth;\n    this.canvasElement.height = this.canvasElement.clientHeight;\n    this.boundary = [\n      this.canvasElement.offsetLeft,\n      this.canvasElement.offsetTop,\n      this.canvasElement.clientWidth,\n      this.canvasElement.clientHeight,\n    ];\n\n    // Publish canvasElement size and position changes on each scene tick\n\n    let lastWindowWidth = 0;\n    let lastWindowHeight = 0;\n    let lastViewWidth = 0;\n    let lastViewHeight = 0;\n    let lastViewOffsetLeft = 0;\n    let lastViewOffsetTop = 0;\n    let lastParent: null | HTMLElement = null;\n\n    let lastResolutionScale: null | number = null;\n\n    this.#onTick = this.viewer.onTick.subscribe(() => {\n      const canvasElement = this.canvasElement;\n      const newResolutionScale = this.#resolutionScale !== lastResolutionScale;\n      const newWindowSize =\n        window.innerWidth !== lastWindowWidth ||\n        window.innerHeight !== lastWindowHeight;\n      const newViewSize =\n        canvasElement.clientWidth !== lastViewWidth ||\n        canvasElement.clientHeight !== lastViewHeight;\n      const newViewPos =\n        canvasElement.offsetLeft !== lastViewOffsetLeft ||\n        canvasElement.offsetTop !== lastViewOffsetTop;\n      const parent = canvasElement.parentElement;\n      const newParent = parent !== lastParent;\n\n      if (\n        newResolutionScale ||\n        newWindowSize ||\n        newViewSize ||\n        newViewPos ||\n        newParent\n      ) {\n        //   this._spinner._adjustPosition();\n        if (newResolutionScale || newViewSize || newViewPos) {\n          const newWidth = canvasElement.clientWidth;\n          const newHeight = canvasElement.clientHeight;\n          if (newResolutionScale || newViewSize) {\n            canvasElement.width = Math.round(\n              canvasElement.clientWidth * this.#resolutionScale\n            );\n            canvasElement.height = Math.round(\n              canvasElement.clientHeight * this.#resolutionScale\n            );\n          }\n          const boundary = this.boundary;\n          boundary[0] = canvasElement.offsetLeft;\n          boundary[1] = canvasElement.offsetTop;\n          boundary[2] = newWidth;\n          boundary[3] = newHeight;\n          if (!newResolutionScale || newViewSize) {\n            this.onBoundary.dispatch(this, boundary);\n          }\n          lastViewWidth = newWidth;\n          lastViewHeight = newHeight;\n        }\n\n        if (newResolutionScale) {\n          lastResolutionScale = this.#resolutionScale;\n        }\n        if (newWindowSize) {\n          lastWindowWidth = window.innerWidth;\n          lastWindowHeight = window.innerHeight;\n        }\n        if (newViewPos) {\n          lastViewOffsetLeft = canvasElement.offsetLeft;\n          lastViewOffsetTop = canvasElement.offsetTop;\n        }\n        lastParent = parent;\n      }\n    });\n\n    this.camera = new Camera(this);\n\n    this.sao = new SAO(this, {});\n\n    this.cameraFlight = new CameraFlightAnimation(this, {\n      duration: 0.5,\n    });\n\n    this.metrics = new Metrics(this, {\n      units: options.units,\n      scale: options.scale,\n      origin: options.origin,\n    });\n\n    this.xrayMaterial = new EmphasisMaterial(this, {\n      fill: true,\n      fillColor: [0.9, 0.7, 0.6],\n      fillAlpha: 0.4,\n      edges: true,\n      edgeColor: [0.5, 0.4, 0.4],\n      edgeAlpha: 1.0,\n      edgeWidth: 1,\n    });\n\n    this.highlightMaterial = new EmphasisMaterial(this, {\n      fill: true,\n      fillColor: [1.0, 1.0, 0.0],\n      fillAlpha: 0.5,\n      edges: true,\n      edgeColor: [0.5, 0.4, 0.4],\n      edgeAlpha: 1.0,\n      edgeWidth: 1,\n    });\n\n    this.selectedMaterial = new EmphasisMaterial(this, {\n      fill: true,\n      fillColor: [0.0, 1.0, 0.0],\n      fillAlpha: 0.5,\n      edges: true,\n      edgeColor: [0.4, 0.5, 0.4],\n      edgeAlpha: 1.0,\n      edgeWidth: 1,\n    });\n\n    this.edgeMaterial = new EdgeMaterial(this, {\n      edgeColor: [0.0, 0.0, 0.0],\n      edgeAlpha: 1.0,\n      edgeWidth: 1,\n      edges: true,\n      renderModes: [QualityRender],\n    });\n\n    this.pointsMaterial = new PointsMaterial(this, {\n      pointSize: 1,\n      roundPoints: true,\n      perspectivePoints: true,\n      minPerspectivePointSize: 1,\n      maxPerspectivePointSize: 6,\n      filterIntensity: false,\n      minIntensity: 0,\n      maxIntensity: 1,\n    });\n\n    this.linesMaterial = new LinesMaterial(this, {\n      lineWidth: 1,\n    });\n\n    this.lights = {};\n\n    this.#qualityRender = !!options.qualityRender;\n\n    this.autoLayers = options.autoLayers !== false;\n\n    this.logarithmicDepthBufferEnabled =\n      !!options.logarithmicDepthBufferEnabled;\n\n    this.onObjectVisibility = new EventEmitter(\n      new EventDispatcher<View, ViewObject>()\n    );\n    this.onObjectXRayed = new EventEmitter(\n      new EventDispatcher<View, ViewObject>()\n    );\n    this.onLayerCreated = new EventEmitter(\n      new EventDispatcher<View, ViewLayer>()\n    );\n    this.onLayerDestroyed = new EventEmitter(\n      new EventDispatcher<View, ViewLayer>()\n    );\n    this.onSectionPlaneCreated = new EventEmitter(\n      new EventDispatcher<View, SectionPlane>()\n    );\n    this.onSectionPlaneDestroyed = new EventEmitter(\n      new EventDispatcher<View, SectionPlane>()\n    );\n\n    this.#initObjects();\n  }\n\n  /**\n   *\n   */\n  get aabb(): FloatArrayParam {\n    return this.viewer.scene.aabb;\n  }\n\n  /**\n   * Gets the canvas clear color.\n   *\n   * Default value is ````[1, 1, 1]````.\n   */\n  get backgroundColor(): FloatArrayParam {\n    return this.#backgroundColor;\n  }\n\n  /**\n   * Sets the canvas clear color.\n   *\n   * Default value is ````[1, 1, 1]````.\n   */\n  set backgroundColor(value: FloatArrayParam) {\n    if (value) {\n      this.#backgroundColor[0] = value[0];\n      this.#backgroundColor[1] = value[1];\n      this.#backgroundColor[2] = value[2];\n    } else {\n      this.#backgroundColor[0] = 1.0;\n      this.#backgroundColor[1] = 1.0;\n      this.#backgroundColor[2] = 1.0;\n    }\n    this.redraw();\n  }\n\n  /**\n   * Gets whether the canvas clear color will be derived from {@link AmbientLight} or {@link View#backgroundColor}\n   * when {@link View#transparent} is ```true```.\n   *\n   * When {@link View#transparent} is ```true``` and this is ````true````, then the canvas clear color will\n   * be taken from the ambient light color.\n   *\n   * When {@link View#transparent} is ```true``` and this is ````false````, then the canvas clear color will\n   * be taken from {@link View#backgroundColor}.\n   *\n   * Default value is ````true````.\n   */\n  get backgroundColorFromAmbientLight(): boolean {\n    return this.#backgroundColorFromAmbientLight;\n  }\n\n  /**\n   * Sets if the canvas background color is derived from an {@link AmbientLight}.\n   *\n   * This only has effect when the canvas is not transparent. When not enabled, the background color\n   * will be the canvas element's HTML/CSS background color.\n   *\n   * Default value is ````true````.\n   */\n  set backgroundColorFromAmbientLight(\n    backgroundColorFromAmbientLight: boolean\n  ) {\n    this.#backgroundColorFromAmbientLight =\n      backgroundColorFromAmbientLight !== false;\n  }\n\n  /**\n   * Gets the scale of the canvas back buffer relative to the CSS-defined size of the canvas.\n   *\n   * This is a kdtree3 way to trade off rendering quality for speed. If the canvas size is defined in CSS, then\n   * setting this to a value between ````[0..1]```` (eg ````0.5````) will render into a smaller back buffer, giving\n   * a performance boost.\n   *\n   * @returns  The resolution scale.\n   */\n  get resolutionScale(): number {\n    return this.#resolutionScale;\n  }\n\n  /**\n   * Sets the scale of the canvas back buffer relative to the CSS-defined size of the canvas.\n   *\n   * This is a kdtree3 way to trade off rendering quality for speed. If the canvas size is defined in CSS, then\n   * setting this to a value between ````[0..1]```` (eg ````0.5````) will render into a smaller back buffer, giving\n   * a performance boost.\n   *\n   * @param resolutionScale The resolution scale.\n   */\n  set resolutionScale(resolutionScale: number) {\n    resolutionScale = resolutionScale || 1.0;\n    if (resolutionScale === this.#resolutionScale) {\n      return;\n    }\n    this.#resolutionScale = resolutionScale;\n    const canvasElement = this.canvasElement;\n    canvasElement.width = Math.round(\n      canvasElement.clientWidth * this.#resolutionScale\n    );\n    canvasElement.height = Math.round(\n      canvasElement.clientHeight * this.#resolutionScale\n    );\n    this.redraw();\n  }\n\n  /**\n   * Gets the gamma factor.\n   */\n  get gammaFactor() {\n    // TODO\n    return 1.0;\n  }\n\n  /**\n   * Gets whether quality rendering is enabled for this View.\n   *\n   * Default is ````false````.\n   */\n  get qualityRender(): boolean {\n    return this.#qualityRender;\n  }\n\n  /**\n   * Sets whether quality rendering is enabled for this View.\n   *\n   * Default is ````false````.\n   */\n  set qualityRender(value: boolean) {\n    if (this.#qualityRender === value) {\n      return;\n    }\n    this.#qualityRender = value;\n    this.redraw();\n  }\n\n  /**\n   * Gets the number of {@link ViewObject | ViewObjects} in this View.\n   */\n  get numObjects(): number {\n    return this.#numObjects;\n  }\n\n  /**\n   * Gets the IDs of the {@link ViewObject | ViewObjects} in this View.\n   */\n  get objectIds(): string[] {\n    if (!this.#objectIds) {\n      this.#objectIds = Object.keys(this.objects);\n    }\n    return this.#objectIds;\n  }\n\n  /**\n   * Gets the number of visible {@link ViewObject | ViewObjects} in this View.\n   */\n  get numVisibleObjects(): number {\n    return this.#numVisibleObjects;\n  }\n\n  /**\n   * Gets the IDs of the visible {@link ViewObject | ViewObjects} in this View.\n   */\n  get visibleObjectIds(): string[] {\n    if (!this.#visibleObjectIds) {\n      this.#visibleObjectIds = Object.keys(this.visibleObjects);\n    }\n    return this.#visibleObjectIds;\n  }\n\n  /**\n   * Gets the number of X-rayed {@link ViewObject | ViewObjects} in this View.\n   */\n  get numXRayedObjects(): number {\n    return this.#numXRayedObjects;\n  }\n\n  /**\n   * Gets the IDs of the X-rayed {@link ViewObject | ViewObjects} in this View.\n   */\n  get xrayedObjectIds(): string[] {\n    if (!this.#xrayedObjectIds) {\n      this.#xrayedObjectIds = Object.keys(this.xrayedObjects);\n    }\n    return this.#xrayedObjectIds;\n  }\n\n  /**\n   * Gets the number of highlighted {@link ViewObject | ViewObjects} in this View.\n   */\n  get numHighlightedObjects(): number {\n    return this.#numHighlightedObjects;\n  }\n\n  /**\n   * Gets the IDs of the highlighted {@link ViewObject | ViewObjects} in this View.\n   */\n  get highlightedObjectIds(): string[] {\n    if (!this.#highlightedObjectIds) {\n      this.#highlightedObjectIds = Object.keys(this.highlightedObjects);\n    }\n    return this.#highlightedObjectIds;\n  }\n\n  /**\n   * Gets the number of selected {@link ViewObject | ViewObjects} in this View.\n   */\n  get numSelectedObjects(): number {\n    return this.#numSelectedObjects;\n  }\n\n  /**\n   * Gets the IDs of the selected {@link ViewObject | ViewObjects} in this View.\n   */\n  get selectedObjectIds(): string[] {\n    if (!this.#selectedObjectIds) {\n      this.#selectedObjectIds = Object.keys(this.selectedObjects);\n    }\n    return this.#selectedObjectIds;\n  }\n\n  /**\n   * Gets the number of colorized {@link ViewObject | ViewObjects} in this View.\n   */\n  get numColorizedObjects(): number {\n    return this.#numColorizedObjects;\n  }\n\n  /**\n   * Gets the IDs of the colorized {@link ViewObject | ViewObjects} in this View.\n   */\n  get colorizedObjectIds(): string[] {\n    if (!this.#colorizedObjectIds) {\n      this.#colorizedObjectIds = Object.keys(this.colorizedObjects);\n    }\n    return this.#colorizedObjectIds;\n  }\n\n  /**\n   * Gets the IDs of the {@link ViewObject | ViewObjects} in this View that have updated opacities.\n   */\n  get opacityObjectIds(): string[] {\n    if (!this.#opacityObjectIds) {\n      this.#opacityObjectIds = Object.keys(this.opacityObjects);\n    }\n    return this.#opacityObjectIds;\n  }\n\n  /**\n   * Gets the number of {@link ViewObject | ViewObjects} in this View that have updated opacities.\n   */\n  get numOpacityObjects(): number {\n    return this.#numOpacityObjects;\n  }\n\n  /**\n   * @private\n   */\n  registerViewObject(viewObject: ViewObject) {\n    this.objects[viewObject.id] = viewObject;\n    this.#numObjects++;\n    this.#objectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * @private\n   */\n  deregisterViewObject(viewObject: ViewObject) {\n    delete this.objects[viewObject.id];\n    delete this.visibleObjects[viewObject.id];\n    delete this.xrayedObjects[viewObject.id];\n    delete this.highlightedObjects[viewObject.id];\n    delete this.selectedObjects[viewObject.id];\n    delete this.colorizedObjects[viewObject.id];\n    delete this.opacityObjects[viewObject.id];\n    this.#numObjects--;\n    this.#objectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * @private\n   */\n  objectVisibilityUpdated(\n    viewObject: ViewObject,\n    visible: boolean,\n    notify: boolean = true\n  ) {\n    if (visible) {\n      this.visibleObjects[viewObject.id] = viewObject;\n      this.#numVisibleObjects++;\n    } else {\n      delete this.visibleObjects[viewObject.id];\n      this.#numVisibleObjects--;\n    }\n    this.#visibleObjectIds = null; // Lazy regenerate\n    if (notify) {\n      this.onObjectVisibility.dispatch(this, viewObject);\n    }\n  }\n\n  /**\n   * @private\n   */\n  objectXRayedUpdated(\n    viewObject: ViewObject,\n    xrayed: boolean,\n    notify: boolean = true\n  ) {\n    if (xrayed) {\n      this.xrayedObjects[viewObject.id] = viewObject;\n      this.#numXRayedObjects++;\n    } else {\n      delete this.xrayedObjects[viewObject.id];\n      this.#numXRayedObjects--;\n    }\n    this.#xrayedObjectIds = null; // Lazy regenerate\n    if (notify) {\n      this.onObjectXRayed.dispatch(this, viewObject);\n    }\n  }\n\n  /**\n   * @private\n   */\n  objectHighlightedUpdated(viewObject: ViewObject, highlighted: boolean) {\n    if (highlighted) {\n      this.highlightedObjects[viewObject.id] = viewObject;\n      this.#numHighlightedObjects++;\n    } else {\n      delete this.highlightedObjects[viewObject.id];\n      this.#numHighlightedObjects--;\n    }\n    this.#highlightedObjectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * @private\n   */\n  objectSelectedUpdated(viewObject: ViewObject, selected: boolean) {\n    if (selected) {\n      this.selectedObjects[viewObject.id] = viewObject;\n      this.#numSelectedObjects++;\n    } else {\n      delete this.selectedObjects[viewObject.id];\n      this.#numSelectedObjects--;\n    }\n    this.#selectedObjectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * @private\n   */\n  objectColorizeUpdated(viewObject: ViewObject, colorized: boolean) {\n    if (colorized) {\n      this.colorizedObjects[viewObject.id] = viewObject;\n      this.#numColorizedObjects++;\n    } else {\n      delete this.colorizedObjects[viewObject.id];\n      this.#numColorizedObjects--;\n    }\n    this.#colorizedObjectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * @private\n   */\n  objectOpacityUpdated(viewObject: ViewObject, opacityUpdated: boolean) {\n    if (opacityUpdated) {\n      this.opacityObjects[viewObject.id] = viewObject;\n      this.#numOpacityObjects++;\n    } else {\n      delete this.opacityObjects[viewObject.id];\n      this.#numOpacityObjects--;\n    }\n    this.#opacityObjectIds = null; // Lazy regenerate\n  }\n\n  /**\n   * Creates a {@link SectionPlane} in this View.\n   *\n   * @param sectionPlaneParams\n   */\n  createSectionPlane(sectionPlaneParams: SectionPlaneParams): SectionPlane {\n    let id = sectionPlaneParams.id || createUUID();\n    if (this.sectionPlanes[id]) {\n      this.error(\n        `SectionPlane with ID \"${id}\" already exists - will randomly-generate ID`\n      );\n      id = createUUID();\n    }\n    const sectionPlane = new SectionPlane(this, sectionPlaneParams);\n    this.#registerSectionPlane(sectionPlane);\n    sectionPlane.onDestroyed.one(() => {\n      this.#deregisterSectionPlane(sectionPlane);\n    });\n    return sectionPlane;\n  }\n\n  /**\n   * Destroys the {@link SectionPlane}s in this View.\n   */\n  clearSectionPlanes(): void {\n    const objectIds = Object.keys(this.sectionPlanes);\n    for (let i = 0, len = objectIds.length; i < len; i++) {\n      this.sectionPlanes[objectIds[i]].destroy();\n    }\n    this.sectionPlanesList.length = 0;\n    this.#sectionPlanesHash = null;\n  }\n\n  /**\n   * @private\n   */\n  getSectionPlanesHash() {\n    if (this.#sectionPlanesHash) {\n      return this.#sectionPlanesHash;\n    }\n    if (this.sectionPlanesList.length === 0) {\n      return (this.#sectionPlanesHash = \";\");\n    }\n    let sectionPlane;\n    const hashParts = [];\n    for (let i = 0, len = this.sectionPlanesList.length; i < len; i++) {\n      sectionPlane = this.sectionPlanesList[i];\n      hashParts.push(\"cp\");\n    }\n    hashParts.push(\";\");\n    this.#sectionPlanesHash = hashParts.join(\"\");\n    return this.#sectionPlanesHash;\n  }\n\n  /**\n   * @private\n   */\n  registerLight(light: PointLight | DirLight | AmbientLight) {\n    this.lightsList.push(light);\n    this.lights[light.id] = light;\n    this.#lightsHash = null;\n    this.rebuild();\n  }\n\n  /**\n   * @private\n   */\n  deregisterLight(light: PointLight | DirLight | AmbientLight) {\n    for (let i = 0, len = this.lightsList.length; i < len; i++) {\n      if (this.lightsList[i].id === light.id) {\n        this.lightsList.splice(i, 1);\n        this.#lightsHash = null;\n        delete this.lights[light.id];\n        this.rebuild();\n        return;\n      }\n    }\n  }\n\n  /**\n   * Destroys the light sources in this View.\n   */\n  clearLights(): void {\n    const objectIds = Object.keys(this.lights);\n    for (let i = 0, len = objectIds.length; i < len; i++) {\n      this.lights[objectIds[i]].destroy();\n    }\n  }\n\n  /**\n   * @private\n   */\n  getLightsHash() {\n    if (this.#lightsHash) {\n      return this.#lightsHash;\n    }\n    if (this.lightsList.length === 0) {\n      return (this.#lightsHash = \";\");\n    }\n    const hashParts = [];\n    const lights = this.lightsList;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light: any = lights[i];\n      hashParts.push(\"/\");\n      hashParts.push(light.type);\n      hashParts.push(light.space === \"world\" ? \"w\" : \"v\");\n      if (light.castsShadow) {\n        hashParts.push(\"sh\");\n      }\n    }\n    // if (this.lightMaps.length > 0) {\n    //     hashParts.push(\"/lm\");\n    // }\n    // if (this.reflectionMaps.length > 0) {\n    //     hashParts.push(\"/rm\");\n    // }\n    hashParts.push(\";\");\n    this.#lightsHash = hashParts.join(\"\");\n    return this.#lightsHash;\n  }\n\n  //createLight(lightParams) {\n  //\n  // }\n\n  /**\n   * @private\n   */\n  rebuild() {\n    this.viewer.renderer.needsRebuild(this.viewIndex);\n  }\n\n  /**\n   * @private\n   */\n  redraw() {\n    this.viewer.renderer.setImageDirty(this.viewIndex);\n  }\n\n  /**\n   * Destroys this View.\n   *\n   * Causes {@link @xeokit/viewer!Viewer} to fire a \"viewDestroyed\" event.\n   */\n  destroy() {\n    this.viewer.onTick.unsubscribe(this.#onTick);\n    super.destroy();\n    this.onObjectVisibility.clear();\n    this.onObjectXRayed.clear();\n    this.onLayerCreated.clear();\n    this.onLayerDestroyed.clear();\n    this.onSectionPlaneCreated.clear();\n    this.onSectionPlaneDestroyed.clear();\n  }\n\n  /**\n   * @private\n   */\n  getAmbientColorAndIntensity(): FloatArrayParam {\n    return [0, 0, 0, 1];\n  }\n\n  /**\n   * Updates the visibility of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.visible} on the Objects with the given IDs.\n   * - Updates {@link View.visibleObjects} and {@link View.numVisibleObjects}.\n   *\n   * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n   * @param visible Whether or not to cull.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsVisible(objectIds: string[], visible: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.visible !== visible;\n      viewObject.visible = visible;\n      return changed;\n    });\n  }\n\n  /**\n   * Updates the collidability of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * Updates {@link ViewObject.collidable} on the Objects with the given IDs.\n   *\n   * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n   * @param collidable Whether or not to cull.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsCollidable(objectIds: string[], collidable: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.collidable !== collidable;\n      viewObject.collidable = collidable;\n      return changed;\n    });\n  }\n\n  /**\n   * Updates the culled status of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * Updates {@link ViewObject.culled} on the Objects with the given IDs.\n   *\n   * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n   * @param culled Whether or not to cull.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsCulled(objectIds: string[], culled: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.culled !== culled;\n      viewObject.culled = culled;\n      return changed;\n    });\n  }\n\n  /**\n   * Selects or deselects the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.selected} on the Objects with the given IDs.\n   * - Updates {@link View.selectedObjects} and {@link View.numSelectedObjects}.\n   *\n   * @param  objectIds One or more {@link ViewObject.id} values.\n   * @param selected Whether or not to select.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsSelected(objectIds: string[], selected: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.selected !== selected;\n      viewObject.selected = selected;\n      return changed;\n    });\n  }\n\n  /**\n   * Highlights or un-highlights the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.highlighted} on the Objects with the given IDs.\n   * - Updates {@link View.highlightedObjects} and {@link View.numHighlightedObjects}.\n   *\n   * @param  objectIds One or more {@link ViewObject.id} values.\n   * @param highlighted Whether or not to highlight.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsHighlighted(objectIds: string[], highlighted: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.highlighted !== highlighted;\n      viewObject.highlighted = highlighted;\n      return changed;\n    });\n  }\n\n  /**\n   * Applies or removes X-ray rendering for the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.xrayed} on the Objects with the given IDs.\n   * - Updates {@link View.xrayedObjects} and {@link View.numXRayedObjects}.\n   *\n   * @param  objectIds One or more {@link ViewObject.id} values.\n   * @param xrayed Whether or not to xray.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsXRayed(objectIds: string[], xrayed: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.xrayed !== xrayed;\n      if (changed) {\n        viewObject.xrayed = xrayed;\n      }\n      return changed;\n    });\n  }\n\n  /**\n   * Colorizes the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.colorize} on the Objects with the given IDs.\n   * - Updates {@link View.colorizedObjects} and {@link View.numColorizedObjects}.\n   *\n   * @param  objectIds One or more {@link ViewObject.id} values.\n   * @param colorize - RGB colorize factors in range ````[0..1,0..1,0..1]````.\n   * @returns True if any {@link ViewObject | ViewObjects} changed opacity, else false if all updates were redundant and not applied.\n   */\n  setObjectsColorized(objectIds: string[], colorize: number[]) {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      viewObject.colorize = colorize;\n    });\n  }\n\n  /**\n   * Sets the opacity of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.opacity} on the Objects with the given IDs.\n   * - Updates {@link View.opacityObjects} and {@link View.numOpacityObjects}.\n   *\n   * @param  objectIds - One or more {@link ViewObject.id} values.\n   * @param opacity - Opacity factor in range ````[0..1]````.\n   * @returns True if any {@link ViewObject | ViewObjects} changed opacity, else false if all updates were redundant and not applied.\n   */\n  setObjectsOpacity(objectIds: string[], opacity: number): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.opacity !== opacity;\n      if (changed) {\n        viewObject.opacity = opacity;\n      }\n      return changed;\n    });\n  }\n\n  /**\n   * Sets the pickability of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.pickable} on the Objects with the given IDs.\n   * - Enables or disables the ability to pick the given Objects with {@link View.pick}.\n   *\n   * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n   * @param pickable Whether or not to set pickable.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsPickable(objectIds: string[], pickable: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.pickable !== pickable;\n      if (changed) {\n        viewObject.pickable = pickable;\n      }\n      return changed;\n    });\n  }\n\n  /**\n   * Sets the clippability of the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * - Updates {@link ViewObject.clippable} on the Objects with the given IDs.\n   * - Enables or disables the ability to clip the given Objects with {@link SectionPlane}.\n   *\n   * @param {String[]} objectIds Array of {@link ViewObject.id} values.\n   * @param clippable Whether or not to set clippable.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  setObjectsClippable(objectIds: string[], clippable: boolean): boolean {\n    return this.withObjects(objectIds, (viewObject: ViewObject) => {\n      const changed = viewObject.clippable !== clippable;\n      if (changed) {\n        viewObject.clippable = clippable;\n      }\n      return changed;\n    });\n  }\n\n  /**\n   * Iterates with a callback over the given {@link ViewObject | ViewObjects} in this View.\n   *\n   * @param  objectIds One or more {@link ViewObject.id} values.\n   * @param callback Callback to execute on each {@link ViewObject}.\n   * @returns True if any {@link ViewObject | ViewObjects} were updated, else false if all updates were redundant and not applied.\n   */\n  withObjects(objectIds: string[], callback: Function): boolean {\n    let changed = false;\n    for (let i = 0, len = objectIds.length; i < len; i++) {\n      const id = objectIds[i];\n      let viewObject = this.objects[id];\n      if (viewObject) {\n        changed = callback(viewObject) || changed;\n      }\n    }\n    return changed;\n  }\n\n  /**\n   * Creates a {@link ViewLayer} in this View.\n   *\n   * The ViewLayer is then registered in {@link View.layers}.\n   *\n   * Since the ViewLayer is created explicitly by this method, the ViewLayer will persist until {@link ViewLayer.destroy}\n   * is called, or the {@link @xeokit/viewer!View} itself is destroyed. If a ViewLayer with the given ID already exists, then the method\n   * returns that existing ViewLayer. The method will also ensure that the existing ViewLayer likewise persists.\n   *\n   * @param viewLayerParams\n   * @returns The new ViewLayer\n   */\n  createLayer(viewLayerParams: ViewLayerParams): ViewLayer {\n    let viewLayer = this.layers[viewLayerParams.id];\n    if (!viewLayer) {\n      viewLayer = new ViewLayer({\n        // Automatically creates ViewObjects\n        id: viewLayerParams.id,\n        view: this,\n        viewer: this.viewer,\n      });\n      this.layers[viewLayerParams.id] = viewLayer;\n      this.onLayerCreated.dispatch(this, viewLayer);\n      viewLayer.onDestroyed.one(() => {\n        delete this.layers[viewLayer.id];\n        this.onLayerDestroyed.dispatch(this, viewLayer);\n      });\n    }\n    viewLayer.autoDestroy = false;\n    return viewLayer;\n  }\n\n  #registerSectionPlane(sectionPlane: SectionPlane) {\n    this.sectionPlanesList.push(sectionPlane);\n    this.sectionPlanes[sectionPlane.id] = sectionPlane;\n    this.#sectionPlanesHash = null;\n    this.rebuild();\n    this.onSectionPlaneCreated.dispatch(this, sectionPlane);\n  }\n\n  #deregisterSectionPlane(sectionPlane: SectionPlane) {\n    for (let i = 0, len = this.sectionPlanesList.length; i < len; i++) {\n      if (this.sectionPlanesList[i].id === sectionPlane.id) {\n        this.sectionPlanesList.splice(i, 1);\n        this.#sectionPlanesHash = null;\n        delete this.sectionPlanes[sectionPlane.id];\n        this.rebuild();\n        this.onSectionPlaneDestroyed.dispatch(this, sectionPlane);\n        return;\n      }\n    }\n  }\n\n  #initObjects() {\n    for (const id in this.viewer.scene.models) {\n      this.#createObjects(this.viewer.scene.models[id]);\n    }\n    this.viewer.scene.onModelCreated.subscribe(\n      (scene: Scene, model: SceneModel) => {\n        this.#createObjects(model);\n      }\n    );\n    this.viewer.scene.onModelDestroyed.subscribe(\n      (scene: Scene, model: SceneModel) => {\n        this.#destroyObjects(model);\n      }\n    );\n  }\n\n  #createObjects(model: SceneModel) {\n    const sceneObjects = model.objects;\n    const rendererObjects = this.viewer.renderer.rendererViewObjects;\n    for (let id in sceneObjects) {\n      const sceneObject = sceneObjects[id];\n      const rendererObject = rendererObjects[id];\n      //     const layerId = viewerObject.layerId || \"default\";\n      const layerId = \"default\";\n      let viewLayer = this.layers[layerId];\n      if (!viewLayer) {\n        if (!this.autoLayers) {\n          continue;\n        }\n        viewLayer = new ViewLayer({\n          id: layerId,\n          view: this,\n          viewer: this.viewer,\n        });\n        this.layers[layerId] = viewLayer;\n        viewLayer.onDestroyed.one(() => {\n          delete this.layers[viewLayer.id];\n          this.onLayerDestroyed.dispatch(this, viewLayer);\n        });\n        this.onLayerCreated.dispatch(this, viewLayer);\n      }\n      const viewObject = new ViewObject(viewLayer, sceneObject, rendererObject);\n      viewLayer.registerViewObject(viewObject);\n      this.registerViewObject(viewObject);\n    }\n  }\n\n  #destroyObjects(model: SceneModel) {\n    const objects = model.objects;\n    for (let id in objects) {\n      const object = objects[id];\n      //     const layerId = object.layerId || \"main\";\n      const layerId = \"default\";\n      let viewLayer = this.layers[layerId];\n      const viewObject = this.objects[object.id];\n      this.deregisterViewObject(viewObject);\n      if (viewLayer) {\n        viewLayer.deregisterViewObject(viewObject);\n        if (viewLayer.autoDestroy && viewLayer.numObjects === 0) {\n          viewLayer.destroy();\n        }\n      }\n    }\n  }\n}\n\nexport { View };\n","import {apply, createUUID, inQuotes} from \"@xeokit/utils\";\nimport {Capabilities, Component, EventEmitter, SDKError} from \"@xeokit/core\";\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {Scene} from \"@xeokit/scene\";\n\nimport {View} from \"./View\";\nimport {scheduler} from \"./scheduler\";\nimport type {Renderer} from \"./Renderer\";\n\nimport type {ViewParams} from \"./ViewParams\";\n\nclass TickParams {\n}\n\n/**\n * A Browser-based 2D/3D model viewer.\n *\n * See {@link @xeokit/viewer} for usage.\n */\nexport class Viewer extends Component {\n\n    /**\n     ID of this Viewer.\n     */\n    declare readonly id: string;\n\n    /**\n     True once this Viewer has been destroyed.\n\n     Don't use this Viewer if this is ````true````.\n     */\n    declare readonly destroyed: boolean;\n\n    /**\n     * Indicates the capabilities of this Viewer.\n     */\n    readonly capabilities: Capabilities;\n\n    /**\n     * Emits an event each time a Viewer \"tick\" occurs (~10-60 times per second).\n     *\n     * @event\n     */\n    readonly onTick: EventEmitter<Viewer, TickParams>;\n\n    /**\n     * Emits an event each time a {@link @xeokit/viewer!View} is created.\n     *\n     * @event\n     */\n    readonly onViewCreated: EventEmitter<Viewer, View>;\n\n    /**\n     * Emits an event each time a {@link @xeokit/viewer!View} is destroyed.\n     *\n     * @event\n     */\n    readonly onViewDestroyed: EventEmitter<Viewer, View>;\n\n    /**\n     * The Viewer's scene representation.\n     */\n    readonly scene: Scene;\n\n    /**\n     * Map of all the Views in this Viewer.\n     *\n     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.\n     */\n    readonly views: { [key: string]: View };\n\n    /**\n     * List of all the Views in this Viewer.\n     *\n     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.\n     */\n    readonly viewList: View[];\n\n    /**\n     *  The number of {@link View | Views} belonging to this Viewer.\n     */\n    numViews: number;\n\n    /**\n     The time that this Viewer was created.\n     */\n    readonly startTime: number = (new Date()).getTime();\n\n    /**\n     * @private\n     */\n    readonly renderer: Renderer;\n\n    /**\n     Creates a Viewer.\n\n     @param params - Viewer configuration.\n     @param params.scene - Contains model representations.\n     @param params.renderer - Manages rendering of models.\n     @param params.id - ID for this Viewer, automatically generated by default.\n     @param params.units - The measurement unit type. Accepted values are ````\"meters\"````, ````\"metres\"````, , ````\"centimeters\"````, ````\"centimetres\"````, ````\"millimeters\"````,  ````\"millimetres\"````, ````\"yards\"````, ````\"feet\"```` and ````\"inches\"````.\n     @param params.scale - The number of Real-space units in each World-space coordinate system unit.\n     @param params.origin - The Real-space 3D origin, in current measurement units, at which the World-space coordinate origin ````[0,0,0]```` sits.\n     @param params.localeService - Locale-based translation service.\n\n     */\n    constructor(params: {\n        scene?: Scene,\n        renderer: Renderer,\n        id?: string,\n        units?: string,\n        scale?: number,\n        origin?: FloatArrayParam,\n    }) {\n        super(null, {});\n\n        this.onTick = new EventEmitter(new EventDispatcher<Viewer, TickParams>());\n        this.onViewCreated = new EventEmitter(new EventDispatcher<Viewer, View>());\n        this.onViewDestroyed = new EventEmitter(new EventDispatcher<Viewer, View>());\n\n        this.id = params.id || createUUID();\n\n        this.viewList = [];\n        this.numViews = 0;\n        this.views = {};\n        this.destroyed = false;\n\n        this.capabilities = {\n            maxViews: 0,\n            astcSupported: false,\n            etc1Supported: false,\n            etc2Supported: false,\n            dxtSupported: false,\n            bptcSupported: false,\n            pvrtcSupported: false\n        };\n\n        this.scene = params.scene || new Scene();\n\n        this.renderer = params.renderer;\n        this.renderer.getCapabilities(this.capabilities);\n        this.renderer.init(this);\n\n        scheduler.registerViewer(this);\n    }\n\n    /**\n     * Creates a new {@link @xeokit/viewer!View} within this Viewer.\n     *\n     * * The maximum number of views you're allowed to create is provided in {@link Capabilities.maxViews}. This\n     * will be determined by the {@link Renderer} implementation the Viewer is configured with.\n     * * To destroy the View after use, call {@link View.destroy}.\n     * * You must add a View to the Viewer before you can create or load content into the Viewer's Viewer.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const view1 = myViewer.createView({\n     *      id: \"myView\",\n     *      canvasId: \"myView1\"\n     *  });\n     *\n     * if (view1 instanceof SDKError) {\n     *      console.log(view1.message);\n     * } else {\n     *      view1.camera.eye = [-3.933, 2.855, 27.018];\n     *      view1.camera.look = [4.400, 3.724, 8.899];\n     *      view1.camera.up = [-0.018, 0.999, 0.039];\n     *\n     *      //...\n     * }\n     * ````\n     *\n     * @param params View configuration.\n     * @returns *{@link View}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If View already exists with the given ID.\n     * * Attempted to create too many Views - see {@link Capabilities.maxViews | Capabilities.maxViews}.\n     */\n    createView(params: ViewParams): View | SDKError {\n        if (this.viewList.length >= this.capabilities.maxViews) {\n            return new SDKError(`Attempted to create too many Views with View.createView() - maximum of ${this.capabilities.maxViews} is allowed`);\n        }\n        let viewId = params.id || createUUID();\n        if (this.views[viewId]) {\n            return new SDKError(`View with ID \"${viewId}\" already exists`);\n        }\n        // @ts-ignore\n        const canvasElement = params.canvasElement || document.getElementById(params.canvasId);\n        if (!(canvasElement instanceof HTMLCanvasElement)) {\n            return new SDKError(\"Mandatory View config expected: valid canvasId or canvasElement\");\n        }\n        const view = new View(apply({viewId, viewer: this}, params));\n        this.#registerView(view);\n        view.viewIndex = this.renderer.registerView(view);\n        view.onDestroyed.one(() => {\n            this.#deregisterView(view);\n            this.renderer.deregisterView(view.viewIndex);\n            this.onViewDestroyed.dispatch(this, view);\n        });\n        this.onViewCreated.dispatch(this, view);\n        this.log(`View created: ${view.viewId}`);\n        return view;\n    }\n\n\n    /**\n     Trigger redraw of all {@link View | Views} belonging to this Viewer.\n\n     @private\n     */\n    redraw(): void {\n        for (let viewId in this.views) {\n            this.views[viewId].redraw();\n        }\n    }\n\n    /**\n     Logs a console debugging message for this Viewer.\n\n     The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n\n     @private\n     @param message - The message to log\n     */\n    log(message: string): void {\n        message = `[LOG] ${this.#prefixMessageWithID(message)}`;\n        window.console.log(message);\n    }\n\n    /**\n     Logs a warning for this Viewer to the JavaScript console.\n\n     The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n\n     @private\n     @param message - The warning message to log\n     */\n    warn(message: string): void {\n        message = `[WARN] ${this.#prefixMessageWithID(message)}`;\n        window.console.warn(message);\n    }\n\n    /**\n     Logs an error for this Viewer to the JavaScript console.\n\n     The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n\n     @private\n     @param message The error message to log\n     */\n    error(message: string): void {\n        message = `[ERROR] ${this.#prefixMessageWithID(message)}`;\n        window.console.error(message);\n    }\n\n    /**\n     * Destroys this Viewer and all {@link View | Views} and {@link Plugin}s we've created within it.\n     */\n    destroy(): void {\n        if (this.destroyed) {\n            return;\n        }\n        scheduler.deregisterViewer(this);\n        for (let id in this.views) {\n            this.views[id].destroy();\n        }\n        this.onTick.clear();\n        this.onViewCreated.clear();\n        this.onViewDestroyed.clear();\n\n    }\n\n    /**\n     * @private\n     * @param params\n     */\n    render(params: any) {\n        for (let viewIndex = 0; viewIndex < this.viewList.length; viewIndex++) {\n            this.renderer.render(viewIndex, {force: true});\n        }\n    }\n\n    #prefixMessageWithID(message: string): string {\n        return ` [${this.constructor.name} \"${inQuotes(this.id)}\"]: ${message}`;\n    }\n\n    #registerView(view: View): void {\n        if (this.views[view.id]) {\n            return;\n        }\n        this.views[view.id] = view;\n        for (let viewIndex = 0; ; viewIndex++) {\n            if (!this.viewList[viewIndex]) {\n                this.viewList[viewIndex] = view;\n                this.numViews++;\n                view.viewIndex = viewIndex;\n                return;\n            }\n        }\n    }\n\n    #deregisterView(view: View): void {\n        if (!this.views[view.id]) {\n            return;\n        }\n        delete this.views[view.id];\n        delete this.viewList[view.viewIndex];\n        this.numViews--;\n    }\n}","import {EventDispatcher} from \"strongly-typed-events\";\n\nimport type {Camera} from \"./Camera\";\nimport {Component, EventEmitter} from \"@xeokit/core\";\nimport {FrustumProjectionType} from \"@xeokit/constants\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport {createMat4, frustumMat4, inverseMat4, mulMat4v4, mulVec3Scalar, transposeMat4} from \"@xeokit/matrix\";\n\n/**\n *  FrustumProjection-based perspective projection configuration for a {@link @xeokit/viewer!Camera} .\n *\n * * Located at {@link Camera.frustumProjection}.\n * * Allows to explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful for asymmetrical view volumes, such as for stereo viewing.\n * * {@link FrustumProjection.near} and {@link FrustumProjection.far} specify the distances to the clipping planes.\n * * {@link FrustumProjection.onProjMatrix} will fire an event whenever {@link FrustumProjection.projMatrix} updates, which indicates that one or more other properties have updated.\n */\nexport class FrustumProjection extends Component {\n\n    /**\n     * The type of this projection.\n     */\n    static readonly type: number = FrustumProjectionType;\n    /**\n     * The Camera this FrustumProjection belongs to.\n     */\n    public readonly camera: Camera;\n    /**\n     * Emits an event each time {@link FrustumProjection.projMatrix} updates.\n     *\n     * @event\n     */\n    readonly onProjMatrix: EventEmitter<FrustumProjection, FloatArrayParam>;\n    #state: {\n        far: number;\n        near: number;\n        left: number;\n        right: number;\n        bottom: number;\n        top: number;\n        projMatrix: FloatArrayParam;\n        inverseProjMatrix: FloatArrayParam;\n        transposedProjMatrix: FloatArrayParam;\n    };\n\n    #inverseMatrixDirty: boolean;\n    #transposedProjMatrixDirty: boolean;\n\n    /**\n     * @private\n     */\n    constructor(camera: Camera, cfg: {\n        far?: number;\n        near?: number;\n        top?: number;\n        bottom?: number;\n        right?: number;\n        left?: number;\n    } = {}) {\n\n        super(camera, cfg);\n\n        this.camera = camera;\n\n        this.#state = {\n            projMatrix: createMat4(),\n            inverseProjMatrix: createMat4(),\n            transposedProjMatrix: createMat4(),\n            near: 0.1,\n            far: 10000.0,\n            left: (cfg.left !== undefined && cfg.left !== null) ? cfg.left : -1.0,\n            right: (cfg.right !== undefined && cfg.right !== null) ? cfg.right : 1.0,\n            bottom: (cfg.bottom !== undefined && cfg.bottom !== null) ? cfg.bottom : -1.0,\n            top: (cfg.top !== undefined && cfg.top !== null) ? cfg.top : 1.0\n        };\n\n        this.onProjMatrix = new EventEmitter(new EventDispatcher<FrustumProjection, FloatArrayParam>());\n\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's left plane on the View-space X-axis.\n     *\n     * @return {Number} Left frustum plane position.\n     */\n    get left(): number {\n        return this.#state.left;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's left plane on the View-space X-axis.\n     *\n     * @param value New left frustum plane position.\n     */\n    set left(value: number) {\n        this.#state.left = value;\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's right plane on the View-space X-axis.\n     *\n     * @return {Number} Right frustum plane position.\n     */\n    get right(): number {\n        return this.#state.right;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's right plane on the View-space X-axis.\n     *\n     * @param value New right frustum plane position.\n     */\n    set right(value: number) {\n        this.#state.right = value\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's top plane on the View-space Y-axis.\n     *\n     * @return {Number} Top frustum plane position.\n     */\n    get top(): number {\n        return this.#state.top;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's top plane on the View-space Y-axis.\n     *\n     * @param value New top frustum plane position.\n     */\n    set top(value: number) {\n        this.#state.top = value\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's bottom plane on the View-space Y-axis.\n     *\n     * @return {Number} Bottom frustum plane position.\n     */\n    get bottom(): number {\n        return this.#state.bottom;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's bottom plane on the View-space Y-axis.\n     *\n     * @param value New bottom frustum plane position.\n     */\n    set bottom(value: number) {\n        this.#state.bottom = value\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @return {Number} Near frustum plane position.\n     */\n    get near(): number {\n        return this.#state.near;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param value New FrustumProjection near plane position.\n     */\n    set near(value: number) {\n        this.#state.near = value\n        this.setDirty();\n    }\n\n    /**\n     * Gets the position of the FrustumProjection's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````10000.0````.\n     *\n     * @return {Number} Far frustum plane position.\n     */\n    get far(): number {\n        return this.#state.far;\n    }\n\n    /**\n     * Sets the position of the FrustumProjection's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````10000.0````.\n     *\n     * @param value New far frustum plane position.\n     */\n    set far(value: number) {\n        this.#state.far = value\n        this.setDirty();\n    }\n\n    /**\n     * Gets the FrustumProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns The FrustumProjection's projection matrix\n     */\n    get projMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        return this.#state.projMatrix;\n    }\n\n    /**\n     * Gets the inverse of {@link FrustumProjection.projMatrix}.\n     *\n     * @returns  The inverse orthographic projection projMatrix.\n     */\n    get inverseProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#inverseMatrixDirty) {\n            inverseMat4(this.#state.projMatrix, this.#state.inverseProjMatrix);\n            this.#inverseMatrixDirty = false;\n        }\n        return this.#state.inverseProjMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link FrustumProjection.projMatrix}.\n     *\n     * @returns The transpose of {@link FrustumProjection.projMatrix}.\n     */\n    get transposedProjMatrix(): FloatArrayParam {\n        if (this.dirty) {\n            this.cleanIfDirty();\n        }\n        if (this.#transposedProjMatrixDirty) {\n            transposeMat4(this.#state.projMatrix, this.#state.transposedProjMatrix);\n            this.#transposedProjMatrixDirty = false;\n        }\n        return this.#state.transposedProjMatrix;\n    }\n\n    /**\n     * @private\n     */\n    clean() {\n        frustumMat4(this.#state.left, this.#state.right, this.#state.bottom, this.#state.top, this.#state.near, this.#state.far, this.#state.projMatrix);\n        this.#inverseMatrixDirty = true;\n        this.#transposedProjMatrixDirty = true;\n        this.camera.view.redraw();\n        this.onProjMatrix.dispatch(this, this.#state.projMatrix);\n    }\n\n    /**\n     * Un-projects the given View-space coordinates, using this FrustumProjection projection.\n     *\n     * @param canvasPos Inputs 2D View-space coordinates.\n     * @param screenZ Inputs Screen-space Z coordinate.\n     * @param screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param viewPos Outputs un-projected 3D View-space coordinates.\n     * @param worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(\n        canvasPos: FloatArrayParam,\n        screenZ: number,\n        screenPos: FloatArrayParam,\n        viewPos: FloatArrayParam,\n        worldPos: FloatArrayParam): FloatArrayParam {\n\n        const canvasElement = this.camera.view.canvasElement;\n\n        const halfViewWidth = canvasElement.offsetWidth / 2.0;\n        const halfViewHeight = canvasElement.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfViewWidth) / halfViewWidth;\n        screenPos[1] = (canvasPos[1] - halfViewHeight) / halfViewHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        mulMat4v4(this.inverseProjMatrix, screenPos, viewPos);\n        mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this.onProjMatrix.clear();\n    }\n}\n","import {Component} from \"@xeokit/core\";\nimport type {View} from \"./View\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\n\n/**\n * An ambient light source within a {@link @xeokit/viewer!View}.\n *\n * ## Summary\n *\n * * Has fixed color and intensity that illuminates all objects equally.\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component.id} on {@link View.lights}.\n */\nclass AmbientLight extends Component {\n\n    /**\n     ID of this AmbientLight, unique within the {@link @xeokit/viewer!View}.\n     */\n    declare public id: string;\n\n    /**\n     * The View to which this AmbientLight belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        intensity: number;\n        color: Float32Array;\n        type: string\n    };\n\n    /**\n     * @param view Owner component. When destroyed, the owner will destroy this AmbientLight as well.\n     * @param cfg AmbientLight configuration\n     */\n    constructor(view: View, cfg: {\n        /** Optional ID, generated automatically when omitted.*/\n        id?: string;\n        /** Intensity factor in range ````[0..1]````.  Default is ````1````.*/\n        intensity?: number;\n        /** RGB color in range ````[0..1,0..1,0..1]````. Default is ````[0.7, 0.7, 0.7]````.*/\n        color?: FloatArrayParam\n    } = {}) {\n        super(view, cfg);\n        this.view = view;\n        this.#state = {\n            type: \"ambient\",\n            color: new Float32Array(cfg.color || [0.7, 0.7, 0.7]),\n            intensity: (cfg.intensity !== undefined && cfg.intensity !== null) ? cfg.intensity : 1.0\n        };\n        this.view.registerLight(this);\n    }\n\n    /**\n     * Sets the RGB color of this AmbientLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.7]````.\n     *\n     * @param color The AmbientLight's RGB color.\n     */\n    set color(color: FloatArrayParam) {\n        this.#state.color.set(color);\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the RGB color of this AmbientLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.7]````.\n     */\n    get color(): FloatArrayParam {\n        return this.#state.color;\n    }\n\n    /**\n     * Sets the intensity of this AmbientLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @param intensity The AmbientLight's intensity.\n     */\n    set intensity(intensity: number) {\n        this.#state.intensity = intensity !== undefined ? intensity : 1.0;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the intensity of this AmbientLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @returns {Number} The AmbientLight's intensity.\n     */\n    get intensity(): number {\n        return this.#state.intensity;\n    }\n\n    /**\n     * Destroys this AmbientLight.\n     */\n    destroy() {\n        super.destroy();\n        this.view.deregisterLight(this);\n    }\n}\n\nexport {AmbientLight};\n","import {Component} from \"@xeokit/core\";\n\n\nimport type {View} from \"./View\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\n/**\n * A directional light source within a {@link @xeokit/viewer!View}.\n *\n * ## Summary\n *\n * * Illuminates all objects equally from a given direction.\n * * Has an emission direction vector in {@link DirLight.dir}, but no position.\n * * Defined in either *World* or *View* coordinate space. When in World-space, {@link DirLight.dir} is relative to the\n * World coordinate system, and will appear to move as the {@link @xeokit/viewer!Camera}  moves. When in View-space, {@link DirLight.dir} is\n * relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component.id} on {@link View.lights}.\n */\nclass DirLight extends Component {\n\n    /**\n     ID of this DirLight, unique within the {@link @xeokit/viewer!View}.\n     */\n    declare public id: string;\n\n    /**\n     * The View to which this DirLight belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        type: \"dir\";\n        dir: Float32Array;\n        color: Float32Array;\n        intensity: number;\n        space: \"world\" | \"view\"\n    };\n\n    /**\n     * @param view View that owns this DirLight. When destroyed, the View will destroy this DirLight as well.\n     * @param options The DirLight configuration\n     * @param [options.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param [options.dir=[1.0, 1.0, 1.0]]  A unit vector indicating the direction that the light is shining,  given in either World or View space, depending on the value of the ````space```` parameter.\n     * @param [options.color=[0.7, 0.7, 0.8 ]] The color of this DirLight.\n     * @param [options.intensity=1.0] The intensity of this DirLight, as a factor in range ````[0..1]````.\n     * @param [options.space=\"view\"] The coordinate system the DirLight is defined in - ````\"view\"```` or ````\"space\"````.\n     */\n    constructor(view: View, options: {\n        intensity?: number; color?: FloatArrayParam;\n        dir?: FloatArrayParam; space?: \"world\" | \"view\"\n    } = {}) {\n        super(view, options);\n        this.view = view;\n        this.#state = {\n            type: \"dir\",\n            dir: new Float32Array(options.dir || [1.0, 1.0, 1.0]),\n            color: new Float32Array(options.color || [0.7, 0.7, 0.8]),\n            intensity: (options.intensity !== undefined && options.intensity !== null) ? options.intensity : 1.0,\n            space: options.space || \"view\"\n        };\n        this.view.registerLight(this);\n    }\n\n    /**\n     * Gets the direction in which the DirLight is shining.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @returns {Number[]} The direction vector.\n     */\n    get dir(): FloatArrayParam {\n        return this.#state.dir;\n    }\n\n    /**\n     * Sets the direction in which the DirLight is shining.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @param value The direction vector.\n     */\n    set dir(value: FloatArrayParam) {\n        this.#state.dir.set(value);\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the RGB color of this DirLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @returns {Number[]} The DirLight's RGB color.\n     */\n    get color(): FloatArrayParam {\n        return this.#state.color;\n    }\n\n    /**\n     * Sets the RGB color of this DirLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @param color The DirLight's RGB color.\n     */\n    set color(color: FloatArrayParam) {\n        this.#state.color.set(color);\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the intensity of this DirLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @returns {Number} The DirLight's intensity.\n     */\n    get intensity(): number {\n        return this.#state.intensity;\n    }\n\n    /**\n     * Sets the intensity of this DirLight.\n     *\n     * Default intensity is ````1.0```` for maximum intensity.\n     *\n     * @param intensity The DirLight's intensity\n     */\n    set intensity(intensity: number) {\n        this.#state.intensity = intensity;\n        this.view.redraw();\n    }\n\n    /**\n     * Destroys this DirLight.\n     */\n    destroy() {\n        super.destroy();\n        this.view.deregisterLight(this);\n        this.view.redraw();\n    }\n}\n\nexport {DirLight};\n","import {Component} from \"@xeokit/core\";\n\n\nimport type {View} from \"./View\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\n\n/**\n * A positional light source within a {@link @xeokit/viewer!View}.\n *\n * ## Summary\n *\n * * Originates from a single point and spreads outward in all directions, with optional attenuation over distance.\n * * Has a position in {@link PointLight.pos}, but no direction.\n * * Defined in either *World* or *View* coordinate space. When in World-space, {@link PointLight.pos} is relative to\n * the World coordinate system, and will appear to move as the {@link @xeokit/viewer!Camera}  moves. When in View-space,\n * {@link PointLight.pos} is relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n * * Has {@link PointLight.constantAttenuation}, {@link PointLight.linearAttenuation} and {@link PointLight.quadraticAttenuation}\n * factors, which indicate how intensity attenuates over distance.\n * * {@link AmbientLight}s, {@link PointLight}s and {@link PointLight}s are registered by their {@link Component.id} on {@link View.lights}.\n */\nclass PointLight extends Component {\n\n    /**\n     ID of this PointLight, unique within the {@link @xeokit/viewer!View}.\n     */\n    declare public id: string;\n\n    /**\n     * The View to which this PointLight belongs.\n     */\n    public readonly view: View;\n\n    #state: {\n        intensity: number;\n        attenuation: Float32Array;\n        color: Float32Array;\n        pos: Float64Array;\n        type: string;\n        space: string\n    };\n\n    /**\n     * @param view View that owns this PointLight. When destroyed, the View will destroy this PointLight as well.\n     * @param cfg The PointLight configuration\n     * @param [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param [cfg.pos=[ 1.0, 1.0, 1.0 ]] Position, in either World or View space, depending on the value of the **space** parameter.\n     * @param [cfg.color=[0.7, 0.7, 0.8 ]] Color of this PointLight.\n     * @param [cfg.intensity=1.0] Intensity of this PointLight, as a factor in range ````[0..1]````.\n     * @param [cfg.constantAttenuation=0] Constant attenuation factor.\n     * @param [cfg.linearAttenuation=0] Linear attenuation factor.\n     * @param [cfg.quadraticAttenuation=0] Quadratic attenuation factor.\n     * @param [cfg.space=\"view\"] The coordinate system this PointLight is defined in - \"view\" or \"world\".\n     * @param [cfg.castsShadow=false] Flag which indicates if this PointLight casts a castsShadow.\n     */\n    constructor(view: View, cfg: {\n        /** Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.*/\n        id?: string;\n        /** Intensity of this PointLight, as a factor in range ````[0..1]````. */\n        intensity?: number;\n        /** RGB color */\n        color?: FloatArrayParam;\n        /** World-space position */\n        pos?: FloatArrayParam;\n        /** Quadratic attenuation factor. */\n        quadraticAttenuation?: number;\n        /** Constant attenuation factor */\n        constantAttenuation?: number;\n        /** The coordinate system this PointLight is defined in - \"view\" or \"world\". */\n        space?: string;\n        /** Linear attenuation factor */\n        linearAttenuation?: number\n    } = {}) {\n\n        super(view, cfg);\n\n        this.view = view;\n\n\n        this.#state = {\n            type: \"point\",\n            pos: new Float64Array(cfg.pos || [1.0, 1.0, 1.0]),\n            color: new Float32Array(cfg.color || [0.7, 0.7, 0.8]),\n            intensity: 1.0,\n            // @ts-ignore\n            attenuation: new Float32Array([cfg.constantAttenuation, cfg.linearAttenuation, cfg.quadraticAttenuation]),\n            space: cfg.space || \"view\"\n        };\n\n        this.view.registerLight(this);\n    }\n\n    /**\n     * Gets the position of this PointLight.\n     *\n     * This will be either World- or View-space, depending on the value of {@link PointLight.space}.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @returns {Number[]} The position.\n     */\n    get pos(): FloatArrayParam {\n        return this.#state.pos;\n    }\n\n    /**\n     * Sets the position of this PointLight.\n     *\n     * This will be either World- or View-space, depending on the value of {@link PointLight.space}.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @param pos The position.\n     */\n    set pos(pos: FloatArrayParam) {\n        this.#state.pos.set(pos || [1.0, 1.0, 1.0]);\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the RGB color of this PointLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @returns {Number[]} The PointLight's RGB color.\n     */\n    get color(): FloatArrayParam {\n        return this.#state.color;\n    }\n\n    /**\n     * Sets the RGB color of this PointLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @param color The PointLight's RGB color.\n     */\n    set color(color: FloatArrayParam) {\n        this.#state.color.set(color || [0.7, 0.7, 0.8]);\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the intensity of this PointLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @returns {Number} The PointLight's intensity.\n     */\n    get intensity(): number {\n        return this.#state.intensity;\n    }\n\n    /**\n     * Sets the intensity of this PointLight.\n     *\n     * Default intensity is ````1.0```` for maximum intensity.\n     *\n     * @param intensity The PointLight's intensity\n     */\n    set intensity(intensity: number) {\n        if (intensity === this.#state.intensity) {\n            return;\n        }\n        this.#state.intensity = intensity;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the constant attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @returns {Number} The constant attenuation factor.\n     */\n    get constantAttenuation(): number {\n        return this.#state.attenuation[0];\n    }\n\n    /**\n     * Sets the constant attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @param value The constant attenuation factor.\n     */\n    set constantAttenuation(value: number) {\n        this.#state.attenuation[0] = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the linear attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @returns {Number} The linear attenuation factor.\n     */\n    get linearAttenuation(): number {\n        return this.#state.attenuation[1];\n    }\n\n    /**\n     * Sets the linear attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @param value The linear attenuation factor.\n     */\n    set linearAttenuation(value: number) {\n        this.#state.attenuation[1] = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Gets the quadratic attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @returns {Number} The quadratic attenuation factor.\n     */\n    get quadraticAttenuation(): number {\n        return this.#state.attenuation[2];\n    }\n\n    /**\n     * Sets the quadratic attenuation factor for this PointLight.\n     *\n     * Default value is ````0````.\n     *\n     * @param value The quadratic attenuation factor.\n     */\n    set quadraticAttenuation(value: number) {\n        this.#state.attenuation[2] = value;\n        this.view.redraw();\n    }\n\n    /**\n     * Destroys this PointLight.\n     */\n    destroy() {\n        super.destroy();\n        this.view.deregisterLight(this);\n        this.view.redraw();\n    }\n}\n\nexport {PointLight};\n","\nimport type {ViewObject} from \"./ViewObject\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\n\n/**\n * Results of a pick attempted with {@link View.pick}.\n */\nclass PickResult {\n\n    #viewObject?: ViewObject | null | undefined;\n    #gotCanvasPos: boolean;\n    #gotOrigin: boolean;\n    #gotDirection: boolean;\n    #gotIndices: boolean;\n    #gotLocalPos: boolean;\n    #gotWorldPos: boolean;\n    #gotViewPos: boolean;\n    #gotWorldNormal: boolean;\n    #gotUV: boolean;\n    #canvasPos: Int16Array;\n    #origin: FloatArrayParam;\n    #direction: FloatArrayParam;\n    #indices: Int32Array;\n    #localPos: FloatArrayParam;\n    #worldPos: FloatArrayParam;\n    #viewPos: FloatArrayParam;\n    #worldNormal: FloatArrayParam;\n    #uv: FloatArrayParam;\n\n    constructor() {\n\n        this.#viewObject = null;\n        this.#canvasPos = new Int16Array([0, 0]);\n        this.#origin = new Float64Array([0, 0, 0]);\n        this.#direction = new Float64Array([0, 0, 0]);\n        this.#indices = new Int32Array(3);\n        this.#localPos = new Float64Array([0, 0, 0]);\n        this.#worldPos = new Float64Array([0, 0, 0]);\n        this.#viewPos = new Float64Array([0, 0, 0]);\n        this.#worldNormal = new Float64Array([0, 0, 0]);\n        this.#uv = new Float64Array([0, 0]);\n        this.#gotOrigin = false;\n        this.#gotDirection = false;\n        this.#gotIndices = false;\n        this.#gotCanvasPos = false;\n        this.#gotLocalPos = false;\n        this.#gotWorldPos = false;\n        this.#gotViewPos = false;\n        this.#gotWorldNormal = false;\n        this.#gotUV = false;\n\n        this.reset();\n    }\n\n    /**\n     * The picked {@link ViewObject}.\n     */\n    get viewObject(): ViewObject | null | undefined {\n        return this.#viewObject;\n    }\n\n    /**\n     * @private\n     */\n    set viewObject(value: ViewObject | null | undefined) {\n        this.#viewObject = value;\n    }\n\n    /**\n     * Canvas coordinates when picking with a 2D pointer.\n     */\n    get canvasPos(): Int16Array | undefined {\n        return this.#gotCanvasPos ? this.#canvasPos : undefined;\n    }\n\n    /**\n     * @private\n     */\n    set canvasPos(value: FloatArrayParam | Int16Array | undefined) {\n        if (value) {\n            this.#canvasPos[0] = value[0];\n            this.#canvasPos[1] = value[1];\n            this.#gotCanvasPos = true;\n        } else {\n            this.#gotCanvasPos = false;\n        }\n    }\n\n    /**\n     * World-space 3D ray origin when raypicked.\n     */\n    get origin(): FloatArrayParam | null {\n        return this.#gotOrigin ? this.#origin : null;\n    }\n\n    /**\n     * @private\n     */\n    set origin(value: any) {\n        if (value) {\n            this.#origin[0] = value[0];\n            this.#origin[1] = value[1];\n            this.#origin[2] = value[2];\n            this.#gotOrigin = true;\n        } else {\n            this.#gotOrigin = false;\n        }\n    }\n\n    /**\n     * World-space 3D ray direction when raypicked.\n     */\n    get direction(): FloatArrayParam | null {\n        return this.#gotDirection ? this.#direction : null;\n    }\n\n    /**\n     * @private\n     */\n    set direction(value: any) {\n        if (value) {\n            this.#direction[0] = value[0];\n            this.#direction[1] = value[1];\n            this.#direction[2] = value[2];\n            this.#gotDirection = true;\n        } else {\n            this.#gotDirection = false;\n        }\n    }\n\n    /**\n     * Picked triangle's vertex indices.\n     * Only defined when an object and triangle was picked.\n     */\n    get indices(): Int32Array | null {\n        return this.#viewObject && this.#gotIndices ? this.#indices : null;\n    }\n\n    /**\n     * @private\n     */\n    set indices(value: any) {\n        if (value) {\n            this.#indices[0] = value[0];\n            this.#indices[1] = value[1];\n            this.#indices[2] = value[2];\n            this.#gotIndices = true;\n        } else {\n            this.#gotIndices = false;\n        }\n    }\n\n    /**\n     * Picked Local-space point on surface.\n     * Only defined when an object and a point on its surface was picked.\n     */\n    get localPos(): FloatArrayParam | null {\n        return this.#viewObject && this.#gotLocalPos ? this.#localPos : null;\n    }\n\n    /**\n     * @private\n     */\n    set localPos(value: any) {\n        if (value) {\n            this.#localPos[0] = value[0];\n            this.#localPos[1] = value[1];\n            this.#localPos[2] = value[2];\n            this.#gotLocalPos = true;\n        } else {\n            this.#gotLocalPos = false;\n        }\n    }\n\n    /**\n     * Picked World-space point on surface.\n     * Only defined when an object and a point on its surface was picked.\n     */\n    get worldPos(): FloatArrayParam | null {\n        return this.#viewObject && this.#gotWorldPos ? this.#worldPos : null;\n    }\n\n    /**\n     * @private\n     */\n    set worldPos(value: any) {\n        if (value) {\n            this.#worldPos[0] = value[0];\n            this.#worldPos[1] = value[1];\n            this.#worldPos[2] = value[2];\n            this.#gotWorldPos = true;\n        } else {\n            this.#gotWorldPos = false;\n        }\n    }\n\n    /**\n     * Picked View-space point on surface.\n     * Only defined when an object and a point on its surface was picked.\n     */\n    get viewPos(): FloatArrayParam | null {\n        return this.#viewObject && this.#gotViewPos ? this.#viewPos : null;\n    }\n\n    /**\n     * @private\n     */\n    set viewPos(value: any) {\n        if (value) {\n            this.#viewPos[0] = value[0];\n            this.#viewPos[1] = value[1];\n            this.#viewPos[2] = value[2];\n            this.#gotViewPos = true;\n        } else {\n            this.#gotViewPos = false;\n        }\n    }\n\n    /**\n     * Normal vector at picked position on surface.\n     * Only defined when an object and a point on its surface was picked.\n     */\n    get worldNormal(): FloatArrayParam | null {\n        return this.#viewObject && this.#gotWorldNormal ? this.#worldNormal : null;\n    }\n\n    /**\n     * @private\n     */\n    set worldNormal(value: any) {\n        if (value) {\n            this.#worldNormal[0] = value[0];\n            this.#worldNormal[1] = value[1];\n            this.#worldNormal[2] = value[2];\n            this.#gotWorldNormal = true;\n        } else {\n            this.#gotWorldNormal = false;\n        }\n    }\n\n    /**\n     * UV coordinates at picked position on surface.\n     * Only defined when an object and a point on its surface was picked.\n     */\n    get uv(): FloatArrayParam | null {\n        return this.#viewObject && this.#gotUV ? this.#uv : null;\n    }\n\n    /**\n     * @private\n     */\n    set uv(value: any) {\n        if (value) {\n            this.#uv[0] = value[0];\n            this.#uv[1] = value[1];\n            this.#gotUV = true;\n        } else {\n            this.#gotUV = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    reset() {\n        this.#viewObject = null;\n        this.#gotCanvasPos = false;\n        this.#gotOrigin = false;\n        this.#gotDirection = false;\n        this.#gotIndices = false;\n        this.#gotLocalPos = false;\n        this.#gotWorldPos = false;\n        this.#gotViewPos = false;\n        this.#gotWorldNormal = false;\n        this.#gotUV = false;\n    }\n}\n\nexport {PickResult};"],"names":["s","t","e","Object","defineProperty","i","writable","value","o","n","this","prototype","addItem","arguments","length","r","removeItem","me","qe","Ae","Be","Ce","De","v","M","Float64Array","FloatArrayClass","Z","g","p","J","u","a","c","Q","Math","sqrt","O","U","_","cn","fn","vn","qn","Zn","f","Y","H","K","L","$","sin","h","cos","l","d","bn","q","X","b","y","gn","w","A","F","m","x","C","k","yn","wn","An","j","z","B","D","Fn","_rendererViewObject","_classPrivateFieldLooseKey","_state","ViewObject","layer","sceneObject","rendererViewObject","id","_classPrivateFieldLooseBase","visible","culled","pickable","clippable","collidable","xrayed","selected","highlighted","edges","colorize","Float32Array","colorized","opacityUpdated","setVisible","view","viewIndex","objectVisibilityUpdated","_destroy","objectXRayedUpdated","objectSelectedUpdated","objectHighlightedUpdated","objectColorizeUpdated","objectOpacityUpdated","redraw","_createClass","key","get","aabb","set","setXRayed","setEdges","setHighlighted","setSelected","opacity","SectionPlane","_Component","cfg","_this","call","onPos","onDir","onActive","_assertThisInitialized","active","pos","dir","dist","EventEmitter","EventDispatcher","_inheritsLoose","_proto","flipDir","matrix","dispatch","destroy","clear","Component","unitsInfo","_unitsInfo","MetersUnit","abbrev","_units","_scale","_origin","Metrics","units","scale","origin","onUnits","onScale","onOrigin","createVec3","worldToRealPos","worldPos","realPos","realToWorldPos","error","SAO","params","renderModes","QualityRender","enabled","kernelRadius","intensity","undefined","bias","minResolution","numSamples","blur","blendCutoff","blendCutff","blendFactor","viewer","renderer","getSAOSupported","supported","projectionType","camera","CustomProjectionType","FrustumProjectionType","LinesMaterial","options","lineWidth","_numObjects","_objectIds","_numVisibleObjects","_visibleObjectIds","_numXRayedObjects","_xrayedObjectIds","_numHighlightedObjects","_highlightedObjectIds","_numSelectedObjects","_selectedObjectIds","_numColorizedObjects","_colorizedObjectIds","_numOpacityObjects","_opacityObjectIds","_qualityRender","_initObjects","_createObjects","_destroyObjects","ViewLayer","_destroyObjects2","_createObjects2","_initObjects2","objects","visibleObjects","xrayedObjects","highlightedObjects","selectedObjects","colorizedObjects","opacityObjects","autoDestroy","onObjectVisibility","gammaOutput","qualityRender","registerViewObject","viewObject","deregisterViewObject","setImageDirty","notify","setObjectsVisible","objectIds","withObjects","changed","setObjectsCollidable","setObjectsCulled","setObjectsSelected","setObjectsHighlighted","setObjectsXRayed","setObjectsColorized","setObjectsOpacity","setObjectsPickable","setObjectsClippable","callback","len","keys","_this2","models","scene","model","onModelCreated","subscribe","onModelDestroyed","sceneObjects","rendererViewObjects","layerId","viewerObjects","EmphasisMaterial","fill","fillColor","fillAlpha","edgeColor","edgeAlpha","edgeWidth","backfaces","EdgeMaterial","PointsMaterial","pointSize","roundPoints","perspectivePoints","minPerspectivePointSize","maxPerspectivePointSize","filterIntensity","minIntensity","maxIntensity","rebuild","state","_inverseMatrixDirty","_transposedProjMatrixDirty","_onViewBoundary","PerspectiveProjection","onProjMatrix","near","far","fov","fovAxis","projMatrix","createMat4","inverseProjMatrix","transposedProjMatrix","onBoundary","setDirty","clean","boundary","aspect","tan","sn","perspectiveMat4","min","PI","unproject","canvasPos","screenZ","screenPos","viewPos","canvasElement","halfViewWidth","offsetWidth","halfViewHeight","offsetHeight","mulMat4v4","mulVec3Scalar","inverseViewMatrix","unsubscribe","dirty","cleanIfDirty","inverseMat4","transposeMat4","type","PerspectiveProjectionType","OrthoProjection","left","right","top","bottom","halfSize","boundaryWidth","boundaryHeight","orthoMat4c","canvas","OrthoProjectionType","_inverseProjMatrixDirty","CustomProjection","identityMat4","abs","I","R","testVertex","offset","normal","W","planes","tempVec3","tempVec3b","tempVec3c","tempVec3d","tempVec3e","tempVec3f","tempMat","tempMatb","eyeLookVec","eyeLookVecNorm","eyeLookOffset","offsetEye","_frustum","_activeProjection","Camera","perspectiveProjection","orthoProjection","frustumProjection","customProjection","onProjectionType","onViewMatrix","onWorldAxis","onFrustum","eye","look","up","worldUp","worldRight","worldForward","worldAxis","gimbalLock","constrainPitch","deviceMatrix","hasDeviceMatrix","viewMatrix","viewNormalMatrix","Frustum3","subVec3","normalizeVec3","addVec3","lookAtMat4v","mulMat4","V","setFrustum3","orbitYaw","angleInc","lookEyeVec","rotationMat4v","transformPoint3","orbitPitch","dotVec3","DEGTORAD","eye2","cross3Vec3","yaw","look2","pitch","pan","vec","zoom","delta","lenLook","lenVec3","newLenLook","axis","tickEvent","viewerId","time","startTime","prevTime","deltaTime","_viewersRenderInfo","_viewerIDMap","_taskQueue","_taskBudget","_lastTime","_elapsedTime","_runTasks","_runTasksUntil","_fireTickEvents","_renderViewers","_runTasks2","getNumTasks","_runTasksUntil2","until","Date","getTime","tasksRun","shift","scope","_fireTickEvents2","scheduler","viewers","hasOwnProperty","onTick","_renderViewers2","renderInfo","render","Scheduler","Map","Queue","requestAnimationFrame","frame","now","registerViewer","console","inQuotes","deregisterViewer","scheduleTask","push","newLook","newEye","newUp","newLookEyeVec","_duration","_look","_eye","_up","_look2","_eye2","_up2","_orthoScale","_orthoScale2","_fit","_trail","_flying","_flyEyeLookUp","_flyingEye","_flyingLook","_callback","_callbackScope","_time","_time2","_flyingEyeLookUp","_fitFOV","_projection","_projMatrix","_projMatrix2","_jumpTo","_update","_ease","_easeInCubic","_easeOutExpo","CameraFlightAnimation","_update2","_jumpTo2","easing","onStarted","onStopped","onCancelled","flyTo","stop","flyToProjection","projection","orthoScale","poi","aabbCenter","getAABB3Center","slice","diag","getAABB3DiagPoint","getAABB3Diag","fitFOV","sca","duration","jumpTo","cancel","fit","stopping","tFlight","lerpVec3","tProj","lerpMat4","pow","_onTick","_backgroundColor","_backgroundColorFromAmbientLight","_resolutionScale","_lightsHash","_sectionPlanesHash","_registerSectionPlane","_deregisterSectionPlane","View","_deregisterSectionPlane2","_registerSectionPlane2","transparent","logarithmicDepthBufferEnabled","sao","cameraFlight","metrics","xrayMaterial","highlightMaterial","selectedMaterial","edgeMaterial","pointsMaterial","linesMaterial","sectionPlanes","sectionPlanesList","lights","lightsList","layers","autoLayers","onObjectXRayed","onLayerCreated","onLayerDestroyed","onSectionPlaneCreated","onSectionPlaneDestroyed","document","getElementById","canvasId","HTMLCanvasElement","backgroundColor","backgroundColorFromAmbientLight","width","clientWidth","height","clientHeight","offsetLeft","offsetTop","lastWindowWidth","lastWindowHeight","lastViewWidth","lastViewHeight","lastViewOffsetLeft","lastViewOffsetTop","lastParent","lastResolutionScale","newResolutionScale","newWindowSize","window","innerWidth","innerHeight","newViewSize","newViewPos","parent","parentElement","newWidth","newHeight","round","createSectionPlane","sectionPlaneParams","createUUID","sectionPlane","onDestroyed","one","clearSectionPlanes","getSectionPlanesHash","hashParts","join","registerLight","light","deregisterLight","splice","clearLights","getLightsHash","space","castsShadow","needsRebuild","getAmbientColorAndIntensity","createLayer","viewLayerParams","_this3","viewLayer","resolutionScale","_this4","_this5","rendererObjects","_loop","rendererObject","numObjects","_prefixMessageWithID","_registerView","_deregisterView","Viewer","_deregisterView2","_registerView2","_prefixMessageWithID2","capabilities","onViewCreated","onViewDestroyed","views","viewList","numViews","destroyed","maxViews","astcSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","Scene","getCapabilities","init","createView","SDKError","viewId","apply","registerView","deregisterView","log","message","warn","force","constructor","name","FrustumProjection","frustumMat4","AmbientLight","color","DirLight","PointLight","attenuation","constantAttenuation","linearAttenuation","quadraticAttenuation","PickResult","_viewObject","_gotCanvasPos","_gotOrigin","_gotDirection","_gotIndices","_gotLocalPos","_gotWorldPos","_gotViewPos","_gotWorldNormal","_gotUV","_canvasPos","_direction","_indices","_localPos","_worldPos","_viewPos","_worldNormal","_uv","Int16Array","Int32Array","reset"],"mappings":"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"}