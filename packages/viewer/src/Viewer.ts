
import {apply, createUUID, inQuotes} from "@xeokit/core/utils";
import {Capabilities, Component, EventEmitter, Scene} from "@xeokit/core/components";
import {EventDispatcher} from "strongly-typed-events";
import {FloatArrayParam} from "@xeokit/math/math";
import {LocaleService} from "@xeokit/locale";

import {View} from "./View";
import {scheduler} from "./scheduler";
import type {Renderer} from "./Renderer";

import type {ViewParams} from "./ViewParams";
import {ViewerModel} from "./ViewerModel";

class TickParams {
}

/**
 * A Browser-based 2D/3D model viewer.
 *
 * See {@link @xeokit/viewer} for usage.
 */
export class Viewer extends Component {

    /**
     ID of this Viewer.
     */
    readonly id: string;

    /**
     True once this Viewer has been destroyed.

     Don't use this Viewer if this is ````true````.
     */
    readonly destroyed: boolean;

    /**
     * Indicates the capabilities of this Viewer.
     */
    readonly capabilities: Capabilities;

    /**
     * Emits an event each time a Viewer "tick" occurs (~10-60 times per second).
     *
     * @event
     */
    readonly onTick: EventEmitter<Viewer, TickParams>;

    /**
     * Emits an event each time a {@link @xeokit/viewer!View} is created.
     *
     * @event
     */
    readonly onViewCreated: EventEmitter<Viewer, View>;

    /**
     * Emits an event each time a {@link @xeokit/viewer!View} is destroyed.
     *
     * @event
     */
    readonly onViewDestroyed: EventEmitter<Viewer, View>;

    /**
     * The Viewer's scene representation.
     */
    readonly scene: Scene;

    /**
     * Provides locale string translations for this Viewer.

     This may be configured via the Viewer's constructor.

     By default, this service will be an instance of {@link LocaleService}, which will just return
     null translations for all given strings and phrases.
     */
    readonly localeService: LocaleService;

    /**
     * Map of all the Views in this Viewer.
     *
     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.
     */
    readonly views: { [key: string]: View };

    /**
     * List of all the Views in this Viewer.
     *
     * Each {@link @xeokit/viewer!View} is an independently configurable view of the Viewer's models, with its own canvas, camera position, section planes, lights, and object visual states.
     */
    readonly viewList: View[];

    /**
     *  The number of {@link View|Views} belonging to this Viewer.
     */
    numViews: number;

    /**
     The time that this Viewer was created.
     */
    readonly startTime: number = (new Date()).getTime();

    /**
     * @private
     */
    readonly renderer: Renderer;

    #center: Float64Array;
    #aabb: Float64Array;
    #aabbDirty: boolean;

    /**
     Creates a Viewer.

     @param params - Viewer configuration.
     @param params.renderer - Manages storage and rendering of meshes for model objects.
     @param params.id - ID for this Viewer, automatically generated by default.
     @param params.units - The measurement unit type. Accepted values are ````"meters"````, ````"metres"````, , ````"centimeters"````, ````"centimetres"````, ````"millimeters"````,  ````"millimetres"````, ````"yards"````, ````"feet"```` and ````"inches"````.
     @param params.scale - The number of Real-space units in each World-space coordinate system unit.
     @param params.origin - The Real-space 3D origin, in current measurement units, at which the World-space coordinate origin ````[0,0,0]```` sits.
     @param params.localeService - Locale-based translation service.

     */
    constructor(params: {
        renderer: Renderer,
        localeService?: LocaleService,
        id?: string,
        units?: string,
        scale?: number,
        origin?: FloatArrayParam,
    }) {
        super(null, {});

        this.onTick = new EventEmitter(new EventDispatcher<Viewer, TickParams>());
        this.onViewCreated = new EventEmitter(new EventDispatcher<Viewer, View>());
        this.onViewDestroyed = new EventEmitter(new EventDispatcher<Viewer, View>());

        this.id = params.id || createUUID();
        this.localeService = params.localeService || new LocaleService();



        this.viewList = [];
        this.numViews = 0;
        this.views = {};
        this.destroyed = false;

        this.capabilities = {
            maxViews: 0,
            astcSupported: false,
            etc1Supported: false,
            etc2Supported: false,
            dxtSupported: false,
            bptcSupported: false,
            pvrtcSupported: false
        };

        this.renderer = params.renderer;
        this.renderer.getCapabilities(this.capabilities);
        this.renderer.init(this);

        scheduler.registerViewer(this);
    }

    /**
     * Creates a new {@link @xeokit/viewer!View} within this Viewer.
     *
     * * The maximum number of views you're allowed to create is provided in {@link Capabilities.maxViews}. This
     * will be determined by the {@link Renderer} implementation the Viewer is configured with.
     * * To destroy the View after use, call {@link View.destroy}.
     * * You must add a View to the Viewer before you can create or load content into the Viewer's Viewer.
     *
     * ### Usage
     *
     * ````javascript
     * const view1 = myViewer.createView({
     *      id: "myView",
     *      canvasId: "myView1"
     *  });
     *
     * view1.camera.eye = [-3.933, 2.855, 27.018];
     * view1.camera.look = [4.400, 3.724, 8.899];
     * view1.camera.up = [-0.018, 0.999, 0.039];
     *
     * //...
     * ````
     *
     * @param params View configuration.
     */
    createView(params: ViewParams): View  {
        if (this.viewList.length >= this.capabilities.maxViews) {
            throw new Error(`Attempted to create too many Views with View.createView() - maximum of ${this.capabilities.maxViews} is allowed`);
        }
        let viewId = params.viewId || createUUID();
        if (this.views[viewId]) {
            this.error(`View with ID "${viewId}" already exists - will randomly-generate ID`);
            viewId = createUUID();
        }
        // @ts-ignore
        const canvasElement = params.canvasElement || document.getElementById(params.canvasId);
        if (!(canvasElement instanceof HTMLCanvasElement)) {
            throw new Error("Mandatory View config expected: valid canvasId or canvasElement");
        }
        const view = new View(apply({viewId, viewer: this}, params));
        this.#registerView(view);
        view.viewIndex = this.renderer.registerView(view);
        view.onDestroyed.one(() => {
            this.#deregisterView(view);
            this.renderer.deregisterView(view.viewIndex);
            this.onViewDestroyed.dispatch(this, view);
        });
        this.onViewCreated.dispatch(this, view);
        this.log(`View created: ${view.viewId}`);
        return view;
    }


    /**
     Trigger redraw of all {@link View|Views} belonging to this Viewer.

     @private
     */
    redraw(): void {
        for (let viewId in this.views) {
            this.views[viewId].redraw();
        }
    }

    /**
     Logs a console debugging message for this Viewer.

     The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*

     @private
     @param message - The message to log
     */
    log(message: string): void {
        message = `[LOG] ${this.#prefixMessageWithID(message)}`;
        window.console.log(message);
    }

    /**
     Logs a warning for this Viewer to the JavaScript console.

     The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*

     @private
     @param message - The warning message to log
     */
    warn(message: string): void {
        message = `[WARN] ${this.#prefixMessageWithID(message)}`;
        window.console.warn(message);
    }

    /**
     Logs an error for this Viewer to the JavaScript console.

     The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*

     @private
     @param message The error message to log
     */
    error(message: string): void {
        message = `[ERROR] ${this.#prefixMessageWithID(message)}`;
        window.console.error(message);
    }

    /**
     * Destroys this Viewer and all {@link View|Views}, {@link ViewerModel|ViewerModels} and {@link Plugin}s we've created within it.
     */
    destroy(): void {
        if (this.destroyed) {
            return;
        }
        scheduler.deregisterViewer(this);
        for (let id in this.views) {
            this.views[id].destroy();
        }
        this.onTick.clear();
        this.onViewCreated.clear();
        this.onViewDestroyed.clear();

    }

    /**
     * @private
     * @param params
     */
    render(params: any) {
        for (let viewIndex = 0; viewIndex < this.viewList.length; viewIndex++) {
            this.renderer.render(viewIndex, {force: true});
        }
    }

    #prefixMessageWithID(message: string): string {
        return ` [${this.constructor.name} "${inQuotes(this.id)}"]: ${message}`;
    }

    #registerView(view: View): void {
        if (this.views[view.id]) {
            return;
        }
        this.views[view.id] = view;
        for (let viewIndex = 0; ; viewIndex++) {
            if (!this.viewList[viewIndex]) {
                this.viewList[viewIndex] = view;
                this.numViews++;
                view.viewIndex = viewIndex;
                return;
            }
        }
    }

    #deregisterView(view: View): void {
        if (!this.views[view.id]) {
            return;
        }
        delete this.views[view.id];
        delete this.viewList[view.viewIndex];
        this.numViews--;
    }
}