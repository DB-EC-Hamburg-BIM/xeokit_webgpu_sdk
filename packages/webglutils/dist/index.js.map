{"version":3,"file":"index.js","sources":["../src/GLArrayBuf.ts","../src/GLAttribute.ts","../src/GLDataTexture.ts","../src/GLShader.ts","../src/GLSampler.ts","../src/GLProgram.ts","../src/canvas2image.ts","../src/GLRenderBuffer.ts","../src/getExtension.ts","../src/convertConstant.ts","../src/GLTexture.ts","../src/WEBGL_INFO.ts"],"sourcesContent":["/**\n * Represents a WebGL ArrayBuffer.\n */\nexport class GLArrayBuf {\n\n    /**\n     * WebGL2 rendering context.\n     */\n    gl: WebGL2RenderingContext;\n\n    /**\n     * The ArrayBuffer's item type.\n     */\n    itemType: GLenum;\n\n    /**\n     * Byte size of each item.\n     */\n    itemByteSize: number;\n\n    /**\n     * The ArrayBuffer type.\n     */\n    type: any;\n\n    /**\n     * Allocated yet?\n     */\n    allocated: boolean;\n\n    /**\n     * A GLenum specifying the intended usage pattern of the data store for optimization purposes. Possible values:\n     *\n     * * gl.STATIC_DRAW : The contents are intended to be specified once by the application, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.DYNAMIC_DRAW : The contents are intended to be respecified repeatedly by the application, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.STREAM_DRAW : The contents are intended to be specified once by the application, and used at most a few times as the source for WebGL drawing and image specification commands.\n     * * gl.STATIC_READ : The contents are intended to be specified once by reading data from WebGL, and queried many times by the application.\n     * * gl.DYNAMIC_READ : The contents are intended to be respecified repeatedly by reading data from WebGL, and queried many times by the application.\n     * * gl.STREAM_READ : The contents are intended to be specified once by reading data from WebGL, and queried at most a few times by the application\n     * * gl.STATIC_COPY : The contents are intended to be specified once by reading data from WebGL, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.DYNAMIC_COPY : The contents are intended to be respecified repeatedly by reading data from WebGL, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.STREAM_COPY : The contents are intended to be specified once by reading data from WebGL, and used at most a few times as the source for WebGL drawing and image specification commands.\n     */\n    usage: GLenum;\n\n    /**\n     * The ArrayBuffer type.\n     */\n    length: GLuint;\n\n    /**\n     *\n     */\n    dataLength: number;\n\n    /**\n     * Number of items in the ArrayBuffer.\n     */\n    numItems: number;\n\n    /**\n     * Size of each item.\n     */\n    itemSize: number;\n\n    /**\n     * True when ArrayBuffer values are normalized.\n     */\n    normalized: boolean;\n\n    /**\n     * The ArrayBuffer stride.\n     */\n    stride: number;\n\n    /**\n     *\n     */\n    offset: number;\n\n    /**\n     * Hand to a WebGLBuffer.\n     */\n    handle: WebGLBuffer;\n\n    /**\n     * Creates a WebGL ArrayBuffer.\n     */\n    constructor(\n        gl: WebGL2RenderingContext,\n        type: any,\n        data: any,\n        numItems: number,\n        itemSize: number,\n        usage: GLenum,\n        normalized?: boolean,\n        stride?: number,\n        offset?: number) {\n\n        this.gl = gl;\n        this.type = type;\n        this.allocated = false;\n\n        switch (data.constructor) {\n\n            case Uint8Array:\n                this.itemType = gl.UNSIGNED_BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case Int8Array:\n                this.itemType = gl.BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case  Uint16Array:\n                this.itemType = gl.UNSIGNED_SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case  Int16Array:\n                this.itemType = gl.SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case Uint32Array:\n                this.itemType = gl.UNSIGNED_INT;\n                this.itemByteSize = 4;\n                break;\n\n            case Int32Array:\n                this.itemType = gl.INT;\n                this.itemByteSize = 4;\n                break;\n\n            default:\n                this.itemType = gl.FLOAT;\n                this.itemByteSize = 4;\n        }\n\n        this.usage = usage;\n        this.length = 0;\n        this.dataLength = numItems;\n        this.numItems = 0;\n        this.itemSize = itemSize;\n        this.normalized = !!normalized;\n        this.stride = stride || 0;\n        this.offset = offset || 0;\n\n        this._allocate(data);\n    }\n\n    _allocate(data: any) {\n        this.allocated = false;\n        // @ts-ignore\n        this.handle = this.gl.createBuffer();\n        if (!this.handle) {\n            throw new Error(\"Failed to allocate WebGL ArrayBuffer\");\n        }\n        if (this.handle) {\n            this.gl.bindBuffer(this.type, this.handle);\n            this.gl.bufferData(this.type, data.length > this.dataLength ? data.slice(0, this.dataLength) : data, this.usage);\n            this.gl.bindBuffer(this.type, null);\n            this.length = data.length;\n            this.numItems = this.length / this.itemSize;\n            this.allocated = true;\n        }\n    }\n\n    /**\n     * Updates the contents of this ArrayBuffer.\n     * @param data\n     * @param offset\n     */\n    setData(data: any, offset: number) {\n        if (!this.allocated) {\n            return;\n        }\n        if (data.length + (offset || 0) > this.length) {            // Needs reallocation\n            this.destroy();\n            this._allocate(data);\n        } else {            // No reallocation needed\n            this.gl.bindBuffer(this.type, this.handle);\n            if (offset || offset === 0) {\n                this.gl.bufferSubData(this.type, offset * this.itemByteSize, data);\n            } else {\n                this.gl.bufferData(this.type, data, this.usage);\n            }\n            this.gl.bindBuffer(this.type, null);\n        }\n    }\n\n    /**\n     * Binds this ArrayBuffer to the WebGL rendering context.\n     */\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, this.handle);\n    }\n\n    /**\n     * Unbinds this ArrayBuffer from the WebGL rendering context.\n     */\n    unbind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, null);\n    }\n\n    /**\n     * Destroys this ArrayBuffer.\n     */\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.deleteBuffer(this.handle);\n        this.allocated = false;\n    }\n}\n","import type {GLArrayBuf} from \"./GLArrayBuf\";\n\n/**\n * Represents a WebGL vertex attribute.\n */\nexport class GLAttribute {\n    gl: WebGL2RenderingContext;\n    location: number;\n\n    /**\n     * Creates a new vertex attribute.\n     * @param gl\n     * @param location\n     */\n    constructor(gl: WebGL2RenderingContext, location: number) {\n        this.gl = gl;\n        this.location = location;\n    }\n\n    /**\n     * Binds an array buffer to this vertex attribute.\n     * @param arrayBuf\n     */\n    bindArrayBuffer(arrayBuf: GLArrayBuf) {\n        if (!arrayBuf) {\n            return;\n        }\n        arrayBuf.bind();\n        this.gl.enableVertexAttribArray(this.location);\n        this.gl.vertexAttribPointer(this.location, arrayBuf.itemSize, arrayBuf.itemType, arrayBuf.normalized, arrayBuf.stride, arrayBuf.offset);\n    }\n}\n","import type {GLProgram} from \"./GLProgram\";\nimport type {GLSampler} from \"./GLSampler\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 data texture.\n */\nexport class GLDataTexture implements GLAbstractTexture {\n\n    gl?: WebGL2RenderingContext;\n    texture?: WebGLTexture | null;\n    textureWidth?: number;\n    textureHeight?: number;\n    textureData?: any;\n    #onDestroyed?: Function;\n\n    /**\n     * Constructs a new GLDataTexture.\n     * @param params\n     */\n    constructor(params: {\n        gl?: WebGL2RenderingContext,\n        texture?: WebGLTexture,\n        textureWidth?: number,\n        textureHeight?: number,\n        textureData?: any,\n        onDestroyed?: Function\n    }={}) {\n        this.gl = params.gl;\n        this.texture = params.texture;\n        this.textureWidth = params.textureWidth;\n        this.textureHeight = params.textureHeight;\n        this.textureData = params.textureData;\n        this.#onDestroyed = params.onDestroyed;\n    }\n\n    /**\n     * Binds this GLDataTexture to the given {@link GLSampler}.\n     * @param glProgram\n     * @param sampler\n     * @param unit\n     */\n    bindTexture(glProgram: GLProgram, sampler: GLSampler, unit: number) {\n        if (!this.gl) {\n            return;\n        }\n        sampler.bindTexture(this, unit);\n    }\n\n    /**\n     * Unbinds this GLDataTexture from whichever {@link GLSampler} it's currently bound to, if any.\n     * @param unit\n     */\n    bind(unit: number) : boolean{\n        if (!this.gl || !this.texture) {\n            return false;\n        }\n        // @ts-ignore\n        this.gl.activeTexture(this.gl[\"TEXTURE\" + unit]);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        return true;\n    }\n\n    disableFiltering(): void {\n        if (!this.gl) {\n            return;\n        }\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n    }\n\n    unbind(unit: number) {\n        if (!this.gl) {\n            return;\n        }\n        // This `unbind` method is ignored at the moment to allow avoiding to rebind same texture already bound to a texture unit.\n\n        // this.gl.activeTexture(this.state.gl[\"TEXTURE\" + unit]);\n        // this.gl.bindTexture(this.state.gl.TEXTURE_2D, null);\n    }\n\n    destroy() {\n        if (!this.gl || !this.texture) {\n            return;\n        }\n        this.gl.deleteTexture(this.texture);\n        this.texture = null;\n        if (this.#onDestroyed) {\n            this.#onDestroyed();\n        }\n    }\n}","/**\n * Represents a WebGL2 shader.\n */\nexport class GLShader {\n\n    /**\n     * Compilation errors, if any.\n     */\n    errors: string[];\n\n    /**\n     * True when this shader was successfully allocated.\n     */\n    allocated: boolean;\n\n    /**\n     * True when this shader was successfully compiled.\n     */\n    compiled: boolean;\n\n    /**\n     * Handle to GPU-resident WebGL2 shader.\n     */\n    handle: WebGLShader;\n\n    /**\n     * Creates a new shader.\n     * @param gl\n     * @param type\n     * @param source\n     */\n    constructor(gl: WebGL2RenderingContext, type: number, source: string) {\n        this.allocated = false;\n        this.compiled = false;\n        // @ts-ignore\n        this.handle = gl.createShader(type);\n        if (!this.handle) {\n            this.errors = [\n                \"Failed to allocate\"\n            ];\n            return;\n        }\n        this.allocated = true;\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);\n        if (!this.compiled) {\n            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here\n                const lines = source.split(\"\\n\");\n                const numberedLines = [];\n                for (let i = 0; i < lines.length; i++) {\n                    numberedLines.push((i + 1) + \": \" + lines[i] + \"\\n\");\n                }\n                this.errors = [];\n                this.errors.push(\"\");\n                this.errors.push(gl.getShaderInfoLog(this.handle) || \"\");\n                this.errors = this.errors.concat(numberedLines.join(\"\"));\n            }\n        }\n    }\n\n    /**\n     * Destroys this shader.\n     */\n    destroy() {\n\n    }\n}","import type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 sampler.\n */\nexport class GLSampler {\n\n    private readonly location: WebGLUniformLocation;\n    private readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Creates a new sampler.\n     * @param gl\n     * @param location\n     */\n    constructor(gl: WebGL2RenderingContext, location: WebGLUniformLocation) {\n        this.gl = gl;\n        this.location = location;\n    }\n\n    /**\n     * Binds a texture to this sampler.\n     * @param texture\n     * @param unit\n     */\n    bindTexture(texture: GLAbstractTexture, unit: number) {\n        if (texture.bind(unit)) {\n            this.gl.uniform1i(this.location, unit);\n            return true;\n        }\n        return false;\n    }\n}\n","import {Map} from \"@xeokit/utils\";\n\nimport {GLShader} from \"./GLShader\";\nimport {GLSampler} from \"./GLSampler\";\nimport {GLAttribute} from \"./GLAttribute\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\nconst ids = new Map({}, \"\");\n\n/**\n * Represents a WebGL2 program.\n */\nexport class GLProgram {\n\n    /**\n     * Unique ID of this program.\n     */\n    id: number;\n\n    /**\n     * The vertex shader.\n     */\n    vertexShader: GLShader;\n\n    /**\n     * The fragment shader.\n     */\n    fragmentShader: GLShader;\n\n    /**\n     * Map of all attributes in this program.\n     */\n    attributes: { [key: string]: GLAttribute };\n\n    /**\n     * Map of all samplers in this program.\n     */\n    samplers: { [key: string]: GLSampler };\n\n    /**\n     * Map of all uniforms in this program.\n     */\n    uniforms: { [key: string]: WebGLUniformLocation };\n\n    /**\n     * List of compilation errors for this program, if any.\n     */\n    errors: string[];\n\n    /**\n     * Flag set true when program has been validated.\n     */\n    validated: boolean;\n\n    /**\n     * Flag set true when this program has been successfully linked.\n     */\n    linked: boolean;\n\n    /**\n     * Flag set true when this program has been successfully conpiled.\n     */\n    compiled: boolean;\n\n    /**\n     * Flag set true when this program has been successfully allocated.\n     */\n    allocated: boolean;\n\n    /**\n     * The WebGL2 rendering context.\n     */\n    gl: WebGL2RenderingContext;\n\n    /**\n     * The source code from which the shaders are built.\n     */\n    source: any;\n\n    /**\n     * Handle to the WebGL program itself, which resides on the GPU.\n     */\n    handle: WebGLProgram;\n\n    /**\n     * Creates a new program.\n     * @param gl\n     * @param shaderSource\n     */\n    constructor(gl: WebGL2RenderingContext, shaderSource: any) {\n\n        // @ts-ignore\n        this.id = ids.addItem({});\n        this.source = shaderSource;\n        this.gl = gl;\n        this.allocated = false;\n        this.compiled = false;\n        this.linked = false;\n        this.validated = false;\n        this.errors = [];\n        this.uniforms = {};\n        this.samplers = {};\n        this.attributes = {};\n\n        this.vertexShader = new GLShader(gl, gl.VERTEX_SHADER, this.source.vertex);\n        this.fragmentShader = new GLShader(gl, gl.FRAGMENT_SHADER, this.source.fragment);\n\n        if (!this.vertexShader.allocated) {\n            this.errors = [\"Vertex shader failed to allocate\"].concat(this.vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        if (!this.fragmentShader.allocated) {\n            this.errors = [\"Fragment shader failed to allocate\"].concat(this.fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        this.allocated = true;\n\n        if (!this.vertexShader.compiled) {\n            this.errors = [\"Vertex shader failed to compile\"].concat(this.vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        if (!this.fragmentShader.compiled) {\n            this.errors = [\"Fragment shader failed to compile\"].concat(this.fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        this.compiled = true;\n        // @ts-ignore\n        this.handle = gl.createProgram();\n\n        if (!this.handle) {\n            this.errors = [\"Failed to allocate program\"];\n            return;\n        }\n\n        gl.attachShader(this.handle, this.vertexShader.handle);\n        gl.attachShader(this.handle, this.fragmentShader.handle);\n        gl.linkProgram(this.handle);\n\n        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n\n        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeokit-sdk/issues/5\n        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?\n\n        this.validated = true;\n\n        if (!this.linked || !this.validated) {\n            this.errors = [];\n            this.errors.push(\"\");\n            // @ts-ignore\n            this.errors.push(gl.getProgramInfoLog(this.handle));\n            this.errors.push(\"\\nVertex shader:\\n\");\n            this.errors = this.errors.concat(this.source.vertex);\n            this.errors.push(\"\\nFragment shader:\\n\");\n            this.errors = this.errors.concat(this.source.fragment);\n            logErrors(this.errors);\n            return;\n        }\n\n        const numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < numUniforms; ++i) {\n            const u = gl.getActiveUniform(this.handle, i);\n            if (u) {\n                let uName = u.name;\n                if (uName[uName.length - 1] === \"\\u0000\") {\n                    uName = uName.substr(0, uName.length - 1);\n                }\n                const location = gl.getUniformLocation(this.handle, uName);\n                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {\n                    // @ts-ignore\n                    this.samplers[uName] = new GLSampler(gl, location);\n                } else {\n                    // @ts-ignore\n                    this.uniforms[uName] = location;\n                }\n            }\n        }\n\n        const numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < numAttribs; i++) {\n            const a = gl.getActiveAttrib(this.handle, i);\n            if (a) {\n                const location = gl.getAttribLocation(this.handle, a.name);\n                this.attributes[a.name] = new GLAttribute(gl, location);\n            }\n        }\n\n        this.allocated = true;\n    }\n\n    /**\n     * Binds this program.\n     */\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    }\n\n    /**\n     * Gets the location of the given uniform within this program.\n     * @param name\n     */\n    getLocation(name: string): WebGLUniformLocation {\n        return this.uniforms[name];\n    }\n\n    /**\n     * Gets an attribute within this program.\n     * @param name\n     */\n    getAttribute(name: string): GLAttribute {\n        return this.attributes[name];\n    }\n\n    /**\n     * Gets a sampler within this program.\n     * @param name\n     */\n    getSampler(name: string): GLSampler {\n        return this.samplers[name];\n    }\n\n    /**\n     * Binds a texture to this program.\n     * @param name\n     * @param texture\n     * @param unit\n     */\n    bindTexture(name: string, texture: GLAbstractTexture, unit: number): boolean {\n        if (!this.allocated) {\n            return false;\n        }\n        const sampler = this.samplers[name];\n        if (sampler) {\n            return sampler.bindTexture(texture, unit);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Destroys this program.\n     */\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        ids.removeItem(this.id);\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this.vertexShader.handle);\n        this.gl.deleteShader(this.fragmentShader.handle);\n        this.attributes = {};\n        this.uniforms = {};\n        this.samplers = {};\n        this.allocated = false;\n    }\n}\n\nfunction joinSansComments(srcLines: string[]) {\n    const src = [];\n    let line;\n    ``\n    for (let i = 0, len = srcLines.length; i < len; i++) {\n        line = srcLines[i];\n        const n = line.indexOf(\"/\");\n        if (n > 0) {\n            if (line.charAt(n + 1) === \"/\") {\n                line = line.substring(0, n);\n            }\n        }\n        src.push(line);\n    }\n    return src.join(\"\\n\");\n}\n\nfunction logErrors(errors: string[]) {\n    console.error(errors.join(\"\\n\"));\n}\n","/**\n * Canvas2Image v0.1\n * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com\n * MIT License [http://www.opensource.org/licenses/mit-license.php]\n *\n * Modified by @xeolabs to permit vertical flipping, so that snapshot can be taken from WebGL frame buffers,\n * which vertically flip image data as part of the way that WebGL renders textures.\n */\nexport const Canvas2Image = (function () {\n    // check if we have canvas support\n    const oCanvas = document.createElement(\"canvas\"), sc = String.fromCharCode, strDownloadMime = \"image/octet-stream\",\n        bReplaceDownloadMime = false;\n\n    // no canvas, bail out.\n    if (!oCanvas.getContext) {\n        return {\n            saveAsBMP: function () {\n            },\n            saveAsPNG: function () {\n            },\n            saveAsJPEG: function () {\n            }\n        }\n    }\n\n    // @ts-ignore\n    const bHasImageData = !!(oCanvas.getContext(\"2d\").getImageData), bHasDataURL = !!(oCanvas.toDataURL),\n        bHasBase64 = !!(window.btoa);\n\n    // ok, we're good\n    const readCanvasData = function (oCanvas: HTMLCanvasElement) {\n        // @ts-ignore\n        const iWidth = parseInt(oCanvas.width), iHeight = parseInt(oCanvas.height);\n        // @ts-ignore\n        return oCanvas.getContext(\"2d\").getImageData(0, 0, iWidth, iHeight);\n    };\n\n    // base64 encodes either a string or an array of charcodes\n    const encodeData = function (data: any) {\n        let i: any, aData: any, strData: any = \"\";\n        if (typeof data == \"string\") {\n            strData = data;\n        } else {\n            aData = data;\n            for (i = 0; i < aData.length; i++) {\n                strData += sc(aData[i]);\n            }\n        }\n        return btoa(strData);\n    };\n\n    // creates a base64 encoded string containing BMP data takes an imagedata object as argument\n    const createBMP = function (oData: ImageData) {\n        let strHeader = '';\n        const iWidth = oData.width;\n        const iHeight = oData.height;\n\n        strHeader += 'BM';\n\n        let iFileSize = iWidth * iHeight * 4 + 54; // total header size = 54 bytes\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 54, 0, 0, 0); // data offset\n        strHeader += sc(40, 0, 0, 0); // info header size\n\n        let iImageWidth = iWidth;\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n\n        let iImageHeight = iHeight;\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n\n        strHeader += sc(1, 0, 32, 0); // num of planes & num of bits per pixel\n        strHeader += sc(0, 0, 0, 0); // compression = none\n\n        let iDataSize = iWidth * iHeight * 4;\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // these bytes are not used\n\n        const aImgData = oData.data;\n        let strPixelData = \"\";\n        let c;\n        let x;\n        let y = iHeight;\n        let iOffsetX;\n        let iOffsetY;\n        let strPixelRow;\n\n        do {\n            iOffsetY = iWidth * (y - 1) * 4;\n            strPixelRow = \"\";\n            for (x = 0; x < iWidth; x++) {\n                iOffsetX = 4 * x;\n                strPixelRow += sc(\n                    aImgData[iOffsetY + iOffsetX + 2], // B\n                    aImgData[iOffsetY + iOffsetX + 1], // G\n                    aImgData[iOffsetY + iOffsetX],     // R\n                    aImgData[iOffsetY + iOffsetX + 3]  // A\n                );\n            }\n            strPixelData += strPixelRow;\n        } while (--y);\n\n        return encodeData(strHeader + strPixelData);\n    };\n\n    // sends the generated file to the client\n    const saveFile = function (strData: string) {\n        if (!window.open(strData)) {\n            document.location.href = strData;\n        }\n    };\n\n    const makeDataURI = function (strData: string, strMime: string) {\n        return \"data:\" + strMime + \";base64,\" + strData;\n    };\n\n    // generates a <img> object containing the imagedata\n    const makeImageObject = function (strSource: any) {\n        const oImgElement = document.createElement(\"img\");\n        oImgElement.src = strSource;\n        return oImgElement;\n    };\n\n    const scaleCanvas = function (oCanvas: HTMLCanvasElement, iWidth: number, iHeight: number, flipy: boolean) {\n        if (iWidth && iHeight) {\n            const oSaveCanvas = document.createElement(\"canvas\");\n            oSaveCanvas.width = iWidth;\n            oSaveCanvas.height = iHeight;\n            oSaveCanvas.style.width = iWidth + \"px\";\n            oSaveCanvas.style.height = iHeight + \"px\";\n            const oSaveCtx = oSaveCanvas.getContext(\"2d\");\n            if (flipy) {\n                // @ts-ignore\n                oSaveCtx.save();\n                // @ts-ignore\n                oSaveCtx.scale(1.0, -1.0);\n                // @ts-ignore\n                oSaveCtx.imageSmoothingEnabled = true;\n                // @ts-ignore\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, -iHeight);\n                // @ts-ignore\n                oSaveCtx.restore();\n            } else {\n                // @ts-ignore\n                oSaveCtx.imageSmoothingEnabled = true;\n                // @ts-ignore\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iHeight);\n            }\n            return oSaveCanvas;\n        }\n        return oCanvas;\n    };\n\n    return {\n        saveAsPNG: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/png\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsJPEG: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/jpeg\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            // check if browser actually supports jpeg by looking for the mime type in the data uri. if not, return false\n            if (strData.indexOf(strMime) != 5) return false;\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsBMP: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!(bHasDataURL && bHasImageData && bHasBase64)) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/bmp\";\n            const oData = readCanvasData(oScaledCanvas), strImgData = createBMP(oData);\n            if (bReturnImg) {\n                return makeImageObject(makeDataURI(strImgData, strMime));\n            } else {\n                saveFile(makeDataURI(strImgData, strMime));\n            }\n            return true;\n        }\n    };\n})();\n","import {Canvas2Image} from \"./canvas2image\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 render buffer.\n */\nexport class GLRenderBuffer {\n\n    #canvas: HTMLCanvasElement;\n    #gl: WebGL2RenderingContext;\n    #allocated: boolean;\n    #buffer: any;\n    #bound: boolean;\n    #size: number[];\n    #hasDepthTexture: boolean;\n    #imageDataCache: any;\n    #texture: GLAbstractTexture;\n    #depthTexture: GLAbstractTexture;\n\n    /**\n     * Creates a new render buffer.\n     * @param canvas\n     * @param gl\n     * @param options\n     */\n    constructor(canvas: HTMLCanvasElement, gl: WebGL2RenderingContext, options: {\n        depthTexture: boolean;\n        size: number[];\n    }) {\n        this.#canvas = canvas;\n        this.#gl = gl;\n        this.#allocated = false;\n        this.#buffer = null;\n        this.#bound = false;\n        this.#size = options.size;\n        this.#hasDepthTexture = !!options.depthTexture;\n    }\n\n    /**\n     * Sets the size of this render buffer.\n     * @param size\n     */\n    setSize(size: number[]) {\n        this.#size = size;\n    }\n\n    /**\n     * Binds this render buffer.\n     */\n    bind() {\n        this.#touch();\n        if (this.#bound) {\n            return;\n        }\n        const gl = this.#gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.#buffer.framebuf);\n        this.#bound = true;\n    }\n\n    #touch() {\n        let width;\n        let height;\n        const gl = this.#gl;\n        if (this.#size) {\n            width = this.#size[0];\n            height = this.#size[1];\n        } else {\n            width = gl.drawingBufferWidth;\n            height = gl.drawingBufferHeight;\n        }\n        if (this.#buffer) {\n            if (this.#buffer.width === width && this.#buffer.height === height) {\n                return;\n            } else {\n                gl.deleteTexture(this.#buffer.texture);\n                gl.deleteFramebuffer(this.#buffer.framebuf);\n                gl.deleteRenderbuffer(this.#buffer.renderbuf);\n            }\n        }\n        const colorTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, colorTexture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        let depthTexture;\n        if (this.#hasDepthTexture) {\n            depthTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, depthTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, width, height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null)\n        }\n        const renderbuf = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuf);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n        const framebuf = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);\n        if (this.#hasDepthTexture) {\n            // @ts-ignore\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\n        } else {\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuf);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        // Verify framebuffer is OK\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        if (!gl.isFramebuffer(framebuf)) {\n            throw \"Invalid framebuffer\";\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        switch (status) {\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\";\n            default:\n                throw \"Incomplete framebuffer: \" + status;\n        }\n        this.#buffer = {\n            framebuf: framebuf,\n            renderbuf: renderbuf,\n            texture: colorTexture,\n            depthTexture: depthTexture,\n            width: width,\n            height: height\n        };\n        this.#bound = false;\n    }\n\n    /**\n     * Clears this render buffer.\n     */\n    clear() {\n        if (!this.#bound) {\n            throw \"Render buffer not bound\";\n        }\n        const gl = this.#gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Reads a pixel from this render buffer.\n     * @param pickX\n     * @param pickY\n     */\n    read(pickX: number, pickY: number): Uint8Array {\n        const x = pickX;\n        const y = this.#gl.drawingBufferHeight - pickY;\n        const pix = new Uint8Array(4);\n        const gl = this.#gl;\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pix);\n        return pix;\n    }\n\n    /**\n     * Redas an image from this render buffer.\n     * @param params\n     */\n    readImage(params: {\n        height?: number;\n        width?: number;\n        format?: string;\n    }): Uint8Array {\n        const gl = this.#gl;\n        const imageDataCache = this.#getImageDataCache();\n        const pixelData = imageDataCache.pixelData;\n        const canvas = imageDataCache.canvas;\n        const imageData = imageDataCache.imageData;\n        const context = imageDataCache.context;\n        gl.readPixels(0, 0, this.#buffer.width, this.#buffer.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelData);\n        imageData.data.set(pixelData);\n        context.putImageData(imageData, 0, 0);\n        const imageWidth = params.width || canvas.width;\n        const imageHeight = params.height || canvas.height;\n        const format = params.format || \"jpeg\";\n        const flipy = true; // Account for WebGL texture flipping\n        let image;\n        switch (format) {\n            case \"jpeg\":\n                image = Canvas2Image.saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"png\":\n                image = Canvas2Image.saveAsPNG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"bmp\":\n                image = Canvas2Image.saveAsBMP(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            default:\n                console.error(\"Unsupported image format: '\" + format + \"' - supported types are 'jpeg', 'bmp' and 'png' - defaulting to 'jpeg'\");\n                image = Canvas2Image.saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n        }\n        // @ts-ignore\n        return image.src;\n    }\n\n    #getImageDataCache() {\n        const bufferWidth = this.#buffer.width;\n        const bufferHeight = this.#buffer.height;\n        let imageDataCache = this.#imageDataCache;\n        if (imageDataCache) {\n            if (imageDataCache.width !== bufferWidth || imageDataCache.height !== bufferHeight) {\n                this.#imageDataCache = null;\n                imageDataCache = null;\n            }\n        }\n        if (!imageDataCache) {\n            const canvas = document.createElement('canvas');\n            canvas.width = bufferWidth;\n            canvas.height = bufferHeight;\n            const context = canvas.getContext('2d');\n            // @ts-ignore\n            const imageData = context.createImageData(bufferWidth, bufferHeight);\n            imageDataCache = {\n                pixelData: new Uint8Array(bufferWidth * bufferHeight * 4),\n                canvas: canvas,\n                context: context,\n                imageData: imageData,\n                width: bufferWidth,\n                height: bufferHeight\n            };\n            this.#imageDataCache = imageDataCache;\n        }\n        return imageDataCache;\n    }\n\n    /**\n     * Unbinds this render buffer.\n     */\n    unbind() {\n        const gl = this.#gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.#bound = false;\n    }\n\n    /**\n     * Gets a texture that has the contents of this render buffer.\n     */\n    getTexture(): GLAbstractTexture {\n        return this.#texture || (this.#texture = {\n            bind: (unit: number) => {\n                if (this.#buffer && this.#buffer.texture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.#buffer.texture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: (unit: number) => {\n                if (this.#buffer && this.#buffer.texture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, null);\n                }\n            }\n        });\n    }\n\n    /**\n     * Does this render buffer have a depth texture component?\n     */\n    hasDepthTexture() {\n        return this.#hasDepthTexture;\n    }\n\n    /**\n     * Gets the depth texture component of this render buffer, if any.\n     */\n    getDepthTexture(): GLAbstractTexture | null {\n        if (!this.#hasDepthTexture) {\n            return null;\n        }\n        return this.#depthTexture || (this.#depthTexture = {\n            bind: (unit: number) => {\n                if (this.#buffer && this.#buffer.depthTexture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.#buffer.depthTexture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: (unit: number) => {\n                if (this.#buffer && this.#buffer.depthTexture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, null);\n                }\n            }\n        });\n    }\n\n    /**\n     * Destroys this render buffer.\n     */\n    destroy() {\n        if (this.#allocated) {\n            const gl = this.#gl;\n            gl.deleteTexture(this.#buffer.texture);\n            gl.deleteTexture(this.#buffer.depthTexture);\n            gl.deleteFramebuffer(this.#buffer.framebuf);\n            gl.deleteRenderbuffer(this.#buffer.renderbuf);\n            this.#allocated = false;\n            this.#buffer = null;\n            this.#bound = false;\n        }\n        this.#imageDataCache = null;\n    }\n}\n\n","/**\n * Gets a WebGL2 extension.\n * @param gl\n * @param name\n */\nexport function getExtension(gl: WebGL2RenderingContext, name: string) {\n    // @ts-ignore\n    if (gl._cachedExtensions === undefined) {\n        // @ts-ignore\n        gl._cachedExtensions = {};\n    }\n    // @ts-ignore\n    if (gl._cachedExtensions[name] !== undefined) {\n        // @ts-ignore\n        return gl._cachedExtensions[name];\n    }\n    let extension;\n    switch (name) {\n        case 'WEBGL_depth_texture':\n            extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n            break;\n        case 'EXT_texture_filter_anisotropic':\n            extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n            break;\n        case 'WEBGL_compressed_texture_s3tc':\n            extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n            break;\n        case 'WEBGL_compressed_texture_pvrtc':\n            extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n            break;\n        default:\n            extension = gl.getExtension(name);\n    }\n    // @ts-ignore\n    gl._cachedExtensions[name] = extension;\n    return extension;\n}","import {\n    AlphaFormat,\n    ByteType,\n    ClampToEdgeWrapping,\n    DepthFormat,\n    DepthStencilFormat,\n    FloatType,\n    HalfFloatType,\n    IntType,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    LuminanceAlphaFormat,\n    LuminanceFormat,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    RedFormat,\n    RedIntegerFormat,\n    RepeatWrapping,\n    RGB_ETC1_Format,\n    RGB_ETC2_Format,\n    RGB_PVRTC_2BPPV1_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format,\n    RGBA_ASTC_10x10_Format,\n    RGBA_ASTC_10x5_Format,\n    RGBA_ASTC_10x6_Format,\n    RGBA_ASTC_10x8_Format,\n    RGBA_ASTC_12x10_Format,\n    RGBA_ASTC_12x12_Format,\n    RGBA_ASTC_4x4_Format,\n    RGBA_ASTC_5x4_Format,\n    RGBA_ASTC_5x5_Format,\n    RGBA_ASTC_6x5_Format,\n    RGBA_ASTC_6x6_Format,\n    RGBA_ASTC_8x5_Format,\n    RGBA_ASTC_8x6_Format,\n    RGBA_ASTC_8x8_Format,\n    RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_2BPPV1_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT1_Format,\n    RGBA_S3TC_DXT3_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGBAFormat,\n    RGBAIntegerFormat,\n    RGBFormat,\n    RGFormat,\n    RGIntegerFormat,\n    ShortType,\n    sRGBEncoding,\n    UnsignedByteType,\n    UnsignedInt248Type,\n    UnsignedIntType,\n    UnsignedShort4444Type,\n    UnsignedShort5551Type,\n    UnsignedShortType\n} from \"@xeokit/constants\";\n\nimport {getExtension} from \"./getExtension\";\n\n/**\n * Converts a xeokit SDK constant to its eauivalent WebGL2 constant/enumeration value.\n *\n * @param gl\n * @param constantVal\n * @param encoding\n */\nexport function convertConstant(gl: WebGL2RenderingContext, constantVal: number, encoding?: number) {\n\n    let extension;\n    const p = constantVal;\n\n    if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n    if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n    if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\n    if (p === ByteType) return gl.BYTE;\n    if (p === ShortType) return gl.SHORT;\n    if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n    if (p === IntType) return gl.INT;\n    if (p === UnsignedIntType) return gl.UNSIGNED_INT;\n    if (p === FloatType) return gl.FLOAT;\n\n    if (p === HalfFloatType) {\n        return gl.HALF_FLOAT;\n    }\n\n    if (p === AlphaFormat) return gl.ALPHA;\n    if (p === RGBAFormat) return gl.RGBA;\n    if (p === LuminanceFormat) return gl.LUMINANCE;\n    if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n    if (p === DepthFormat) return gl.DEPTH_COMPONENT;\n    if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n    if (p === RedFormat) return gl.RED;\n\n    if (p === RGBFormat) {\n        return gl.RGBA;\n    }\n\n    // WebGL formats.\n\n    if (p === RedIntegerFormat) return gl.RED_INTEGER;\n    if (p === RGFormat) return gl.RG;\n    if (p === RGIntegerFormat) return gl.RG_INTEGER;\n    if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n    // S3TC\n\n    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n        if (encoding === sRGBEncoding) {\n            const extension = getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb');\n            if (extension !== null) {\n                if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n                if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n            } else {\n                return null;\n            }\n        } else {\n            extension = getExtension(gl, 'WEBGL_compressed_texture_s3tc');\n            if (extension !== null) {\n                if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    // PVRTC\n\n    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_pvrtc');\n        if (extension !== null) {\n            if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n            if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n            if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n            if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n        } else {\n            return null;\n        }\n    }\n\n    // ETC1\n\n    if (p === RGB_ETC1_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_etc1');\n        if (extension !== null) {\n            return extension.COMPRESSED_RGB_ETC1_WEBGL;\n        } else {\n            return null;\n        }\n    }\n\n    // ETC2\n\n    if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_etc');\n        if (extension !== null) {\n            if (p === RGB_ETC2_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n            if (p === RGBA_ETC2_EAC_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n        } else {\n            return null;\n        }\n    }\n\n    // ASTC\n\n    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n        p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n        p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n        p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n        p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_astc');\n        if (extension !== null) {\n            if (p === RGBA_ASTC_4x4_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n            if (p === RGBA_ASTC_5x4_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n            if (p === RGBA_ASTC_5x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n            if (p === RGBA_ASTC_6x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n            if (p === RGBA_ASTC_6x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n            if (p === RGBA_ASTC_8x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n            if (p === RGBA_ASTC_8x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n            if (p === RGBA_ASTC_8x8_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n            if (p === RGBA_ASTC_10x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n            if (p === RGBA_ASTC_10x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n            if (p === RGBA_ASTC_10x8_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n            if (p === RGBA_ASTC_10x10_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n            if (p === RGBA_ASTC_12x10_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n            if (p === RGBA_ASTC_12x12_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n        } else {\n            return null;\n        }\n    }\n\n    // BPTC\n\n    if (p === RGBA_BPTC_Format) {\n        const extension = getExtension(gl, 'EXT_texture_compression_bptc');\n        if (extension !== null) {\n            if (p === RGBA_BPTC_Format) {\n                return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    //\n\n    if (p === UnsignedInt248Type) {\n        return gl.UNSIGNED_INT_24_8;\n    }\n    if (p === RepeatWrapping) {\n        return gl.REPEAT;\n    }\n    if (p === ClampToEdgeWrapping) {\n        return gl.CLAMP_TO_EDGE;\n    }\n    if (p === NearestMipMapNearestFilter) {\n        return gl.NEAREST_MIPMAP_LINEAR;\n    }\n    if (p === NearestMipMapLinearFilter) {\n        return gl.NEAREST_MIPMAP_LINEAR;\n    }\n    if (p === LinearMipMapNearestFilter) {\n        return gl.LINEAR_MIPMAP_NEAREST;\n    }\n    if (p === LinearMipMapLinearFilter) {\n        return gl.LINEAR_MIPMAP_LINEAR;\n    }\n    if (p === NearestFilter) {\n        return gl.NEAREST;\n    }\n    if (p === LinearFilter) {\n        return gl.LINEAR;\n    }\n\n    return null;\n}\n\n","import type * as math from '@xeokit/math';\nimport {\n    NearestFilter,\n    NearestMipmapLinearFilter, NearestMipmapNearestFilter,\n    RepeatWrapping,\n    RGBAFormat, sRGBEncoding,\n    UnsignedByteType\n} from \"@xeokit/constants\";\n\nimport {isArray} from \"@xeokit/utils\";\n\nimport {convertConstant} from \"./convertConstant\";\nimport {getExtension} from \"./getExtension\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\nimport type {TextureCompressedParams} from \"@xeokit/core\";\n\nconst color = new Uint8Array([0, 0, 0, 1]);\n\n/**\n * Represents a WebGL2 texture.\n */\nexport class GLTexture implements GLAbstractTexture {\n\n    private gl: WebGL2RenderingContext;\n    private target: number;\n    private format: number;\n    private type: number;\n    private internalFormat: number;\n    private premultiplyAlpha: boolean;\n    private flipY: boolean;\n    private unpackAlignment: number;\n    private wrapS: number;\n    private wrapT: number;\n    private wrapR: number;\n    private texture: WebGLTexture;\n    private allocated: boolean;\n    private minFilter: number;\n    private magFilter: number;\n    private encoding: number;\n\n    constructor(params: {\n        gl: WebGL2RenderingContext,\n        target?: number,\n        format?: number,\n        type?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number,\n        preloadColor?: math.FloatArrayParam,\n        premultiplyAlpha?: boolean,\n        flipY?: boolean\n    }) {\n\n        this.gl = params.gl;\n\n        this.target = params.target || params.gl.TEXTURE_2D;\n        this.format = params.format || RGBAFormat;\n        this.type = params.type || UnsignedByteType;\n        this.internalFormat = -1;\n        this.premultiplyAlpha = !!params.premultiplyAlpha;\n        this.flipY = !!params.flipY;\n        this.unpackAlignment = 4;\n        this.wrapS = params.wrapS || RepeatWrapping;\n        this.wrapT = params.wrapT || RepeatWrapping;\n        this.wrapR = params.wrapR || RepeatWrapping;\n\n        // @ts-ignore\n        this.texture = params.gl.createTexture();\n\n        if (params.preloadColor) {\n            this.setPreloadColor(params.preloadColor); // Prevents \"there is no texture bound to the unit 0\" error\n        }\n\n        this.allocated = true;\n    }\n\n    setPreloadColor(value: math.FloatArrayParam) {\n        if (!value) {\n            color[0] = 0;\n            color[1] = 0;\n            color[2] = 0;\n            color[3] = 255;\n        } else {\n            color[0] = Math.floor(value[0] * 255);\n            color[1] = Math.floor(value[1] * 255);\n            color[2] = Math.floor(value[2] * 255);\n            color[3] = Math.floor((value[3] !== undefined ? value[3] : 1) * 255);\n        }\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            const faces = [\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n            ];\n            for (let i = 0, len = faces.length; i < len; i++) {\n                gl.texImage2D(faces[i], 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n            }\n        } else {\n            gl.texImage2D(this.target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    setTarget(target: number) {\n        this.target = target || this.gl.TEXTURE_2D;\n    }\n\n    setImage(image: HTMLImageElement, props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment?: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }={}) {\n\n        const gl = this.gl;\n\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.flipY !== undefined) {\n            this.flipY = props.flipY;\n        }\n        if (props.premultiplyAlpha !== undefined) {\n            this.premultiplyAlpha = props.premultiplyAlpha;\n        }\n        if (props.unpackAlignment !== undefined) {\n            this.unpackAlignment = props.unpackAlignment;\n        }\n        if (props.minFilter !== undefined) {\n            this.minFilter = props.minFilter;\n        }\n        if (props.magFilter !== undefined) {\n            this.magFilter = props.magFilter;\n        }\n        if (props.wrapS !== undefined) {\n            this.wrapS = props.wrapS;\n        }\n        if (props.wrapT !== undefined) {\n            this.wrapT = props.wrapT;\n        }\n        if (props.wrapR !== undefined) {\n            this.wrapR = props.wrapR;\n        }\n\n        let generateMipMap = false;\n\n        gl.bindTexture(this.target, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n\n        const minFilter = convertConstant(gl, this.minFilter);\n        gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n\n        if (minFilter === gl.NEAREST_MIPMAP_NEAREST\n            || minFilter === gl.LINEAR_MIPMAP_NEAREST\n            || minFilter === gl.NEAREST_MIPMAP_LINEAR\n            || minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n            generateMipMap = true;\n        }\n\n        const magFilter = convertConstant(gl, this.magFilter);\n        if (magFilter) {\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n        }\n\n        const wrapS = convertConstant(gl, this.wrapS);\n        if (wrapS) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n        }\n\n        const wrapT = convertConstant(gl, this.wrapT);\n        if (wrapT) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n        }\n\n        const glFormat = convertConstant(gl, this.format, this.encoding);\n        const glType = convertConstant(gl, this.type);\n        const glInternalFormat = getInternalFormat(gl, this.internalFormat, glFormat, glType, this.encoding, false);\n\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            if (isArray(image)) {\n                const images = image;\n                const faces = [\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n                ];\n                for (let i = 0, len = faces.length; i < len; i++) {\n                    // @ts-ignore\n                    gl.texImage2D(faces[i], 0, glInternalFormat, glFormat, glType, images[i]);\n                }\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n        }\n\n        // if (generateMipMap) {\n        //     gl.generateMipmap(this.target);\n        // }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setCompressedData(params: TextureCompressedParams) {\n\n        const gl = this.gl;\n        const mipmaps = params.mipmaps || [];\n        const levels = mipmaps.length;\n        const props = params.props;\n\n        // Cache props\n\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.flipY !== undefined) {\n            this.flipY = props.flipY;\n        }\n        if (props.premultiplyAlpha !== undefined) {\n            this.premultiplyAlpha = props.premultiplyAlpha;\n        }\n        if (props.unpackAlignment !== undefined) {\n            this.unpackAlignment = props.unpackAlignment;\n        }\n        if (props.minFilter !== undefined) {\n            this.minFilter = props.minFilter;\n        }\n        if (props.magFilter !== undefined) {\n            this.magFilter = props.magFilter;\n        }\n        if (props.wrapS !== undefined) {\n            this.wrapS = props.wrapS;\n        }\n        if (props.wrapT !== undefined) {\n            this.wrapT = props.wrapT;\n        }\n        if (props.wrapR !== undefined) {\n            this.wrapR = props.wrapR;\n        }\n\n        gl.activeTexture(gl.TEXTURE0 + 0);\n        gl.bindTexture(this.target, this.texture);\n\n        let supportsMips = mipmaps.length > 1;\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n\n        const wrapS = convertConstant(gl, this.wrapS);\n        if (wrapS) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n        }\n\n        const wrapT = convertConstant(gl, this.wrapT);\n        if (wrapT) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n        }\n\n        // @ts-ignore\n        if (this.type === gl.TEXTURE_3D || this.type === gl.TEXTURE_2D_ARRAY) {\n            const wrapR = convertConstant(gl, this.wrapR);\n            if (wrapR) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_R, wrapR);\n            }\n            gl.texParameteri(this.type, gl.TEXTURE_WRAP_R, wrapR);\n        }\n\n        if (supportsMips) {\n            gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, filterFallback(gl, this.minFilter));\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, filterFallback(gl, this.magFilter));\n\n        } else {\n            gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, convertConstant(gl, this.minFilter));\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, convertConstant(gl, this.magFilter));\n        }\n\n        const glFormat = convertConstant(gl, this.format, this.encoding);\n        const glType = convertConstant(gl, this.type);\n        const glInternalFormat = getInternalFormat(gl, this.internalFormat, glFormat, glType, this.encoding, false);\n\n        gl.texStorage2D(gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n\n        for (let i = 0, len = mipmaps.length; i < len; i++) {\n\n            const mipmap = mipmaps[i];\n\n            if (this.format !== RGBAFormat) {\n                if (glFormat !== null) {\n                    gl.compressedTexSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                    console.warn('Attempt to load unsupported compressed texture format in .setCompressedData()');\n                }\n            } else {\n                gl.texSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            }\n        }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setProps(props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        this._uploadProps(props);\n        gl.bindTexture(this.target, null);\n    }\n\n    _uploadProps(props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }) {\n        const gl = this.gl;\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.minFilter !== undefined) {\n            const minFilter = convertConstant(gl, props.minFilter);\n            if (minFilter) {\n                this.minFilter = props.minFilter;\n                gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n                if (minFilter === gl.NEAREST_MIPMAP_NEAREST || minFilter === gl.LINEAR_MIPMAP_NEAREST || minFilter === gl.NEAREST_MIPMAP_LINEAR || minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n                    gl.generateMipmap(this.target);\n                }\n            }\n        }\n        if (props.magFilter !== undefined) {\n            const magFilter = convertConstant(gl, props.magFilter);\n            if (magFilter) {\n                this.magFilter = props.magFilter;\n                gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n            }\n        }\n        if (props.wrapS !== undefined) {\n            const wrapS = convertConstant(gl, props.wrapS);\n            if (wrapS) {\n                this.wrapS = props.wrapS;\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n            }\n        }\n        if (props.wrapT !== undefined) {\n            const wrapT = convertConstant(gl, props.wrapT);\n            if (wrapT) {\n                this.wrapT = props.wrapT;\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n            }\n        }\n    }\n\n    bind(unit: number) :boolean{\n        if (!this.allocated) {\n            return false;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            // @ts-ignore\n            gl.activeTexture(gl[`TEXTURE${unit}`]);\n            gl.bindTexture(this.target, this.texture);\n            return true;\n        }\n        return false;\n    }\n\n    unbind(unit: number) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            // @ts-ignore\n            gl.activeTexture(gl[`TEXTURE${unit}`]);\n            gl.bindTexture(this.target, null);\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            this.gl.deleteTexture(this.texture);\n            // @ts-ignore\n            this.texture = null;\n        }\n    }\n}\n\nfunction getInternalFormat(\n    gl: WebGL2RenderingContext,\n    internalFormatName: string | number,\n    glFormat: any,\n    glType: any,\n    encoding: number,\n    isVideoTexture = false): number {\n    if (internalFormatName !== null) {\n        // @ts-ignore\n        if (gl[internalFormatName] !== undefined) {\n            // @ts-ignore\n            return gl[internalFormatName];\n        }\n        console.warn('Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n    let internalFormat = glFormat;\n    if (glFormat === gl.RED) {\n        if (glType === gl.FLOAT) internalFormat = gl.R32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;\n    }\n    if (glFormat === gl.RG) {\n        if (glType === gl.FLOAT) internalFormat = gl.RG32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;\n    }\n    if (glFormat === gl.RGBA) {\n        if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = (encoding === sRGBEncoding && isVideoTexture === false) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n        if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;\n        if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;\n    }\n    if (internalFormat === gl.R16F || internalFormat === gl.R32F ||\n        internalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n        internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {\n        getExtension(gl, 'EXT_color_buffer_float');\n    }\n    return internalFormat;\n}\n\nfunction filterFallback(gl: WebGL2RenderingContext, f: number): number {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n        return gl.NEAREST;\n    }\n    return gl.LINEAR;\n\n}","/**\n * Information about WebGL2 support on the client machine.\n */\nconst WEBGL_INFO: {\n    [key: string]: any\n} = {\n    WEBGL: false,\n    SUPPORTED_EXTENSIONS: {}\n};\n\nconst canvas = document.createElement(\"canvas\");\n\nif (canvas) {\n\n    // @ts-ignore\n    const gl: WebGL2RenderingContext = canvas.getContext(\"webgl2\", {antialias: true});\n\n    WEBGL_INFO.WEBGL = !!gl;\n\n    if (WEBGL_INFO.WEBGL) {\n        // @ts-ignore\n        WEBGL_INFO.ANTIALIAS = gl.getContextAttributes().antialias;\n        if (gl.getShaderPrecisionFormat) {\n            // @ts-ignore\n            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"highp\";\n            } else { // @ts-ignore\n                if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n                            } else {\n                                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"lowp\";\n                            }\n            }\n        } else {\n            WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n        }\n        WEBGL_INFO.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);\n        WEBGL_INFO.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        WEBGL_INFO.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WEBGL_INFO.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n        // @ts-ignore\n        gl.getSupportedExtensions().forEach(function (ext: any) {\n            WEBGL_INFO.SUPPORTED_EXTENSIONS[ext] = true;\n        });\n        WEBGL_INFO.depthTexturesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"];\n    }\n}\n\nexport {WEBGL_INFO};"],"names":["GLArrayBuf","gl","type","data","numItems","itemSize","usage","normalized","stride","offset","itemType","this","itemByteSize","allocated","length","dataLength","handle","constructor","Uint8Array","UNSIGNED_BYTE","Int8Array","BYTE","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","FLOAT","_allocate","_proto","prototype","createBuffer","Error","bindBuffer","bufferData","slice","setData","destroy","bufferSubData","bind","unbind","deleteBuffer","GLAttribute","location","bindArrayBuffer","arrayBuf","enableVertexAttribArray","vertexAttribPointer","GLDataTexture","params","texture","textureWidth","textureHeight","textureData","Object","defineProperty","_onDestroyed","writable","value","_classPrivateFieldLooseBase","onDestroyed","bindTexture","glProgram","sampler","unit","activeTexture","TEXTURE_2D","disableFiltering","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","deleteTexture","GLShader","source","errors","compiled","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","isContextLost","lines","split","numberedLines","i","push","getShaderInfoLog","concat","join","GLSampler","uniform1i","ids","Map","GLProgram","id","vertexShader","fragmentShader","attributes","samplers","uniforms","validated","linked","addItem","VERTEX_SHADER","vertex","FRAGMENT_SHADER","fragment","logErrors","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","numUniforms","ACTIVE_UNIFORMS","u","getActiveUniform","uName","name","substr","getUniformLocation","SAMPLER_2D","SAMPLER_CUBE","numAttribs","ACTIVE_ATTRIBUTES","a","getActiveAttrib","getAttribLocation","useProgram","getLocation","getAttribute","getSampler","removeItem","deleteProgram","deleteShader","console","error","Canvas2Image","oCanvas","document","createElement","sc","String","fromCharCode","getContext","saveAsBMP","saveAsPNG","saveAsJPEG","bHasImageData","getImageData","bHasDataURL","toDataURL","bHasBase64","window","btoa","saveFile","strData","open","href","makeDataURI","strMime","makeImageObject","strSource","oImgElement","src","scaleCanvas","iWidth","iHeight","flipy","oSaveCanvas","width","height","style","oSaveCtx","save","scale","imageSmoothingEnabled","drawImage","restore","bReturnImg","indexOf","oData","parseInt","readCanvasData","strImgData","strHeader","iFileSize","Math","floor","iImageWidth","iImageHeight","iDataSize","x","iOffsetX","iOffsetY","strPixelRow","aImgData","strPixelData","y","aData","encodeData","createBMP","_canvas","_classPrivateFieldLooseKey","_gl","_allocated","_buffer","_bound","_size","_hasDepthTexture","_imageDataCache","_texture","_depthTexture","_touch","_getImageDataCache","GLRenderBuffer","canvas","options","_getImageDataCache2","_touch2","size","depthTexture","setSize","bindFramebuffer","FRAMEBUFFER","framebuf","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","read","pickX","pickY","drawingBufferHeight","pix","readPixels","RGBA","readImage","imageDataCache","pixelData","imageData","context","set","putImageData","image","imageWidth","imageHeight","format","getTexture","_this","hasDepthTexture","getDepthTexture","_this2","deleteFramebuffer","deleteRenderbuffer","renderbuf","drawingBufferWidth","colorTexture","createTexture","texImage2D","DEPTH_COMPONENT","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","framebufferRenderbuffer","isFramebuffer","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","bufferWidth","bufferHeight","createImageData","getExtension","undefined","_cachedExtensions","extension","convertConstant","constantVal","encoding","p","UnsignedByteType","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","HALF_FLOAT","AlphaFormat","ALPHA","RGBAFormat","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","DepthFormat","DepthStencilFormat","DEPTH_STENCIL","RedFormat","RED","RGBFormat","RedIntegerFormat","RED_INTEGER","RGFormat","RG","RGIntegerFormat","RG_INTEGER","RGBAIntegerFormat","RGBA_INTEGER","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","sRGBEncoding","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","RGBA_BPTC_Format","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8","RepeatWrapping","REPEAT","ClampToEdgeWrapping","NearestMipMapNearestFilter","NearestMipMapLinearFilter","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LinearMipMapLinearFilter","LINEAR_MIPMAP_LINEAR","NearestFilter","LinearFilter","LINEAR","color","GLTexture","target","internalFormat","premultiplyAlpha","flipY","unpackAlignment","wrapS","wrapT","wrapR","minFilter","magFilter","preloadColor","setPreloadColor","TEXTURE_CUBE_MAP","faces","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","len","setTarget","setImage","props","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","glFormat","glType","glInternalFormat","getInternalFormat","isArray","images","setCompressedData","mipmaps","levels","TEXTURE0","supportsMips","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","filterFallback","texStorage2D","mipmap","compressedTexSubImage2D","warn","texSubImage2D","setProps","_uploadProps","NEAREST_MIPMAP_NEAREST","generateMipmap","internalFormatName","isVideoTexture","R32F","R16F","R8","RG32F","RG16F","RG8","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","RGBA4","RGB5_A1","f","NearestMipmapNearestFilter","NearestMipmapLinearFilter","WEBGL_INFO","WEBGL","SUPPORTED_EXTENSIONS","antialias","ANTIALIAS","getContextAttributes","FS_MAX_FLOAT_PRECISION","getShaderPrecisionFormat","HIGH_FLOAT","precision","MEDIUM_FLOAT","DEPTH_BUFFER_BITS","getParameter","DEPTH_BITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VARYING_VECTORS","getSupportedExtensions","forEach","ext","depthTexturesSupported"],"mappings":"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"}