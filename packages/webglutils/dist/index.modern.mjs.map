{"version":3,"file":"index.modern.mjs","sources":["../src/GLArrayBuf.ts","../src/GLAttribute.ts","../src/GLDataTexture.ts","../src/GLShader.ts","../src/GLSampler.ts","../src/GLProgram.ts","../src/canvas2image.ts","../src/GLRenderBuffer.ts","../src/getExtension.ts","../src/convertConstant.ts","../src/GLTexture.ts","../src/WEBGL_INFO.ts"],"sourcesContent":["/**\n * Represents a WebGL ArrayBuffer.\n */\nexport class GLArrayBuf {\n\n    /**\n     * WebGL2 rendering context.\n     */\n    gl: WebGL2RenderingContext;\n\n    /**\n     * The ArrayBuffer's item type.\n     */\n    itemType: GLenum;\n\n    /**\n     * Byte size of each item.\n     */\n    itemByteSize: number;\n\n    /**\n     * The ArrayBuffer type.\n     */\n    type: any;\n\n    /**\n     * Allocated yet?\n     */\n    allocated: boolean;\n\n    /**\n     * A GLenum specifying the intended usage pattern of the data store for optimization purposes. Possible values:\n     *\n     * * gl.STATIC_DRAW : The contents are intended to be specified once by the application, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.DYNAMIC_DRAW : The contents are intended to be respecified repeatedly by the application, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.STREAM_DRAW : The contents are intended to be specified once by the application, and used at most a few times as the source for WebGL drawing and image specification commands.\n     * * gl.STATIC_READ : The contents are intended to be specified once by reading data from WebGL, and queried many times by the application.\n     * * gl.DYNAMIC_READ : The contents are intended to be respecified repeatedly by reading data from WebGL, and queried many times by the application.\n     * * gl.STREAM_READ : The contents are intended to be specified once by reading data from WebGL, and queried at most a few times by the application\n     * * gl.STATIC_COPY : The contents are intended to be specified once by reading data from WebGL, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.DYNAMIC_COPY : The contents are intended to be respecified repeatedly by reading data from WebGL, and used many times as the source for WebGL drawing and image specification commands.\n     * * gl.STREAM_COPY : The contents are intended to be specified once by reading data from WebGL, and used at most a few times as the source for WebGL drawing and image specification commands.\n     */\n    usage: GLenum;\n\n    /**\n     * The ArrayBuffer type.\n     */\n    length: GLuint;\n\n    /**\n     *\n     */\n    dataLength: number;\n\n    /**\n     * Number of items in the ArrayBuffer.\n     */\n    numItems: number;\n\n    /**\n     * Size of each item.\n     */\n    itemSize: number;\n\n    /**\n     * True when ArrayBuffer values are normalized.\n     */\n    normalized: boolean;\n\n    /**\n     * The ArrayBuffer stride.\n     */\n    stride: number;\n\n    /**\n     *\n     */\n    offset: number;\n\n    /**\n     * Hand to a WebGLBuffer.\n     */\n    handle: WebGLBuffer;\n\n    /**\n     * Creates a WebGL ArrayBuffer.\n     */\n    constructor(\n        gl: WebGL2RenderingContext,\n        type: any,\n        data: any,\n        numItems: number,\n        itemSize: number,\n        usage: GLenum,\n        normalized?: boolean,\n        stride?: number,\n        offset?: number) {\n\n        this.gl = gl;\n        this.type = type;\n        this.allocated = false;\n\n        switch (data.constructor) {\n\n            case Uint8Array:\n                this.itemType = gl.UNSIGNED_BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case Int8Array:\n                this.itemType = gl.BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case  Uint16Array:\n                this.itemType = gl.UNSIGNED_SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case  Int16Array:\n                this.itemType = gl.SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case Uint32Array:\n                this.itemType = gl.UNSIGNED_INT;\n                this.itemByteSize = 4;\n                break;\n\n            case Int32Array:\n                this.itemType = gl.INT;\n                this.itemByteSize = 4;\n                break;\n\n            default:\n                this.itemType = gl.FLOAT;\n                this.itemByteSize = 4;\n        }\n\n        this.usage = usage;\n        this.length = 0;\n        this.dataLength = numItems;\n        this.numItems = 0;\n        this.itemSize = itemSize;\n        this.normalized = !!normalized;\n        this.stride = stride || 0;\n        this.offset = offset || 0;\n\n        this._allocate(data);\n    }\n\n    _allocate(data: any) {\n        this.allocated = false;\n        // @ts-ignore\n        this.handle = this.gl.createBuffer();\n        if (!this.handle) {\n            throw new Error(\"Failed to allocate WebGL ArrayBuffer\");\n        }\n        if (this.handle) {\n            this.gl.bindBuffer(this.type, this.handle);\n            this.gl.bufferData(this.type, data.length > this.dataLength ? data.slice(0, this.dataLength) : data, this.usage);\n            this.gl.bindBuffer(this.type, null);\n            this.length = data.length;\n            this.numItems = this.length / this.itemSize;\n            this.allocated = true;\n        }\n    }\n\n    /**\n     * Updates the contents of this ArrayBuffer.\n     * @param data\n     * @param offset\n     */\n    setData(data: any, offset: number) {\n        if (!this.allocated) {\n            return;\n        }\n        if (data.length + (offset || 0) > this.length) {            // Needs reallocation\n            this.destroy();\n            this._allocate(data);\n        } else {            // No reallocation needed\n            this.gl.bindBuffer(this.type, this.handle);\n            if (offset || offset === 0) {\n                this.gl.bufferSubData(this.type, offset * this.itemByteSize, data);\n            } else {\n                this.gl.bufferData(this.type, data, this.usage);\n            }\n            this.gl.bindBuffer(this.type, null);\n        }\n    }\n\n    /**\n     * Binds this ArrayBuffer to the WebGL rendering context.\n     */\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, this.handle);\n    }\n\n    /**\n     * Unbinds this ArrayBuffer from the WebGL rendering context.\n     */\n    unbind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, null);\n    }\n\n    /**\n     * Destroys this ArrayBuffer.\n     */\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.deleteBuffer(this.handle);\n        this.allocated = false;\n    }\n}\n","import type {GLArrayBuf} from \"./GLArrayBuf\";\n\n/**\n * Represents a WebGL vertex attribute.\n */\nexport class GLAttribute {\n    gl: WebGL2RenderingContext;\n    location: number;\n\n    /**\n     * Creates a new vertex attribute.\n     * @param gl\n     * @param location\n     */\n    constructor(gl: WebGL2RenderingContext, location: number) {\n        this.gl = gl;\n        this.location = location;\n    }\n\n    /**\n     * Binds an array buffer to this vertex attribute.\n     * @param arrayBuf\n     */\n    bindArrayBuffer(arrayBuf: GLArrayBuf) {\n        if (!arrayBuf) {\n            return;\n        }\n        arrayBuf.bind();\n        this.gl.enableVertexAttribArray(this.location);\n        this.gl.vertexAttribPointer(this.location, arrayBuf.itemSize, arrayBuf.itemType, arrayBuf.normalized, arrayBuf.stride, arrayBuf.offset);\n    }\n}\n","import type {GLProgram} from \"./GLProgram\";\nimport type {GLSampler} from \"./GLSampler\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 data texture.\n */\nexport class GLDataTexture implements GLAbstractTexture {\n\n    gl?: WebGL2RenderingContext;\n    texture?: WebGLTexture | null;\n    textureWidth?: number;\n    textureHeight?: number;\n    textureData?: any;\n    #onDestroyed?: Function;\n\n    /**\n     * Constructs a new GLDataTexture.\n     * @param params\n     */\n    constructor(params: {\n        gl?: WebGL2RenderingContext,\n        texture?: WebGLTexture,\n        textureWidth?: number,\n        textureHeight?: number,\n        textureData?: any,\n        onDestroyed?: Function\n    }={}) {\n        this.gl = params.gl;\n        this.texture = params.texture;\n        this.textureWidth = params.textureWidth;\n        this.textureHeight = params.textureHeight;\n        this.textureData = params.textureData;\n        this.#onDestroyed = params.onDestroyed;\n    }\n\n    /**\n     * Binds this GLDataTexture to the given {@link GLSampler}.\n     * @param glProgram\n     * @param sampler\n     * @param unit\n     */\n    bindTexture(glProgram: GLProgram, sampler: GLSampler, unit: number) {\n        if (!this.gl) {\n            return;\n        }\n        sampler.bindTexture(this, unit);\n    }\n\n    /**\n     * Unbinds this GLDataTexture from whichever {@link GLSampler} it's currently bound to, if any.\n     * @param unit\n     */\n    bind(unit: number) : boolean{\n        if (!this.gl || !this.texture) {\n            return false;\n        }\n        // @ts-ignore\n        this.gl.activeTexture(this.gl[\"TEXTURE\" + unit]);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        return true;\n    }\n\n    disableFiltering(): void {\n        if (!this.gl) {\n            return;\n        }\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n    }\n\n    unbind(unit: number) {\n        if (!this.gl) {\n            return;\n        }\n        // This `unbind` method is ignored at the moment to allow avoiding to rebind same texture already bound to a texture unit.\n\n        // this.gl.activeTexture(this.state.gl[\"TEXTURE\" + unit]);\n        // this.gl.bindTexture(this.state.gl.TEXTURE_2D, null);\n    }\n\n    destroy() {\n        if (!this.gl || !this.texture) {\n            return;\n        }\n        this.gl.deleteTexture(this.texture);\n        this.texture = null;\n        if (this.#onDestroyed) {\n            this.#onDestroyed();\n        }\n    }\n}","/**\n * Represents a WebGL2 shader.\n */\nexport class GLShader {\n\n    /**\n     * Compilation errors, if any.\n     */\n    errors: string[];\n\n    /**\n     * True when this shader was successfully allocated.\n     */\n    allocated: boolean;\n\n    /**\n     * True when this shader was successfully compiled.\n     */\n    compiled: boolean;\n\n    /**\n     * Handle to GPU-resident WebGL2 shader.\n     */\n    handle: WebGLShader;\n\n    /**\n     * Creates a new shader.\n     * @param gl\n     * @param type\n     * @param source\n     */\n    constructor(gl: WebGL2RenderingContext, type: number, source: string) {\n        this.allocated = false;\n        this.compiled = false;\n        // @ts-ignore\n        this.handle = gl.createShader(type);\n        if (!this.handle) {\n            this.errors = [\n                \"Failed to allocate\"\n            ];\n            return;\n        }\n        this.allocated = true;\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);\n        if (!this.compiled) {\n            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here\n                const lines = source.split(\"\\n\");\n                const numberedLines = [];\n                for (let i = 0; i < lines.length; i++) {\n                    numberedLines.push((i + 1) + \": \" + lines[i] + \"\\n\");\n                }\n                this.errors = [];\n                this.errors.push(\"\");\n                this.errors.push(gl.getShaderInfoLog(this.handle) || \"\");\n                this.errors = this.errors.concat(numberedLines.join(\"\"));\n            }\n        }\n    }\n\n    /**\n     * Destroys this shader.\n     */\n    destroy() {\n\n    }\n}","import type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 sampler.\n */\nexport class GLSampler {\n\n    private readonly location: WebGLUniformLocation;\n    private readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Creates a new sampler.\n     * @param gl\n     * @param location\n     */\n    constructor(gl: WebGL2RenderingContext, location: WebGLUniformLocation) {\n        this.gl = gl;\n        this.location = location;\n    }\n\n    /**\n     * Binds a texture to this sampler.\n     * @param texture\n     * @param unit\n     */\n    bindTexture(texture: GLAbstractTexture, unit: number) {\n        if (texture.bind(unit)) {\n            this.gl.uniform1i(this.location, unit);\n            return true;\n        }\n        return false;\n    }\n}\n","import {Map} from \"@xeokit/utils\";\n\nimport {GLShader} from \"./GLShader\";\nimport {GLSampler} from \"./GLSampler\";\nimport {GLAttribute} from \"./GLAttribute\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\nconst ids = new Map({}, \"\");\n\n/**\n * Represents a WebGL2 program.\n */\nexport class GLProgram {\n\n    /**\n     * Unique ID of this program.\n     */\n    id: number;\n\n    /**\n     * The vertex shader.\n     */\n    vertexShader: GLShader;\n\n    /**\n     * The fragment shader.\n     */\n    fragmentShader: GLShader;\n\n    /**\n     * Map of all attributes in this program.\n     */\n    attributes: { [key: string]: GLAttribute };\n\n    /**\n     * Map of all samplers in this program.\n     */\n    samplers: { [key: string]: GLSampler };\n\n    /**\n     * Map of all uniforms in this program.\n     */\n    uniforms: { [key: string]: WebGLUniformLocation };\n\n    /**\n     * List of compilation errors for this program, if any.\n     */\n    errors: string[];\n\n    /**\n     * Flag set true when program has been validated.\n     */\n    validated: boolean;\n\n    /**\n     * Flag set true when this program has been successfully linked.\n     */\n    linked: boolean;\n\n    /**\n     * Flag set true when this program has been successfully conpiled.\n     */\n    compiled: boolean;\n\n    /**\n     * Flag set true when this program has been successfully allocated.\n     */\n    allocated: boolean;\n\n    /**\n     * The WebGL2 rendering context.\n     */\n    gl: WebGL2RenderingContext;\n\n    /**\n     * The source code from which the shaders are built.\n     */\n    source: any;\n\n    /**\n     * Handle to the WebGL program itself, which resides on the GPU.\n     */\n    handle: WebGLProgram;\n\n    /**\n     * Creates a new program.\n     * @param gl\n     * @param shaderSource\n     */\n    constructor(gl: WebGL2RenderingContext, shaderSource: any) {\n\n        // @ts-ignore\n        this.id = ids.addItem({});\n        this.source = shaderSource;\n        this.gl = gl;\n        this.allocated = false;\n        this.compiled = false;\n        this.linked = false;\n        this.validated = false;\n        this.errors = [];\n        this.uniforms = {};\n        this.samplers = {};\n        this.attributes = {};\n\n        this.vertexShader = new GLShader(gl, gl.VERTEX_SHADER, this.source.vertex);\n        this.fragmentShader = new GLShader(gl, gl.FRAGMENT_SHADER, this.source.fragment);\n\n        if (!this.vertexShader.allocated) {\n            this.errors = [\"Vertex shader failed to allocate\"].concat(this.vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        if (!this.fragmentShader.allocated) {\n            this.errors = [\"Fragment shader failed to allocate\"].concat(this.fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        this.allocated = true;\n\n        if (!this.vertexShader.compiled) {\n            this.errors = [\"Vertex shader failed to compile\"].concat(this.vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        if (!this.fragmentShader.compiled) {\n            this.errors = [\"Fragment shader failed to compile\"].concat(this.fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n\n        this.compiled = true;\n        // @ts-ignore\n        this.handle = gl.createProgram();\n\n        if (!this.handle) {\n            this.errors = [\"Failed to allocate program\"];\n            return;\n        }\n\n        gl.attachShader(this.handle, this.vertexShader.handle);\n        gl.attachShader(this.handle, this.fragmentShader.handle);\n        gl.linkProgram(this.handle);\n\n        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n\n        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeokit-sdk/issues/5\n        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?\n\n        this.validated = true;\n\n        if (!this.linked || !this.validated) {\n            this.errors = [];\n            this.errors.push(\"\");\n            // @ts-ignore\n            this.errors.push(gl.getProgramInfoLog(this.handle));\n            this.errors.push(\"\\nVertex shader:\\n\");\n            this.errors = this.errors.concat(this.source.vertex);\n            this.errors.push(\"\\nFragment shader:\\n\");\n            this.errors = this.errors.concat(this.source.fragment);\n            logErrors(this.errors);\n            return;\n        }\n\n        const numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < numUniforms; ++i) {\n            const u = gl.getActiveUniform(this.handle, i);\n            if (u) {\n                let uName = u.name;\n                if (uName[uName.length - 1] === \"\\u0000\") {\n                    uName = uName.substr(0, uName.length - 1);\n                }\n                const location = gl.getUniformLocation(this.handle, uName);\n                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {\n                    // @ts-ignore\n                    this.samplers[uName] = new GLSampler(gl, location);\n                } else {\n                    // @ts-ignore\n                    this.uniforms[uName] = location;\n                }\n            }\n        }\n\n        const numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < numAttribs; i++) {\n            const a = gl.getActiveAttrib(this.handle, i);\n            if (a) {\n                const location = gl.getAttribLocation(this.handle, a.name);\n                this.attributes[a.name] = new GLAttribute(gl, location);\n            }\n        }\n\n        this.allocated = true;\n    }\n\n    /**\n     * Binds this program.\n     */\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    }\n\n    /**\n     * Gets the location of the given uniform within this program.\n     * @param name\n     */\n    getLocation(name: string): WebGLUniformLocation {\n        return this.uniforms[name];\n    }\n\n    /**\n     * Gets an attribute within this program.\n     * @param name\n     */\n    getAttribute(name: string): GLAttribute {\n        return this.attributes[name];\n    }\n\n    /**\n     * Gets a sampler within this program.\n     * @param name\n     */\n    getSampler(name: string): GLSampler {\n        return this.samplers[name];\n    }\n\n    /**\n     * Binds a texture to this program.\n     * @param name\n     * @param texture\n     * @param unit\n     */\n    bindTexture(name: string, texture: GLAbstractTexture, unit: number): boolean {\n        if (!this.allocated) {\n            return false;\n        }\n        const sampler = this.samplers[name];\n        if (sampler) {\n            return sampler.bindTexture(texture, unit);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Destroys this program.\n     */\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        ids.removeItem(this.id);\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this.vertexShader.handle);\n        this.gl.deleteShader(this.fragmentShader.handle);\n        this.attributes = {};\n        this.uniforms = {};\n        this.samplers = {};\n        this.allocated = false;\n    }\n}\n\nfunction joinSansComments(srcLines: string[]) {\n    const src = [];\n    let line;\n    ``\n    for (let i = 0, len = srcLines.length; i < len; i++) {\n        line = srcLines[i];\n        const n = line.indexOf(\"/\");\n        if (n > 0) {\n            if (line.charAt(n + 1) === \"/\") {\n                line = line.substring(0, n);\n            }\n        }\n        src.push(line);\n    }\n    return src.join(\"\\n\");\n}\n\nfunction logErrors(errors: string[]) {\n    console.error(errors.join(\"\\n\"));\n}\n","/**\n * Canvas2Image v0.1\n * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com\n * MIT License [http://www.opensource.org/licenses/mit-license.php]\n *\n * Modified by @xeolabs to permit vertical flipping, so that snapshot can be taken from WebGL frame buffers,\n * which vertically flip image data as part of the way that WebGL renders textures.\n */\nexport const Canvas2Image = (function () {\n    // check if we have canvas support\n    const oCanvas = document.createElement(\"canvas\"), sc = String.fromCharCode, strDownloadMime = \"image/octet-stream\",\n        bReplaceDownloadMime = false;\n\n    // no canvas, bail out.\n    if (!oCanvas.getContext) {\n        return {\n            saveAsBMP: function () {\n            },\n            saveAsPNG: function () {\n            },\n            saveAsJPEG: function () {\n            }\n        }\n    }\n\n    // @ts-ignore\n    const bHasImageData = !!(oCanvas.getContext(\"2d\").getImageData), bHasDataURL = !!(oCanvas.toDataURL),\n        bHasBase64 = !!(window.btoa);\n\n    // ok, we're good\n    const readCanvasData = function (oCanvas: HTMLCanvasElement) {\n        // @ts-ignore\n        const iWidth = parseInt(oCanvas.width), iHeight = parseInt(oCanvas.height);\n        // @ts-ignore\n        return oCanvas.getContext(\"2d\").getImageData(0, 0, iWidth, iHeight);\n    };\n\n    // base64 encodes either a string or an array of charcodes\n    const encodeData = function (data: any) {\n        let i: any, aData: any, strData: any = \"\";\n        if (typeof data == \"string\") {\n            strData = data;\n        } else {\n            aData = data;\n            for (i = 0; i < aData.length; i++) {\n                strData += sc(aData[i]);\n            }\n        }\n        return btoa(strData);\n    };\n\n    // creates a base64 encoded string containing BMP data takes an imagedata object as argument\n    const createBMP = function (oData: ImageData) {\n        let strHeader = '';\n        const iWidth = oData.width;\n        const iHeight = oData.height;\n\n        strHeader += 'BM';\n\n        let iFileSize = iWidth * iHeight * 4 + 54; // total header size = 54 bytes\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 54, 0, 0, 0); // data offset\n        strHeader += sc(40, 0, 0, 0); // info header size\n\n        let iImageWidth = iWidth;\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n\n        let iImageHeight = iHeight;\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n\n        strHeader += sc(1, 0, 32, 0); // num of planes & num of bits per pixel\n        strHeader += sc(0, 0, 0, 0); // compression = none\n\n        let iDataSize = iWidth * iHeight * 4;\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // these bytes are not used\n\n        const aImgData = oData.data;\n        let strPixelData = \"\";\n        let c;\n        let x;\n        let y = iHeight;\n        let iOffsetX;\n        let iOffsetY;\n        let strPixelRow;\n\n        do {\n            iOffsetY = iWidth * (y - 1) * 4;\n            strPixelRow = \"\";\n            for (x = 0; x < iWidth; x++) {\n                iOffsetX = 4 * x;\n                strPixelRow += sc(\n                    aImgData[iOffsetY + iOffsetX + 2], // B\n                    aImgData[iOffsetY + iOffsetX + 1], // G\n                    aImgData[iOffsetY + iOffsetX],     // R\n                    aImgData[iOffsetY + iOffsetX + 3]  // A\n                );\n            }\n            strPixelData += strPixelRow;\n        } while (--y);\n\n        return encodeData(strHeader + strPixelData);\n    };\n\n    // sends the generated file to the client\n    const saveFile = function (strData: string) {\n        if (!window.open(strData)) {\n            document.location.href = strData;\n        }\n    };\n\n    const makeDataURI = function (strData: string, strMime: string) {\n        return \"data:\" + strMime + \";base64,\" + strData;\n    };\n\n    // generates a <img> object containing the imagedata\n    const makeImageObject = function (strSource: any) {\n        const oImgElement = document.createElement(\"img\");\n        oImgElement.src = strSource;\n        return oImgElement;\n    };\n\n    const scaleCanvas = function (oCanvas: HTMLCanvasElement, iWidth: number, iHeight: number, flipy: boolean) {\n        if (iWidth && iHeight) {\n            const oSaveCanvas = document.createElement(\"canvas\");\n            oSaveCanvas.width = iWidth;\n            oSaveCanvas.height = iHeight;\n            oSaveCanvas.style.width = iWidth + \"px\";\n            oSaveCanvas.style.height = iHeight + \"px\";\n            const oSaveCtx = oSaveCanvas.getContext(\"2d\");\n            if (flipy) {\n                // @ts-ignore\n                oSaveCtx.save();\n                // @ts-ignore\n                oSaveCtx.scale(1.0, -1.0);\n                // @ts-ignore\n                oSaveCtx.imageSmoothingEnabled = true;\n                // @ts-ignore\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, -iHeight);\n                // @ts-ignore\n                oSaveCtx.restore();\n            } else {\n                // @ts-ignore\n                oSaveCtx.imageSmoothingEnabled = true;\n                // @ts-ignore\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iHeight);\n            }\n            return oSaveCanvas;\n        }\n        return oCanvas;\n    };\n\n    return {\n        saveAsPNG: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/png\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsJPEG: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/jpeg\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            // check if browser actually supports jpeg by looking for the mime type in the data uri. if not, return false\n            if (strData.indexOf(strMime) != 5) return false;\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsBMP: function (oCanvas: HTMLCanvasElement, bReturnImg: boolean, iWidth: number, iHeight: number, flipy: boolean): boolean | HTMLImageElement {\n            if (!(bHasDataURL && bHasImageData && bHasBase64)) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/bmp\";\n            const oData = readCanvasData(oScaledCanvas), strImgData = createBMP(oData);\n            if (bReturnImg) {\n                return makeImageObject(makeDataURI(strImgData, strMime));\n            } else {\n                saveFile(makeDataURI(strImgData, strMime));\n            }\n            return true;\n        }\n    };\n})();\n","import {Canvas2Image} from \"./canvas2image\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\n\n/**\n * Represents a WebGL2 render buffer.\n */\nexport class GLRenderBuffer {\n\n    #canvas: HTMLCanvasElement;\n    #gl: WebGL2RenderingContext;\n    #allocated: boolean;\n    #buffer: any;\n    #bound: boolean;\n    #size: number[];\n    #hasDepthTexture: boolean;\n    #imageDataCache: any;\n    #texture: GLAbstractTexture;\n    #depthTexture: GLAbstractTexture;\n\n    /**\n     * Creates a new render buffer.\n     * @param canvas\n     * @param gl\n     * @param options\n     */\n    constructor(canvas: HTMLCanvasElement, gl: WebGL2RenderingContext, options: {\n        depthTexture: boolean;\n        size: number[];\n    }) {\n        this.#canvas = canvas;\n        this.#gl = gl;\n        this.#allocated = false;\n        this.#buffer = null;\n        this.#bound = false;\n        this.#size = options.size;\n        this.#hasDepthTexture = !!options.depthTexture;\n    }\n\n    /**\n     * Sets the size of this render buffer.\n     * @param size\n     */\n    setSize(size: number[]) {\n        this.#size = size;\n    }\n\n    /**\n     * Binds this render buffer.\n     */\n    bind() {\n        this.#touch();\n        if (this.#bound) {\n            return;\n        }\n        const gl = this.#gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.#buffer.framebuf);\n        this.#bound = true;\n    }\n\n    #touch() {\n        let width;\n        let height;\n        const gl = this.#gl;\n        if (this.#size) {\n            width = this.#size[0];\n            height = this.#size[1];\n        } else {\n            width = gl.drawingBufferWidth;\n            height = gl.drawingBufferHeight;\n        }\n        if (this.#buffer) {\n            if (this.#buffer.width === width && this.#buffer.height === height) {\n                return;\n            } else {\n                gl.deleteTexture(this.#buffer.texture);\n                gl.deleteFramebuffer(this.#buffer.framebuf);\n                gl.deleteRenderbuffer(this.#buffer.renderbuf);\n            }\n        }\n        const colorTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, colorTexture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        let depthTexture;\n        if (this.#hasDepthTexture) {\n            depthTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, depthTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, width, height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null)\n        }\n        const renderbuf = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuf);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n        const framebuf = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);\n        if (this.#hasDepthTexture) {\n            // @ts-ignore\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\n        } else {\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuf);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        // Verify framebuffer is OK\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        if (!gl.isFramebuffer(framebuf)) {\n            throw \"Invalid framebuffer\";\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        switch (status) {\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\";\n            default:\n                throw \"Incomplete framebuffer: \" + status;\n        }\n        this.#buffer = {\n            framebuf: framebuf,\n            renderbuf: renderbuf,\n            texture: colorTexture,\n            depthTexture: depthTexture,\n            width: width,\n            height: height\n        };\n        this.#bound = false;\n    }\n\n    /**\n     * Clears this render buffer.\n     */\n    clear() {\n        if (!this.#bound) {\n            throw \"Render buffer not bound\";\n        }\n        const gl = this.#gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Reads a pixel from this render buffer.\n     * @param pickX\n     * @param pickY\n     */\n    read(pickX: number, pickY: number): Uint8Array {\n        const x = pickX;\n        const y = this.#gl.drawingBufferHeight - pickY;\n        const pix = new Uint8Array(4);\n        const gl = this.#gl;\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pix);\n        return pix;\n    }\n\n    /**\n     * Redas an image from this render buffer.\n     * @param params\n     */\n    readImage(params: {\n        height?: number;\n        width?: number;\n        format?: string;\n    }): Uint8Array {\n        const gl = this.#gl;\n        const imageDataCache = this.#getImageDataCache();\n        const pixelData = imageDataCache.pixelData;\n        const canvas = imageDataCache.canvas;\n        const imageData = imageDataCache.imageData;\n        const context = imageDataCache.context;\n        gl.readPixels(0, 0, this.#buffer.width, this.#buffer.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelData);\n        imageData.data.set(pixelData);\n        context.putImageData(imageData, 0, 0);\n        const imageWidth = params.width || canvas.width;\n        const imageHeight = params.height || canvas.height;\n        const format = params.format || \"jpeg\";\n        const flipy = true; // Account for WebGL texture flipping\n        let image;\n        switch (format) {\n            case \"jpeg\":\n                image = Canvas2Image.saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"png\":\n                image = Canvas2Image.saveAsPNG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"bmp\":\n                image = Canvas2Image.saveAsBMP(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            default:\n                console.error(\"Unsupported image format: '\" + format + \"' - supported types are 'jpeg', 'bmp' and 'png' - defaulting to 'jpeg'\");\n                image = Canvas2Image.saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n        }\n        // @ts-ignore\n        return image.src;\n    }\n\n    #getImageDataCache() {\n        const bufferWidth = this.#buffer.width;\n        const bufferHeight = this.#buffer.height;\n        let imageDataCache = this.#imageDataCache;\n        if (imageDataCache) {\n            if (imageDataCache.width !== bufferWidth || imageDataCache.height !== bufferHeight) {\n                this.#imageDataCache = null;\n                imageDataCache = null;\n            }\n        }\n        if (!imageDataCache) {\n            const canvas = document.createElement('canvas');\n            canvas.width = bufferWidth;\n            canvas.height = bufferHeight;\n            const context = canvas.getContext('2d');\n            // @ts-ignore\n            const imageData = context.createImageData(bufferWidth, bufferHeight);\n            imageDataCache = {\n                pixelData: new Uint8Array(bufferWidth * bufferHeight * 4),\n                canvas: canvas,\n                context: context,\n                imageData: imageData,\n                width: bufferWidth,\n                height: bufferHeight\n            };\n            this.#imageDataCache = imageDataCache;\n        }\n        return imageDataCache;\n    }\n\n    /**\n     * Unbinds this render buffer.\n     */\n    unbind() {\n        const gl = this.#gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.#bound = false;\n    }\n\n    /**\n     * Gets a texture that has the contents of this render buffer.\n     */\n    getTexture(): GLAbstractTexture {\n        return this.#texture || (this.#texture = {\n            bind: (unit: number) => {\n                if (this.#buffer && this.#buffer.texture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.#buffer.texture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: (unit: number) => {\n                if (this.#buffer && this.#buffer.texture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, null);\n                }\n            }\n        });\n    }\n\n    /**\n     * Does this render buffer have a depth texture component?\n     */\n    hasDepthTexture() {\n        return this.#hasDepthTexture;\n    }\n\n    /**\n     * Gets the depth texture component of this render buffer, if any.\n     */\n    getDepthTexture(): GLAbstractTexture | null {\n        if (!this.#hasDepthTexture) {\n            return null;\n        }\n        return this.#depthTexture || (this.#depthTexture = {\n            bind: (unit: number) => {\n                if (this.#buffer && this.#buffer.depthTexture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.#buffer.depthTexture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: (unit: number) => {\n                if (this.#buffer && this.#buffer.depthTexture) {\n                    // @ts-ignore\n                    this.#gl.activeTexture(this.#gl[\"TEXTURE\" + unit]);\n                    this.#gl.bindTexture(this.#gl.TEXTURE_2D, null);\n                }\n            }\n        });\n    }\n\n    /**\n     * Destroys this render buffer.\n     */\n    destroy() {\n        if (this.#allocated) {\n            const gl = this.#gl;\n            gl.deleteTexture(this.#buffer.texture);\n            gl.deleteTexture(this.#buffer.depthTexture);\n            gl.deleteFramebuffer(this.#buffer.framebuf);\n            gl.deleteRenderbuffer(this.#buffer.renderbuf);\n            this.#allocated = false;\n            this.#buffer = null;\n            this.#bound = false;\n        }\n        this.#imageDataCache = null;\n    }\n}\n\n","/**\n * Gets a WebGL2 extension.\n * @param gl\n * @param name\n */\nexport function getExtension(gl: WebGL2RenderingContext, name: string) {\n    // @ts-ignore\n    if (gl._cachedExtensions === undefined) {\n        // @ts-ignore\n        gl._cachedExtensions = {};\n    }\n    // @ts-ignore\n    if (gl._cachedExtensions[name] !== undefined) {\n        // @ts-ignore\n        return gl._cachedExtensions[name];\n    }\n    let extension;\n    switch (name) {\n        case 'WEBGL_depth_texture':\n            extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n            break;\n        case 'EXT_texture_filter_anisotropic':\n            extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n            break;\n        case 'WEBGL_compressed_texture_s3tc':\n            extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n            break;\n        case 'WEBGL_compressed_texture_pvrtc':\n            extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n            break;\n        default:\n            extension = gl.getExtension(name);\n    }\n    // @ts-ignore\n    gl._cachedExtensions[name] = extension;\n    return extension;\n}","import {\n    AlphaFormat,\n    ByteType,\n    ClampToEdgeWrapping,\n    DepthFormat,\n    DepthStencilFormat,\n    FloatType,\n    HalfFloatType,\n    IntType,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    LuminanceAlphaFormat,\n    LuminanceFormat,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    RedFormat,\n    RedIntegerFormat,\n    RepeatWrapping,\n    RGB_ETC1_Format,\n    RGB_ETC2_Format,\n    RGB_PVRTC_2BPPV1_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format,\n    RGBA_ASTC_10x10_Format,\n    RGBA_ASTC_10x5_Format,\n    RGBA_ASTC_10x6_Format,\n    RGBA_ASTC_10x8_Format,\n    RGBA_ASTC_12x10_Format,\n    RGBA_ASTC_12x12_Format,\n    RGBA_ASTC_4x4_Format,\n    RGBA_ASTC_5x4_Format,\n    RGBA_ASTC_5x5_Format,\n    RGBA_ASTC_6x5_Format,\n    RGBA_ASTC_6x6_Format,\n    RGBA_ASTC_8x5_Format,\n    RGBA_ASTC_8x6_Format,\n    RGBA_ASTC_8x8_Format,\n    RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_2BPPV1_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT1_Format,\n    RGBA_S3TC_DXT3_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGBAFormat,\n    RGBAIntegerFormat,\n    RGBFormat,\n    RGFormat,\n    RGIntegerFormat,\n    ShortType,\n    sRGBEncoding,\n    UnsignedByteType,\n    UnsignedInt248Type,\n    UnsignedIntType,\n    UnsignedShort4444Type,\n    UnsignedShort5551Type,\n    UnsignedShortType\n} from \"@xeokit/constants\";\n\nimport {getExtension} from \"./getExtension\";\n\n/**\n * Converts a xeokit SDK constant to its eauivalent WebGL2 constant/enumeration value.\n *\n * @param gl\n * @param constantVal\n * @param encoding\n */\nexport function convertConstant(gl: WebGL2RenderingContext, constantVal: number, encoding?: number) {\n\n    let extension;\n    const p = constantVal;\n\n    if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n    if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n    if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\n    if (p === ByteType) return gl.BYTE;\n    if (p === ShortType) return gl.SHORT;\n    if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n    if (p === IntType) return gl.INT;\n    if (p === UnsignedIntType) return gl.UNSIGNED_INT;\n    if (p === FloatType) return gl.FLOAT;\n\n    if (p === HalfFloatType) {\n        return gl.HALF_FLOAT;\n    }\n\n    if (p === AlphaFormat) return gl.ALPHA;\n    if (p === RGBAFormat) return gl.RGBA;\n    if (p === LuminanceFormat) return gl.LUMINANCE;\n    if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n    if (p === DepthFormat) return gl.DEPTH_COMPONENT;\n    if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n    if (p === RedFormat) return gl.RED;\n\n    if (p === RGBFormat) {\n        return gl.RGBA;\n    }\n\n    // WebGL formats.\n\n    if (p === RedIntegerFormat) return gl.RED_INTEGER;\n    if (p === RGFormat) return gl.RG;\n    if (p === RGIntegerFormat) return gl.RG_INTEGER;\n    if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n    // S3TC\n\n    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n        if (encoding === sRGBEncoding) {\n            const extension = getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb');\n            if (extension !== null) {\n                if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n                if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n            } else {\n                return null;\n            }\n        } else {\n            extension = getExtension(gl, 'WEBGL_compressed_texture_s3tc');\n            if (extension !== null) {\n                if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    // PVRTC\n\n    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_pvrtc');\n        if (extension !== null) {\n            if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n            if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n            if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n            if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n        } else {\n            return null;\n        }\n    }\n\n    // ETC1\n\n    if (p === RGB_ETC1_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_etc1');\n        if (extension !== null) {\n            return extension.COMPRESSED_RGB_ETC1_WEBGL;\n        } else {\n            return null;\n        }\n    }\n\n    // ETC2\n\n    if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_etc');\n        if (extension !== null) {\n            if (p === RGB_ETC2_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n            if (p === RGBA_ETC2_EAC_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n        } else {\n            return null;\n        }\n    }\n\n    // ASTC\n\n    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n        p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n        p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n        p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n        p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {\n        const extension = getExtension(gl, 'WEBGL_compressed_texture_astc');\n        if (extension !== null) {\n            if (p === RGBA_ASTC_4x4_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n            if (p === RGBA_ASTC_5x4_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n            if (p === RGBA_ASTC_5x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n            if (p === RGBA_ASTC_6x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n            if (p === RGBA_ASTC_6x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n            if (p === RGBA_ASTC_8x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n            if (p === RGBA_ASTC_8x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n            if (p === RGBA_ASTC_8x8_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n            if (p === RGBA_ASTC_10x5_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n            if (p === RGBA_ASTC_10x6_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n            if (p === RGBA_ASTC_10x8_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n            if (p === RGBA_ASTC_10x10_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n            if (p === RGBA_ASTC_12x10_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n            if (p === RGBA_ASTC_12x12_Format) return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n        } else {\n            return null;\n        }\n    }\n\n    // BPTC\n\n    if (p === RGBA_BPTC_Format) {\n        const extension = getExtension(gl, 'EXT_texture_compression_bptc');\n        if (extension !== null) {\n            if (p === RGBA_BPTC_Format) {\n                return (encoding === sRGBEncoding) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    //\n\n    if (p === UnsignedInt248Type) {\n        return gl.UNSIGNED_INT_24_8;\n    }\n    if (p === RepeatWrapping) {\n        return gl.REPEAT;\n    }\n    if (p === ClampToEdgeWrapping) {\n        return gl.CLAMP_TO_EDGE;\n    }\n    if (p === NearestMipMapNearestFilter) {\n        return gl.NEAREST_MIPMAP_LINEAR;\n    }\n    if (p === NearestMipMapLinearFilter) {\n        return gl.NEAREST_MIPMAP_LINEAR;\n    }\n    if (p === LinearMipMapNearestFilter) {\n        return gl.LINEAR_MIPMAP_NEAREST;\n    }\n    if (p === LinearMipMapLinearFilter) {\n        return gl.LINEAR_MIPMAP_LINEAR;\n    }\n    if (p === NearestFilter) {\n        return gl.NEAREST;\n    }\n    if (p === LinearFilter) {\n        return gl.LINEAR;\n    }\n\n    return null;\n}\n\n","import type * as math from '@xeokit/math';\nimport {\n    NearestFilter,\n    NearestMipmapLinearFilter, NearestMipmapNearestFilter,\n    RepeatWrapping,\n    RGBAFormat, sRGBEncoding,\n    UnsignedByteType\n} from \"@xeokit/constants\";\n\nimport {isArray} from \"@xeokit/utils\";\n\nimport {convertConstant} from \"./convertConstant\";\nimport {getExtension} from \"./getExtension\";\nimport type {GLAbstractTexture} from \"./GLAbstractTexture\";\nimport type {TextureCompressedParams} from \"@xeokit/core\";\n\nconst color = new Uint8Array([0, 0, 0, 1]);\n\n/**\n * Represents a WebGL2 texture.\n */\nexport class GLTexture implements GLAbstractTexture {\n\n    private gl: WebGL2RenderingContext;\n    private target: number;\n    private format: number;\n    private type: number;\n    private internalFormat: number;\n    private premultiplyAlpha: boolean;\n    private flipY: boolean;\n    private unpackAlignment: number;\n    private wrapS: number;\n    private wrapT: number;\n    private wrapR: number;\n    private texture: WebGLTexture;\n    private allocated: boolean;\n    private minFilter: number;\n    private magFilter: number;\n    private encoding: number;\n\n    constructor(params: {\n        gl: WebGL2RenderingContext,\n        target?: number,\n        format?: number,\n        type?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number,\n        preloadColor?: math.FloatArrayParam,\n        premultiplyAlpha?: boolean,\n        flipY?: boolean\n    }) {\n\n        this.gl = params.gl;\n\n        this.target = params.target || params.gl.TEXTURE_2D;\n        this.format = params.format || RGBAFormat;\n        this.type = params.type || UnsignedByteType;\n        this.internalFormat = -1;\n        this.premultiplyAlpha = !!params.premultiplyAlpha;\n        this.flipY = !!params.flipY;\n        this.unpackAlignment = 4;\n        this.wrapS = params.wrapS || RepeatWrapping;\n        this.wrapT = params.wrapT || RepeatWrapping;\n        this.wrapR = params.wrapR || RepeatWrapping;\n\n        // @ts-ignore\n        this.texture = params.gl.createTexture();\n\n        if (params.preloadColor) {\n            this.setPreloadColor(params.preloadColor); // Prevents \"there is no texture bound to the unit 0\" error\n        }\n\n        this.allocated = true;\n    }\n\n    setPreloadColor(value: math.FloatArrayParam) {\n        if (!value) {\n            color[0] = 0;\n            color[1] = 0;\n            color[2] = 0;\n            color[3] = 255;\n        } else {\n            color[0] = Math.floor(value[0] * 255);\n            color[1] = Math.floor(value[1] * 255);\n            color[2] = Math.floor(value[2] * 255);\n            color[3] = Math.floor((value[3] !== undefined ? value[3] : 1) * 255);\n        }\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            const faces = [\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n            ];\n            for (let i = 0, len = faces.length; i < len; i++) {\n                gl.texImage2D(faces[i], 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n            }\n        } else {\n            gl.texImage2D(this.target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    setTarget(target: number) {\n        this.target = target || this.gl.TEXTURE_2D;\n    }\n\n    setImage(image: HTMLImageElement, props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment?: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }={}) {\n\n        const gl = this.gl;\n\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.flipY !== undefined) {\n            this.flipY = props.flipY;\n        }\n        if (props.premultiplyAlpha !== undefined) {\n            this.premultiplyAlpha = props.premultiplyAlpha;\n        }\n        if (props.unpackAlignment !== undefined) {\n            this.unpackAlignment = props.unpackAlignment;\n        }\n        if (props.minFilter !== undefined) {\n            this.minFilter = props.minFilter;\n        }\n        if (props.magFilter !== undefined) {\n            this.magFilter = props.magFilter;\n        }\n        if (props.wrapS !== undefined) {\n            this.wrapS = props.wrapS;\n        }\n        if (props.wrapT !== undefined) {\n            this.wrapT = props.wrapT;\n        }\n        if (props.wrapR !== undefined) {\n            this.wrapR = props.wrapR;\n        }\n\n        let generateMipMap = false;\n\n        gl.bindTexture(this.target, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n\n        const minFilter = convertConstant(gl, this.minFilter);\n        gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n\n        if (minFilter === gl.NEAREST_MIPMAP_NEAREST\n            || minFilter === gl.LINEAR_MIPMAP_NEAREST\n            || minFilter === gl.NEAREST_MIPMAP_LINEAR\n            || minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n            generateMipMap = true;\n        }\n\n        const magFilter = convertConstant(gl, this.magFilter);\n        if (magFilter) {\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n        }\n\n        const wrapS = convertConstant(gl, this.wrapS);\n        if (wrapS) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n        }\n\n        const wrapT = convertConstant(gl, this.wrapT);\n        if (wrapT) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n        }\n\n        const glFormat = convertConstant(gl, this.format, this.encoding);\n        const glType = convertConstant(gl, this.type);\n        const glInternalFormat = getInternalFormat(gl, this.internalFormat, glFormat, glType, this.encoding, false);\n\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            if (isArray(image)) {\n                const images = image;\n                const faces = [\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n                ];\n                for (let i = 0, len = faces.length; i < len; i++) {\n                    // @ts-ignore\n                    gl.texImage2D(faces[i], 0, glInternalFormat, glFormat, glType, images[i]);\n                }\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n        }\n\n        // if (generateMipMap) {\n        //     gl.generateMipmap(this.target);\n        // }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setCompressedData(params: TextureCompressedParams) {\n\n        const gl = this.gl;\n        const mipmaps = params.mipmaps || [];\n        const levels = mipmaps.length;\n        const props = params.props;\n\n        // Cache props\n\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.flipY !== undefined) {\n            this.flipY = props.flipY;\n        }\n        if (props.premultiplyAlpha !== undefined) {\n            this.premultiplyAlpha = props.premultiplyAlpha;\n        }\n        if (props.unpackAlignment !== undefined) {\n            this.unpackAlignment = props.unpackAlignment;\n        }\n        if (props.minFilter !== undefined) {\n            this.minFilter = props.minFilter;\n        }\n        if (props.magFilter !== undefined) {\n            this.magFilter = props.magFilter;\n        }\n        if (props.wrapS !== undefined) {\n            this.wrapS = props.wrapS;\n        }\n        if (props.wrapT !== undefined) {\n            this.wrapT = props.wrapT;\n        }\n        if (props.wrapR !== undefined) {\n            this.wrapR = props.wrapR;\n        }\n\n        gl.activeTexture(gl.TEXTURE0 + 0);\n        gl.bindTexture(this.target, this.texture);\n\n        let supportsMips = mipmaps.length > 1;\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n\n        const wrapS = convertConstant(gl, this.wrapS);\n        if (wrapS) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n        }\n\n        const wrapT = convertConstant(gl, this.wrapT);\n        if (wrapT) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n        }\n\n        // @ts-ignore\n        if (this.type === gl.TEXTURE_3D || this.type === gl.TEXTURE_2D_ARRAY) {\n            const wrapR = convertConstant(gl, this.wrapR);\n            if (wrapR) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_R, wrapR);\n            }\n            gl.texParameteri(this.type, gl.TEXTURE_WRAP_R, wrapR);\n        }\n\n        if (supportsMips) {\n            gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, filterFallback(gl, this.minFilter));\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, filterFallback(gl, this.magFilter));\n\n        } else {\n            gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, convertConstant(gl, this.minFilter));\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, convertConstant(gl, this.magFilter));\n        }\n\n        const glFormat = convertConstant(gl, this.format, this.encoding);\n        const glType = convertConstant(gl, this.type);\n        const glInternalFormat = getInternalFormat(gl, this.internalFormat, glFormat, glType, this.encoding, false);\n\n        gl.texStorage2D(gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n\n        for (let i = 0, len = mipmaps.length; i < len; i++) {\n\n            const mipmap = mipmaps[i];\n\n            if (this.format !== RGBAFormat) {\n                if (glFormat !== null) {\n                    gl.compressedTexSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                    console.warn('Attempt to load unsupported compressed texture format in .setCompressedData()');\n                }\n            } else {\n                gl.texSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            }\n        }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setProps(props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        this._uploadProps(props);\n        gl.bindTexture(this.target, null);\n    }\n\n    _uploadProps(props: {\n        format?: number,\n        internalFormat?: number,\n        encoding?: number,\n        type?: number,\n        flipY?: boolean,\n        premultiplyAlpha?: boolean,\n        unpackAlignment: number,\n        minFilter?: number,\n        magFilter?: number,\n        wrapS?: number,\n        wrapT?: number,\n        wrapR?: number\n    }) {\n        const gl = this.gl;\n        if (props.format !== undefined) {\n            this.format = props.format;\n        }\n        if (props.internalFormat !== undefined) {\n            this.internalFormat = props.internalFormat;\n        }\n        if (props.encoding !== undefined) {\n            this.encoding = props.encoding;\n        }\n        if (props.type !== undefined) {\n            this.type = props.type;\n        }\n        if (props.minFilter !== undefined) {\n            const minFilter = convertConstant(gl, props.minFilter);\n            if (minFilter) {\n                this.minFilter = props.minFilter;\n                gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n                if (minFilter === gl.NEAREST_MIPMAP_NEAREST || minFilter === gl.LINEAR_MIPMAP_NEAREST || minFilter === gl.NEAREST_MIPMAP_LINEAR || minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n                    gl.generateMipmap(this.target);\n                }\n            }\n        }\n        if (props.magFilter !== undefined) {\n            const magFilter = convertConstant(gl, props.magFilter);\n            if (magFilter) {\n                this.magFilter = props.magFilter;\n                gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n            }\n        }\n        if (props.wrapS !== undefined) {\n            const wrapS = convertConstant(gl, props.wrapS);\n            if (wrapS) {\n                this.wrapS = props.wrapS;\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n            }\n        }\n        if (props.wrapT !== undefined) {\n            const wrapT = convertConstant(gl, props.wrapT);\n            if (wrapT) {\n                this.wrapT = props.wrapT;\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n            }\n        }\n    }\n\n    bind(unit: number) :boolean{\n        if (!this.allocated) {\n            return false;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            // @ts-ignore\n            gl.activeTexture(gl[`TEXTURE${unit}`]);\n            gl.bindTexture(this.target, this.texture);\n            return true;\n        }\n        return false;\n    }\n\n    unbind(unit: number) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            // @ts-ignore\n            gl.activeTexture(gl[`TEXTURE${unit}`]);\n            gl.bindTexture(this.target, null);\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            this.gl.deleteTexture(this.texture);\n            // @ts-ignore\n            this.texture = null;\n        }\n    }\n}\n\nfunction getInternalFormat(\n    gl: WebGL2RenderingContext,\n    internalFormatName: string | number,\n    glFormat: any,\n    glType: any,\n    encoding: number,\n    isVideoTexture = false): number {\n    if (internalFormatName !== null) {\n        // @ts-ignore\n        if (gl[internalFormatName] !== undefined) {\n            // @ts-ignore\n            return gl[internalFormatName];\n        }\n        console.warn('Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n    let internalFormat = glFormat;\n    if (glFormat === gl.RED) {\n        if (glType === gl.FLOAT) internalFormat = gl.R32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;\n    }\n    if (glFormat === gl.RG) {\n        if (glType === gl.FLOAT) internalFormat = gl.RG32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;\n    }\n    if (glFormat === gl.RGBA) {\n        if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;\n        if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;\n        if (glType === gl.UNSIGNED_BYTE) internalFormat = (encoding === sRGBEncoding && isVideoTexture === false) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n        if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;\n        if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;\n    }\n    if (internalFormat === gl.R16F || internalFormat === gl.R32F ||\n        internalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n        internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {\n        getExtension(gl, 'EXT_color_buffer_float');\n    }\n    return internalFormat;\n}\n\nfunction filterFallback(gl: WebGL2RenderingContext, f: number): number {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n        return gl.NEAREST;\n    }\n    return gl.LINEAR;\n\n}","/**\n * Information about WebGL2 support on the client machine.\n */\nconst WEBGL_INFO: {\n    [key: string]: any\n} = {\n    WEBGL: false,\n    SUPPORTED_EXTENSIONS: {}\n};\n\nconst canvas = document.createElement(\"canvas\");\n\nif (canvas) {\n\n    // @ts-ignore\n    const gl: WebGL2RenderingContext = canvas.getContext(\"webgl2\", {antialias: true});\n\n    WEBGL_INFO.WEBGL = !!gl;\n\n    if (WEBGL_INFO.WEBGL) {\n        // @ts-ignore\n        WEBGL_INFO.ANTIALIAS = gl.getContextAttributes().antialias;\n        if (gl.getShaderPrecisionFormat) {\n            // @ts-ignore\n            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"highp\";\n            } else { // @ts-ignore\n                if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n                            } else {\n                                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"lowp\";\n                            }\n            }\n        } else {\n            WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n        }\n        WEBGL_INFO.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);\n        WEBGL_INFO.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        WEBGL_INFO.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WEBGL_INFO.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n        // @ts-ignore\n        gl.getSupportedExtensions().forEach(function (ext: any) {\n            WEBGL_INFO.SUPPORTED_EXTENSIONS[ext] = true;\n        });\n        WEBGL_INFO.depthTexturesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"];\n    }\n}\n\nexport {WEBGL_INFO};"],"names":["GLArrayBuf","constructor","gl","type","data","numItems","itemSize","usage","normalized","stride","offset","itemType","itemByteSize","this","allocated","length","dataLength","handle","Uint8Array","UNSIGNED_BYTE","Int8Array","BYTE","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","FLOAT","_allocate","createBuffer","Error","bindBuffer","bufferData","slice","setData","destroy","bufferSubData","bind","unbind","deleteBuffer","GLAttribute","location","bindArrayBuffer","arrayBuf","enableVertexAttribArray","vertexAttribPointer","_onDestroyed","_classPrivateFieldLooseKey","GLDataTexture","params","texture","textureWidth","textureHeight","textureData","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","onDestroyed","bindTexture","glProgram","sampler","unit","activeTexture","TEXTURE_2D","disableFiltering","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","deleteTexture","GLShader","source","errors","compiled","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","isContextLost","lines","split","numberedLines","i","push","getShaderInfoLog","concat","join","GLSampler","uniform1i","ids","Map","GLProgram","id","vertexShader","fragmentShader","attributes","samplers","uniforms","validated","linked","addItem","VERTEX_SHADER","vertex","FRAGMENT_SHADER","fragment","logErrors","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","numUniforms","ACTIVE_UNIFORMS","u","getActiveUniform","uName","name","substr","getUniformLocation","SAMPLER_2D","SAMPLER_CUBE","numAttribs","ACTIVE_ATTRIBUTES","a","getActiveAttrib","getAttribLocation","useProgram","getLocation","getAttribute","getSampler","removeItem","deleteProgram","deleteShader","console","error","Canvas2Image","oCanvas","document","createElement","sc","String","fromCharCode","getContext","saveAsBMP","saveAsPNG","saveAsJPEG","bHasImageData","getImageData","bHasDataURL","toDataURL","bHasBase64","window","btoa","saveFile","strData","open","href","makeDataURI","strMime","makeImageObject","strSource","oImgElement","src","scaleCanvas","iWidth","iHeight","flipy","oSaveCanvas","width","height","style","oSaveCtx","save","scale","imageSmoothingEnabled","drawImage","restore","bReturnImg","indexOf","oData","parseInt","readCanvasData","strImgData","strHeader","iFileSize","Math","floor","iImageWidth","iImageHeight","iDataSize","aImgData","x","iOffsetX","iOffsetY","strPixelRow","strPixelData","y","aData","encodeData","createBMP","_canvas","_gl","_allocated","_buffer","_bound","_size","_hasDepthTexture","_imageDataCache","_texture","_depthTexture","_touch","_getImageDataCache","GLRenderBuffer","canvas","options","_getImageDataCache2","_touch2","size","depthTexture","setSize","bindFramebuffer","FRAMEBUFFER","framebuf","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","read","pickX","pickY","drawingBufferHeight","pix","readPixels","RGBA","readImage","imageDataCache","pixelData","imageData","context","set","putImageData","imageWidth","imageHeight","format","image","getTexture","hasDepthTexture","getDepthTexture","deleteFramebuffer","deleteRenderbuffer","renderbuf","drawingBufferWidth","colorTexture","createTexture","texImage2D","DEPTH_COMPONENT","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","framebufferRenderbuffer","isFramebuffer","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","bufferWidth","bufferHeight","createImageData","getExtension","undefined","_cachedExtensions","extension","convertConstant","constantVal","encoding","p","UnsignedByteType","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","HALF_FLOAT","AlphaFormat","ALPHA","RGBAFormat","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","DepthFormat","DepthStencilFormat","DEPTH_STENCIL","RedFormat","RED","RGBFormat","RedIntegerFormat","RED_INTEGER","RGFormat","RG","RGIntegerFormat","RG_INTEGER","RGBAIntegerFormat","RGBA_INTEGER","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","sRGBEncoding","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","RGBA_BPTC_Format","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8","RepeatWrapping","REPEAT","ClampToEdgeWrapping","NearestMipMapNearestFilter","NearestMipMapLinearFilter","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LinearMipMapLinearFilter","LINEAR_MIPMAP_LINEAR","NearestFilter","LinearFilter","LINEAR","color","GLTexture","target","internalFormat","premultiplyAlpha","flipY","unpackAlignment","wrapS","wrapT","wrapR","minFilter","magFilter","preloadColor","setPreloadColor","TEXTURE_CUBE_MAP","faces","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","len","setTarget","setImage","props","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","glFormat","glType","glInternalFormat","getInternalFormat","isArray","images","setCompressedData","mipmaps","levels","TEXTURE0","supportsMips","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","filterFallback","texStorage2D","mipmap","compressedTexSubImage2D","warn","texSubImage2D","setProps","_uploadProps","NEAREST_MIPMAP_NEAREST","generateMipmap","internalFormatName","isVideoTexture","R32F","R16F","R8","RG32F","RG16F","RG8","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","RGBA4","RGB5_A1","f","NearestMipmapNearestFilter","NearestMipmapLinearFilter","WEBGL_INFO","WEBGL","SUPPORTED_EXTENSIONS","antialias","ANTIALIAS","getContextAttributes","FS_MAX_FLOAT_PRECISION","getShaderPrecisionFormat","HIGH_FLOAT","precision","MEDIUM_FLOAT","DEPTH_BUFFER_BITS","getParameter","DEPTH_BITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VARYING_VECTORS","getSupportedExtensions","forEach","ext","depthTexturesSupported"],"mappings":"0+CAGa,MAAAA,GAqFTC,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAMA,OA/FJR,KAAAA,QAKAS,EAAAA,KAAAA,qBAKAC,kBAAY,EAAAC,KAKZV,UAAI,EAAAU,KAKJC,eAeAP,EAAAA,KAAAA,WAKAQ,EAAAA,KAAAA,YAKAC,EAAAA,KAAAA,gBAKAX,EAAAA,KAAAA,qBAKAC,cAAQ,EAAAO,KAKRL,gBAAU,EAAAK,KAKVJ,YAKAC,EAAAA,KAAAA,YAKAO,EAAAA,KAAAA,cAgBIJ,KAAKX,GAAKA,EACVW,KAAKV,KAAOA,EACZU,KAAKC,WAAY,EAETV,EAAKH,aAET,KAAKiB,WACDL,KAAKF,SAAWT,EAAGiB,cACnBN,KAAKD,aAAe,EACpB,MAEJ,KAAKQ,UACDP,KAAKF,SAAWT,EAAGmB,KACnBR,KAAKD,aAAe,EACpB,MAEJ,KAAMU,YACFT,KAAKF,SAAWT,EAAGqB,eACnBV,KAAKD,aAAe,EACpB,MAEJ,KAAMY,WACFX,KAAKF,SAAWT,EAAGuB,MACnBZ,KAAKD,aAAe,EACpB,MAEJ,KAAKc,YACDb,KAAKF,SAAWT,EAAGyB,aACnBd,KAAKD,aAAe,EACpB,MAEJ,KAAKgB,WACDf,KAAKF,SAAWT,EAAG2B,IACnBhB,KAAKD,aAAe,EACpB,MAEJ,QACIC,KAAKF,SAAWT,EAAG4B,MACnBjB,KAAKD,aAAe,EAG5BC,KAAKN,MAAQA,EACbM,KAAKE,OAAS,EACdF,KAAKG,WAAaX,EAClBQ,KAAKR,SAAW,EAChBQ,KAAKP,SAAWA,EAChBO,KAAKL,aAAeA,EACpBK,KAAKJ,OAASA,GAAU,EACxBI,KAAKH,OAASA,GAAU,EAExBG,KAAKkB,UAAU3B,EACnB,CAEA2B,UAAU3B,GAIN,GAHAS,KAAKC,WAAY,EAEjBD,KAAKI,OAASJ,KAAKX,GAAG8B,gBACjBnB,KAAKI,OACN,MAAU,IAAAgB,MAAM,wCAEhBpB,KAAKI,SACLJ,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAMU,KAAKI,QACnCJ,KAAKX,GAAGiC,WAAWtB,KAAKV,KAAMC,EAAKW,OAASF,KAAKG,WAAaZ,EAAKgC,MAAM,EAAGvB,KAAKG,YAAcZ,EAAMS,KAAKN,OAC1GM,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAM,MAC9BU,KAAKE,OAASX,EAAKW,OACnBF,KAAKR,SAAWQ,KAAKE,OAASF,KAAKP,SACnCO,KAAKC,WAAY,EAEzB,CAOAuB,QAAQjC,EAAWM,GACVG,KAAKC,YAGNV,EAAKW,QAAUL,GAAU,GAAKG,KAAKE,QACnCF,KAAKyB,UACLzB,KAAKkB,UAAU3B,KAEfS,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAMU,KAAKI,QAC/BP,GAAqB,IAAXA,EACVG,KAAKX,GAAGqC,cAAc1B,KAAKV,KAAMO,EAASG,KAAKD,aAAcR,GAE7DS,KAAKX,GAAGiC,WAAWtB,KAAKV,KAAMC,EAAMS,KAAKN,OAE7CM,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAM,OAEtC,CAKAqC,OACS3B,KAAKC,WAGVD,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAMU,KAAKI,OACvC,CAKAwB,SACS5B,KAAKC,WAGVD,KAAKX,GAAGgC,WAAWrB,KAAKV,KAAM,KAClC,CAKAmC,UACSzB,KAAKC,YAGVD,KAAKX,GAAGwC,aAAa7B,KAAKI,QAC1BJ,KAAKC,WAAY,EACrB,QCxNS6B,GAST1C,YAAYC,EAA4B0C,GAAgB/B,KARxDX,QACA0C,EAAAA,KAAAA,gBAQI/B,KAAKX,GAAKA,EACVW,KAAK+B,SAAWA,CACpB,CAMAC,gBAAgBC,GACPA,IAGLA,EAASN,OACT3B,KAAKX,GAAG6C,wBAAwBlC,KAAK+B,UACrC/B,KAAKX,GAAG8C,oBAAoBnC,KAAK+B,SAAUE,EAASxC,SAAUwC,EAASnC,SAAUmC,EAAStC,WAAYsC,EAASrC,OAAQqC,EAASpC,QACpI,sMCvBJ,IAAAuC,gBAAAC,GAAA,qBAAaC,GAaTlD,YAAYmD,EAOV,CAAE,GAlBJlD,KAAAA,eACAmD,aAAO,EAAAxC,KACPyC,kBACAC,EAAAA,KAAAA,mBACAC,EAAAA,KAAAA,mBAAWC,OAAAC,eAAAT,KAAAA,IAAAU,UAAA,EAAAC,WAAA,IAeP/C,KAAKX,GAAKkD,EAAOlD,GACjBW,KAAKwC,QAAUD,EAAOC,QACtBxC,KAAKyC,aAAeF,EAAOE,aAC3BzC,KAAK0C,cAAgBH,EAAOG,cAC5B1C,KAAK2C,YAAcJ,EAAOI,YAC1BK,GAAAhD,KAAIoC,IAAAA,IAAgBG,EAAOU,WAC/B,CAQAC,YAAYC,EAAsBC,EAAoBC,GAC7CrD,KAAKX,IAGV+D,EAAQF,YAAYlD,KAAMqD,EAC9B,CAMA1B,KAAK0B,GACD,SAAKrD,KAAKX,KAAOW,KAAKwC,UAItBxC,KAAKX,GAAGiE,cAActD,KAAKX,GAAG,UAAYgE,IAC1CrD,KAAKX,GAAG6D,YAAYlD,KAAKX,GAAGkE,WAAYvD,KAAKwC,YAEjD,CAEAgB,mBACSxD,KAAKX,KAGVW,KAAKX,GAAGoE,cAAczD,KAAKX,GAAGkE,WAAYvD,KAAKX,GAAGqE,mBAAoB1D,KAAKX,GAAGsE,SAC9E3D,KAAKX,GAAGoE,cAAczD,KAAKX,GAAGkE,WAAYvD,KAAKX,GAAGuE,mBAAoB5D,KAAKX,GAAGsE,SAC9E3D,KAAKX,GAAGoE,cAAczD,KAAKX,GAAGkE,WAAYvD,KAAKX,GAAGwE,eAAgB7D,KAAKX,GAAGyE,eAC1E9D,KAAKX,GAAGoE,cAAczD,KAAKX,GAAGkE,WAAYvD,KAAKX,GAAG0E,eAAgB/D,KAAKX,GAAGyE,eAC9E,CAEAlC,OAAOyB,GAQP,CAEA5B,UACSzB,KAAKX,IAAOW,KAAKwC,UAGtBxC,KAAKX,GAAG2E,cAAchE,KAAKwC,SAC3BxC,KAAKwC,QAAU,KACfQ,GAAIhD,KAAIoC,IAAAA,KACJY,QAAIZ,IAAAA,MAEZ,QCzFS6B,GA4BT7E,YAAYC,EAA4BC,EAAc4E,GAKlD,QA5BJC,YAAM,EAAAnE,KAKNC,eAAS,EAAAD,KAKToE,cAAQ,EAAApE,KAKRI,YAAM,EASFJ,KAAKC,WAAY,EACjBD,KAAKoE,UAAW,EAEhBpE,KAAKI,OAASf,EAAGgF,aAAa/E,GACzBU,KAAKI,QAUV,GAJAJ,KAAKC,WAAY,EACjBZ,EAAGiF,aAAatE,KAAKI,OAAQ8D,GAC7B7E,EAAGkF,cAAcvE,KAAKI,QACtBJ,KAAKoE,SAAW/E,EAAGmF,mBAAmBxE,KAAKI,OAAQf,EAAGoF,iBACjDzE,KAAKoE,WACD/E,EAAGqF,gBAAiB,CACrB,MAAMC,EAAQT,EAAOU,MAAM,MACrBC,EAAgB,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMzE,OAAQ4E,IAC9BD,EAAcE,KAAMD,EAAI,EAAK,KAAOH,EAAMG,GAAK,MAEnD9E,KAAKmE,OAAS,GACdnE,KAAKmE,OAAOY,KAAK,IACjB/E,KAAKmE,OAAOY,KAAK1F,EAAG2F,iBAAiBhF,KAAKI,SAAW,IACrDJ,KAAKmE,OAASnE,KAAKmE,OAAOc,OAAOJ,EAAcK,KAAK,IACvD,OApBDlF,KAAKmE,OAAS,CACV,qBAqBZ,CAKA1C,UAGH,EC9DY,MAAA0D,GAUT/F,YAAYC,EAA4B0C,GARvBA,KAAAA,cACA1C,EAAAA,KAAAA,QAQb,EAAAW,KAAKX,GAAKA,EACVW,KAAK+B,SAAWA,CACpB,CAOAmB,YAAYV,EAA4Ba,GACpC,QAAIb,EAAQb,KAAK0B,KACbrD,KAAKX,GAAG+F,UAAUpF,KAAK+B,SAAUsB,IAC1B,EAGf,ECxBJ,MAAMgC,GAAM,IAAIC,EAAI,CAAA,EAAI,IAKX,MAAAC,GA6ETnG,YAAYC,EAA4BiF,GAkBpC,GA1FJkB,KAAAA,eAKAC,kBAAY,EAAAzF,KAKZ0F,oBAAc,EAAA1F,KAKd2F,gBAAU,EAAA3F,KAKV4F,cAAQ,EAAA5F,KAKR6F,cAKA1B,EAAAA,KAAAA,YAKA2B,EAAAA,KAAAA,eAKAC,EAAAA,KAAAA,YAKA3B,EAAAA,KAAAA,qBAKAnE,eAAS,EAAAD,KAKTX,QAAE,EAAAW,KAKFkE,YAAM,EAAAlE,KAKNI,YAAM,EAUFJ,KAAKwF,GAAKH,GAAIW,QAAQ,CAAE,GACxBhG,KAAKkE,OAASI,EACdtE,KAAKX,GAAKA,EACVW,KAAKC,WAAY,EACjBD,KAAKoE,UAAW,EAChBpE,KAAK+F,QAAS,EACd/F,KAAK8F,WAAY,EACjB9F,KAAKmE,OAAS,GACdnE,KAAK6F,SAAW,CAAA,EAChB7F,KAAK4F,SAAW,CAAA,EAChB5F,KAAK2F,WAAa,CAAA,EAElB3F,KAAKyF,aAAe,IAAIxB,GAAS5E,EAAIA,EAAG4G,cAAejG,KAAKkE,OAAOgC,QACnElG,KAAK0F,eAAiB,IAAIzB,GAAS5E,EAAIA,EAAG8G,gBAAiBnG,KAAKkE,OAAOkC,WAElEpG,KAAKyF,aAAaxF,UAGnB,OAFAD,KAAKmE,OAAS,CAAC,oCAAoCc,OAAOjF,KAAKyF,aAAatB,aAC5EkC,GAAUrG,KAAKmE,QAInB,IAAKnE,KAAK0F,eAAezF,UAGrB,OAFAD,KAAKmE,OAAS,CAAC,sCAAsCc,OAAOjF,KAAK0F,eAAevB,aAChFkC,GAAUrG,KAAKmE,QAMnB,GAFAnE,KAAKC,WAAY,GAEZD,KAAKyF,aAAarB,SAGnB,OAFApE,KAAKmE,OAAS,CAAC,mCAAmCc,OAAOjF,KAAKyF,aAAatB,aAC3EkC,GAAUrG,KAAKmE,QAInB,IAAKnE,KAAK0F,eAAetB,SAGrB,OAFApE,KAAKmE,OAAS,CAAC,qCAAqCc,OAAOjF,KAAK0F,eAAevB,aAC/EkC,GAAUrG,KAAKmE,QAQnB,GAJAnE,KAAKoE,UAAW,EAEhBpE,KAAKI,OAASf,EAAGiH,iBAEZtG,KAAKI,OAEN,YADAJ,KAAKmE,OAAS,CAAC,+BAenB,GAXA9E,EAAGkH,aAAavG,KAAKI,OAAQJ,KAAKyF,aAAarF,QAC/Cf,EAAGkH,aAAavG,KAAKI,OAAQJ,KAAK0F,eAAetF,QACjDf,EAAGmH,YAAYxG,KAAKI,QAEpBJ,KAAK+F,OAAS1G,EAAGoH,oBAAoBzG,KAAKI,OAAQf,EAAGqH,aAKrD1G,KAAK8F,WAAY,GAEZ9F,KAAK+F,SAAW/F,KAAK8F,UAUtB,OATA9F,KAAKmE,OAAS,GACdnE,KAAKmE,OAAOY,KAAK,IAEjB/E,KAAKmE,OAAOY,KAAK1F,EAAGsH,kBAAkB3G,KAAKI,SAC3CJ,KAAKmE,OAAOY,KAAK,sBACjB/E,KAAKmE,OAASnE,KAAKmE,OAAOc,OAAOjF,KAAKkE,OAAOgC,QAC7ClG,KAAKmE,OAAOY,KAAK,wBACjB/E,KAAKmE,OAASnE,KAAKmE,OAAOc,OAAOjF,KAAKkE,OAAOkC,eAC7CC,GAAUrG,KAAKmE,QAInB,MAAMyC,EAAcvH,EAAGoH,oBAAoBzG,KAAKI,OAAQf,EAAGwH,iBAC3D,IAAK,IAAI/B,EAAI,EAAGA,EAAI8B,IAAe9B,EAAG,CAClC,MAAMgC,EAAIzH,EAAG0H,iBAAiB/G,KAAKI,OAAQ0E,GAC3C,GAAIgC,EAAG,CACH,IAAIE,EAAQF,EAAEG,KACkB,OAA5BD,EAAMA,EAAM9G,OAAS,KACrB8G,EAAQA,EAAME,OAAO,EAAGF,EAAM9G,OAAS,IAE3C,MAAM6B,EAAW1C,EAAG8H,mBAAmBnH,KAAKI,OAAQ4G,GAC/CF,EAAExH,OAASD,EAAG+H,YAAgBN,EAAExH,OAASD,EAAGgI,cAA6B,QAAXP,EAAExH,KAEjEU,KAAK4F,SAASoB,GAAS,IAAI7B,GAAU9F,EAAI0C,GAGzC/B,KAAK6F,SAASmB,GAASjF,CAE9B,CACJ,CAED,MAAMuF,EAAajI,EAAGoH,oBAAoBzG,KAAKI,OAAQf,EAAGkI,mBAC1D,IAAK,IAAIzC,EAAI,EAAGA,EAAIwC,EAAYxC,IAAK,CACjC,MAAM0C,EAAInI,EAAGoI,gBAAgBzH,KAAKI,OAAQ0E,GAC1C,GAAI0C,EAAG,CACH,MAAMzF,EAAW1C,EAAGqI,kBAAkB1H,KAAKI,OAAQoH,EAAEP,MACrDjH,KAAK2F,WAAW6B,EAAEP,MAAQ,IAAInF,GAAYzC,EAAI0C,EACjD,CACJ,CAED/B,KAAKC,WAAY,CACrB,CAKA0B,OACS3B,KAAKC,WAGVD,KAAKX,GAAGsI,WAAW3H,KAAKI,OAC5B,CAMAwH,YAAYX,GACR,OAAOjH,KAAK6F,SAASoB,EACzB,CAMAY,aAAaZ,GACT,OAAOjH,KAAK2F,WAAWsB,EAC3B,CAMAa,WAAWb,GACP,OAAOjH,KAAK4F,SAASqB,EACzB,CAQA/D,YAAY+D,EAAczE,EAA4Ba,GAClD,IAAKrD,KAAKC,UACN,OAAO,EAEX,MAAMmD,EAAUpD,KAAK4F,SAASqB,GAC9B,QAAI7D,GACOA,EAAQF,YAAYV,EAASa,EAI5C,CAKA5B,UACSzB,KAAKC,YAGVoF,GAAI0C,WAAW/H,KAAKwF,IACpBxF,KAAKX,GAAG2I,cAAchI,KAAKI,QAC3BJ,KAAKX,GAAG4I,aAAajI,KAAKyF,aAAarF,QACvCJ,KAAKX,GAAG4I,aAAajI,KAAK0F,eAAetF,QACzCJ,KAAK2F,WAAa,CAAA,EAClB3F,KAAK6F,SAAW,CAAA,EAChB7F,KAAK4F,SAAW,CAAA,EAChB5F,KAAKC,WAAY,EACrB,EAoBJ,SAASoG,GAAUlC,GACf+D,QAAQC,MAAMhE,EAAOe,KAAK,MAC9B,CCtRa,MAAAkD,GAAgB,WAEnB,MAAAC,EAAUC,SAASC,cAAc,UAAWC,EAAKC,OAAOC,aAI9D,IAAKL,EAAQM,WACT,MAAO,CACHC,UAAW,WACV,EACDC,UAAW,WACV,EACDC,WAAY,WAAA,GAMpB,MAAMC,IAAmBV,EAAQM,WAAW,MAAMK,aAAeC,IAAiBZ,EAAQa,UACtFC,IAAgBC,OAAOC,KAwGrBC,EAAW,SAAUC,GAClBH,OAAOI,KAAKD,KACbjB,SAASvG,SAAS0H,KAAOF,EAEjC,EAEMG,EAAc,SAAUH,EAAiBI,GAC3C,MAAO,QAAUA,EAAU,WAAaJ,CAC5C,EAGMK,EAAkB,SAAUC,GAC9B,MAAMC,EAAcxB,SAASC,cAAc,OAE3C,OADAuB,EAAYC,IAAMF,EACXC,CACX,EAEME,EAAc,SAAU3B,EAA4B4B,EAAgBC,EAAiBC,GACvF,GAAIF,GAAUC,EAAS,CACnB,MAAME,EAAc9B,SAASC,cAAc,UAC3C6B,EAAYC,MAAQJ,EACpBG,EAAYE,OAASJ,EACrBE,EAAYG,MAAMF,MAAQJ,EAAS,KACnCG,EAAYG,MAAMD,OAASJ,EAAU,KACrC,MAAMM,EAAWJ,EAAYzB,WAAW,MAkBxC,OAjBIwB,GAEAK,EAASC,OAETD,EAASE,MAAM,GAAM,GAErBF,EAASG,uBAAwB,EAEjCH,EAASI,UAAUvC,EAAS,EAAG,EAAGA,EAAQgC,MAAOhC,EAAQiC,OAAQ,EAAG,EAAGL,GAASC,GAEhFM,EAASK,YAGTL,EAASG,uBAAwB,EAEjCH,EAASI,UAAUvC,EAAS,EAAG,EAAGA,EAAQgC,MAAOhC,EAAQiC,OAAQ,EAAG,EAAGL,EAAQC,IAE5EE,CACV,CACD,OAAO/B,CACX,EAEA,MAAO,CACHQ,UAAW,SAAUR,EAA4ByC,EAAqBb,EAAgBC,EAAiBC,GACnG,IAAKlB,EAAa,OAAY,EAC9B,MAEMM,EAFgBS,EAAY3B,EAAS4B,EAAQC,EAASC,GAE9BjB,UADd,aAEhB,OAAI4B,EACOlB,EAAgBL,IAEvBD,EAA4EC,IAEzE,EACX,EAEAT,WAAY,SAAUT,EAA4ByC,EAAqBb,EAAgBC,EAAiBC,GACpG,IAAKlB,EAAa,SAClB,MACMU,EAAU,aACVJ,EAFgBS,EAAY3B,EAAS4B,EAAQC,EAASC,GAE9BjB,UAAUS,GAExC,OAAgC,GAA5BJ,EAAQwB,QAAQpB,KAChBmB,EACOlB,EAAgBL,IAEvBD,EAA4EC,OAGpF,EAEAX,UAAW,SAAUP,EAA4ByC,EAAqBb,EAAgBC,EAAiBC,GACnG,KAAMlB,GAAeF,GAAiBI,GAAa,OAAO,EAC1D,MACMQ,EAAU,YACVqB,EArLS,SAAU3C,GAE7B,MAAM4B,EAASgB,SAAS5C,EAAQgC,OAAQH,EAAUe,SAAS5C,EAAQiC,QAEnE,OAAOjC,EAAQM,WAAW,MAAMK,aAAa,EAAG,EAAGiB,EAAQC,EAC/D,CAgLsBgB,CAFQlB,EAAY3B,EAAS4B,EAAQC,EAASC,IAEfgB,EA/JnC,SAAUH,GACxB,IAAII,EAAY,GAChB,MAAMnB,EAASe,EAAMX,MACfH,EAAUc,EAAMV,OAEtBc,GAAa,KAEb,IAAIC,EAAYpB,EAASC,EAAU,EAAI,GACvCkB,GAAa5C,EAAG6C,EAAY,KAC5BA,EAAYC,KAAKC,MAAMF,EAAY,KACnCD,GAAa5C,EAAG6C,EAAY,KAC5BA,EAAYC,KAAKC,MAAMF,EAAY,KACnCD,GAAa5C,EAAG6C,EAAY,KAC5BA,EAAYC,KAAKC,MAAMF,EAAY,KACnCD,GAAa5C,EAAG6C,EAAY,KAE5BD,GAAa5C,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GACtC4C,GAAa5C,EAAG,GAAI,EAAG,EAAG,GAE1B,IAAIgD,EAAcvB,EAClBmB,GAAa5C,EAAGgD,EAAc,KAC9BA,EAAcF,KAAKC,MAAMC,EAAc,KACvCJ,GAAa5C,EAAGgD,EAAc,KAC9BA,EAAcF,KAAKC,MAAMC,EAAc,KACvCJ,GAAa5C,EAAGgD,EAAc,KAC9BA,EAAcF,KAAKC,MAAMC,EAAc,KACvCJ,GAAa5C,EAAGgD,EAAc,KAE9B,IAAIC,EAAevB,EACnBkB,GAAa5C,EAAGiD,EAAe,KAC/BA,EAAeH,KAAKC,MAAME,EAAe,KACzCL,GAAa5C,EAAGiD,EAAe,KAC/BA,EAAeH,KAAKC,MAAME,EAAe,KACzCL,GAAa5C,EAAGiD,EAAe,KAC/BA,EAAeH,KAAKC,MAAME,EAAe,KACzCL,GAAa5C,EAAGiD,EAAe,KAE/BL,GAAa5C,EAAG,EAAG,EAAG,GAAI,GAC1B4C,GAAa5C,EAAG,EAAG,EAAG,EAAG,GAEzB,IAAIkD,EAAYzB,EAASC,EAAU,EACnCkB,GAAa5C,EAAGkD,EAAY,KAC5BA,EAAYJ,KAAKC,MAAMG,EAAY,KACnCN,GAAa5C,EAAGkD,EAAY,KAC5BA,EAAYJ,KAAKC,MAAMG,EAAY,KACnCN,GAAa5C,EAAGkD,EAAY,KAC5BA,EAAYJ,KAAKC,MAAMG,EAAY,KACnCN,GAAa5C,EAAGkD,EAAY,KAE5BN,GAAa5C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE7D,MAAMmD,EAAWX,EAAMzL,KACvB,IAEIqM,EAEAC,EACAC,EACAC,EANAC,EAAe,GAGfC,EAAI/B,EAKR,EAAG,CAGC,IAFA4B,EAAW7B,GAAUgC,EAAI,GAAK,EAC9BF,EAAc,GACTH,EAAI,EAAGA,EAAI3B,EAAQ2B,IACpBC,EAAW,EAAID,EACfG,GAAevD,EACXmD,EAASG,EAAWD,EAAW,GAC/BF,EAASG,EAAWD,EAAW,GAC/BF,EAASG,EAAWD,GACpBF,EAASG,EAAWD,EAAW,IAGvCG,GAAgBD,UACTE,GAEX,OAzFe,SAAU1M,GACzB,IAAIuF,EAAQoH,EAAY3C,EAAe,GACvC,GAAmB,iBAARhK,EACPgK,EAAUhK,OAGV,IADA2M,EAAQ3M,EACHuF,EAAI,EAAGA,EAAIoH,EAAMhM,OAAQ4E,IAC1ByE,GAAWf,EAAG0D,EAAMpH,IAG5B,OAAOuE,KAAKE,EAChB,CA8EW4C,CAAWf,EAAYY,EAClC,CAmFkEI,CAAUpB,GACpE,OAAIF,EACOlB,EAAgBF,EAAYyB,EAAYxB,KAE/CL,EAASI,EAAYyB,EAAYxB,OAGzC,EAER,CApN6B,GCRe,IAAA0C,gBAAAhK,GAAAiK,UAAAA,gBAAAjK,GAAAkK,MAAAA,gBAAAlK,GAAAmK,aAAAA,gBAAAnK,GAAAoK,UAAAA,gBAAApK,GAAAqK,SAAAA,gBAAArK,WAAAsK,gBAAAtK,GAAA,mBAAAuK,gBAAAvK,GAAA,kBAAAwK,gBAAAxK,GAAA,WAAAyK,gBAAAzK,GAAA,gBAAA0K,gBAAA1K,GAAA,SAAA2K,gBAAA3K,GAAA,2BAM/B4K,GAmBT7N,YAAY8N,EAA2B7N,EAA4B8N,GAGlEvK,OAAAC,eAAAmK,KAAAA,GAAAjK,CAAAA,MAAAqK,KAAAxK,OAAAC,eAAAkK,KAAAA,GAAAhK,CAAAA,MAAAsK,KAAAzK,OAAAC,eAAAwJ,KAAAA,GAAAvJ,CAAAA,YAAAC,WAAA,IAAAH,OAAAC,eAAA7C,KAAAsM,GAAA,CAAAxJ,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA7C,KAAAuM,GAAAzJ,CAAAA,UAAAC,EAAAA,WAAAH,IAAAA,OAAAC,eAAA2J,KAAAA,GAAA1J,CAAAA,UAAAC,EAAAA,WAAAH,IAAAA,OAAAC,eAAA7C,KAAAyM,GAAA,CAAA3J,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA7C,KAAA0M,GAAA,CAAA5J,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA7C,KAAA2M,GAAA,CAAA7J,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA7C,KAAA4M,GAAA9J,CAAAA,UAAAC,EAAAA,WAAAH,IAAAA,OAAAC,eAAAgK,KAAAA,GAAA/J,CAAAA,UAAAC,EAAAA,WAAAH,IAAAA,OAAAC,eAAA7C,KAAA8M,GAAA,CAAAhK,UAAA,EAAAC,WAAA,IACGC,GAAAhD,KAAIqM,IAAAA,IAAWa,EACflK,GAAAhD,KAAIsM,IAAAA,IAAOjN,EACX2D,GAAIhD,KAAAuM,IAAAA,KAAc,EAClBvJ,GAAAhD,KAAIwM,IAAAA,IAAW,KACfxJ,GAAIhD,KAAAyM,IAAAA,KAAU,EACdzJ,GAAIhD,KAAA0M,IAAAA,IAASS,EAAQG,KACrBtK,GAAAhD,KAAI2M,IAAAA,MAAsBQ,EAAQI,YACtC,CAMAC,QAAQF,GACJtK,QAAI0J,IAAAA,IAASY,CACjB,CAKA3L,OAEI,GADAqB,GAAIhD,KAAA+M,IAAAA,MACJ/J,GAAIhD,KAAIyM,IAAAA,IACJ,OAEJ,MAAMpN,EAAE2D,GAAGhD,KAAIsM,IAAAA,IACfjN,EAAGoO,gBAAgBpO,EAAGqO,YAAa1K,GAAIhD,KAAAwM,IAAAA,IAASmB,UAChD3K,GAAIhD,KAAAyM,IAAAA,KAAU,CAClB,CAyFAmB,QACI,IAAI5K,GAAChD,KAAIyM,IAAAA,IACL,KAAM,0BAEV,MAAMpN,EAAE2D,GAAGhD,KAAIsM,IAAAA,IACfjN,EAAGuO,MAAMvO,EAAGwO,iBAAmBxO,EAAGyO,iBACtC,CAOAC,KAAKC,EAAeC,GAChB,MAAMrC,EAAIoC,EACJ/B,EAAIjJ,QAAIsJ,IAAAA,IAAK4B,oBAAsBD,EACnCE,EAAM,IAAI9N,WAAW,GACrBhB,EAAE2D,GAAGhD,KAAIsM,IAAAA,IAEf,OADAjN,EAAG+O,WAAWxC,EAAGK,EAAG,EAAG,EAAG5M,EAAGgP,KAAMhP,EAAGiB,cAAe6N,GAC9CA,CACX,CAMAG,UAAU/L,GAKN,MAAMlD,EAAE2D,GAAGhD,KAAIsM,IAAAA,IACTiC,EAAcvL,GAAGhD,KAAIgN,IAAAA,MACrBwB,EAAYD,EAAeC,UAC3BtB,EAASqB,EAAerB,OACxBuB,EAAYF,EAAeE,UAC3BC,EAAUH,EAAeG,QAC/BrP,EAAG+O,WAAW,EAAG,EAAGpL,GAAAhD,KAAIwM,IAAAA,IAASnC,MAAOrH,GAAAhD,KAAIwM,IAAAA,IAASlC,OAAQjL,EAAGgP,KAAMhP,EAAGiB,cAAekO,GACxFC,EAAUlP,KAAKoP,IAAIH,GACnBE,EAAQE,aAAaH,EAAW,EAAG,GACnC,MAAMI,EAAatM,EAAO8H,OAAS6C,EAAO7C,MACpCyE,EAAcvM,EAAO+H,QAAU4C,EAAO5C,OACtCyE,EAASxM,EAAOwM,QAAU,OAC1B5E,GAAQ,EACd,IAAI6E,EACJ,OAAQD,GACJ,IAAK,OACDC,EAAQ5G,GAAaU,WAAWoE,GAAQ,EAAM2B,EAAYC,EAAa3E,GACvE,MACJ,IAAK,MACD6E,EAAQ5G,GAAaS,UAAUqE,GAAQ,EAAM2B,EAAYC,EAAa3E,GACtE,MACJ,IAAK,MACD6E,EAAQ5G,GAAaQ,UAAUsE,GAAQ,EAAM2B,EAAYC,EAAa3E,GACtE,MACJ,QACIjC,QAAQC,MAAM,8BAAgC4G,EAAS,0EACvDC,EAAQ5G,GAAaU,WAAWoE,GAAQ,EAAM2B,EAAYC,EAAa3E,GAG/E,OAAO6E,EAAMjF,GACjB,CAmCAnI,SACI,MAAMvC,EAAE2D,GAAGhD,KAAIsM,IAAAA,IACfjN,EAAGoO,gBAAgBpO,EAAGqO,YAAa,MACnC1K,GAAAhD,KAAIyM,IAAAA,KAAU,CAClB,CAKAwC,aACI,OAAOjM,GAAAhD,KAAI6M,IAAAA,MAAc7J,GAAIhD,KAAA6M,IAAAA,IAAY,CACrClL,KAAO0B,MACCL,GAAAhD,KAAIwM,IAAAA,MAAYxJ,GAAIhD,KAAAwM,IAAAA,IAAShK,UAE7BQ,GAAAhD,KAAIsM,IAAAA,IAAKhJ,cAAcN,GAAIhD,KAAAsM,IAAAA,IAAK,UAAYjJ,IAC5CL,GAAAhD,KAAIsM,IAAAA,IAAKpJ,YAAYF,GAAAhD,KAAIsM,IAAAA,IAAK/I,WAAYP,GAAIhD,KAAAwM,IAAAA,IAAShK,SAChD,IAIfZ,OAASyB,IACDL,GAAAhD,KAAIwM,IAAAA,KAAYxJ,GAAIhD,KAAAwM,IAAAA,IAAShK,UAE7BQ,GAAIhD,KAAAsM,IAAAA,IAAKhJ,cAAcN,GAAAhD,KAAIsM,IAAAA,IAAK,UAAYjJ,IAC5CL,GAAAhD,KAAIsM,IAAAA,IAAKpJ,YAAYF,GAAAhD,KAAIsM,IAAAA,IAAK/I,WAAY,MAC7C,GAGb,CAKA2L,kBACI,OAAAlM,GAAOhD,KAAI2M,IAAAA,GACf,CAKAwC,kBACI,OAAInM,GAAChD,KAAI2M,IAAAA,IAGF3J,GAAIhD,KAAA8M,IAAAA,MAAmB9J,GAAAhD,KAAI8M,IAAAA,IAAiB,CAC/CnL,KAAO0B,MACCL,GAAIhD,KAAAwM,IAAAA,MAAYxJ,GAAAhD,KAAIwM,IAAAA,IAASe,eAE7BvK,GAAIhD,KAAAsM,IAAAA,IAAKhJ,cAAcN,GAAAhD,KAAIsM,IAAAA,IAAK,UAAYjJ,IAC5CL,GAAIhD,KAAAsM,IAAAA,IAAKpJ,YAAYF,GAAIhD,KAAAsM,IAAAA,IAAK/I,WAAYP,GAAAhD,KAAIwM,IAAAA,IAASe,cAE1D,IAGL3L,OAASyB,IACDL,GAAIhD,KAAAwM,IAAAA,KAAYxJ,GAAAhD,KAAIwM,IAAAA,IAASe,eAE7BvK,GAAAhD,KAAIsM,IAAAA,IAAKhJ,cAAcN,GAAIhD,KAAAsM,IAAAA,IAAK,UAAYjJ,IAC5CL,GAAIhD,KAAAsM,IAAAA,IAAKpJ,YAAYF,GAAAhD,KAAIsM,IAAAA,IAAK/I,WAAY,MAC7C,IAhBR,IAmBL,CAKA9B,UACI,GAAAuB,GAAIhD,KAAIuM,IAAAA,IAAa,CACjB,MAAMlN,EAAE2D,GAAGhD,KAAIsM,IAAAA,IACfjN,EAAG2E,cAAchB,GAAAhD,KAAIwM,IAAAA,IAAShK,SAC9BnD,EAAG2E,cAAchB,GAAIhD,KAAAwM,IAAAA,IAASe,cAC9BlO,EAAG+P,kBAAkBpM,GAAAhD,KAAIwM,IAAAA,IAASmB,UAClCtO,EAAGgQ,mBAAmBrM,GAAIhD,KAAAwM,IAAAA,IAAS8C,WACnCtM,GAAIhD,KAAAuM,IAAAA,KAAc,EAClBvJ,GAAAhD,KAAIwM,IAAAA,IAAW,KACfxJ,GAAAhD,KAAIyM,IAAAA,KAAU,CACjB,CACDzJ,GAAIhD,KAAA4M,IAAAA,IAAmB,IAC3B,EACH,SAAAS,KAtQO,IAAIhD,EACAC,EACJ,MAAMjL,EAAE2D,GAAGhD,KAAIsM,IAAAA,IAQf,GAPAtJ,GAAIhD,KAAI0M,IAAAA,KACJrC,EAAQrH,GAAAhD,KAAI0M,IAAAA,IAAO,GACnBpC,EAAStH,GAAIhD,KAAA0M,IAAAA,IAAO,KAEpBrC,EAAQhL,EAAGkQ,mBACXjF,EAASjL,EAAG6O,qBAEhBlL,GAAIhD,KAAIwM,IAAAA,IAAU,CACd,GAAIxJ,GAAAhD,KAAIwM,IAAAA,IAASnC,QAAUA,GAASrH,GAAIhD,KAAAwM,IAAAA,IAASlC,SAAWA,EACxD,OAEAjL,EAAG2E,cAAchB,GAAAhD,KAAIwM,IAAAA,IAAShK,SAC9BnD,EAAG+P,kBAAkBpM,GAAAhD,KAAIwM,IAAAA,IAASmB,UAClCtO,EAAGgQ,mBAAmBrM,GAAIhD,KAAAwM,IAAAA,IAAS8C,UAE1C,CACD,MAAME,EAAenQ,EAAGoQ,gBAOxB,IAAIlC,EANJlO,EAAG6D,YAAY7D,EAAGkE,WAAYiM,GAC9BnQ,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGuE,mBAAoBvE,EAAGsE,SAC1DtE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGqE,mBAAoBrE,EAAGsE,SAC1DtE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGwE,eAAgBxE,EAAGyE,eACtDzE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAG0E,eAAgB1E,EAAGyE,eACtDzE,EAAGqQ,WAAWrQ,EAAGkE,WAAY,EAAGlE,EAAGgP,KAAMhE,EAAOC,EAAQ,EAAGjL,EAAGgP,KAAMhP,EAAGiB,cAAe,MAEtF0C,GAAIhD,KAAI2M,IAAAA,MACJY,EAAelO,EAAGoQ,gBAClBpQ,EAAG6D,YAAY7D,EAAGkE,WAAYgK,GAC9BlO,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGqE,mBAAoBrE,EAAGsE,SAC1DtE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGuE,mBAAoBvE,EAAGsE,SAC1DtE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAGwE,eAAgBxE,EAAGyE,eACtDzE,EAAGoE,cAAcpE,EAAGkE,WAAYlE,EAAG0E,eAAgB1E,EAAGyE,eACtDzE,EAAGqQ,WAAWrQ,EAAGkE,WAAY,EAAGlE,EAAGsQ,gBAAiBtF,EAAOC,EAAQ,EAAGjL,EAAGsQ,gBAAiBtQ,EAAGyB,aAAc,OAE/G,MAAMwO,EAAYjQ,EAAGuQ,qBACrBvQ,EAAGwQ,iBAAiBxQ,EAAGyQ,aAAcR,GACrCjQ,EAAG0Q,oBAAoB1Q,EAAGyQ,aAAczQ,EAAG2Q,kBAAmB3F,EAAOC,GACrE,MAAMqD,EAAWtO,EAAG4Q,oBAcpB,GAbA5Q,EAAGoO,gBAAgBpO,EAAGqO,YAAaC,GACnCtO,EAAG6Q,qBAAqB7Q,EAAGqO,YAAarO,EAAG8Q,kBAAmB9Q,EAAGkE,WAAYiM,EAAc,GAC3FxM,GAAIhD,KAAI2M,IAAAA,IAEJtN,EAAG6Q,qBAAqB7Q,EAAGqO,YAAarO,EAAG+Q,iBAAkB/Q,EAAGkE,WAAYgK,EAAc,GAE1FlO,EAAGgR,wBAAwBhR,EAAGqO,YAAarO,EAAG+Q,iBAAkB/Q,EAAGyQ,aAAcR,GAErFjQ,EAAG6D,YAAY7D,EAAGkE,WAAY,MAC9BlE,EAAGwQ,iBAAiBxQ,EAAGyQ,aAAc,MACrCzQ,EAAGoO,gBAAgBpO,EAAGqO,YAAa,MAEnCrO,EAAGoO,gBAAgBpO,EAAGqO,YAAaC,IAC9BtO,EAAGiR,cAAc3C,GAClB,KAAM,sBAEVtO,EAAGoO,gBAAgBpO,EAAGqO,YAAa,MACnC,MAAM6C,EAASlR,EAAGmR,uBAAuBnR,EAAGqO,aAC5C,OAAQ6C,GACJ,KAAKlR,EAAGoR,qBACJ,MACJ,KAAKpR,EAAGqR,kCACJ,KAAM,4DACV,KAAKrR,EAAGsR,0CACJ,KAAM,oEACV,KAAKtR,EAAGuR,kCACJ,KAAM,4DACV,KAAKvR,EAAGwR,wBACJ,KAAM,kDACV,QACI,KAAM,2BAA6BN,EAE3CvN,GAAIhD,KAAAwM,IAAAA,IAAW,CACXmB,SAAUA,EACV2B,UAAWA,EACX9M,QAASgN,EACTjC,aAAcA,EACdlD,MAAOA,EACPC,OAAQA,GAEZtH,GAAIhD,KAAAyM,IAAAA,KAAU,CAClB,CAAC,SAAAW,KAqEG,MAAM0D,EAAc9N,GAAIhD,KAAAwM,IAAAA,IAASnC,MAC3B0G,EAAe/N,GAAAhD,KAAIwM,IAAAA,IAASlC,OAClC,IAAIiE,EAAcvL,GAAGhD,KAAI4M,IAAAA,IAOzB,GANI2B,IACIA,EAAelE,QAAUyG,GAAevC,EAAejE,SAAWyG,IAClE/N,GAAAhD,KAAI4M,IAAAA,IAAmB,KACvB2B,EAAiB,QAGpBA,EAAgB,CACjB,MAAMrB,EAAS5E,SAASC,cAAc,UACtC2E,EAAO7C,MAAQyG,EACf5D,EAAO5C,OAASyG,EAChB,MAAMrC,EAAUxB,EAAOvE,WAAW,MAE5B8F,EAAYC,EAAQsC,gBAAgBF,EAAaC,GACvDxC,EAAiB,CACbC,UAAW,IAAInO,WAAWyQ,EAAcC,EAAe,GACvD7D,OAAQA,EACRwB,QAASA,EACTD,UAAWA,EACXpE,MAAOyG,EACPxG,OAAQyG,GAEZ/N,GAAAhD,KAAI4M,IAAAA,IAAmB2B,CAC1B,CACD,OAAOA,CACX,UCxOY0C,GAAa5R,EAA4B4H,GAOrD,QAL6BiK,IAAzB7R,EAAG8R,oBAEH9R,EAAG8R,kBAAoB,CAC1B,QAEkCD,IAA/B7R,EAAG8R,kBAAkBlK,GAErB,OAAO5H,EAAG8R,kBAAkBlK,GAEhC,IAAImK,EACJ,OAAQnK,GACJ,IAAK,sBACDmK,EAAY/R,EAAG4R,aAAa,wBAA0B5R,EAAG4R,aAAa,4BAA8B5R,EAAG4R,aAAa,8BACpH,MACJ,IAAK,iCACDG,EAAY/R,EAAG4R,aAAa,mCAAqC5R,EAAG4R,aAAa,uCAAyC5R,EAAG4R,aAAa,yCAC1I,MACJ,IAAK,gCACDG,EAAY/R,EAAG4R,aAAa,kCAAoC5R,EAAG4R,aAAa,sCAAwC5R,EAAG4R,aAAa,wCACxI,MACJ,IAAK,iCACDG,EAAY/R,EAAG4R,aAAa,mCAAqC5R,EAAG4R,aAAa,yCACjF,MACJ,QACIG,EAAY/R,EAAG4R,aAAahK,GAIpC,OADA5H,EAAG8R,kBAAkBlK,GAAQmK,EACtBA,CACX,CCkCgB,SAAAC,GAAgBhS,EAA4BiS,EAAqBC,IAE7E,IAAIH,GACJ,MAAMI,GAAIF,EAEV,GAAIE,KAAMC,EAAkB,OAAOpS,EAAGiB,cACtC,GAAIkR,KAAME,EAAuB,OAAOrS,EAAGsS,uBAC3C,GAAIH,KAAMI,EAAuB,OAAOvS,EAAGwS,uBAE3C,GAAIL,KAAMM,EAAU,OAAOzS,EAAGmB,KAC9B,GAAIgR,KAAMO,EAAW,OAAO1S,EAAGuB,MAC/B,GAAI4Q,KAAMQ,EAAmB,OAAO3S,EAAGqB,eACvC,GAAI8Q,KAAMS,EAAS,OAAO5S,EAAG2B,IAC7B,GAAIwQ,KAAMU,EAAiB,OAAO7S,EAAGyB,aACrC,GAAI0Q,KAAMW,EAAW,OAAO9S,EAAG4B,MAE/B,GAAIuQ,KAAMY,EACN,OAAO/S,EAAGgT,WAGd,GAAIb,KAAMc,EAAa,OAAOjT,EAAGkT,MACjC,GAAIf,KAAMgB,EAAY,OAAOnT,EAAGgP,KAChC,GAAImD,KAAMiB,EAAiB,OAAOpT,EAAGqT,UACrC,GAAIlB,KAAMmB,EAAsB,OAAOtT,EAAGuT,gBAC1C,GAAIpB,KAAMqB,EAAa,OAAOxT,EAAGsQ,gBACjC,GAAI6B,KAAMsB,EAAoB,OAAOzT,EAAG0T,cACxC,GAAIvB,KAAMwB,EAAW,OAAO3T,EAAG4T,IAE/B,GAAIzB,KAAM0B,EACN,OAAO7T,EAAGgP,KAKd,GAAImD,KAAM2B,EAAkB,OAAO9T,EAAG+T,YACtC,GAAI5B,KAAM6B,EAAU,OAAOhU,EAAGiU,GAC9B,GAAI9B,KAAM+B,EAAiB,OAAOlU,EAAGmU,WACrC,GAAIhC,KAAMiC,EAAmB,OAAOpU,EAAGqU,aAIvC,GAAIlC,KAAMmC,GAAwBnC,KAAMoC,GAAyBpC,KAAMqC,GAAyBrC,KAAMsC,EAClG,GAAIvC,KAAawC,EAAc,CAC3B,MAAM3C,EAAYH,GAAa5R,EAAI,sCACnC,GAAkB,OAAd+R,EAMA,YALA,GAAII,KAAMmC,EAAsB,OAAOvC,EAAU4C,8BACjD,GAAIxC,KAAMoC,EAAuB,OAAOxC,EAAU6C,oCAClD,GAAIzC,KAAMqC,EAAuB,OAAOzC,EAAU8C,oCAClD,GAAI1C,KAAMsC,EAAuB,OAAO1C,EAAU+C,mCAIzD,KAAM,CAEH,GADA/C,GAAYH,GAAa5R,EAAI,iCACX,OAAd+R,GAMA,OACH,KANG,GAAII,KAAMmC,EAAsB,OAAOvC,GAAUgD,6BACjD,GAAI5C,KAAMoC,EAAuB,OAAOxC,GAAUiD,8BAClD,GAAI7C,KAAMqC,EAAuB,OAAOzC,GAAUkD,8BAClD,GAAI9C,KAAMsC,EAAuB,OAAO1C,GAAUmD,6BAIzD,CAKL,GAAI/C,KAAMgD,GAA2BhD,KAAMiD,GAA2BjD,KAAMkD,GAA4BlD,KAAMmD,EAA0B,CACpI,MAAMvD,EAAYH,GAAa5R,EAAI,kCACnC,GAAkB,OAAd+R,EAMA,OAAO,KALP,GAAII,KAAMgD,EAAyB,OAAOpD,EAAUwD,gCACpD,GAAIpD,KAAMiD,EAAyB,OAAOrD,EAAUyD,gCACpD,GAAIrD,KAAMkD,EAA0B,OAAOtD,EAAU0D,iCACrD,GAAItD,KAAMmD,EAA0B,OAAOvD,EAAU2D,gCAI5D,CAID,GAAIvD,KAAMwD,EAAiB,CACvB,MAAM5D,EAAYH,GAAa5R,EAAI,iCACnC,OAAkB,OAAd+R,EACOA,EAAU6D,0BAGpB,IACJ,CAID,GAAIzD,KAAM0D,GAAmB1D,KAAM2D,EAAsB,CACrD,MAAM/D,EAAYH,GAAa5R,EAAI,gCACnC,GAAkB,OAAd+R,EAIA,YAHA,GAAII,KAAM0D,EAAiB,OAAQ3D,KAAawC,EAAgB3C,EAAUgE,sBAAwBhE,EAAUiE,qBAC5G,GAAI7D,KAAM2D,EAAsB,OAAQ5D,KAAawC,EAAgB3C,EAAUkE,iCAAmClE,EAAUmE,yBAInI,CAID,GAAI/D,KAAMgE,GAAwBhE,KAAMiE,GAAwBjE,KAAMkE,GAClElE,KAAMmE,GAAwBnE,KAAMoE,GAAwBpE,KAAMqE,GAClErE,KAAMsE,GAAwBtE,KAAMuE,GAAwBvE,KAAMwE,GAClExE,KAAMyE,GAAyBzE,KAAM0E,GAAyB1E,KAAM2E,GACpE3E,KAAM4E,GAA0B5E,KAAM6E,EAAwB,CAC9D,MAAMjF,EAAYH,GAAa5R,EAAI,iCACnC,GAAkB,OAAd+R,EAgBA,OACH,KAhBG,GAAII,KAAMgE,EAAsB,OAAQjE,KAAawC,EAAgB3C,EAAUkF,qCAAuClF,EAAUmF,6BAChI,GAAI/E,KAAMiE,EAAsB,OAAQlE,KAAawC,EAAgB3C,EAAUoF,qCAAuCpF,EAAUqF,6BAChI,GAAIjF,KAAMkE,EAAsB,OAAQnE,KAAawC,EAAgB3C,EAAUsF,qCAAuCtF,EAAUuF,6BAChI,GAAInF,KAAMmE,EAAsB,OAAQpE,KAAawC,EAAgB3C,EAAUwF,qCAAuCxF,EAAUyF,6BAChI,GAAIrF,KAAMoE,EAAsB,OAAQrE,KAAawC,EAAgB3C,EAAU0F,qCAAuC1F,EAAU2F,6BAChI,GAAIvF,KAAMqE,EAAsB,OAAQtE,KAAawC,EAAgB3C,EAAU4F,qCAAuC5F,EAAU6F,6BAChI,GAAIzF,KAAMsE,EAAsB,OAAQvE,KAAawC,EAAgB3C,EAAU8F,qCAAuC9F,EAAU+F,6BAChI,GAAI3F,KAAMuE,EAAsB,OAAQxE,KAAawC,EAAgB3C,EAAUgG,qCAAuChG,EAAUiG,6BAChI,GAAI7F,KAAMwE,EAAuB,OAAQzE,KAAawC,EAAgB3C,EAAUkG,sCAAwClG,EAAUmG,8BAClI,GAAI/F,KAAMyE,EAAuB,OAAQ1E,KAAawC,EAAgB3C,EAAUoG,sCAAwCpG,EAAUqG,8BAClI,GAAIjG,KAAM0E,EAAuB,OAAQ3E,KAAawC,EAAgB3C,EAAUsG,sCAAwCtG,EAAUuG,8BAClI,GAAInG,KAAM2E,EAAwB,OAAQ5E,KAAawC,EAAgB3C,EAAUwG,uCAAyCxG,EAAUyG,+BACpI,GAAIrG,KAAM4E,EAAwB,OAAQ7E,KAAawC,EAAgB3C,EAAU0G,uCAAyC1G,EAAU2G,+BACpI,GAAIvG,KAAM6E,EAAwB,OAAQ9E,KAAawC,EAAgB3C,EAAU4G,uCAAyC5G,EAAU6G,8BAI3I,CAID,GAAIzG,KAAM0G,EAAkB,CACxB,MAAM9G,EAAYH,GAAa5R,EAAI,gCACnC,GAAkB,OAAd+R,EAKA,OACH,KALG,GAAII,KAAM0G,EACN,OAAQ3G,KAAawC,EAAgB3C,EAAU+G,qCAAuC/G,EAAUgH,8BAK3G,CAID,OAAI5G,KAAM6G,EACChZ,EAAGiZ,kBAEV9G,KAAM+G,EACClZ,EAAGmZ,OAEVhH,KAAMiH,EACCpZ,EAAGyE,cAEV0N,KAAMkH,IAGNlH,KAAMmH,GAFCtZ,EAAGuZ,sBAKVpH,KAAMqH,GACCxZ,EAAGyZ,sBAEVtH,KAAMuH,GACC1Z,EAAG2Z,qBAEVxH,KAAMyH,GACC5Z,EAAGsE,QAEV6N,KAAM0H,GACC7Z,EAAG8Z,OAIlB,IAAA,CCpOA,MAAMC,GAAQ,IAAI/Y,WAAW,CAAC,EAAG,EAAG,EAAG,UAK1BgZ,GAmBTja,YAAYmD,GAjBJlD,KAAAA,QACAia,EAAAA,KAAAA,mBACAvK,YAAM,EAAA/O,KACNV,UAAI,EAAAU,KACJuZ,oBACAC,EAAAA,KAAAA,sBACAC,EAAAA,KAAAA,kBACAC,qBAAe,EAAA1Z,KACf2Z,WACAC,EAAAA,KAAAA,kBACAC,WAAK,EAAA7Z,KACLwC,aAAO,EAAAxC,KACPC,eACA6Z,EAAAA,KAAAA,eACAC,EAAAA,KAAAA,sBACAxI,cAAQ,EAeZvR,KAAKX,GAAKkD,EAAOlD,GAEjBW,KAAKsZ,OAAS/W,EAAO+W,QAAU/W,EAAOlD,GAAGkE,WACzCvD,KAAK+O,OAASxM,EAAOwM,QAAUyD,EAC/BxS,KAAKV,KAAOiD,EAAOjD,MAAQmS,EAC3BzR,KAAKuZ,gBAAkB,EACvBvZ,KAAKwZ,mBAAqBjX,EAAOiX,iBACjCxZ,KAAKyZ,QAAUlX,EAAOkX,MACtBzZ,KAAK0Z,gBAAkB,EACvB1Z,KAAK2Z,MAAQpX,EAAOoX,OAASpB,EAC7BvY,KAAK4Z,MAAQrX,EAAOqX,OAASrB,EAC7BvY,KAAK6Z,MAAQtX,EAAOsX,OAAStB,EAG7BvY,KAAKwC,QAAUD,EAAOlD,GAAGoQ,gBAErBlN,EAAOyX,cACPha,KAAKia,gBAAgB1X,EAAOyX,cAGhCha,KAAKC,WAAY,CACrB,CAEAga,gBAAgBlX,GACPA,GAMDqW,GAAM,GAAK9N,KAAKC,MAAiB,IAAXxI,EAAM,IAC5BqW,GAAM,GAAK9N,KAAKC,MAAiB,IAAXxI,EAAM,IAC5BqW,GAAM,GAAK9N,KAAKC,MAAiB,IAAXxI,EAAM,IAC5BqW,GAAM,GAAK9N,KAAKC,MAAgD,UAA5B2F,IAAbnO,EAAM,GAAmBA,EAAM,GAAK,MAR3DqW,GAAM,GAAK,EACXA,GAAM,GAAK,EACXA,GAAM,GAAK,EACXA,GAAM,GAAK,KAOf,MAAM/Z,EAAKW,KAAKX,GAEhB,GADAA,EAAG6D,YAAYlD,KAAKsZ,OAAQtZ,KAAKwC,SAC7BxC,KAAKsZ,SAAWja,EAAG6a,iBAAkB,CACrC,MAAMC,EAAQ,CACV9a,EAAG+a,4BACH/a,EAAGgb,4BACHhb,EAAGib,4BACHjb,EAAGkb,4BACHlb,EAAGmb,4BACHnb,EAAGob,6BAEP,IAAK,IAAI3V,EAAI,EAAG4V,EAAMP,EAAMja,OAAQ4E,EAAI4V,EAAK5V,IACzCzF,EAAGqQ,WAAWyK,EAAMrV,GAAI,EAAGzF,EAAGgP,KAAM,EAAG,EAAG,EAAGhP,EAAGgP,KAAMhP,EAAGiB,cAAe8Y,GAE/E,MACG/Z,EAAGqQ,WAAW1P,KAAKsZ,OAAQ,EAAGja,EAAGgP,KAAM,EAAG,EAAG,EAAGhP,EAAGgP,KAAMhP,EAAGiB,cAAe8Y,IAE/E/Z,EAAG6D,YAAYlD,KAAKsZ,OAAQ,KAChC,CAEAqB,UAAUrB,GACNtZ,KAAKsZ,OAASA,GAAUtZ,KAAKX,GAAGkE,UACpC,CAEAqX,SAAS5L,EAAyB6L,EAahC,CAAA,GAEE,MAAMxb,EAAKW,KAAKX,QAEK6R,IAAjB2J,EAAM9L,SACN/O,KAAK+O,OAAS8L,EAAM9L,aAEKmC,IAAzB2J,EAAMtB,iBACNvZ,KAAKuZ,eAAiBsB,EAAMtB,qBAETrI,IAAnB2J,EAAMtJ,WACNvR,KAAKuR,SAAWsJ,EAAMtJ,eAEPL,IAAf2J,EAAMvb,OACNU,KAAKV,KAAOub,EAAMvb,WAEF4R,IAAhB2J,EAAMpB,QACNzZ,KAAKyZ,MAAQoB,EAAMpB,YAEQvI,IAA3B2J,EAAMrB,mBACNxZ,KAAKwZ,iBAAmBqB,EAAMrB,uBAEJtI,IAA1B2J,EAAMnB,kBACN1Z,KAAK0Z,gBAAkBmB,EAAMnB,sBAETxI,IAApB2J,EAAMf,YACN9Z,KAAK8Z,UAAYe,EAAMf,gBAEH5I,IAApB2J,EAAMd,YACN/Z,KAAK+Z,UAAYc,EAAMd,gBAEP7I,IAAhB2J,EAAMlB,QACN3Z,KAAK2Z,MAAQkB,EAAMlB,YAEHzI,IAAhB2J,EAAMjB,QACN5Z,KAAK4Z,MAAQiB,EAAMjB,YAEH1I,IAAhB2J,EAAMhB,QACN7Z,KAAK6Z,MAAQgB,EAAMhB,OAKvBxa,EAAG6D,YAAYlD,KAAKsZ,OAAQtZ,KAAKwC,SACjCnD,EAAGyb,YAAYzb,EAAG0b,oBAAqB/a,KAAKyZ,OAC5Cpa,EAAGyb,YAAYzb,EAAG2b,+BAAgChb,KAAKwZ,kBACvDna,EAAGyb,YAAYzb,EAAG4b,iBAAkBjb,KAAK0Z,iBACzCra,EAAGyb,YAAYzb,EAAG6b,mCAAoC7b,EAAG8b,MAEzD,MAAMrB,EAAYzI,GAAgBhS,EAAIW,KAAK8Z,WAC3Cza,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGuE,mBAAoBkW,GASrD,MAAMC,EAAY1I,GAAgBhS,EAAIW,KAAK+Z,WACvCA,GACA1a,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGqE,mBAAoBqW,GAGzD,MAAMJ,EAAQtI,GAAgBhS,EAAIW,KAAK2Z,OACnCA,GACAta,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGwE,eAAgB8V,GAGrD,MAAMC,EAAQvI,GAAgBhS,EAAIW,KAAK4Z,OACnCA,GACAva,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAG0E,eAAgB6V,GAGrD,MAAMwB,EAAW/J,GAAgBhS,EAAIW,KAAK+O,OAAQ/O,KAAKuR,UACjD8J,EAAShK,GAAgBhS,EAAIW,KAAKV,MAClCgc,EAAmBC,GAAkBlc,EAAIW,KAAKuZ,eAAgB6B,EAAUC,EAAQrb,KAAKuR,UAAU,GAErG,GAAIvR,KAAKsZ,SAAWja,EAAG6a,kBACnB,GAAIsB,EAAQxM,GAAQ,CAChB,MAAMyM,EAASzM,EACTmL,EAAQ,CACV9a,EAAG+a,4BACH/a,EAAGgb,4BACHhb,EAAGib,4BACHjb,EAAGkb,4BACHlb,EAAGmb,4BACHnb,EAAGob,6BAEP,IAAK,IAAI3V,EAAI,EAAG4V,EAAMP,EAAMja,OAAQ4E,EAAI4V,EAAK5V,IAEzCzF,EAAGqQ,WAAWyK,EAAMrV,GAAI,EAAGwW,EAAkBF,EAAUC,EAAQI,EAAO3W,GAE7E,OAEDzF,EAAGqQ,WAAWrQ,EAAGkE,WAAY,EAAG+X,EAAkBF,EAAUC,EAAQrM,GAOxE3P,EAAG6D,YAAYlD,KAAKsZ,OAAQ,KAChC,CAEAoC,kBAAkBnZ,GAEd,MAAMlD,EAAKW,KAAKX,GACVsc,EAAUpZ,EAAOoZ,SAAW,GAC5BC,EAASD,EAAQzb,OACjB2a,EAAQtY,EAAOsY,WAIA3J,IAAjB2J,EAAM9L,SACN/O,KAAK+O,OAAS8L,EAAM9L,aAEKmC,IAAzB2J,EAAMtB,iBACNvZ,KAAKuZ,eAAiBsB,EAAMtB,qBAETrI,IAAnB2J,EAAMtJ,WACNvR,KAAKuR,SAAWsJ,EAAMtJ,eAEPL,IAAf2J,EAAMvb,OACNU,KAAKV,KAAOub,EAAMvb,WAEF4R,IAAhB2J,EAAMpB,QACNzZ,KAAKyZ,MAAQoB,EAAMpB,YAEQvI,IAA3B2J,EAAMrB,mBACNxZ,KAAKwZ,iBAAmBqB,EAAMrB,uBAEJtI,IAA1B2J,EAAMnB,kBACN1Z,KAAK0Z,gBAAkBmB,EAAMnB,sBAETxI,IAApB2J,EAAMf,YACN9Z,KAAK8Z,UAAYe,EAAMf,gBAEH5I,IAApB2J,EAAMd,YACN/Z,KAAK+Z,UAAYc,EAAMd,gBAEP7I,IAAhB2J,EAAMlB,QACN3Z,KAAK2Z,MAAQkB,EAAMlB,YAEHzI,IAAhB2J,EAAMjB,QACN5Z,KAAK4Z,MAAQiB,EAAMjB,YAEH1I,IAAhB2J,EAAMhB,QACN7Z,KAAK6Z,MAAQgB,EAAMhB,OAGvBxa,EAAGiE,cAAcjE,EAAGwc,SAAW,GAC/Bxc,EAAG6D,YAAYlD,KAAKsZ,OAAQtZ,KAAKwC,SAEjC,IAAIsZ,EAAeH,EAAQzb,OAAS,EAEpCb,EAAGyb,YAAYzb,EAAG0b,oBAAqB/a,KAAKyZ,OAC5Cpa,EAAGyb,YAAYzb,EAAG2b,+BAAgChb,KAAKwZ,kBACvDna,EAAGyb,YAAYzb,EAAG4b,iBAAkBjb,KAAK0Z,iBACzCra,EAAGyb,YAAYzb,EAAG6b,mCAAoC7b,EAAG8b,MAEzD,MAAMxB,EAAQtI,GAAgBhS,EAAIW,KAAK2Z,OACnCA,GACAta,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGwE,eAAgB8V,GAGrD,MAAMC,EAAQvI,GAAgBhS,EAAIW,KAAK4Z,OAMvC,GALIA,GACAva,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAG0E,eAAgB6V,GAIjD5Z,KAAKV,OAASD,EAAG0c,YAAc/b,KAAKV,OAASD,EAAG2c,iBAAkB,CAClE,MAAMnC,EAAQxI,GAAgBhS,EAAIW,KAAK6Z,OACnCA,GACAxa,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAG4c,eAAgBpC,GAErDxa,EAAGoE,cAAczD,KAAKV,KAAMD,EAAG4c,eAAgBpC,EAClD,CAEGiC,GACAzc,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGuE,mBAAoBsY,GAAe7c,EAAIW,KAAK8Z,YAC7Eza,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGqE,mBAAoBwY,GAAe7c,EAAIW,KAAK+Z,cAG7E1a,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGuE,mBAAoByN,GAAgBhS,EAAIW,KAAK8Z,YAC9Eza,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGqE,mBAAoB2N,GAAgBhS,EAAIW,KAAK+Z,aAGlF,MAAMqB,EAAW/J,GAAgBhS,EAAIW,KAAK+O,OAAQ/O,KAAKuR,UACjD8J,EAAShK,GAAgBhS,EAAIW,KAAKV,MAClCgc,EAAmBC,GAAkBlc,EAAIW,KAAKuZ,eAAgB6B,EAAUC,EAAQrb,KAAKuR,UAAU,GAErGlS,EAAG8c,aAAa9c,EAAGkE,WAAYqY,EAAQN,EAAkBK,EAAQ,GAAGtR,MAAOsR,EAAQ,GAAGrR,QAEtF,IAAK,IAAIxF,EAAI,EAAG4V,EAAMiB,EAAQzb,OAAQ4E,EAAI4V,EAAK5V,IAAK,CAEhD,MAAMsX,EAAST,EAAQ7W,GAEnB9E,KAAK+O,SAAWyD,EACC,OAAb4I,EACA/b,EAAGgd,wBAAwBhd,EAAGkE,WAAYuB,EAAG,EAAG,EAAGsX,EAAO/R,MAAO+R,EAAO9R,OAAQ8Q,EAAUgB,EAAO7c,MAEjG2I,QAAQoU,KAAK,iFAGjBjd,EAAGkd,cAAcld,EAAGkE,WAAYuB,EAAG,EAAG,EAAGsX,EAAO/R,MAAO+R,EAAO9R,OAAQ8Q,EAAUC,EAAQe,EAAO7c,KAEtG,CAEDF,EAAG6D,YAAYlD,KAAKsZ,OAAQ,KAChC,CAEAkD,SAAS3B,GAcL,MAAMxb,EAAKW,KAAKX,GAChBA,EAAG6D,YAAYlD,KAAKsZ,OAAQtZ,KAAKwC,SACjCxC,KAAKyc,aAAa5B,GAClBxb,EAAG6D,YAAYlD,KAAKsZ,OAAQ,KAChC,CAEAmD,aAAa5B,GAcT,MAAMxb,EAAKW,KAAKX,GAahB,QAZqB6R,IAAjB2J,EAAM9L,SACN/O,KAAK+O,OAAS8L,EAAM9L,aAEKmC,IAAzB2J,EAAMtB,iBACNvZ,KAAKuZ,eAAiBsB,EAAMtB,qBAETrI,IAAnB2J,EAAMtJ,WACNvR,KAAKuR,SAAWsJ,EAAMtJ,eAEPL,IAAf2J,EAAMvb,OACNU,KAAKV,KAAOub,EAAMvb,WAEE4R,IAApB2J,EAAMf,UAAyB,CAC/B,MAAMA,EAAYzI,GAAgBhS,EAAIwb,EAAMf,WACxCA,IACA9Z,KAAK8Z,UAAYe,EAAMf,UACvBza,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGuE,mBAAoBkW,GACjDA,IAAcza,EAAGqd,wBAA0B5C,IAAcza,EAAGyZ,uBAAyBgB,IAAcza,EAAGuZ,uBAAyBkB,IAAcza,EAAG2Z,sBAChJ3Z,EAAGsd,eAAe3c,KAAKsZ,QAGlC,CACD,QAAwBpI,IAApB2J,EAAMd,UAAyB,CAC/B,MAAMA,EAAY1I,GAAgBhS,EAAIwb,EAAMd,WACxCA,IACA/Z,KAAK+Z,UAAYc,EAAMd,UACvB1a,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGqE,mBAAoBqW,GAE5D,CACD,QAAoB7I,IAAhB2J,EAAMlB,MAAqB,CAC3B,MAAMA,EAAQtI,GAAgBhS,EAAIwb,EAAMlB,OACpCA,IACA3Z,KAAK2Z,MAAQkB,EAAMlB,MACnBta,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAGwE,eAAgB8V,GAExD,CACD,QAAoBzI,IAAhB2J,EAAMjB,MAAqB,CAC3B,MAAMA,EAAQvI,GAAgBhS,EAAIwb,EAAMjB,OACpCA,IACA5Z,KAAK4Z,MAAQiB,EAAMjB,MACnBva,EAAGoE,cAAczD,KAAKsZ,OAAQja,EAAG0E,eAAgB6V,GAExD,CACL,CAEAjY,KAAK0B,GACD,IAAKrD,KAAKC,UACN,OACH,EACD,GAAID,KAAKwC,QAAS,CACd,MAAMnD,EAAKW,KAAKX,GAIhB,OAFAA,EAAGiE,cAAcjE,YAAagE,MAC9BhE,EAAG6D,YAAYlD,KAAKsZ,OAAQtZ,KAAKwC,UAC1B,CACV,CACD,QACJ,CAEAZ,OAAOyB,GACH,GAAKrD,KAAKC,WAGND,KAAKwC,QAAS,CACd,MAAMnD,EAAKW,KAAKX,GAEhBA,EAAGiE,cAAcjE,YAAagE,MAC9BhE,EAAG6D,YAAYlD,KAAKsZ,OAAQ,KAC/B,CACL,CAEA7X,UACSzB,KAAKC,WAGND,KAAKwC,UACLxC,KAAKX,GAAG2E,cAAchE,KAAKwC,SAE3BxC,KAAKwC,QAAU,KAEvB,EAGJ,SAAS+Y,GACLlc,EACAud,EACAxB,EACAC,EACA9J,EACAsL,GAAiB,GACjB,GAA2B,OAAvBD,EAA6B,CAE7B,QAA+B1L,IAA3B7R,EAAGud,GAEH,OAAOvd,EAAGud,GAEd1U,QAAQoU,KAAK,sDAAyDM,EAAqB,IAC9F,CACD,IAAIrD,EAAiB6B,EAuBrB,OAtBIA,IAAa/b,EAAG4T,MACZoI,IAAWhc,EAAG4B,QAAOsY,EAAiBla,EAAGyd,MACzCzB,IAAWhc,EAAGgT,aAAYkH,EAAiBla,EAAG0d,MAC9C1B,IAAWhc,EAAGiB,gBAAeiZ,EAAiBla,EAAG2d,KAErD5B,IAAa/b,EAAGiU,KACZ+H,IAAWhc,EAAG4B,QAAOsY,EAAiBla,EAAG4d,OACzC5B,IAAWhc,EAAGgT,aAAYkH,EAAiBla,EAAG6d,OAC9C7B,IAAWhc,EAAGiB,gBAAeiZ,EAAiBla,EAAG8d,MAErD/B,IAAa/b,EAAGgP,OACZgN,IAAWhc,EAAG4B,QAAOsY,EAAiBla,EAAG+d,SACzC/B,IAAWhc,EAAGgT,aAAYkH,EAAiBla,EAAGge,SAC9ChC,IAAWhc,EAAGiB,gBAAeiZ,EAAkBhI,IAAawC,IAAmC,IAAnB8I,EAA4Bxd,EAAGie,aAAeje,EAAGke,OAC7HlC,IAAWhc,EAAGsS,yBAAwB4H,EAAiBla,EAAGme,OAC1DnC,IAAWhc,EAAGwS,yBAAwB0H,EAAiBla,EAAGoe,UAE9DlE,IAAmBla,EAAG0d,MAAQxD,IAAmBla,EAAGyd,MACpDvD,IAAmBla,EAAG6d,OAAS3D,IAAmBla,EAAG4d,OACrD1D,IAAmBla,EAAGge,SAAW9D,IAAmBla,EAAG+d,SACvDnM,GAAa5R,EAAI,0BAEdka,CACX,CAEA,SAAS2C,GAAe7c,EAA4Bqe,GAChD,OAAIA,IAAMzE,IAAiByE,IAAMC,IAA8BD,IAAME,GAC1Dve,EAAGsE,QAEPtE,EAAG8Z,MAEd,CCpfM,MAAA0E,GAEF,CACAC,OAAO,EACPC,qBAAsB,IAGpB7Q,GAAS5E,SAASC,cAAc,UAEtC,GAAI2E,GAAQ,CAGR,MAAM7N,EAA6B6N,GAAOvE,WAAW,SAAU,CAACqV,WAAW,IAE3EH,GAAWC,QAAUze,EAEjBwe,GAAWC,QAEXD,GAAWI,UAAY5e,EAAG6e,uBAAuBF,UAIzCH,GAAWM,uBAHf9e,EAAG+e,yBAEC/e,EAAG+e,yBAAyB/e,EAAG8G,gBAAiB9G,EAAGgf,YAAYC,UAAY,EACvC,QAEhCjf,EAAG+e,yBAAyB/e,EAAG8G,gBAAiB9G,EAAGkf,cAAcD,UAAY,EAC7B,UAEA,OAIpB,UAExCT,GAAWW,kBAAoBnf,EAAGof,aAAapf,EAAGqf,YAClDb,GAAWc,iBAAmBtf,EAAGof,aAAapf,EAAGsf,kBACjDd,GAAWe,kBAAoBvf,EAAGof,aAAapf,EAAGwf,2BAClDhB,GAAWiB,sBAAwBzf,EAAGof,aAAapf,EAAGyf,uBACtDjB,GAAWkB,kBAAoB1f,EAAGof,aAAapf,EAAG2f,kCAClDnB,GAAWoB,wBAA0B5f,EAAGof,aAAapf,EAAG4f,yBACxDpB,GAAWqB,mBAAqB7f,EAAGof,aAAapf,EAAG6f,oBACnDrB,GAAWsB,2BAA6B9f,EAAGof,aAAapf,EAAG8f,4BAC3DtB,GAAWuB,6BAA+B/f,EAAGof,aAAapf,EAAG+f,8BAC7DvB,GAAWwB,oBAAsBhgB,EAAGof,aAAapf,EAAGggB,qBAEpDhgB,EAAGigB,yBAAyBC,QAAQ,SAAUC,GAC1C3B,GAAWE,qBAAqByB,IAAO,CAC3C,GACA3B,GAAW4B,uBAAyB5B,GAAWE,qBAA0C,oBAEhG"}