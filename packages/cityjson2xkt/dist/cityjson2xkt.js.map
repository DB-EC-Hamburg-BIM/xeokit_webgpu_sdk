{"version":3,"file":"cityjson2xkt.js","sources":["../../data/src/Property.ts","../../data/src/PropertySet.ts","../../data/src/DataObject.ts","../../data/src/Relationship.ts","../../data/src/DataModel.ts","../../data/src/Data.ts","../../math/dist/index.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/assert.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/globals.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/assert.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/globals.js","../../../node_modules/@babel/runtime/helpers/esm/typeof.js","../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-job.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/node/worker_threads-browser.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-utils/get-loadable-worker-url.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-utils/get-transfer-list.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-thread.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-pool.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-farm.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-api/get-worker-url.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-api/process-on-worker.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/library-utils/library-utils.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/worker-loader-utils/parse-with-worker.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/array-buffer-utils.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/path-utils/file-aliases.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/memory-conversion-utils.js","../../../node_modules/@loaders.gl/textures/dist/esm/lib/utils/version.js","../../../node_modules/@loaders.gl/textures/dist/esm/lib/parsers/basis-module-loader.js","../../../node_modules/@loaders.gl/textures/dist/esm/ktx2-basis-writer.js","../../../node_modules/@loaders.gl/textures/dist/esm/lib/encoders/encode-ktx2-basis-texture.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/category-api/image-type.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/parsers/svg-utils.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-image.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-image-bitmap.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/category-api/binary-image-api.js","../../../node_modules/@loaders.gl/images/dist/esm/image-loader.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/utils/version.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-image.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-node-image.js","../../../node_modules/@loaders.gl/images/dist/esm/lib/category-api/parsed-image-api.js","../../constants/dist/index.js","../../matrix/dist/index.js","../../compression/src/index.ts","../../boundaries/src/index.ts","../../scene/src/GeometryBucket.ts","../../scene/src/Geometry.ts","../../scene/src/getSceneObjectGeometry.ts","../../scene/src/SceneObject.ts","../../scene/src/TextureSet.ts","../../scene/src/Texture.ts","../../scene/src/Mesh.ts","../../scene/src/buildEdgeIndices.ts","../../scene/src/calculateUniquePositions.ts","../../scene/src/rebucketPositions.ts","../../../node_modules/@loaders.gl/core/dist/esm/javascript-utils/is-type.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/utils/mime-type-utils.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/utils/resource-utils.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/utils/response-utils.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/fetch/fetch-file.js","../../../node_modules/@probe.gl/env/dist/esm/lib/is-browser.js","../../../node_modules/@probe.gl/env/dist/esm/lib/is-electron.js","../../../node_modules/@probe.gl/env/dist/esm/lib/globals.js","../../../node_modules/@probe.gl/env/dist/esm/utils/globals.js","../../../node_modules/@probe.gl/log/dist/esm/utils/local-storage.js","../../../node_modules/@probe.gl/log/dist/esm/utils/formatters.js","../../../node_modules/@probe.gl/log/dist/esm/utils/color.js","../../../node_modules/@probe.gl/log/dist/esm/utils/assert.js","../../../node_modules/@probe.gl/log/dist/esm/utils/hi-res-timestamp.js","../../../node_modules/@probe.gl/log/dist/esm/log.js","../../../node_modules/@probe.gl/log/dist/esm/utils/autobind.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/loggers.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/option-defaults.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/option-utils.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/normalize-loader.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/api/register-loaders.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/utils/log.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/api/select-loader.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/path-utils/path.js","../../../node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-string-iterator.js","../../../node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-array-buffer-iterator.js","../../../node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-blob-iterator.js","../../../node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-stream-iterator.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/get-data.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/api/parse.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/loader-context.js","../../../node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-api/validate-worker-version.js","../../../node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-iterator.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/iterators/async-iteration.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/api/encode.js","../../../node_modules/@loaders.gl/loader-utils/dist/esm/lib/worker-loader-utils/encode-with-worker.js","../../../node_modules/@loaders.gl/core/dist/esm/lib/fetch/write-file.js","../../scene/src/SceneModel.ts","../../scene/src/compressGeometryParams.ts","../../../node_modules/@loaders.gl/core/dist/esm/lib/api/load.js","../../scene/src/Scene.ts","../../basictypes/dist/index.es","../../cityjsontypes_1_1_3/dist/index.es","../../cityjson/src/earcut.js","../../cityjson/src/loadCityJSON.ts","../../../node_modules/pako/dist/pako.esm.mjs","../src/cityjson2xkt.ts","../../xkt/src/saveXKT.ts","../../xkt/src/deflateXKT.ts","../../xkt/src/modelToXKT.ts","../../xkt/src/packXKT.ts","../../xkt/src/XKT_INFO.ts"],"sourcesContent":["import type {PropertySet} from \"./PropertySet\";\nimport type {PropertyParams} from \"./PropertyParams\";\n\n/**\n * A property in a {@link PropertySet}.\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class Property {\n\n    /**\n     * The PropertySet to which this Property belongs.\n     */\n    public readonly propertySet: PropertySet;\n\n    /**\n     * The name of this property.\n     */\n    public readonly name: string;\n\n    /**\n     * The value of this property.\n     */\n    public readonly value: any;\n\n    /**\n     * The type of this property.\n     */\n    public readonly type?: string | number;\n\n    /**\n     * The type of this property's value.\n     */\n    public readonly valueType?: string | number;\n\n    /**\n     * Informative text to explain the property.\n     */\n    public readonly description?: string;\n\n    /**\n     * @private\n     * @ignore\n     */\n    constructor(\n        propertySet: PropertySet,\n        propertyCfg: PropertyParams) {\n        this.propertySet = propertySet;\n        this.name = propertyCfg.name;\n        this.type = propertyCfg.type\n        this.value = propertyCfg.value\n        this.valueType = propertyCfg.valueType;\n        this.description = propertyCfg.description;\n    }\n}\n","import {Property} from \"./Property\";\nimport type {DataModel} from \"./DataModel\";\nimport type {PropertyParams} from \"./PropertyParams\";\nimport type {PropertySetParams} from \"./PropertySetParams\";\n\n/**\n * A set of {@link Property | Properties} in a {@link @xeokit/data!DataModel | DataModel}.\n *\n * * Created with {@link DataModel.createPropertySet | DataModel.createPropertySet}\n * * Stored in {@link Data.propertySets | Data.propertySets} and {@link DataModel.propertySets | Data.propertySets}\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class PropertySet {\n\n    /**\n     * The DataModels to which this PropertySet belongs.\n     */\n    public readonly models: DataModel[];\n\n    /**\n     * Unique ID.\n     *\n     * PropertySet instances are registered by this ID in {@link Data.propertySets | Data.propertySets}\n     * and {@link DataModel.propertySets | DataModel.propertySets}.\n     */\n    public readonly id: string;\n\n    /**\n     * ID of the corresponding object within the originating system, if any.\n     */\n    public readonly originalSystemId?: string;\n\n    /**\n     * Human-readable name of this PropertySet.\n     */\n    public readonly name: string;\n\n    /**\n     * Type of this PropertySet.\n     */\n    public readonly type: string;\n\n    /**\n     * Properties within this PropertySet.\n     */\n    public readonly properties: Property[];\n\n    /**\n     * @private\n     */\n    constructor(\n        dataModel: DataModel,\n        propertySetCfg: PropertySetParams) {\n        this.models = [dataModel];\n        this.id = propertySetCfg.id;\n        this.name = propertySetCfg.name;\n        this.type = propertySetCfg.type;\n        this.properties = [];\n        if (propertySetCfg.properties) {\n            for (let i = 0, len = propertySetCfg.properties.length; i < len; i++) {\n                const property = new Property(this, propertySetCfg.properties[i]);\n                this.properties.push(property);\n            }\n        }\n    }\n}\n","import type {PropertySet} from \"./PropertySet\";\nimport type {DataModel} from \"./DataModel\";\nimport type {Relationship} from \"./Relationship\";\nimport type {Data} from \"./Data\";\n\n/**\n * An object in a {@link @xeokit/data!DataModel}.\n *\n * * Created with {@link DataModel.createObject | DataModel.createObject}\n * * Stored in {@link Data.objects | Data.objects}, {@link Data.rootObjects | Data.rootObjects}, {@link Data.objectsByType | Data.objectsByType}, {@link DataModel.objects | Data.objects}, {@link DataModel.rootObjects | Data.rootObjects}\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class DataObject {\n\n    /**\n     *  {@link Data} that contains this DataObject.\n     */\n    public data: Data;\n\n    /**\n     * {@link DataModel | DataModels} that share this DataObject.\n     */\n    public models: DataModel[];\n\n    /**\n     * Globally-unique ID.\n     *\n     * DataObjects are stored by ID in {@link Data.objects | Data.objects}, {@link Data.rootObjects | Data.rootObjects}, {@link Data.objectsByType | Data.objectsByType} and {@link DataModel.rootObjects | Data.rootObjects}.\n     */\n    public readonly id: string;\n\n    /**\n     * Human-readable name.\n     */\n    public readonly name?: string;\n\n    /**\n     * DataObject's type.\n     */\n    public readonly type: number;\n\n    /**\n     * {@link PropertySet | PropertySets} referenced by this DataObject.\n     */\n    public readonly propertySets?: PropertySet[];\n\n    /**\n     * The {@link Relationship | Relations} in which this DataObject is the {@link Relationship.relating} participant.\n     *\n     * Each DataObject is mapped here by {@link Relationship.type | Relationship.type} and sub-mapped by {@link Relationship.relating | Relationship.relating}.\n     */\n    public readonly relating: {\n        [key: number]: Relationship[]\n    };\n\n    /**\n     * The {@link Relationship | Relationships} in which this DataObject is the {@link Relationship.related} participant.\n     *\n     * Each DataObject is mapped here by {@link Relationship.type | Relationship.type} and sub-mapped by {@link Relationship.related | Relationship.related}.\n     */\n    public readonly related: {\n        [key: number]: Relationship[]\n    };\n\n    /**\n     * @private\n     */\n    constructor(\n        data: Data,\n        model: DataModel,\n        id: string,\n        name: string,\n        type: number,\n        propertySets?: PropertySet[]) {\n\n        this.data = data;\n        this.models = [model];\n        this.id = id;\n        this.name = name;\n        this.type = type;\n        this.propertySets = propertySets || [];\n        this.related = {};\n        this.relating = {};\n    }\n}\n","import type {DataObject} from \"./DataObject\";\n\n/**\n * A one-to-one relationship between two {@link DataObject | DataObjects}.\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class Relationship {\n\n    /**\n     * The type of this Relationship.\n     *\n     * This can be any value that identifies the Relationship type within your DataModel.\n     */\n    readonly type: number;\n\n    /**\n     * The relating {@link DataObject} in this Relationship.\n     *\n     * This Relationship will be stored by {@link DataObject.type | DataObject.type}\n     * in the DataObject's {@link DataObject.relatedObject | DataObject.relatedObject} attribute.\n     */\n    readonly relatingObject: DataObject;\n\n    /**\n     * The related {@link DataObject} in this Relationship.\n     *\n     * This Relationship will be stored by {@link DataObject.type | DataObject.type} in\n     * the DataObject's {@link DataObject.relatingObject | DataObject.relatingObject} attribute.\n     */\n    readonly relatedObject: DataObject;\n\n    /**\n     * @private\n     * @ignore\n     */\n    constructor(type: number, relatingObject: DataObject, relatedObject: DataObject) {\n        this.type = type;\n        this.relatingObject = relatingObject;\n        this.relatedObject = relatedObject;\n    }\n}\n","import {Component, EventEmitter, SDKError} from \"@xeokit/core\";\nimport type {Data} from \"./Data\";\nimport {PropertySet} from \"./PropertySet\";\nimport {DataObject} from \"./DataObject\";\nimport type {DataModelParams} from \"./DataModelParams\";\nimport type {DataObjectParams} from \"./DataObjectParams\";\nimport type {PropertySetParams} from \"./PropertySetParams\";\nimport {Relationship} from \"./Relationship\";\nimport type {RelationshipParams} from \"./RelationshipParams\";\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport type {PropertyParams} from \"./PropertyParams\";\n\n/**\n * xeokit Semantic Data Model.\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class DataModel extends Component {\n\n    /**\n     * The Data that contains this DataModel.\n     */\n    public readonly data: Data;\n\n    /**\n     * Unique ID of this DataModel.\n     *\n     * DataModels are stored against this ID in {@link Data.models}.\n     */\n    declare public readonly id: string;\n\n    /**\n     * The project ID, if available.\n     */\n    public readonly projectId?: string | number;\n\n    /**\n     * The revision ID, if available.\n     */\n    public readonly revisionId?: string | number;\n\n    /**\n     * The model author, if available.\n     */\n    public readonly author?: string;\n\n    /**\n     * The date the model was created, if available.\n     */\n    public readonly createdAt?: string;\n\n    /**\n     * The application that created the model, if available.\n     */\n    public readonly creatingApplication?: string;\n\n    /**\n     * The model schema version, if available.\n     */\n    public readonly schema?: string;\n\n    /**\n     * The {@link PropertySet | PropertySets} in this DataModel, mapped to {@link PropertySet.id | PropertySet.id}.\n     *\n     * PropertySets have globally-unique IDs and will also be stored in {@link Data.propertySets | Data.propertySets}.\n     */\n    public readonly propertySets: { [key: string]: PropertySet };\n\n    /**\n     * The {@link DataObject | DataObjects} in this DataModel, mapped to {@link DataObject.id | DataObject.id}.\n     *\n     * DataObjects have globally-unique IDs and will also be stored in {@link Data.objects | Data.objects}.\n     */\n    public objects: { [key: string]: DataObject };\n\n    /**\n     * The root {@link DataObject | DataObjects} in this DataModel, mapped to {@link DataObject.id | DataObject.id}.\n     *\n     * * This is the set of DataObjects in this DataModel that are not the *related* participant in\n     * any {@link Relationship | Relationships}, where they have no incoming Relationships and\n     * their {@link DataObject.relating} property is empty.\n     */\n    public rootObjects: { [key: string]: DataObject };\n\n    /**\n     * The {@link DataObject | DataObjects} in this DataModel, mapped to {@link DataObject.type | DataObject.type},\n     * sub-mapped to {@link DataObject.id | DataObject.id}.\n     */\n    public objectsByType: { [key: string]: { [key: string]: DataObject } };\n\n    /**\n     * The {@link Relationship | Relationships} in this DataModel.\n     *\n     * * The Relationships can be between DataObjects in different DataModels, but always within the same Data.\n     */\n    public relationships: Relationship[];\n\n    /**\n     * The count of each type of {@link DataObject} in this DataModel, mapped to {@link DataObject.type | DataObject.type}.\n     */\n    public readonly typeCounts: { [key: string]: number };\n\n    /**\n     * Emits an event when the {@link @xeokit/data!DataModel} has been built.\n     *\n     * * The DataModel is built using {@link DataModel.build | DataModel.build}.\n     * * {@link DataModel.built | DataModel.built} indicates if the DataModel is currently built.\n     * * Don't create anything more in this DataModel once it's built.\n     *\n     * @event\n     */\n    public readonly onBuilt: EventEmitter<DataModel, null>;\n\n    /**\n     * Indicates if this DataModel has been built.\n     *\n     * * Set true by {@link DataModel.build | DataModel.build}.\n     * * Subscribe to updates using {@link DataModel.onBuilt | DataModel.onBuilt} and {@link Data.onModelCreated | Data.onModelCreated}.\n     */\n    built: boolean;\n\n    #destroyed: boolean;\n\n    /**\n     * @private\n     */\n    constructor(\n        data: Data,\n        id: string,\n        dataModelParams: DataModelParams,\n        options?: {\n            includeTypes?: string[],\n            excludeTypes?: string[],\n            globalizeObjectIds?: boolean\n        }) {\n\n        super(data);\n\n        this.onBuilt = new EventEmitter(new EventDispatcher<DataModel, null>());\n\n        this.data = data;\n\n        this.id = id;\n        this.projectId = dataModelParams.projectId || \"\";\n        this.revisionId = dataModelParams.revisionId || \"\";\n        this.author = dataModelParams.author || \"\";\n        this.createdAt = dataModelParams.createdAt || \"\";\n        this.creatingApplication = dataModelParams.creatingApplication || \"\";\n        this.schema = dataModelParams.schema || \"\";\n        this.propertySets = {};\n        this.objects = {};\n        this.objectsByType = {};\n        this.relationships = [];\n        this.typeCounts = {};\n        this.rootObjects = {};\n        this.built = false;\n        this.#destroyed = false;\n\n        this.fromJSON(dataModelParams);\n    }\n\n    /**\n     * Adds the given components to this DataModel.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @param dataModelParams\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been built.\n     * * If this DataModel has already been destroyed.\n     * * A duplicate PropertySet was already created for this DataModel.\n     * * A duplicate DataObject was already created in this DataModel.\n     * * DataObjects were not found for a Relationship.\n     */\n    fromJSON(dataModelParams: DataModelParams): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to add components to DataModel - DataModel already destroyed\");\n        }\n        if (this.built) {\n            throw new SDKError(\"Failed to add components to DataModel - DataModel already built\");\n        }\n        if (dataModelParams.propertySets) {\n            for (let i = 0, len = dataModelParams.propertySets.length; i < len; i++) {\n                this.createPropertySet(dataModelParams.propertySets[i]);\n            }\n        }\n        if (dataModelParams.objects) {\n            for (let i = 0, len = dataModelParams.objects.length; i < len; i++) {\n                this.createObject(dataModelParams.objects[i]);\n            }\n        }\n        if (dataModelParams.relationships) {\n            for (let i = 0, len = dataModelParams.relationships.length; i < len; i++) {\n                this.createRelationship(dataModelParams.relationships[i]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new {@link PropertySet}.\n     *\n     * * Stores the new PropertySet in {@link DataModel.propertySets | DataModel.propertySets}\n     * and {@link Data.propertySets | Data.propertySets}.\n     * * Note that PropertySet IDs are globally unique. PropertySet instances are automatically reused and shared among DataModels\n     * when IDs given to {@link DataModel.createPropertySet | DataModel.createPropertySet} match existing PropertySet\n     * instances in the same Data.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     *  const propertySet = dataModel.createPropertySet({\n     *      id: \"myPropertySet\",\n     *      name: \"My properties\",\n     *      properties: [{\n     *          name: \"Weight\",\n     *          value: 5,\n     *          type: \"\",\n     *          valueType: \"\",\n     *          description: \"Weight of a thing\"\n     *      }, {\n     *          name: \"Height\",\n     *          value: 12,\n     *          type: \"\",\n     *          valueType: \"\",\n     *          description: \"Height of a thing\"\n     *      }]\n     * });\n     *\n     * if (propertySet instanceof SDKError) {\n     *     console.error(propertySet.message);\n     * } else {\n     *     // Success\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/data\"} for more usage info.\n     *\n     * @param propertySetCfg - PropertySet creation parameters.\n     * @returns *{@link PropertySet}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been built.\n     * * If this DataModel has already been destroyed.\n     * * A PropertySet of the given ID was already created for this DataModel. While it's OK\n     * for multiple DataModels to *share* PropertySets with duplicate IDs between them, it's not permitted to\n     * create duplicate PropertySets within the same DataModel.\n     */\n    createPropertySet(propertySetCfg: PropertySetParams): PropertySet | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create PropertySet - DataModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"DataModel already built\");\n        }\n        if (this.propertySets[propertySetCfg.id]) {\n            return new SDKError(\"Failed to create PropertySet - PropertySet with same ID already created in this DataModel. It's OK to have duplicates shared between DataModels, but they must be unique within each DataModel.\")\n        }\n        let propertySet = this.data.propertySets[propertySetCfg.id];\n        if (propertySet) {\n            this.propertySets[propertySetCfg.id] = propertySet;\n            propertySet.models.push(this);\n            return propertySet;\n        }\n        propertySet = new PropertySet(this, propertySetCfg);\n        this.propertySets[propertySetCfg.id] = propertySet;\n        this.data.propertySets[propertySetCfg.id] = propertySet;\n        return propertySet;\n    }\n\n    /**\n     * Creates a new {@link DataObject}.\n     *\n     * * Stores the new {@link DataObject} in {@link DataModel.objects | DataModel.objects} and {@link Data.objects | Data.objects}.\n     * * Fires an event via {@link Data.onObjectCreated | Data.onObjectCreated}.\n     * * Note that DataObject IDs are globally unique. DataObject instances are automatically reused and shared among DataModels when\n     * IDs given to {@link DataModel.createObject | DataModel.createObject} match existing DataObject instances in the same\n     * Data. This feature is part of how xeokit supports [*federated data models*](/docs/pages/GLOSSARY.html#federated-models).\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const myDataObject = dataModel.createObject({\n     *     id: \"myDataObject\",\n     *     type: BasicEntity,     // @xeokit/datatypes!basicTypes\n     *     name: \"My Object\",\n     *     propertySetIds: [\"myPropertySet\"]\n     * });\n     *\n     * const myDataObject2 = dataModel.createObject({\n     *     id: \"myDataObject2\",\n     *     name: \"My Other Object\",\n     *     type: BasicEntity,\n     *     propertySetIds: [\"myPropertySet\"]\n     * });\n     *\n     * if (myDataObject instanceof SDKError) {\n     *     console.error(myDataObject.message);\n     *\n     * } else if (myDataObject2 instanceof SDKError) {\n     *     console.error(myDataObject2.message);\n     *\n     * } else { // Success\n     *     const gotMyDataObject = dataModel.objects[\"myDataObject\"];\n     *     const gotMyDataObjectAgain = data.objects[\"myDataObject\"];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/data\"} for more usage info.\n     *\n     * @param dataObjectParams - DataObject creation parameters.\n     * @returns *{@link DataObject}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been built.\n     * * If this DataModel has already been destroyed.\n     * * A DataObject of the given ID was already created in this DataModel. While it's OK\n     * for multiple DataModels to *share* DataObjects with duplicate IDs between them, we're not permitted to\n     * create duplicate DataObjects within the same DataModel.\n     * * A specified PropertySet could not be found.\n     */\n    createObject(dataObjectParams: DataObjectParams): DataObject | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create DataObject - DataModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create DataObject - DataModel already built\");\n        }\n        const id = dataObjectParams.id;\n        if (this.objects[id]) {\n            return new SDKError(\"Failed to create DataObject - DataObject with same ID already created in this DataModel. It's OK to have duplicates shared between DataModels, but they must be unique within each DataModel.\")\n        }\n        const type = dataObjectParams.type;\n        let dataObject = this.data.objects[id];\n        if (!dataObject) {\n            const propertySets = [];\n            if (dataObjectParams.propertySetIds) {\n                for (let i = 0, len = dataObjectParams.propertySetIds.length; i < len; i++) {\n                    const propertySetId = dataObjectParams.propertySetIds[i];\n                    const propertySet = this.propertySets[propertySetId];\n                    if (!propertySet) {\n                        return new SDKError(`Failed to create DataObject - PropertySet not found: \"${propertySetId}\"`);\n                    } else {\n                        propertySets.push(propertySet);\n                    }\n                }\n            }\n            dataObject = new DataObject(this.data, this, id, dataObjectParams.name, dataObjectParams.type, propertySets);\n            this.objects[id] = dataObject;\n            this.data.objects[id] = dataObject;\n            if (!this.data.objectsByType[type]) {\n                this.data.objectsByType[type] = {};\n            }\n            this.data.objectsByType[type][id] = dataObject;\n            this.data.typeCounts[type] = (this.data.typeCounts[type] === undefined) ? 1 : this.data.typeCounts[type] + 1;\n            dataObject.models.push(this);\n            // if (dataObjectParams.relations) {\n            //     for (let relationType in dataObjectParams.relations) {\n            //         if (!dataObject.relating[relationType]) {\n            //             dataObject.relating[relationType] = [];\n            //         }\n            //         const relatedObjectIds = dataObjectParams.relations[relationType];\n            //         for (let j = 0, lenj = relatedObjectIds.length; j < lenj; j++) {\n            //             const relatedObjectId = relatedObjectIds[j];\n            //             const relatedObject = this.data.objects[relatedObjectId];\n            //             if (!relatedObject) {\n            //                 this.error(`[createObject] Can't create Relationship - DataObject not found: ${relatedObjectId}`);\n            //             } else {\n            //                 // @ts-ignore\n            //                 const relation = new Relationship(relationType, this, relatedObject);\n            //                 relatedObject.relating[relationType].push(relation);\n            //                 dataObject.related[relationType].push(relation);\n            //             }\n            //         }\n            //     }\n            // }\n            this.data.onObjectCreated.dispatch(this.data, dataObject);\n        } else {\n            this.objects[id] = dataObject;\n            this.data.objects[id] = dataObject;\n            if (!this.objectsByType[type]) {\n                this.objectsByType[type] = {};\n            }\n            this.objectsByType[type][id] = dataObject;\n            this.typeCounts[type] = (this.typeCounts[type] === undefined) ? 1 : this.typeCounts[type] + 1;\n            dataObject.models.push(this);\n        }\n        return dataObject;\n    }\n\n    /**\n     * Creates a new {@link Relationship} between two existing {@link DataObject | DataObjects}.\n     *\n     * * A Relationship involves a *relating* DataObject and a *related* DataObject.\n     * * The *relating* and *related* DataObjects can exist within different DataModels,\n     * as long as the DataModels both exist in the same {@link Data}. This feature is part of\n     * how xeokit supports the viewing of [*federated models*](/docs/pages/GLOSSARY.html#federated-models).\n     * * The new Relationship will be stored in\n     *   - {@link DataModel.relationships | DataModel.relationships},\n     *   - {@link DataObject.related | DataObject.related} on the *relating* DataObject, and\n     *   - {@link DataObject.relating | DataObject.relating} on the *related* DataObject.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const myRelationship = dataModel.createRelationship({\n     *     type: BasicAggregation,            // @xeokit/datatypes!basicTypes\n     *     relatingObjectId: \"myDataObject\",\n     *     relatedObjectId: \"myDataObject2\"\n     * });\n     *\n     * if (myRelationship instanceof SDKError) {\n     *     console.error(myRelationship.message);\n     *\n     * } else { // Success\n     *     const myDataObject = dataModel.objects[\"myDataObject\"];\n     *     const myDataObject2 = dataModel.objects[\"myDataObject2\"];\n     *\n     *     const gotMyRelationship = myDataObject.related[BasicAggregation][0];\n     *     const gotMyRelationshipAgain = myDataObject2.relating[BasicAggregation][0];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/data\"} for more usage info.\n     *\n     * @param relationshipParams - Relationship creation parameters.\n     * @returns *{@link Relationship}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been built or destroyed.\n     * * The *relating* DataObject was not found in the {@link Data} that contains this DataModel.\n     * * The *related* DataObject was not found in the Data that contains this DataModel.\n     */\n    createRelationship(relationshipParams: RelationshipParams): Relationship | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create Relationship - DataModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create Relationship - DataModel already built\");\n        }\n        const relatingObject = this.data.objects[relationshipParams.relatingObjectId];\n        if (!relatingObject) {\n            return new SDKError(`Failed to create Relationship - relating DataObject not found: ${relationshipParams.relatingObjectId}`);\n        }\n        const relatedObject = this.data.objects[relationshipParams.relatedObjectId];\n        if (!relatedObject) {\n            return new SDKError(`Failed to create Relationship - related DataObject not found: ${relationshipParams.relatedObjectId}`);\n        }\n        const relation = new Relationship(relationshipParams.type, relatingObject, relatedObject);\n        if (!relatedObject.relating[relationshipParams.type]) {\n            relatedObject.relating[relationshipParams.type] = [];\n        }\n        relatedObject.relating[relationshipParams.type].push(relation);\n        if (!relatingObject.related[relationshipParams.type]) {\n            relatingObject.related[relationshipParams.type] = [];\n        }\n        relatingObject.related[relationshipParams.type].push(relation);\n        this.relationships.push(relation);\n        return relation;\n    }\n\n    /**\n     * Finalizes this DataModel, readying it for use.\n     *\n     * * Fires an event via {@link DataModel.onBuilt | DataModel.onBuilt} and {@link Data.onModelCreated | DataModel.onCreated}, to indicate to subscribers that\n     * the DataModel is complete and ready to use.\n     * * Sets {@link DataModel.built | DataModel.built} ````true````.\n     * * You can only call this method once on a DataModel.\n     * * Once built, no more components can be created in a DataModel.\n     *\n     * ````javascript\n     * dataModel.onBuilt.subscribe(()=>{\n     *     // Our DataModel is built and ready to use\n     * });\n     *\n     * data.onModelCreated.subscribe((dataModel)=>{\n     *     // Another way to subscribe to DataModel readiness\n     * });\n     *\n     * const result = dataModel.build();\n     *\n     * if (result instanceof SDKError) {\n     *     console.error(result.message);\n     * } else {\n     *     // Success\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been built or destroyed.\n     */\n    build(): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to build DataModel - DataModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to build DataModel - DataModel already built\");\n        }\n        this.built = true;\n        this.onBuilt.dispatch(this, null);\n    }\n\n    getJSON(): DataModelParams | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"DataModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"DataModel already built\");\n        }\n        const dataModelParams = <DataModelParams>{\n            id: this.id,\n            propertySets: [],\n            objects: [],\n            relationships: []\n        };\n\n        for (let id in this.propertySets) {\n            const propertySet = this.propertySets[id];\n            const propertySetParams = <PropertySetParams>{\n                id,\n                name: propertySet.name,\n                properties: [],\n                type: propertySet.type,\n                originalSystemId: propertySet.originalSystemId\n            };\n            for (let i = 0, len = propertySet.properties.length; i < len; i++) {\n                const property = propertySet.properties[i];\n                const propertyParams = <PropertyParams>{\n                    name: property.name,\n                    value: property.value,\n                    type: property.type,\n                    valueType: property.valueType,\n                    description: property.description\n                };\n                propertySetParams.properties.push(propertyParams);\n            }\n            dataModelParams.propertySets?.push(propertySetParams);\n        }\n        for (let id in this.objects) {\n            const object = this.objects[id];\n            const objectParams = <DataObjectParams>{\n                id,\n                type: object.type,\n                name: object.name,\n                propertySetIds: []\n            };\n            if (object.propertySets) {\n                for (let i = 0, len = object.propertySets.length; i < len; i++) {\n                    const propertySet = object.propertySets[i];\n                    objectParams.propertySetIds?.push(propertySet.id);\n                }\n            }\n            dataModelParams.objects?.push(objectParams);\n        }\n        for (let i = 0, len = this.relationships.length; i < len; i++) {\n            const relationship = this.relationships[i];\n            const relationParams = <RelationshipParams>{\n                type: relationship.type,\n                relatingObjectId: relationship.relatingObject.id,\n                relatedObjectId: relationship.relatedObject.id\n            };\n            dataModelParams.relationships?.push(relationParams);\n        }\n        return dataModelParams;\n    }\n\n    /**\n     * Destroys this DataModel.\n     *\n     * * Fires an event via {@link DataModel.onDestroyed | DataModel.onDestroyed} and {@link Data.onModelDestroyed | Data.onModelDestroyed}.\n     * * You can only call this method once on a DataModel.\n     * * Once destroyed, no more components can be created in a DataModel.\n     * * Does not matter if the DataModel has not yet been built.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this DataModel has already been destroyed.\n     */\n    destroy(): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to destroy DataModel - DataModel already destroyed\");\n        }\n        for (let id in this.objects) {\n            const dataObject = this.objects[id];\n            if (dataObject.models.length > 1) {\n                this.#removeObjectFromModels(dataObject);\n            } else {\n                delete this.data.objects[id];\n                const type = dataObject.type;\n                if ((--this.data.typeCounts[type]) === 0) {\n                    delete this.data.typeCounts[type];\n                    delete this.data.objectsByType[type];\n                    this.data.onObjectDestroyed.dispatch(this.data, dataObject);\n                    for (let type in dataObject.relating) {\n                        const relations = dataObject.relating[type];\n                        for (let i = 0, len = relations.length; i < len; i++) {\n                            const relation = relations[i];\n                            const related = relation.relatedObject;\n                            const list = related.relating[type];\n                            for (let j = 0, k = 0, lenj = list.length; j < lenj; j++) {\n                                if (list[k].relatingObject === dataObject) {\n                                    // Splice j from related.relating[type]\n                                    list[j] = list[j]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // if (dataObject.parent) {\n            //     const objects = dataObject.parent.objects;\n            //     objects.length--;\n            //     let f = false;\n            //     for (let i = 0, len = objects.length; i < len; i++) {\n            //         if (f || (f = objects[i] === dataObject)) {\n            //             objects[i] = objects[i + 1];\n            //         }\n            //     }\n            // }\n        }\n        this.#destroyed = true;\n        this.onBuilt.clear();\n        super.destroy();\n    }\n\n    // #removePropertySetFromModels(dataObject: DataObject) {\n    //     for (let i = 0, len = dataObject.models.length; i < len; i++) {\n    //         if (dataObject.models[i] === this) {\n    //             dataObject.models = dataObject.models.splice(i, 1);\n    //             break;\n    //         }\n    //     }\n    // }\n\n    #removeObjectFromModels(dataObject: DataObject) {\n        for (let i = 0, len = dataObject.models.length; i < len; i++) {\n            if (dataObject.models[i] === this) {\n                dataObject.models = dataObject.models.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n\n","import {Component, EventEmitter, SDKError} from \"@xeokit/core\";\n\nimport {DataModel} from \"./DataModel\";\nimport type {DataObject} from \"./DataObject\";\nimport type {PropertySet} from \"./PropertySet\";\nimport type {DataModelParams} from \"./DataModelParams\";\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport type {SearchParams} from \"./SearchParams\";\n\n/**\n * An entity-relationship semantic data model.\n *\n * See {@link \"@xeokit/data\"} for usage.\n */\nexport class Data extends Component {\n\n    /**\n     * The {@link @xeokit/data!DataModel | DataModels} belonging to this Data, each keyed to\n     * its {@link @xeokit/data!DataModel.id | DataModel.id}.\n     */\n    public readonly models: { [key: string]: DataModel };\n\n    /**\n     * The {@link PropertySet | PropertySets} belonging to this Data, mapped to {@link PropertySet.id | PropertySet.id}.\n     */\n    public readonly propertySets: { [key: string]: PropertySet };\n\n    /**\n     * The {@link DataObject | DataObjects} in this Data, mapped to {@link DataObject.id | DataObject.id}.\n     */\n    public readonly objects: { [key: string]: DataObject };\n\n    /**\n     * The root {@link DataObject | DataObjects} belonging to this Data, each keyed to its {@link DataObject.id | DataObject.id}.\n     *\n     * * This is the set of DataObjects in the DataModels within this Data that are not the *related* participant in\n     * any {@link Relationship | Relationships}, where they have no incoming Relationships and\n     * their {@link DataObject.relating} property is empty.\n     */\n    public readonly rootObjects: { [key: string]: DataObject };\n\n    /**\n     * The {@link DataObject | DataObjects} belonging to this Data, each map keyed to {@link DataObject.type | DataObject.type},\n     * containing {@link DataObject | DataObjects} keyed to {@link DataObject.id | DataObject.id}.\n     */\n    public readonly objectsByType: { [key: string]: { [key: string]: DataObject } };\n\n    /**\n     * Tracks number of {@link DataObject | DataObjects} of each type in this Data.\n     */\n    public readonly typeCounts: { [key: string]: number };\n\n    /**\n     * Emits an event each time a {@link @xeokit/data!DataModel} has been created in this Data.\n     *\n     * @event\n     */\n    public readonly onModelCreated: EventEmitter<Data, DataModel>;\n\n    /**\n     * Emits an event each time a {@link @xeokit/data!DataModel} has been destroyed within this Data.\n     *\n     * @event\n     */\n    public readonly onModelDestroyed: EventEmitter<Data, DataModel>;\n\n    /**\n     * Emits an event each time a {@link DataObject} is created within this Data.\n     *\n     * @event\n     */\n    public readonly onObjectCreated: EventEmitter<Data, DataObject>;\n\n    /**\n     * Emits an event each time a {@link DataObject} is destroyed within this Data.\n     *\n     * @event\n     */\n    public readonly onObjectDestroyed: EventEmitter<Data, DataObject>;\n\n    /**\n     * Creates a new Data.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     */\n    constructor() {\n\n        super(null, {});\n\n        this.models = {};\n        this.propertySets = {};\n        this.objects = {};\n        this.rootObjects = {};\n        this.objectsByType = {};\n        this.typeCounts = {};\n\n        this.onModelCreated = new EventEmitter(new EventDispatcher<Data, DataModel>());\n        this.onModelDestroyed = new EventEmitter(new EventDispatcher<Data, DataModel>());\n        this.onObjectCreated = new EventEmitter(new EventDispatcher<Data, DataObject>());\n        this.onObjectDestroyed = new EventEmitter(new EventDispatcher<Data, DataObject>());\n    }\n\n    /**\n     * Creates a new {@link @xeokit/data!DataModel} in this Data.\n     *\n     * Remember to call {@link DataModel.build | DataModel.build} when you've finished building or loading the DataModel. That will\n     * fire events via {@link Data.onModelCreated | Data.onModelCreated} and {@link DataModel.onBuilt | DataModel.onBuilt}, to\n     * indicate to any subscribers that the DataModel is built and ready for use.\n     *\n     * Note that while we're building/loading the SceneModel, each call that we make to {@link DataModel.createObject | DataModel.createObject}\n     * will create a new {@link DataObject}\n     * in {@link Data.objects | Data.objects} and {@link DataModel.objects | DataModel.objects}, and will also fire an event\n     * via {@link Data.onObjectCreated | Data.onObjectCreated}. However,\n     * only when we've received the {@link Data.onModelCreated | Data.onModelCreated} and {@link DataModel.onBuilt | DataModel.onBuilt}\n     * events can we actually consider the DataModel to be fully constructed.\n     *\n     * See {@link \"@xeokit/data\"} for more details on usage.\n     *\n     * @param  dataModelParams Creation parameters for the new {@link @xeokit/data!DataModel}.\n     * @param [options] Options for creating the {@link @xeokit/data!DataModel}.\n     * @param [options.includeTypes] When provided, only create {@link DataObject | DataObjects} with types in this list.\n     * @param  [options.excludeRelating] When provided, never create {@link DataObject | DataObjects} with types in this list.\n     * @returns {@link DataModel}\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Data has already been destroyed.\n     * * A DataModel with the given ID already exists in this Data.\n     */\n    createModel(\n        dataModelParams: DataModelParams,\n        options?: {\n            includeRelating?: string[],\n            excludeRelating?: string[],\n        }\n    ): DataModel | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Data already destroyed\");\n        }\n        let id = dataModelParams.id;\n        if (this.models[id]) {\n            return new SDKError(`DataModel already created in this Data: ${id}`);\n        }\n        // @ts-ignore\n        const dataModel = new DataModel(this, id, dataModelParams, options);\n        this.models[dataModel.id] = dataModel;\n        dataModel.onDestroyed.one(() => { // DataModel#destroy() called\n            delete this.models[dataModel.id];\n            this.onModelDestroyed.dispatch(this, dataModel);\n        });\n        dataModel.onBuilt.one(() => { // DataModel#build() called\n            this.onModelCreated.dispatch(this, dataModel);\n        });\n        return dataModel;\n    }\n\n    /**\n     * Gets the {@link DataObject.id}s of the {@link DataObject | DataObjects} that have the given {@link DataObject.type}.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @param type The type.\n     * @returns {string[]}\n     * * Array of {@link DataObject.id}s on success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Data has already been destroyed.\n     */\n    getObjectIdsByType(type: string): string[] | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Data already destroyed\");\n        }\n        const objects = this.objectsByType[type];\n        return objects ? Object.keys(objects) : [];\n    }\n\n    /**\n     * Finds {@link DataObject | DataObjects} using a customized depth-first traversal.\n     *\n     * Usually we use this method to recursively find DataObjects of specific {@link DataObject.type | types} within\n     * a hierarchy.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @param searchParams Search parameters.\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Data has already been destroyed.\n     * * The specified starting DataObject was not found in this Data.\n     * * The specified starting DataObject is contained in a different Data than this one.\n     */\n    searchObjects(searchParams: SearchParams): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Data already destroyed\");\n        }\n        const includeObjects = (searchParams.includeObjects && searchParams.includeObjects.length > 0) ? arrayToMap(searchParams.includeObjects) : null;\n        const excludeObjects = (searchParams.excludeObjects && searchParams.excludeObjects.length > 0) ? arrayToMap(searchParams.excludeObjects) : null;\n        const includeRelating = (searchParams.includeRelating && searchParams.includeRelating.length > 0) ? arrayToMap(searchParams.includeRelating) : null;\n        const excludeRelating = (searchParams.excludeRelating && searchParams.excludeRelating.length > 0) ? arrayToMap(searchParams.excludeRelating) : null;\n\n        function visit(dataObject: DataObject, depth: number) {\n            if (!dataObject) {\n                return;\n            }\n            let includeObject = true;\n            if (excludeObjects && excludeObjects[dataObject.type]) {\n                includeObject = false;\n            } else { // @ts-ignore\n                if (includeObjects && (!includeObjects[dataObject.type])) {\n                    includeObject = false;\n                }\n            }\n            if (depth === 0 && searchParams.includeStart === false) {\n                includeObject = false;\n            }\n            if (includeObject) {\n                if (searchParams.resultObjectIds) {\n                    searchParams.resultObjectIds.push(dataObject.id);\n                } else if (searchParams.resultObjects) {\n                    searchParams.resultObjects.push(dataObject);\n                } else if (searchParams.resultCallback) {\n                    if (searchParams.resultCallback(dataObject)) {\n                    }\n                }\n            }\n            const related = dataObject.related;\n            for (let type in related) {\n                const relations = related[type];\n                if (relations) {\n                    for (let i = 0, len = relations.length; i < len; i++) {\n                        let includeRelation = true;\n                        if (excludeRelating && excludeRelating[dataObject.type]) {\n                            includeRelation = false;\n                        } else {\n                            if (includeRelating && (!includeRelating[dataObject.type])) {\n                                includeRelation = false;\n                            }\n                        }\n                        if (includeRelation) {\n                            visit(relations[i].relatedObject, depth + 1);\n                        }\n                    }\n                }\n            }\n        }\n\n        const depth = 0;\n        if (searchParams.startObjectId) {\n            const startObject = this.objects[searchParams.startObjectId];\n            if (!startObject) {\n                return new SDKError(`Failed to search DataObjects - starting DataObject not found in Data: \"${searchParams.startObjectId}\"`);\n            }\n            visit(startObject, depth);\n        } else if (searchParams.startObject) {\n            if (searchParams.startObject.data != this) {\n                return new SDKError(`Failed to search DataObjects - starting DataObject not in same Data: \"${searchParams.startObjectId}\"`);\n            }\n            visit(searchParams.startObject, depth + 1);\n        } else {\n            for (let id in this.rootObjects) {\n                visit(this.rootObjects[id], depth + 1);\n            }\n        }\n    }\n\n    /**\n     * Destroys all contained {@link DataModel | DataModels}.\n     *\n     * * Fires {@link Data.onModelDestroyed | Data.onModelDestroyed} and {@link DataModel.onDestroyed | DataModel.onDestroyed}\n     * for each existing DataModel in this Data.\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Data has already been destroyed.\n     */\n    clear(): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Data already destroyed\");\n        }\n        for (let id in this.models) {\n            this.models[id].destroy();\n        }\n    }\n\n    /**\n     * Destroys this Data and all contained {@link DataModel | DataModels}.\n     *\n     * * Fires {@link Data.onModelDestroyed | Data.onModelDestroyed} and {@link DataModel.onDestroyed | DataModel.onDestroyed}\n     * for each existing DataModels in this Data.\n     * * Unsubscribes all subscribers to {@link Data.onModelCreated | Data.onModelCreated}, {@link Data.onModelDestroyed | Data.onModelDestroyed}, {@link DataModel.onDestroyed | DataModel.onDestroyed}\n     *\n     * See {@link \"@xeokit/data\"} for usage.\n     *\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Data has already been destroyed.\n     */\n    destroy(): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Data already destroyed\");\n        }\n        this.clear();\n        this.onModelCreated.clear();\n        this.onModelDestroyed.clear();\n        super.destroy();\n    }\n}\n\nfunction arrayToMap(array: any[]): { [key: string]: any } {\n    const map: { [key: string]: any } = {};\n    for (let i = 0, len = array.length; i < len; i++) {\n        map[array[i]] = true;\n    }\n    return map;\n}\n\n","var r=Float64Array,n=-Number.MAX_SAFE_INTEGER,t=Number.MAX_SAFE_INTEGER,a=.0174532925,e=57.295779513;function u(r,n,t){return Math.max(n,Math.min(t,r))}function E(n){return new r(n)}export{a as DEGTORAD,r as FloatArrayClass,t as MAX_DOUBLE,n as MIN_DOUBLE,e as RADTODEG,u as clamp,E as newFloatArray};\n//# sourceMappingURL=index.js.map\n","\nexport function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map","\n\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\n\nexport const isBrowser =\nBoolean(typeof process !== 'object' || String(process) !== '[object process]' || process.browser);\n\nexport const isWorker = typeof importScripts === 'function';\n\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\nexport const nodeVersion = matches && parseFloat(matches[1]) || 0;\n//# sourceMappingURL=globals.js.map","\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'loaders.gl assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map","\n\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\n\nexport const isBrowser =\ntypeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n\nexport const isWorker = typeof importScripts === 'function';\n\nexport const isMobile = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n\nexport const nodeVersion = matches && parseFloat(matches[1]) || 0;\n//# sourceMappingURL=globals.js.map","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\n\nexport default class WorkerJob {\n\n  constructor(jobName, workerThread) {\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"workerThread\", void 0);\n    _defineProperty(this, \"isRunning\", true);\n    _defineProperty(this, \"result\", void 0);\n    _defineProperty(this, \"_resolve\", () => {});\n    _defineProperty(this, \"_reject\", () => {});\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  postMessage(type, payload) {\n    this.workerThread.postMessage({\n      source: 'loaders.gl',\n      type,\n      payload\n    });\n  }\n\n  done(value) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  error(error) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n//# sourceMappingURL=worker-job.js.map","\nexport class Worker {\n  terminate() {}\n}\nexport { Worker as NodeWorker };\nexport { Worker as NodeWorkerType };\nexport const parentPort = null;\n//# sourceMappingURL=worker_threads-browser.js.map","import { assert } from '../env-utils/assert';\nconst workerURLCache = new Map();\n\nexport function getLoadableWorkerURL(props) {\n  assert(props.source && !props.url || !props.source && props.url);\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n  assert(workerURL);\n  return workerURL;\n}\n\nfunction getLoadableWorkerURLFromURL(url) {\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\nfunction getLoadableWorkerURLFromSource(workerSource) {\n  const blob = new Blob([workerSource], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\n\nfunction buildScriptSource(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\");\n}\n//# sourceMappingURL=get-loadable-worker-url.js.map","\n\nexport function getTransferList(object) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let transfers = arguments.length > 2 ? arguments[2] : undefined;\n  const transfersSet = transfers || new Set();\n  if (!object) {\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n\nexport function getTransferListForWriter(object) {\n  if (object === null) {\n    return {};\n  }\n  const clone = Object.assign({}, object);\n  Object.keys(clone).forEach(key => {\n    if (typeof object[key] === 'object' && !ArrayBuffer.isView(object[key]) && !(object[key] instanceof Array)) {\n      clone[key] = getTransferListForWriter(object[key]);\n    } else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {\n      clone[key] = {};\n    } else {\n      clone[key] = object[key];\n    }\n  });\n  return clone;\n}\n//# sourceMappingURL=get-transfer-list.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nimport { NodeWorker } from '../node/worker_threads';\nimport { isBrowser } from '../env-utils/globals';\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\nconst NOOP = () => {};\nexport default class WorkerThread {\n  static isSupported() {\n    return typeof Worker !== 'undefined' && isBrowser || typeof NodeWorker !== 'undefined' && !isBrowser;\n  }\n  constructor(props) {\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"source\", void 0);\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"terminated\", false);\n    _defineProperty(this, \"worker\", void 0);\n    _defineProperty(this, \"onMessage\", void 0);\n    _defineProperty(this, \"onError\", void 0);\n    _defineProperty(this, \"_loadableURL\", '');\n    const {\n      name,\n      source,\n      url\n    } = props;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = error => console.log(error);\n\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  destroy() {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  }\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  postMessage(data, transferList) {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  }\n\n  _getErrorFromErrorEvent(event) {\n    let message = 'Failed to load ';\n    message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n    if (event.message) {\n      message += \"\".concat(event.message, \" in \");\n    }\n    if (event.lineno) {\n      message += \":\".concat(event.lineno, \":\").concat(event.colno);\n    }\n    return new Error(message);\n  }\n\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    const worker = new Worker(this._loadableURL, {\n      name: this.name\n    });\n    worker.onmessage = event => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    worker.onerror = error => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    worker.onmessageerror = event => console.error(event);\n\n    return worker;\n  }\n\n  _createNodeWorker() {\n    let worker;\n    if (this.url) {\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : \"./\".concat(this.url);\n      worker = new NodeWorker(url, {\n        eval: false\n      });\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {\n        eval: true\n      });\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', data => {\n      this.onMessage(data);\n    });\n    worker.on('error', error => {\n      this.onError(error);\n    });\n    worker.on('exit', code => {\n    });\n    return worker;\n  }\n}\n//# sourceMappingURL=worker-thread.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isMobile } from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\nexport default class WorkerPool {\n\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"name\", 'unnamed');\n    _defineProperty(this, \"source\", void 0);\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"maxConcurrency\", 1);\n    _defineProperty(this, \"maxMobileConcurrency\", 1);\n    _defineProperty(this, \"onDebug\", () => {});\n    _defineProperty(this, \"reuseWorkers\", true);\n    _defineProperty(this, \"props\", {});\n    _defineProperty(this, \"jobQueue\", []);\n    _defineProperty(this, \"idleQueue\", []);\n    _defineProperty(this, \"count\", 0);\n    _defineProperty(this, \"isDestroyed\", false);\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  destroy() {\n    this.idleQueue.forEach(worker => worker.destroy());\n    this.isDestroyed = true;\n  }\n  setProps(props) {\n    this.props = {\n      ...this.props,\n      ...props\n    };\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n  async startJob(name) {\n    let onMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (job, type, data) => job.done(data);\n    let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (job, error) => job.error(error);\n    const startPromise = new Promise(onStart => {\n      this.jobQueue.push({\n        name,\n        onMessage,\n        onError,\n        onStart\n      });\n      return this;\n    });\n    this._startQueuedJob();\n    return await startPromise;\n  }\n\n  async _startQueuedJob() {\n    if (!this.jobQueue.length) {\n      return;\n    }\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      workerThread.onMessage = data => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = error => queuedJob.onError(job, error);\n\n      queuedJob.onStart(job);\n\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  returnWorkerToQueue(worker) {\n    const shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n    if (!this.isDestroyed) {\n      this._startQueuedJob();\n    }\n  }\n\n  _getAvailableWorker() {\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = \"\".concat(this.name.toLowerCase(), \" (#\").concat(this.count, \" of \").concat(this.maxConcurrency, \")\");\n      return new WorkerThread({\n        name,\n        source: this.source,\n        url: this.url\n      });\n    }\n\n    return null;\n  }\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n//# sourceMappingURL=worker-pool.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\nconst DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\nexport default class WorkerFarm {\n\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  static getWorkerFarm() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"workerPools\", new Map());\n    this.props = {\n      ...DEFAULT_PROPS\n    };\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  destroy() {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map();\n  }\n\n  setProps(props) {\n    this.props = {\n      ...this.props,\n      ...props\n    };\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  getWorkerPool(options) {\n    const {\n      name,\n      source,\n      url\n    } = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);\n//# sourceMappingURL=worker-farm.js.map","\n\nimport { assert } from '../env-utils/assert';\nimport { VERSION as __VERSION__ } from '../env-utils/version';\nconst NPM_TAG = 'latest';\nconst VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : NPM_TAG;\n\nexport function getWorkerName(worker) {\n  const warning = worker.version !== VERSION ? \" (worker-utils@\".concat(VERSION, \")\") : '';\n  return \"\".concat(worker.name, \"@\").concat(worker.version).concat(warning);\n}\n\nexport function getWorkerURL(worker) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const workerOptions = options[worker.id] || {};\n  const workerFile = \"\".concat(worker.id, \"-worker.js\");\n  let url = workerOptions.workerUrl;\n\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  if (options._workerType === 'test') {\n    url = \"modules/\".concat(worker.module, \"/dist/\").concat(workerFile);\n  }\n\n  if (!url) {\n    let version = worker.version;\n    if (version === 'latest') {\n      version = NPM_TAG;\n    }\n    const versionTag = version ? \"@\".concat(version) : '';\n    url = \"https://unpkg.com/@loaders.gl/\".concat(worker.module).concat(versionTag, \"/dist/\").concat(workerFile);\n  }\n  assert(url);\n\n  return url;\n}\n//# sourceMappingURL=get-worker-url.js.map","import WorkerFarm from '../worker-farm/worker-farm';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nimport { getTransferListForWriter } from '../worker-utils/get-transfer-list';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\n\nexport async function processOnWorker(worker, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const name = getWorkerName(worker);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {\n    source\n  } = options;\n  const workerPoolProps = {\n    name,\n    source\n  };\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName,\n  onMessage.bind(null, context));\n\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n      break;\n    default:\n      console.warn(\"process-on-worker: unknown message \".concat(type));\n  }\n}\n//# sourceMappingURL=process-on-worker.js.map","\nimport { global, isBrowser, isWorker } from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport { assert } from '../env-utils/assert';\nimport { VERSION as __VERSION__ } from '../env-utils/version';\n\nconst LATEST = 'latest';\nconst VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : LATEST;\nconst loadLibraryPromises = {};\n\nexport async function loadLibrary(libraryUrl) {\n  let moduleName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  loadLibraryPromises[libraryUrl] =\n  loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\nexport function getLibraryUrl(library, moduleName, options) {\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  if (!isBrowser) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(VERSION, \"/dist/libs/\").concat(library);\n  }\n\n  if (isWorker) {\n    return \"../src/libs/\".concat(library);\n  }\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n  if (!isBrowser) {\n    try {\n      return node && node.requireFromFile && (await node.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n  if (isWorker) {\n    eval.call(global, scriptSource);\n    return null;\n  }\n  const script = document.createElement('script');\n  script.id = id;\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n//# sourceMappingURL=library-utils.js.map","import { isBrowser } from '@loaders.gl/worker-utils';\nimport { WorkerFarm, getWorkerURL } from '@loaders.gl/worker-utils';\n\nexport function canParseWithWorker(loader, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  if (!isBrowser && !(options !== null && options !== void 0 && options._nodeWorkers)) {\n    return false;\n  }\n  return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\n\nexport async function parseWithWorker(loader, data, options, context, parseOnMainThread) {\n  const name = loader.id;\n  const url = getWorkerURL(loader, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n  const job = await workerPool.startJob('process-on-worker',\n  onMessage.bind(null, parseOnMainThread));\n\n  job.postMessage('process', {\n    input: data,\n    options,\n    context\n  });\n  const result = await job.result;\n  return await result.result;\n}\n\nasync function onMessage(parseOnMainThread, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n      break;\n    default:\n      console.warn(\"parse-with-worker unknown message \".concat(type));\n  }\n}\n//# sourceMappingURL=parse-with-worker.js.map","\nexport function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {\n  byteLength = byteLength || arrayBuffer1.byteLength;\n  if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {\n    return false;\n  }\n  const array1 = new Uint8Array(arrayBuffer1);\n  const array2 = new Uint8Array(arrayBuffer2);\n  for (let i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function concatenateArrayBuffers() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  const sourceArrays = sources.map(source2 => source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2);\n\n  const byteLength = sourceArrays.reduce((length, typedArray) => length + typedArray.byteLength, 0);\n\n  const result = new Uint8Array(byteLength);\n\n  let offset = 0;\n  for (const sourceArray of sourceArrays) {\n    result.set(sourceArray, offset);\n    offset += sourceArray.byteLength;\n  }\n\n  return result.buffer;\n}\n\nexport function concatenateTypedArrays() {\n  for (var _len2 = arguments.length, typedArrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    typedArrays[_key2] = arguments[_key2];\n  }\n  const arrays = typedArrays;\n  const TypedArrayConstructor = arrays && arrays.length > 1 && arrays[0].constructor || null;\n  if (!TypedArrayConstructor) {\n    throw new Error('\"concatenateTypedArrays\" - incorrect quantity of arguments or arguments have incompatible data types');\n  }\n  const sumLength = arrays.reduce((acc, value) => acc + value.length, 0);\n  const result = new TypedArrayConstructor(sumLength);\n  let offset = 0;\n  for (const array of arrays) {\n    result.set(array, offset);\n    offset += array.length;\n  }\n  return result;\n}\n\nexport function sliceArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  const subArray = byteLength !== undefined ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength) : new Uint8Array(arrayBuffer).subarray(byteOffset);\n  const arrayCopy = new Uint8Array(subArray);\n  return arrayCopy.buffer;\n}\n//# sourceMappingURL=array-buffer-utils.js.map","\n\nlet pathPrefix = '';\nconst fileAliases = {};\n\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nexport function getPathPrefix() {\n  return pathPrefix;\n}\n\nexport function addAliases(aliases) {\n  Object.assign(fileAliases, aliases);\n}\n\nexport function resolvePath(filename) {\n  for (const alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      const replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = \"\".concat(pathPrefix).concat(filename);\n  }\n  return filename;\n}\n//# sourceMappingURL=file-aliases.js.map","\n\nimport * as node from '../node/buffer';\n\nexport function isBuffer(value) {\n  return value && typeof value === 'object' && value.isBuffer;\n}\n\nexport function toBuffer(data) {\n  return node.toBuffer ? node.toBuffer(data) : data;\n}\n\nexport function toArrayBuffer(data) {\n  if (isBuffer(data)) {\n    return node.toArrayBuffer(data);\n  }\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n      return data.buffer;\n    }\n    return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n  }\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  if (data && typeof data === 'object' && data._toArrayBuffer) {\n    return data._toArrayBuffer();\n  }\n  throw new Error('toArrayBuffer');\n}\n//# sourceMappingURL=memory-conversion-utils.js.map","\nexport const VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : 'beta';\n//# sourceMappingURL=version.js.map","\nconst VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : 'beta';\n\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nconst BASIS_CDN_ENCODER_WASM = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.wasm\");\nconst BASIS_CDN_ENCODER_JS = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.js\");\nlet loadBasisTranscoderPromise;\n\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n  [BASIS, wasmBinary] = await Promise.all([await loadLibrary('basis_transcoder.js', 'textures', options), await loadLibrary('basis_transcoder.wasm', 'textures', options)]);\n\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    BasisModule(options).then(module => {\n      const {\n        BasisFile,\n        initializeBasis\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile\n      });\n    });\n  });\n}\nlet loadBasisEncoderPromise;\n\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options), await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)]);\n\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    BasisEncoderModule(options).then(module => {\n      const {\n        BasisFile,\n        KTX2File,\n        initializeBasis,\n        BasisEncoder\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile,\n        KTX2File,\n        BasisEncoder\n      });\n    });\n  });\n}\n//# sourceMappingURL=basis-module-loader.js.map","import { VERSION } from './lib/utils/version';\nimport { encodeKTX2BasisTexture } from './lib/encoders/encode-ktx2-basis-texture';\n\nexport const KTX2BasisWriter = {\n  name: 'Basis Universal Supercompressed GPU Texture',\n  id: 'ktx2-basis-writer',\n  module: 'textures',\n  version: VERSION,\n  extensions: ['ktx2'],\n  options: {\n    useSRGB: false,\n    qualityLevel: 10,\n    encodeUASTC: false,\n    mipmaps: false\n  },\n  encode: encodeKTX2BasisTexture\n};\n\nexport const _TypecheckKTX2TextureWriter = KTX2BasisWriter;\n//# sourceMappingURL=ktx2-basis-writer.js.map","import { loadBasisEncoderModule } from '../parsers/basis-module-loader';\n\nexport async function encodeKTX2BasisTexture(image) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    useSRGB = false,\n    qualityLevel = 10,\n    encodeUASTC = false,\n    mipmaps = false\n  } = options;\n  const {\n    BasisEncoder\n  } = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n//# sourceMappingURL=encode-ktx2-basis-texture.js.map","import { isBrowser } from '@loaders.gl/loader-utils';\nconst {\n  _parseImageNode\n} = globalThis;\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined';\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\n\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n    default:\n      throw new Error(\"@loaders.gl/images: image \".concat(type, \" not supported in this environment\"));\n  }\n}\n\nexport function getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}\n//# sourceMappingURL=image-type.js.map","\n\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\nexport function isSVG(url) {\n  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}\nexport function getBlobOrSVGDataUrl(arrayBuffer, url) {\n  if (isSVG(url)) {\n    const textDecoder = new TextDecoder();\n    let xmlText = textDecoder.decode(arrayBuffer);\n    try {\n      if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') {\n        xmlText = unescape(encodeURIComponent(xmlText));\n      }\n    } catch (error) {\n      throw new Error(error.message);\n    }\n    const src = \"data:image/svg+xml;base64,\".concat(btoa(xmlText));\n    return src;\n  }\n  return getBlob(arrayBuffer, url);\n}\nexport function getBlob(arrayBuffer, url) {\n  if (isSVG(url)) {\n    throw new Error('SVG cannot be parsed directly to imagebitmap');\n  }\n  return new Blob([new Uint8Array(arrayBuffer)]);\n}\n//# sourceMappingURL=svg-utils.js.map","import { getBlobOrSVGDataUrl } from './svg-utils';\n\nexport default async function parseToImage(arrayBuffer, options, url) {\n\n  const blobOrDataUrl = getBlobOrSVGDataUrl(arrayBuffer, url);\n  const URL = self.URL || self.webkitURL;\n  const objectUrl = typeof blobOrDataUrl !== 'string' && URL.createObjectURL(blobOrDataUrl);\n  try {\n    return await loadToImage(objectUrl || blobOrDataUrl, options);\n  } finally {\n    if (objectUrl) {\n      URL.revokeObjectURL(objectUrl);\n    }\n  }\n}\nexport async function loadToImage(url, options) {\n  const image = new Image();\n  image.src = url;\n\n  if (options.image && options.image.decode && image.decode) {\n    await image.decode();\n    return image;\n  }\n\n  return await new Promise((resolve, reject) => {\n    try {\n      image.onload = () => resolve(image);\n      image.onerror = err => reject(new Error(\"Could not load image \".concat(url, \": \").concat(err)));\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n//# sourceMappingURL=parse-to-image.js.map","import { isSVG, getBlob } from './svg-utils';\nimport parseToImage from './parse-to-image';\nconst EMPTY_OBJECT = {};\nlet imagebitmapOptionsSupported = true;\n\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  if (isSVG(url)) {\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    blob = getBlob(arrayBuffer, url);\n  }\n  const imagebitmapOptions = options && options.imagebitmap;\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\nasync function safeCreateImageBitmap(blob) {\n  let imagebitmapOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n  if (imagebitmapOptions) {\n    try {\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error);\n      imagebitmapOptionsSupported = false;\n    }\n  }\n  return await createImageBitmap(blob);\n}\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n//# sourceMappingURL=parse-to-image-bitmap.js.map","\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nexport function getBinaryImageMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView);\n}\n\nfunction getPngMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n  if (!isPng) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/png',\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\nfunction getGifMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n  if (!isGif) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/gif',\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\nexport function getBmpMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 0x424d && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n  if (!isBmp) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/bmp',\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\nfunction getJpegMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 && dataView.getUint8(2) === 0xff;\n  if (!isJpeg) {\n    return null;\n  }\n  const {\n    tableMarkers,\n    sofMarkers\n  } = getJpegMarkers();\n\n  let i = 2;\n  while (i + 9 < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    if (sofMarkers.has(marker)) {\n      return {\n        mimeType: 'image/jpeg',\n        height: dataView.getUint16(i + 5, BIG_ENDIAN),\n        width: dataView.getUint16(i + 7, BIG_ENDIAN)\n      };\n    }\n\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n  return null;\n}\nfunction getJpegMarkers() {\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  const sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);\n  return {\n    tableMarkers,\n    sofMarkers\n  };\n}\n\nfunction toDataView(data) {\n  if (data instanceof DataView) {\n    return data;\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data);\n  }\n  throw new Error('toDataView');\n}\n//# sourceMappingURL=binary-image-api.js.map","import { VERSION } from './lib/utils/version';\nimport parseImage from './lib/parsers/parse-image';\nimport { getBinaryImageMetadata } from './lib/category-api/binary-image-api';\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/vnd.microsoft.icon', 'image/svg+xml'];\nconst DEFAULT_IMAGE_LOADER_OPTIONS = {\n  image: {\n    type: 'auto',\n    decode: true\n  }\n};\n\nexport const ImageLoader = {\n  id: 'image',\n  module: 'images',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  tests: [arrayBuffer => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)))],\n  options: DEFAULT_IMAGE_LOADER_OPTIONS\n};\nexport const _typecheckImageLoader = ImageLoader;\n//# sourceMappingURL=image-loader.js.map","\nexport const VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : 'latest';\n//# sourceMappingURL=version.js.map","import { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  const imageType = imageOptions.type || 'auto';\n  const {\n    url\n  } = context || {};\n\n  const loadType = getLoadableImageType(imageType);\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n  return image;\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n//# sourceMappingURL=parse-image.js.map","import { assert } from '@loaders.gl/loader-utils';\nimport { getBinaryImageMetadata } from '../category-api/binary-image-api';\n\nexport default async function parseToNodeImage(arrayBuffer, options) {\n  const {\n    mimeType\n  } = getBinaryImageMetadata(arrayBuffer) || {};\n\n  const _parseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode);\n\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n//# sourceMappingURL=parse-to-node-image.js.map","export function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n  }\n}\n\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\nexport function getImageSize(image) {\n  return getImageData(image);\n}\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n    case 'image':\n    case 'imagebitmap':\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      if (!context) {\n        throw new Error('getImageData');\n      }\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      return context.getImageData(0, 0, image.width, image.height);\n    default:\n      throw new Error('getImageData');\n  }\n}\n\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n//# sourceMappingURL=parsed-image-api.js.map","var e=1e3,r=1001,a=1002,o=1003,p=1004,t=1004,v=1005,x=1005,b=1006,c=1007,d=1007,f=1008,g=1008,h=1009,i=1010,j=1011,k=1012,l=1013,m=1014,n=1015,q=1016,s=1017,u=1018,w=1020,y=1021,z=1022,A=1023,B=1024,C=1025,D=1026,E=1027,F=1028,G=1029,H=1030,I=1031,J=1033,K=33776,L=33777,M=33778,N=33779,O=35840,P=35841,Q=35842,R=35843,S=36196,T=37492,U=37496,V=37808,W=37809,X=37810,Y=37811,Z=37812,$=37813,_=37814,ee=37815,re=37816,ae=37817,oe=37818,pe=37819,te=37820,ve=37821,xe=36492,be=3e3,ce=3001,de=1e4,fe=10001,ge=10002,he=2e4,ie=20001,je=20002,ke=20003,le=20004,me=3e4,ne=300001,qe=4e5,se=400001,ue=400002,we=400003,ye=400004,ze=400005,Ae=5e5,Be=500001,Ce=500002,De=500003;export{y as AlphaFormat,i as ByteType,se as CentimetersUnit,r as ClampToEdgeWrapping,De as CustomProjectionType,D as DepthFormat,E as DepthStencilFormat,ne as FastRender,ye as FeetUnit,n as FloatType,Ce as FrustumProjectionType,de as GIFMediaType,q as HalfFloatType,ze as InchesUnit,l as IntType,fe as JPEGMediaType,be as LinearEncoding,b as LinearFilter,g as LinearMipMapLinearFilter,d as LinearMipMapNearestFilter,f as LinearMipmapLinearFilter,c as LinearMipmapNearestFilter,ie as LinesPrimitive,C as LuminanceAlphaFormat,B as LuminanceFormat,qe as MetersUnit,ue as MillimetersUnit,a as MirroredRepeatWrapping,o as NearestFilter,x as NearestMipMapLinearFilter,p as NearestMipMapNearestFilter,v as NearestMipmapLinearFilter,t as NearestMipmapNearestFilter,Be as OrthoProjectionType,ge as PNGMediaType,Ae as PerspectiveProjectionType,he as PointsPrimitive,me as QualityRender,A as RGBAFormat,J as RGBAIntegerFormat,pe as RGBA_ASTC_10x10_Format,re as RGBA_ASTC_10x5_Format,ae as RGBA_ASTC_10x6_Format,oe as RGBA_ASTC_10x8_Format,te as RGBA_ASTC_12x10_Format,ve as RGBA_ASTC_12x12_Format,V as RGBA_ASTC_4x4_Format,W as RGBA_ASTC_5x4_Format,X as RGBA_ASTC_5x5_Format,Y as RGBA_ASTC_6x5_Format,Z as RGBA_ASTC_6x6_Format,$ as RGBA_ASTC_8x5_Format,_ as RGBA_ASTC_8x6_Format,ee as RGBA_ASTC_8x8_Format,xe as RGBA_BPTC_Format,U as RGBA_ETC2_EAC_Format,R as RGBA_PVRTC_2BPPV1_Format,Q as RGBA_PVRTC_4BPPV1_Format,L as RGBA_S3TC_DXT1_Format,M as RGBA_S3TC_DXT3_Format,N as RGBA_S3TC_DXT5_Format,z as RGBFormat,S as RGB_ETC1_Format,T as RGB_ETC2_Format,P as RGB_PVRTC_2BPPV1_Format,O as RGB_PVRTC_4BPPV1_Format,K as RGB_S3TC_DXT1_Format,H as RGFormat,I as RGIntegerFormat,F as RedFormat,G as RedIntegerFormat,e as RepeatWrapping,j as ShortType,ke as SolidPrimitive,le as SurfacePrimitive,je as TrianglesPrimitive,h as UnsignedByteType,w as UnsignedInt248Type,m as UnsignedIntType,s as UnsignedShort4444Type,u as UnsignedShort5551Type,k as UnsignedShortType,we as YardsUnit,ce as sRGBEncoding};\n//# sourceMappingURL=index.js.map\n","import{newFloatArray as n,clamp as t,DEGTORAD as r}from\"@xeokit/math\";var u=s(),a=M(),o=M(),i=M(),e=M(),c=M(),f=s();function v(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function h(n){return new FloatArrayClass(n||2)}function M(n){return new Float64Array(n||3)}function s(n){return new FloatArrayClass(n||4)}function l(n,t){return t||(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function d(n,t){return t||(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function q(n,t,r){return r||(r=n),r[0]=n[0]+t[0],r[1]=n[1]+t[1],r[2]=n[2]+t[2],r[3]=n[3]+t[3],r}function X(n,t,r){return r||(r=n),r[0]=n[0]+t,r[1]=n[1]+t,r[2]=n[2]+t,r[3]=n[3]+t,r}function Y(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r[2]=n[2]*t,r[3]=n[3]*t,r}function Z(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r[2]=n[2]*t,r}function b(n,t,r){return r||(r=n),r[0]=n[0]*t,r[1]=n[1]*t,r}function g(n,t,r){return r||(r=n),r[0]=n[0]+t[0],r[1]=n[1]+t[1],r[2]=n[2]+t[2],r}function y(n,t,r){return r||(r=n),r[0]=n[0]+t,r[1]=n[1]+t,r[2]=n[2]+t,r}function w(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r[2]=n[2]-t[2],r[3]=n[3]-t[3],r}function A(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]}function p(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r[2]=n[2]-t[2],r}function F(n,t,r){return r||(r=n),r[0]=n[0]-t[0],r[1]=n[1]-t[1],r}function m(){for(var n=[].slice.call(arguments),t=new Float32Array(n[0]),r=1;r<n.length;r++)t[0]+=n[r][0],t[1]+=n[r][1];return t[0]/=n.length,t[1]/=n.length,t}function x(n,t,r){return r||(r=n),r[0]=n[0]-t,r[1]=n[1]-t,r[2]=n[2]-t,r[3]=n[3]-t,r}function C(n,t,r){return r||(r=n),r[0]=t-n[0],r[1]=t-n[1],r[2]=t-n[2],r[3]=t-n[3],r}function k(n,t,r){return r||(r=n),r[0]=n[0]*t[0],r[1]=n[1]*t[1],r[2]=n[2]*t[2],r[3]=n[3]*t[3],r}function j(n,t,r){return r||(r=n),r[0]=n[0]/t[0],r[1]=n[1]/t[1],r[2]=n[2]/t[2],r}function z(n,t,r){return r||(r=n),r[0]=n[0]/t[0],r[1]=n[1]/t[1],r[2]=n[2]/t[2],r[3]=n[3]/t[3],r}function B(n,t,r){return r||(r=t),r[0]=n/t[0],r[1]=n/t[1],r[2]=n/t[2],r}function D(n,t,r){return r||(r=n),r[0]=n[0]/t,r[1]=n[1]/t,r[2]=n[2]/t,r}function E(n,t,r){return r||(r=n),r[0]=n[0]/t,r[1]=n[1]/t,r[2]=n[2]/t,r[3]=n[3]/t,r}function G(n,t,r){return r||(r=t),r[0]=n/t[0],r[1]=n/t[1],r[2]=n/t[2],r[3]=n/t[3],r}function H(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function I(n,t){var r=n[0],u=n[1],a=n[2],o=t[0],i=t[1],e=t[2];return[u*e-a*i,a*o-r*e,r*i-u*o,0]}function J(n,t,r){r||(r=n);var u=n[0],a=n[1],o=n[2],i=t[0],e=t[1],c=t[2];return r[0]=a*c-o*e,r[1]=o*i-u*c,r[2]=u*e-a*i,r}function K(n){return H(n,n)}function L(n){return Math.sqrt(K(n))}function N(n,t){return n[0]*t[0]+n[1]*t[1]}function O(n){return v(n,n)}function P(n){return N(n,n)}function Q(n){return Math.sqrt(O(n))}var R,S=(R=M(),function(n,t){return Q(p(n,t,R))});function T(n){return Math.sqrt(P(n))}function U(n,t,r,u,a,o){var i=o||M(),e=(n-t)/(r-t);return i[0]=u[0]+e*(a[0]-u[0]),i[1]=u[1]+e*(a[1]-u[1]),i[2]=u[2]+e*(a[2]-u[2]),i}var V=function(){var n=h();return function(t,r){return T(F(t,r,n))}}();function W(n,t){return B(1,n,t)}function $(n,t){return Y(n,1/L(n),t)}function _(n,t){return Z(n,1/Q(n),t)}function nn(n,t){return b(n,1/T(n),t)}function tn(n,t){var r=v(n,t)/Math.sqrt(O(n)*O(t));return r=r<-1?-1:r>1?1:r,Math.acos(r)}var rn=function(){var n=M();return function(t,r){return n[0]=t[0],n[1]=t[1],n[2]=t[2],r[0]=Q(n),n[0]=t[4],n[1]=t[5],n[2]=t[6],r[1]=Q(n),n[0]=t[8],n[1]=t[9],n[2]=t[10],r[2]=Q(n),r}}();function un(n){for(var t=0,r=(n=Array.prototype.slice.call(n)).length;t<r;t++)n[t]=an(n[t]);return n}function an(n){return Math.round(1e5*n)/1e5}function on(n,t,r,u){void 0===u&&(u=M());var a=t[0]-n[0],o=t[1]-n[1],i=t[2]-n[2],e=r[0]-n[0],c=r[1]-n[1],f=r[2]-n[2],v=o*f-i*c,h=i*e-a*f,s=a*c-o*e,l=Math.sqrt(v*v+h*h+s*s);return 0===l?(u[0]=0,u[1]=0,u[2]=0):(u[0]=v/l,u[1]=h/l,u[2]=s/l),u}function en(t){return new n(t||9)}function cn(t){return n(t||16)}var fn=cn(),vn=cn();function hn(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]&&n[6]===t[6]&&n[7]===t[7]&&n[8]===t[8]&&n[9]===t[9]&&n[10]===t[10]&&n[11]===t[11]&&n[12]===t[12]&&n[13]===t[13]&&n[14]===t[14]&&n[15]===t[15]}function Mn(n,t,r,u,a){var o=[],i=[];return o[2]=r,i[2]=u,i[1]=o[2]*Math.tan(n/2),o[1]=-i[1],i[0]=i[1]*t,o[0]=-i[0],sn(o,i,a)}function sn(n,t,r){r||(r=cn());var u=[n[0],n[1],n[2],0],a=[t[0],t[1],t[2],0];q(a,u,fn),w(a,u,vn);var o=2*u[2],i=vn[0],e=vn[1],c=vn[2];return r[0]=o/i,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=o/e,r[6]=0,r[7]=0,r[8]=fn[0]/i,r[9]=fn[1]/e,r[10]=-fn[2]/c,r[11]=-1,r[12]=0,r[13]=0,r[14]=-o*a[2]/c,r[15]=0,r}function ln(n,t,r,u,a,o,i){i||(i=cn());var e=t-n,c=u-r,f=o-a;return i[0]=2/e,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2/c,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-2/f,i[11]=0,i[12]=-(n+t)/e,i[13]=-(u+r)/c,i[14]=-(o+a)/f,i[15]=1,i}function dn(n,t,r,u,a,o,i){i||(i=cn());var e=t-n,c=u-r,f=o-a;return i[0]=2*a/e,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*a/c,i[6]=0,i[7]=0,i[8]=(t+n)/e,i[9]=(u+r)/c,i[10]=-(o+a)/f,i[11]=-1,i[12]=0,i[13]=0,i[14]=-o*a*2/f,i[15]=0,i}function qn(n){return n||(n=cn()),n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Xn(n){return n||(n=cn()),n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Yn(n){return 1===n[0]&&0===n[1]&&0===n[2]&&0===n[3]&&0===n[4]&&1===n[5]&&0===n[6]&&0===n[7]&&0===n[8]&&0===n[9]&&1===n[10]&&0===n[11]&&0===n[12]&&0===n[13]&&0===n[14]&&1===n[15]}function Zn(n,t,r){r||(r=cn());var u,a,o,i,e,c,f=$([t[0],t[1],t[2],0],[]),v=Math.sin(n),h=Math.cos(n),M=1-h,s=f[0],l=f[1],d=f[2];return u=s*l,a=l*d,o=d*s,i=s*v,e=l*v,c=d*v,r[0]=M*s*s+h,r[1]=M*u+c,r[2]=M*o-e,r[3]=0,r[4]=M*u-c,r[5]=M*l*l+h,r[6]=M*a+i,r[7]=0,r[8]=M*o+e,r[9]=M*a-i,r[10]=M*d*d+h,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}function bn(n,t,r,u){u||(u=cn());var a,o,i,e,c,f,v,h,M,s,l=n[0],d=n[1],q=n[2],X=r[0],Y=r[1],Z=r[2],b=t[0],g=t[1],y=t[2];return l===b&&d===g&&q===y?qn():(a=l-b,o=d-g,i=q-y,e=Y*(i*=s=1/Math.sqrt(a*a+o*o+i*i))-Z*(o*=s),c=Z*(a*=s)-X*i,f=X*o-Y*a,(s=Math.sqrt(e*e+c*c+f*f))?(e*=s=1/s,c*=s,f*=s):(e=0,c=0,f=0),v=o*f-i*c,h=i*e-a*f,M=a*c-o*e,(s=Math.sqrt(v*v+h*h+M*M))?(v*=s=1/s,h*=s,M*=s):(v=0,h=0,M=0),u[0]=e,u[1]=v,u[2]=a,u[3]=0,u[4]=c,u[5]=h,u[6]=o,u[7]=0,u[8]=f,u[9]=M,u[10]=i,u[11]=0,u[12]=-(e*l+c*d+f*q),u[13]=-(v*l+h*d+M*q),u[14]=-(a*l+o*d+i*q),u[15]=1,u)}function gn(n,t){t||(t=n);var r=n[0],u=n[1],a=n[2],o=n[3],i=n[4],e=n[5],c=n[6],f=n[7],v=n[8],h=n[9],M=n[10],s=n[11],l=n[12],d=n[13],q=n[14],X=n[15],Y=r*e-u*i,Z=r*c-a*i,b=r*f-o*i,g=u*c-a*e,y=u*f-o*e,w=a*f-o*c,A=v*d-h*l,p=v*q-M*l,F=v*X-s*l,m=h*q-M*d,x=h*X-s*d,C=M*X-s*q,k=1/(Y*C-Z*x+b*m+g*F-y*p+w*A);return t[0]=(e*C-c*x+f*m)*k,t[1]=(-u*C+a*x-o*m)*k,t[2]=(d*w-q*y+X*g)*k,t[3]=(-h*w+M*y-s*g)*k,t[4]=(-i*C+c*F-f*p)*k,t[5]=(r*C-a*F+o*p)*k,t[6]=(-l*w+q*b-X*Z)*k,t[7]=(v*w-M*b+s*Z)*k,t[8]=(i*x-e*F+f*A)*k,t[9]=(-r*x+u*F-o*A)*k,t[10]=(l*y-d*b+X*Y)*k,t[11]=(-v*y+h*b-s*Y)*k,t[12]=(-i*m+e*p-c*A)*k,t[13]=(r*m-u*p+a*A)*k,t[14]=(-l*g+d*Z-q*Y)*k,t[15]=(v*g-h*Z+M*Y)*k,t}function yn(n,t){var r=n[4],u=n[14],a=n[8],o=n[13],i=n[12],e=n[9];if(!t||n===t){var c=n[1],f=n[2],v=n[3],h=n[6],M=n[7],s=n[11];return n[1]=r,n[2]=a,n[3]=i,n[4]=c,n[6]=e,n[7]=o,n[8]=f,n[9]=h,n[11]=u,n[12]=v,n[13]=M,n[14]=s,n}return t[0]=n[0],t[1]=r,t[2]=a,t[3]=i,t[4]=n[1],t[5]=n[5],t[6]=e,t[7]=o,t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=u,t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15],t}function wn(n,t,r){r||(r=n);var u=t[0],a=t[1],o=t[2],i=t[3];return r[0]=n[0]*u+n[4]*a+n[8]*o+n[12]*i,r[1]=n[1]*u+n[5]*a+n[9]*o+n[13]*i,r[2]=n[2]*u+n[6]*a+n[10]*o+n[14]*i,r[3]=n[3]*u+n[7]*a+n[11]*o+n[15]*i,r}function An(n,t,r){r||(r=n);var u=n[0],a=n[1],o=n[2],i=n[3],e=n[4],c=n[5],f=n[6],v=n[7],h=n[8],M=n[9],s=n[10],l=n[11],d=n[12],q=n[13],X=n[14],Y=n[15],Z=t[0],b=t[1],g=t[2],y=t[3],w=t[4],A=t[5],p=t[6],F=t[7],m=t[8],x=t[9],C=t[10],k=t[11],j=t[12],z=t[13],B=t[14],D=t[15];return r[0]=Z*u+b*e+g*h+y*d,r[1]=Z*a+b*c+g*M+y*q,r[2]=Z*o+b*f+g*s+y*X,r[3]=Z*i+b*v+g*l+y*Y,r[4]=w*u+A*e+p*h+F*d,r[5]=w*a+A*c+p*M+F*q,r[6]=w*o+A*f+p*s+F*X,r[7]=w*i+A*v+p*l+F*Y,r[8]=m*u+x*e+C*h+k*d,r[9]=m*a+x*c+C*M+k*q,r[10]=m*o+x*f+C*s+k*X,r[11]=m*i+x*v+C*l+k*Y,r[12]=j*u+z*e+B*h+D*d,r[13]=j*a+z*c+B*M+D*q,r[14]=j*o+z*f+B*s+D*X,r[15]=j*i+z*v+B*l+D*Y,r}function pn(t,r,u){void 0===u&&(u=n(9));var a=t[0],o=t[3],i=t[6],e=t[1],c=t[4],f=t[7],v=t[2],h=t[5],M=t[8],s=r[0],l=r[3],d=r[6],q=r[1],X=r[4],Y=r[7],Z=r[2],b=r[5],g=r[8];return u[0]=a*s+o*q+i*Z,u[3]=a*l+o*X+i*b,u[6]=a*d+o*Y+i*g,u[1]=e*s+c*q+f*Z,u[4]=e*l+c*X+f*b,u[7]=e*d+c*Y+f*g,u[2]=v*s+h*q+M*Z,u[5]=v*l+h*X+M*b,u[8]=v*d+h*Y+M*g,u}function Fn(n,t,r){r||(r=t);var u=t[0],a=t[1],o=t[2];return r[0]=n[0]*u+n[4]*a+n[8]*o+n[12],r[1]=n[1]*u+n[5]*a+n[9]*o+n[13],r[2]=n[2]*u+n[6]*a+n[10]*o+n[14],r}function mn(n,t,r){return r[0]=n[0]*t[0]+n[4]*t[1]+n[8]*t[2]+n[12]*t[3],r[1]=n[1]*t[0]+n[5]*t[1]+n[9]*t[2]+n[13]*t[3],r[2]=n[2]*t[0]+n[6]*t[1]+n[10]*t[2]+n[14]*t[3],r[3]=n[3]*t[0]+n[7]*t[1]+n[11]*t[2]+n[15]*t[3],r}function xn(n,t,r){for(var u,a,o,i,e,c=r||[],f=t.length,v=n[0],h=n[1],M=n[2],s=n[3],l=n[4],d=n[5],q=n[6],X=n[7],Y=n[8],Z=n[9],b=n[10],g=n[11],y=n[12],w=n[13],A=n[14],p=n[15],F=0;F<f;++F)u=(i=t[F])[0],a=i[1],o=i[2],(e=c[F]||(c[F]=[0,0,0]))[0]=v*u+l*a+Y*o+y,e[1]=h*u+d*a+Z*o+w,e[2]=M*u+q*a+b*o+A,e[3]=s*u+X*a+g*o+p;return c.length=f,c}function Cn(n,t,r){var u;r||(r=t);var a,o,i,e=t.length,c=n[0],f=n[1],v=n[2],h=n[3],M=n[4],s=n[5],l=n[6],d=n[7],q=n[8],X=n[9],Y=n[10],Z=n[11],b=n[12],g=n[13],y=n[14],w=n[15];for(u=0;u<e;u+=3)r[u+0]=c*(a=t[u+0])+M*(o=t[u+1])+q*(i=t[u+2])+b,r[u+1]=f*a+s*o+X*i+g,r[u+2]=v*a+l*o+Y*i+y,r[u+3]=h*a+d*o+Z*i+w;return r}function kn(n,t,r){var u;r||(r=t);var a,o,i,e=t.length,c=n[0],f=n[1],v=n[2],h=n[3],M=n[4],s=n[5],l=n[6],d=n[7],q=n[8],X=n[9],Y=n[10],Z=n[11],b=n[12],g=n[13],y=n[14],w=n[15];for(u=0;u<e;u+=4)r[u+0]=c*(a=t[u+0])+M*(o=t[u+1])+q*(i=t[u+2])+b,r[u+1]=f*a+s*o+X*i+g,r[u+2]=v*a+l*o+Y*i+y,r[u+3]=h*a+d*o+Z*i+w;return r}function jn(n,t,r){var u=t[0],a=t[1],o=t[2];return(r=r||M())[0]=n[0]*u+n[4]*a+n[8]*o,r[1]=n[1]*u+n[5]*a+n[9]*o,r[2]=n[2]*u+n[6]*a+n[10]*o,r}function zn(n,t,r){var u=t[0],a=t[1],o=t[2],i=t[3];return(r=r||s())[0]=n[0]*u+n[4]*a+n[8]*o+n[12]*i,r[1]=n[1]*u+n[5]*a+n[9]*o+n[13]*i,r[2]=n[2]*u+n[6]*a+n[10]*o+n[14]*i,r[3]=n[3]*u+n[7]*a+n[11]*o+n[15]*i,r}function Bn(n,t){void 0===t&&(t=qn());var r=n[0],u=n[1],a=n[2];return t[0]*=r,t[4]*=u,t[8]*=a,t[1]*=r,t[5]*=u,t[9]*=a,t[2]*=r,t[6]*=u,t[10]*=a,t[3]*=r,t[7]*=u,t[11]*=a,t}function Dn(n,t){return void 0===t&&(t=qn()),t[0]=n[0],t[5]=n[1],t[10]=n[2],t}function En(n,t){return void 0===t&&(t=Xn()),t[0]=n[0],t[4]=n[1],t}var Gn,Hn=(Gn=n(3),function(n,t,r,u){return Gn[0]=n,Gn[1]=t,Gn[2]=r,Dn(Gn,u)});function In(n,t,r,u){return u[0]*=n,u[4]*=t,u[8]*=r,u[1]*=n,u[5]*=t,u[9]*=r,u[2]*=n,u[6]*=t,u[10]*=r,u[3]*=n,u[7]*=t,u[11]*=r,u}function Jn(n){return Hn(n,n,n)}function Kn(n,t,r,u){return void 0===u&&(u=cn()),et(t,u),Bn(r,u),Nn(n,u),u}var Ln=function(){var n=M(),t=cn();return function(r,u,a,o){n[0]=r[0],n[1]=r[1],n[2]=r[2];var i=Q(n);n[0]=r[4],n[1]=r[5],n[2]=r[6];var e=Q(n);n[8]=r[8],n[9]=r[9],n[10]=r[10];var c=Q(n);Un(r)<0&&(i=-i),u[0]=r[12],u[1]=r[13],u[2]=r[14],t.set(r);var f=1/i,v=1/e,h=1/c;t[0]*=f,t[1]*=f,t[2]*=f,t[4]*=v,t[5]*=v,t[6]*=v,t[8]*=h,t[9]*=h,t[10]*=h,nt(t,a),o[0]=i,o[1]=e,o[2]=c}}();function Nn(n,t){return void 0===t&&(t=qn()),On(n[0],n[1],n[2],t)}function On(n,t,r,u){void 0===u&&(u=qn());var a=u[3];u[0]+=a*n,u[1]+=a*t,u[2]+=a*r;var o=u[7];u[4]+=o*n,u[5]+=o*t,u[6]+=o*r;var i=u[11];u[8]+=i*n,u[9]+=i*t,u[10]+=i*r;var e=u[15];return u[12]+=e*n,u[13]+=e*t,u[14]+=e*r,u}function Pn(n,t,r){return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=n[15],r}function Qn(n,t){var r=t||qn();return r[12]=n[0],r[13]=n[1],r[14]=n[2],r}function Rn(n,t){var r=t||Xn();return r[6]=n[0],r[7]=n[1],r}var Sn=function(){var t=n(3);return function(n,r,u,a){return t[0]=n,t[1]=r,t[2]=u,Qn(t,a)}}();function Tn(n,t){return Sn(n,n,n,t)}function Un(n){var t=n[0],r=n[1],u=n[2],a=n[3],o=n[4],i=n[5],e=n[6],c=n[7],f=n[8],v=n[9],h=n[10],M=n[11],s=n[12],l=n[13],d=n[14],q=n[15];return s*v*e*a-f*l*e*a-s*i*h*a+o*l*h*a+f*i*d*a-o*v*d*a-s*v*u*c+f*l*u*c+s*r*h*c-t*l*h*c-f*r*d*c+t*v*d*c+s*i*u*M-o*l*u*M-s*r*e*M+t*l*e*M+o*r*d*M-t*i*d*M-f*i*u*q+o*v*u*q+f*r*e*q-t*v*e*q-o*r*h*q+t*i*h*q}function Vn(n,r,u){void 0===u&&(u=M());var a=n[0],o=n[4],i=n[8],e=n[1],c=n[5],f=n[9],v=n[2],h=n[6],s=n[10];return\"XYZ\"===r?(u[1]=Math.asin(t(i,-1,1)),Math.abs(i)<.99999?(u[0]=Math.atan2(-f,s),u[2]=Math.atan2(-o,a)):(u[0]=Math.atan2(h,c),u[2]=0)):\"YXZ\"===r?(u[0]=Math.asin(-t(f,-1,1)),Math.abs(f)<.99999?(u[1]=Math.atan2(i,s),u[2]=Math.atan2(e,c)):(u[1]=Math.atan2(-v,a),u[2]=0)):\"ZXY\"===r?(u[0]=Math.asin(t(h,-1,1)),Math.abs(h)<.99999?(u[1]=Math.atan2(-v,s),u[2]=Math.atan2(-o,c)):(u[1]=0,u[2]=Math.atan2(e,a))):\"ZYX\"===r?(u[1]=Math.asin(-t(v,-1,1)),Math.abs(v)<.99999?(u[0]=Math.atan2(h,s),u[2]=Math.atan2(e,a)):(u[0]=0,u[2]=Math.atan2(-o,c))):\"YZX\"===r?(u[2]=Math.asin(t(e,-1,1)),Math.abs(e)<.99999?(u[0]=Math.atan2(-f,c),u[1]=Math.atan2(-v,a)):(u[0]=0,u[1]=Math.atan2(i,s))):\"XZY\"===r&&(u[2]=Math.asin(-t(o,-1,1)),Math.abs(o)<.99999?(u[0]=Math.atan2(h,c),u[1]=Math.atan2(i,a)):(u[0]=Math.atan2(-f,s),u[1]=0)),u}function Wn(n,t,r,u,a,o){var i=o||cn(),e=(n-t)/(r-t);return i[0]=u[0]+e*(a[0]-u[0]),i[1]=u[1]+e*(a[1]-u[1]),i[2]=u[2]+e*(a[2]-u[2]),i[3]=u[3]+e*(a[3]-u[3]),i[4]=u[4]+e*(a[4]-u[4]),i[5]=u[5]+e*(a[5]-u[5]),i[6]=u[6]+e*(a[6]-u[6]),i[7]=u[7]+e*(a[7]-u[7]),i[8]=u[8]+e*(a[8]-u[8]),i[9]=u[9]+e*(a[9]-u[9]),i[10]=u[10]+e*(a[10]-u[10]),i[11]=u[11]+e*(a[11]-u[11]),i[12]=u[12]+e*(a[12]-u[12]),i[13]=u[13]+e*(a[13]-u[13]),i[14]=u[14]+e*(a[14]-u[14]),i[15]=u[15]+e*(a[15]-u[15]),i}function $n(n){return void 0===n&&(n=s()),n[0]=0,n[1]=0,n[2]=0,n[3]=1,n}function _n(n,t,u){void 0===u&&(u=s());var a=n[0]*r/2,o=n[1]*r/2,i=n[2]*r/2,e=Math.cos(a),c=Math.cos(o),f=Math.cos(i),v=Math.sin(a),h=Math.sin(o),M=Math.sin(i);return\"XYZ\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f-v*h*M):\"YXZ\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f+v*h*M):\"ZXY\"===t?(u[0]=v*c*f-e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f-v*h*M):\"ZYX\"===t?(u[0]=v*c*f-e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f+v*h*M):\"YZX\"===t?(u[0]=v*c*f+e*h*M,u[1]=e*h*f+v*c*M,u[2]=e*c*M-v*h*f,u[3]=e*c*f-v*h*M):\"XZY\"===t&&(u[0]=v*c*f-e*h*M,u[1]=e*h*f-v*c*M,u[2]=e*c*M+v*h*f,u[3]=e*c*f+v*h*M),u}function nt(n,t){void 0===t&&(t=s());var r,u=n[0],a=n[4],o=n[8],i=n[1],e=n[5],c=n[9],f=n[2],v=n[6],h=n[10],M=u+e+h;return M>0?(r=.5/Math.sqrt(M+1),t[3]=.25/r,t[0]=(v-c)*r,t[1]=(o-f)*r,t[2]=(i-a)*r):u>e&&u>h?(r=2*Math.sqrt(1+u-e-h),t[3]=(v-c)/r,t[0]=.25*r,t[1]=(a+i)/r,t[2]=(o+f)/r):e>h?(r=2*Math.sqrt(1+e-u-h),t[3]=(o-f)/r,t[0]=(a+i)/r,t[1]=.25*r,t[2]=(c+v)/r):(r=2*Math.sqrt(1+h-u-e),t[3]=(i-a)/r,t[0]=(o+f)/r,t[1]=(c+v)/r,t[2]=.25*r),t}function tt(n,t,r){void 0===r&&(r=s());var u=Math.sqrt(v(n,n)*v(t,t)),a=u+v(n,t);return a<1e-8*u?(a=0,Math.abs(n[0])>Math.abs(n[2])?(r[0]=-n[1],r[1]=n[0],r[2]=0):(r[0]=0,r[1]=-n[2],r[2]=n[1])):J(n,t,r),r[3]=a,ct(r)}function rt(n,t){void 0===t&&(t=s());var r=n[3]/2,u=Math.sin(r);return t[0]=u*n[0],t[1]=u*n[1],t[2]=u*n[2],t[3]=Math.cos(r),t}function ut(n,t,r){return void 0===r&&(r=M()),et(n,fn),Vn(fn,t,r),r}function at(n,t,r){void 0===r&&(r=s());var u=n[0],a=n[1],o=n[2],i=n[3],e=t[0],c=t[1],f=t[2],v=t[3];return r[0]=i*e+u*v+a*f-o*c,r[1]=i*c+a*v+o*e-u*f,r[2]=i*f+o*v+u*c-a*e,r[3]=i*v-u*e-a*c-o*f,r}function ot(n,t,r){void 0===r&&(r=M());var u=t[0],a=t[1],o=t[2],i=n[0],e=n[1],c=n[2],f=n[3],v=f*u+e*o-c*a,h=f*a+c*u-i*o,s=f*o+i*a-e*u,l=-i*u-e*a-c*o;return r[0]=v*f+l*-i+h*-c-s*-e,r[1]=h*f+l*-e+s*-i-v*-c,r[2]=s*f+l*-c+v*-e-h*-i,r}function it(n,t){t=qn(t);var r=n[0],u=n[1],a=n[2],o=n[3],i=2*r,e=2*u,c=2*a,f=i*o,v=e*o,h=c*o,M=i*r,s=e*r,l=c*r,d=e*u,q=c*u,X=c*a;return t[0]=1-(d+X),t[1]=s+h,t[2]=l-v,t[4]=s-h,t[5]=1-(M+X),t[6]=q+f,t[8]=l+v,t[9]=q-f,t[10]=1-(M+d),t}function et(n,t){var r=n[0],u=n[1],a=n[2],o=n[3],i=r+r,e=u+u,c=a+a,f=r*i,v=r*e,h=r*c,M=u*e,s=u*c,l=a*c,d=o*i,q=o*e,X=o*c;return t[0]=1-(M+l),t[4]=v-X,t[8]=h+q,t[1]=v+X,t[5]=1-(f+l),t[9]=s-d,t[2]=h-q,t[6]=s+d,t[10]=1-(f+M),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ct(n,t){void 0===t&&(t=n);var r=L([n[0],n[1],n[2],n[3]]);return t[0]=n[0]/r,t[1]=n[1]/r,t[2]=n[2]/r,t[3]=n[3]/r,t}function ft(n,t){return void 0===t&&(t=n),t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function vt(n,t){return ct(ft(n,t))}function ht(n,t){void 0===t&&(t=s());var r=(n=ct(n,u))[3],a=2*Math.acos(r),o=Math.sqrt(1-r*r);return o<.001?(t[0]=n[0],t[1]=n[1],t[2]=n[2]):(t[0]=n[0]/o,t[1]=n[1]/o,t[2]=n[2]/o),t[3]=a,t}function Mt(n,t,r,u,f,h){h=h||M();var s=p(u,r,a),l=p(f,r,o),d=J(t,l,i),q=v(s,d);if(q<1e-6)return null;var X=p(n,r,e),Y=v(X,d);if(Y<0||Y>q)return null;var Z=J(X,s,c),b=v(t,Z);if(b<0||Y+b>q)return null;var g=v(l,Z)/q;return h[0]=n[0]+g*t[0],h[1]=n[1]+g*t[1],h[2]=n[2]+g*t[2],h}function st(n,t,r,a,o){u[0]=t[0],u[1]=t[1],u[2]=t[2],u[3]=1,zn(n,u,f),a[0]=f[0],a[1]=f[1],a[2]=f[2],u[0]=r[0],u[1]=r[1],u[2]=r[2],jn(n,u,f),_(f),o[0]=f[0],o[1]=f[1],o[2]=f[2]}export{g as addVec3,y as addVec3Scalar,q as addVec4,X as addVec4Scalar,rt as angleAxisToQuaternion,tn as angleVec3,hn as compareMat4,A as compareVec3,Kn as composeMat4,ft as conjugateQuat,en as createMat3,cn as createMat4,h as createVec2,M as createVec3,s as createVec4,J as cross3Vec3,I as cross3Vec4,Ln as decomposeMat4,Un as determinantMat4,V as distVec2,S as distVec3,B as divScalarVec3,G as divScalarVec4,j as divVec3,D as divVec3Scalar,z as divVec4,E as divVec4Scalar,N as dotVec2,v as dotVec3,H as dotVec4,_n as eulerToQuat,dn as frustumMat4,sn as frustumMat4v,m as geometricMeanVec2,Xn as identityMat3,qn as identityMat4,$n as identityQuat,gn as inverseMat4,vt as inverseQuat,Yn as isIdentityMat4,T as lenVec2,Q as lenVec3,L as lenVec4,Wn as lerpMat4,U as lerpVec3,bn as lookAtMat4v,Vn as mat4ToEuler,nt as mat4ToQuat,pn as mulMat3,An as mulMat4,wn as mulMat4v4,at as mulQuats,b as mulVec2Scalar,Z as mulVec3Scalar,k as mulVec4,Y as mulVec4Scalar,l as negateVec3,d as negateVec4,ct as normalizeQuat,nn as normalizeVec2,_ as normalizeVec3,$ as normalizeVec4,ln as orthoMat4c,Mn as perspectiveMat4,ht as quatToAngleAxis,ut as quatToEuler,it as quatToMat4,et as quatToRotationMat4,Mt as rayTriangleIntersect,W as rcpVec3,Zn as rotationMat4v,In as scaleMat4c,Bn as scaleMat4v,En as scalingMat3v,Hn as scalingMat4c,Jn as scalingMat4s,Dn as scalingMat4v,Pn as setMat4Translation,P as sqLenVec2,O as sqLenVec3,K as sqLenVec4,C as subScalarVec4,F as subVec2,p as subVec3,w as subVec4,x as subVec4Scalar,Fn as transformPoint3,mn as transformPoint4,xn as transformPoints3,Cn as transformPositions3,kn as transformPositions4,st as transformRay,jn as transformVec3,zn as transformVec4,On as translateMat4c,Nn as translateMat4v,Rn as translationMat3v,Sn as translationMat4c,Tn as translationMat4s,Qn as translationMat4v,yn as transposeMat4,on as triangleNormal,ot as vec3ApplyQuat,rn as vec3FromMat4Scale,tt as vec3PairToQuat,un as vecToArray};\n//# sourceMappingURL=index.js.map\n","/**\n * [![npm version](https://badge.fury.io/js/%40xeokit%2Fcompression.svg)](https://badge.fury.io/js/%40xeokit%2Fcompression)\n * [![](https://data.jsdelivr.com/v1/package/npm/@xeokit/compression/badge)](https://www.jsdelivr.com/package/npm/@xeokit/compression)\n * \n * <img style=\"padding:20px\" src=\"media://images/geometry_icon.png\"/>\n *\n * # xeokit Geometry Compression / Decompression Utilities\n *\n * ---\n *\n * ### *Tools for geometry compression and decompression*\n *\n * ---\n *\n * The xeokit Geometry Compression/Decompression Utilities library provides functions used internally within SceneModel.createGeometry implementations to compress geometry. These functions are also provided for users who want to pre-compress their geometry \"offline\" and then use SceneModel.createGeometryCompressed to create compressed geometry directly.\n\n The compression techniques used include simplifying geometry by combining duplicate positions and adjusting indices, generating edge indices for triangle meshes, ignoring normals (as shaders auto-generate them), converting positions to relative-to-center (RTC) coordinates, quantizing positions and UVs as 16-bit unsigned integers, and splitting geometry into buckets to enable indices to use the minimum bits for storage. The bucketing technique was developed for xeokit by Toni Marti with support from Tribia AG.\n\n To use the library, install it using npm install @xeokit/compression. An example usage includes compressing a GeometryParams into a GeometryCompressedParams using the compressGeometryParams function. In this example, the geometry is simple, and only one bucket is needed. However, if the positions array was large enough to require some indices to use more than 16 bits for storage, the bucketing mechanism would split the geometry into smaller buckets, each with smaller indices that index a subset of the positions.\n\n The resulting GeometryCompressedParams object shows that we have one bucket with vertex positions relative to the origin and quantized to 16-bit integers, duplicate positions removed, and adjusted indices. Additionally, edge indices are generated for the TrianglesPrimitive, and a positionsDecompressMatrix is included to de-quantize the positions within the Viewer.\n\n * This library provides a set of functions that are used internally within\n * {@link @xeokit/scene!SceneModel.createGeometry | SceneModel.createGeometry} implementations to\n * compress geometry. The functions are provided here in case users instead want to pre-compress their geometry \"offline\",\n * and then use {@link @xeokit/scene!SceneModel.createGeometryCompressed | SceneModel.createGeometryCompressed}\n * to create the compressed geometry directly.\n *\n * ### Compression Techniques Used\n *\n * * Simplifies geometry by combining duplicate positions and adjusting indices\n * * Generates edge indices for triangle meshes\n * * Ignores normals (our shaders auto-generate them)\n * * Converts positions to relative-to-center (RTC) coordinates\n * * Quantizes positions and UVs as 16-bit unsigned integers\n * * Splits geometry into {@link @xeokit/scene!GeometryBucketParams | buckets } to enable indices to use the minimum bits for storage\n *\n * ### Aknowledgements\n *\n * * The bucketing technique mentioned above was developed for xeokit by Toni Marti, with support from Tribia AG. Read [the slides](media://pdfs/GPU_RAM_Savings_Toni_Marti_Apr22.pdf) from Toni's presentation at WebGL Meetup 2022.\n *\n * ## Installation\n *\n * ````bash\n * npm install @xeokit/compression\n * ````\n *\n * ## Usage\n *\n * In the example below, we'll use {@link compressGeometryParams} to compress\n * a {@link @xeokit/scene!GeometryParams | GeometryParams} into a\n * {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams}.\n *\n * In this example, our geometry is very simple, and our GeometryCompressedParams only gets a single\n * {@link @xeokit/scene!GeometryBucketParams | GeometryBucketParams }. Note that if the\n * {@link @xeokit/scene!GeometryParams.positions | GeometryParams.positions} array was large enough to require\n * some of the indices to use more than 16 bits for storage, then that's when the function's bucketing mechanism would\n * kick in, to split the geometry into smaller buckets, each with smaller indices that index a subset of the positions.\n *\n * ````javascript\n * import {compressGeometryParams} from \"@xeokit/compression\";\n * import {TrianglesPrimitive} from \"@xeokit/core/constants\";\n *\n * const geometryCompressedParams = compressGeometryParams({\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      positions: [\n *          202, 202, 202, 200, 202, 202,\n *          200, 200, 202, 202, 200, 202,\n *          202, 202, 202, 202, 200, 202,\n *          202, 200, 200, 202, 202, 200,\n *          202, 202, 202, 202, 202, 200,\n *          200, 202, 200, 200, 202, 202,\n *          200, 202, 202, 200, 202, 200,\n *          200, 200, 200, 200, 200, 202,\n *          200, 200, 200, 202, 200, 200,\n *          202, 200, 202, 200, 200, 202,\n *          202, 200, 200, 200, 200, 200,\n *          200, 202, 200, 202, 202, 200\n *      ],\n *      indices: [\n *          0, 1, 2, 0, 2, 3, 4, 5, 6, 4,\n *          6, 7, 8, 9, 10, 8, 10, 11, 12,\n *          13, 14, 12, 14, 15, 16, 17, 18,\n *          16, 18, 19, 20, 21, 22, 20, 22, 23\n *      ]\n *  });\n * ````\n *\n * The value of our new {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams} is shown below.\n *\n * We can see that:\n *\n * * We get one bucket, because we have only a small number of indices\n * * Vertex positions are now relative to ````origin```` and quantized to 16-bit integers\n * * Duplicate positions are removed and indices adjusted\n * * Edge indices generated for our TrianglesPrimitive\n * * A ````positionsDecompressMatrix```` to de-quantize the positions within the Viewer\n *\n * ````javascript\n * {\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      origin: [200,200,200],\n *      positionsDecompressMatrix: [\n *          0.00003052270125906143, 0, 0, 0,\n *          0, 0.00003052270125906143, 0, 0,\n *          0, 0, 0.00003052270125906143, 0,\n *          -1, -1, -1, 1\n *      ],\n *      geometryBuckets: [\n *          {\n *              positionsCompressed: [\n *                  65525, 65525, 65525, 0, 65525, 65525,\n *                  0, 0, 65525, 65525, 0, 65525, 65525,\n *                  0, 0, 65525, 65525, 0, 0, 65525, 0, 0,\n *                  0, 0\n *              ],\n *              indices: [\n *                  0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6,\n *                  0, 6, 1, 1, 6, 7, 1, 7, 2, 7, 4, 3, 7, 3, 2,\n *                  4, 7, 6, 4, 6, 5\n *              ],\n *              edgeIndices: [\n *                  3, 4, 0, 4, 5, 0, 5, 6,\n *                  0, 6, 1, 1, 6, 7, 1, 7,\n *                  3, 2, 4, 7, 6, 4, 6\n *              ]\n *          }\n *      ]\n * }\n * ````\n *\n * In the next example, we'll again use {@link compressGeometryParams} to compress\n * a {@link @xeokit/scene!GeometryParams | GeometryParams} into a\n * {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams}, which we'll then use to\n * create a compressed geometry within a {@link @xeokit/scene!SceneModel | SceneModel}.\n *\n * ````javascript\n * import {Scene} from \"@xeokit/scene\";\n * import {TrianglesPrimitive} from \"@xeokit/core/constants\";\n * import {compressGeometryParams} from \"@xeokit/compression\";\n *\n * const scene = new Scene();\n *\n * const sceneModel = scene.createModel({\n *     id: \"myModel\"\n * });\n *\n * const geometryCompressedParams = compressGeometryParams({\n *      id: \"myBoxGeometry\",\n *      primitive: TrianglesPrimitive,\n *      positions: [202, 202, 202, 200, 202, 202, ...],\n *      indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ...]\n * });\n *\n * sceneModel.createGeometryCompressed(geometryCompressedParams);\n *\n * sceneModel.createMesh({ id: \"myMesh\", geometryId: \"myGeometry\" });\n *\n * sceneModel.createObject({ id: \"myObject1\", meshIds: [\"myMesh\"] });\n * sceneModel.createObject({ id: \"myObject2\", meshIds: [\"myMesh\"] });\n *\n * sceneModel.build();\n * ````\n *\n * @module @xeokit/compression\n */\n\nimport {\n    createMat3,\n    createMat4,\n    createVec3,\n    identityMat3,\n    identityMat4,\n    mulMat3,\n    mulMat4,\n    normalizeVec3,\n    scalingMat3v,\n    scalingMat4v,\n    transformVec3,\n    translationMat3v,\n    translationMat4v\n} from \"@xeokit/matrix\";\n\nimport type {FloatArrayParam} from \"@xeokit/math\";\n\nconst translate = createMat4();\nconst scale = createMat4();\n\n/**\n * Gets the boundary of a flat positions array.\n *\n * @param array\n * @param min\n * @param max\n */\nexport function getPositions3MinMax(array: FloatArrayParam, min?: FloatArrayParam, max?: FloatArrayParam) {\n    let i, j;\n    min = min || new Float64Array(3);\n    max = max || new Float64Array(3);\n    for (i = 0; i < 3; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 3) {\n        for (j = 0; j < 3; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min,\n        max\n    };\n}\n\n/**\n * Creates a de-quantization matrix from a boundary.\n */\nexport function createPositions3DecompressMat4(aabb: FloatArrayParam, positionsDecompressMatrix: FloatArrayParam): FloatArrayParam {\n    positionsDecompressMatrix = positionsDecompressMatrix || createMat4();\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65535;\n    identityMat4(translate);\n    translationMat4v(aabb, translate);\n    identityMat4(scale);\n    scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n    mulMat4(translate, scale, positionsDecompressMatrix);\n    return positionsDecompressMatrix;\n}\n\n/**\n * Compresses a flat positions array\n */\nexport function compressPositions3(array: FloatArrayParam, min: FloatArrayParam, max: FloatArrayParam) {\n    const quantized = new Uint16Array(array.length);\n    var multiplier = new Float32Array([\n        max[0] !== min[0] ? 65535 / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? 65535 / (max[1] - min[1]) : 0,\n        max[2] !== min[2] ? 65535 / (max[2] - min[2]) : 0\n    ]);\n    let i;\n    for (i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n    }\n    identityMat4(translate);\n    translationMat4v(min, translate);\n    identityMat4(scale);\n    scalingMat4v([\n        (max[0] - min[0]) / 65535,\n        (max[1] - min[1]) / 65535,\n        (max[2] - min[2]) / 65535\n    ], scale);\n    const decompressMatrix = mulMat4(translate, scale, identityMat4());\n    return {\n        quantized: quantized,\n        decompressMatrix: decompressMatrix\n    };\n}\n\n/**\n * Compresses a 3D position\n * @param p\n * @param aabb\n * @param q\n */\nexport function compressPoint3(p: FloatArrayParam, aabb: FloatArrayParam, dest: FloatArrayParam = p) {\n    const multiplier = new Float32Array([\n        aabb[3] !== aabb[0] ? 65535 / (aabb[3] - aabb[0]) : 0,\n        aabb[4] !== aabb[1] ? 65535 / (aabb[4] - aabb[1]) : 0,\n        aabb[5] !== aabb[2] ? 65535 / (aabb[5] - aabb[2]) : 0\n    ]);\n    dest[0] = Math.max(0, Math.min(65535, Math.floor((p[0] - aabb[0]) * multiplier[0])));\n    dest[1] = Math.max(0, Math.min(65535, Math.floor((p[1] - aabb[1]) * multiplier[1])));\n    dest[2] = Math.max(0, Math.min(65535, Math.floor((p[2] - aabb[2]) * multiplier[2])));\n    return dest;\n}\n\n/**\n * Decompresses a 3D position\n * @param position\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressPoint3(position: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: FloatArrayParam = position): FloatArrayParam {\n    dest[0] = position[0] * decompressMatrix[0] + decompressMatrix[12];\n    dest[1] = position[1] * decompressMatrix[5] + decompressMatrix[13];\n    dest[2] = position[2] * decompressMatrix[10] + decompressMatrix[14];\n    return dest;\n}\n\n/**\n * Decompresses an axis-aligned 3D boundary\n * @param aabb\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressAABB3(aabb: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: FloatArrayParam = aabb): FloatArrayParam {\n    dest[0] = aabb[0] * decompressMatrix[0] + decompressMatrix[12];\n    dest[1] = aabb[1] * decompressMatrix[5] + decompressMatrix[13];\n    dest[2] = aabb[2] * decompressMatrix[10] + decompressMatrix[14];\n    dest[3] = aabb[3] * decompressMatrix[0] + decompressMatrix[12];\n    dest[4] = aabb[4] * decompressMatrix[5] + decompressMatrix[13];\n    dest[5] = aabb[5] * decompressMatrix[10] + decompressMatrix[14];\n    return dest;\n}\n\n/**\n * Decompresses a flat array of positions\n * @param positions\n * @param decompressMatrix\n * @param dest\n */\nexport function decompressPositions3(positions: FloatArrayParam, decompressMatrix: FloatArrayParam, dest: Float32Array = new Float32Array(positions.length)): Float32Array {\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        dest[i + 0] = positions[i + 0] * decompressMatrix[0] + decompressMatrix[12];\n        dest[i + 1] = positions[i + 1] * decompressMatrix[5] + decompressMatrix[13];\n        dest[i + 2] = positions[i + 2] * decompressMatrix[10] + decompressMatrix[14];\n    }\n    return dest;\n}\n\n/**\n * Gets the 2D min/max boundary of a flat array of UV coordinate\n * @param array\n */\nexport function getUVBounds(array: FloatArrayParam): { min: FloatArrayParam, max: FloatArrayParam } {\n    const min = new Float32Array(2);\n    const max = new Float32Array(2);\n    let i, j;\n    for (i = 0; i < 2; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 2) {\n        for (j = 0; j < 2; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\n/**\n * Compresses a flat array of UV coordinates\n */\nexport var compressUVs = (function () {\n    const translate = createMat3();\n    const scale = createMat3();\n    return function (array: FloatArrayParam, min: FloatArrayParam, max: FloatArrayParam): {\n        quantized: Uint16Array,\n        decompressMatrix: FloatArrayParam | Float64Array\n    } {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 2) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        }\n        identityMat3(translate);\n        translationMat3v(min, translate);\n        identityMat3(scale);\n        scalingMat3v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535\n        ], scale);\n        const decompressMatrix = mulMat3(translate, scale, identityMat3());\n        return {\n            quantized: quantized,\n            decompressMatrix: decompressMatrix\n        };\n    };\n})();\n\n/**\n * Oct-encodes a flat array of normal vectors\n * @param array\n */\nexport function compressNormals(array: FloatArrayParam): Int8Array { // http://jcgt.org/published/0003/02/01/\n\n    // Note: three elements for each encoded normal, in which the last element in each triplet is redundant.\n    // This is to work around a mysterious WebGL issue where 2-element normals just wouldn't work in the shader :/\n\n    const encoded = new Int8Array(array.length);\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < array.length; i += 3) {\n        // Test various combinations of ceil and floor\n        // to minimize rounding errors\n        best = oct = octEncodeNormalFromArray(array, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(array, i, dec);\n        oct = octEncodeNormalFromArray(array, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormalFromArray(array, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormalFromArray(array, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        encoded[i] = best[0];\n        encoded[i + 1] = best[1];\n    }\n    return encoded;\n}\n\n/**\n */\nfunction octEncodeNormalFromArray(array: FloatArrayParam, i: number, xfunc: any, yfunc: any): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n */\nfunction dot(array: FloatArrayParam, i: number, createVec3: FloatArrayParam): number {\n    return array[i] * createVec3[0] + array[i + 1] * createVec3[1] + array[i + 2] * createVec3[2];\n}\n\n/**\n */\nexport function decompressUV(uv: FloatArrayParam, decompressMatrix: FloatArrayParam, dest = new Float32Array(2)) {\n    dest[0] = uv[0] * decompressMatrix[0] + decompressMatrix[6];\n    dest[1] = uv[1] * decompressMatrix[4] + decompressMatrix[7];\n}\n\n/**\n *\n */\nexport function decompressUVs(uvs: FloatArrayParam, decompressMatrix: FloatArrayParam, dest = new Float32Array(uvs.length)) {\n    for (let i = 0, len = uvs.length; i < len; i += 3) {\n        dest[i + 0] = uvs[i + 0] * decompressMatrix[0] + decompressMatrix[6];\n        dest[i + 1] = uvs[i + 1] * decompressMatrix[4] + decompressMatrix[7];\n    }\n    return dest;\n}\n\n/**\n *\n */\nexport function decompressNormal(oct: FloatArrayParam, result: FloatArrayParam): FloatArrayParam {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n *\n */\nexport function decompressNormals(octs: string | any[], result: FloatArrayParam): FloatArrayParam {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n *\n * @param oct\n * @param result\n */\nfunction octDecodeVec2(oct: Int8Array, result: FloatArrayParam = createVec3()): FloatArrayParam {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n *\n */\nfunction octDecodeVec2s(octs: Int8Array, result: FloatArrayParam): FloatArrayParam {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n * @private\n */\nexport function quantizePositions3(positions: FloatArrayParam, aabb: FloatArrayParam, positionsDecompressMatrix: FloatArrayParam) { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const lenPositions = positions.length;\n    const positionsCompressed = new Uint16Array(lenPositions);\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65525;\n    const xMultiplier = maxInt / xwid;\n    const yMultiplier = maxInt / ywid;\n    const zMultiplier = maxInt / zwid;\n    const verify = (num: number) => num >= 0 ? num : 0;\n    for (let i = 0; i < lenPositions; i += 3) {\n        positionsCompressed[i + 0] = Math.floor(verify(positions[i + 0] - xmin) * xMultiplier);\n        positionsCompressed[i + 1] = Math.floor(verify(positions[i + 1] - ymin) * yMultiplier);\n        positionsCompressed[i + 2] = Math.floor(verify(positions[i + 2] - zmin) * zMultiplier);\n    }\n    identityMat4(translate);\n    translationMat4v(aabb, translate);\n    identityMat4(scale);\n    scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n    mulMat4(translate, scale, positionsDecompressMatrix);\n    return positionsCompressed;\n}\n\n/**\n * @private\n */\nexport function transformAndOctEncodeNormals(worldNormalMatrix: FloatArrayParam, normals: FloatArrayParam, lenNormals: number, compressedNormals: FloatArrayParam, lenCompressedNormals: number) {\n\n    function dot(p: FloatArrayParam, createVec3: FloatArrayParam) { // Dot product of a normal in an array against a candidate decoding\n        return p[0] * createVec3[0] + p[1] * createVec3[1] + p[2] * createVec3[2];\n    }\n\n    // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    let i, ei;\n    let localNormal = new Float32Array([0, 0, 0, 0]);\n    let worldNormal = new Float32Array([0, 0, 0, 0]);\n    for (i = 0; i < lenNormals; i += 3) {\n        localNormal[0] = normals[i];\n        localNormal[1] = normals[i + 1];\n        localNormal[2] = normals[i + 2];\n\n        transformVec3(worldNormalMatrix, localNormal, worldNormal);\n        normalizeVec3(worldNormal, worldNormal);\n\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(worldNormal, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(worldNormal, dec);\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\n/**\n * @private\n */\nexport function octEncodeNormals(normals: FloatArrayParam) { // http://jcgt.org/published/0003/02/01/\n    const lenNormals = normals.length;\n    const compressedNormals = new Int8Array(lenNormals)\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < lenNormals; i += 3) {\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeNormal(normals, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(normals, i, dec);\n        oct = octEncodeNormal(normals, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormal(normals, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeNormal(normals, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[i + 0] = best[0];\n        compressedNormals[i + 1] = best[1];\n        compressedNormals[i + 2] = 0.0; // Unused\n    }\n    return compressedNormals;\n}\n\n/**\n * @private\n */\nexport function octEncodeVec3(p: FloatArrayParam, xfunc: string, yfunc: string): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = p[0] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    let y = p[1] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    if (p[2] < 0) {\n        let tempx = x;\n        let tempy = y;\n        tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n/**\n * @private\n */\nexport function octEncodeNormal(array: FloatArrayParam, i: number, xfunc: string, yfunc: string): Int8Array { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    // @ts-ignore\n    return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))]);\n}\n\n\n","/**\n * [![npm version](https://badge.fury.io/js/%40xeokit%2Fsvg)](https://badge.fury.io/js/%40xeokit%2Fmath)\n * [![](https://data.jsdelivr.com/v1/package/npm/@xeokit/badge)](https://www.jsdelivr.com/package/npm/@xeokit/math)\n *\n * <img src=\"http://xeokit.io/img/kdtree.jpeg\" />\n *\n * # xeokit Boundaries Math Library\n *\n * ---\n *\n * ### *Tools for 2D and 3D boundary analysis, boundary transformation, and collision detection*\n *\n * ---\n *\n * * Axis-aligned boundaries (AABB2 and AABB3)\n * * Object-aligned boundaries (OBB)\n * * Transformable OOBs\n * * Create boundaries from positions\n * * Find center of positions\n * * FrustumProjection-boundary intersection tests\n *\n * ## Installation\n *\n * ````bash\n * npm install @xeokit/boundaries\n * ````\n *\n * ## Usage\n *\n * ````javascript\n * import * as boundaries from \"@xeokit/boundaries\";\n *\n * //..TODO\n * ````\n *\n * @module @xeokit/boundaries\n */\nimport type {FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {createMat4, createVec2, createVec3, lenVec3, mulMat4, subVec3} from \"@xeokit/matrix\";\nimport {MAX_DOUBLE, MIN_DOUBLE, newFloatArray} from \"@xeokit/math\";\nimport {decompressPoint3} from \"@xeokit/compression\";\n\n\nconst tempVec3a = createVec3();\nconst tempVec3b = createVec3();\nconst tempMat4a = createMat4();\n\n\n/**\n * Returns a new, uninitialized 3D axis-aligned bounding box.\n */\nexport function createAABB3(values?: FloatArrayParam): Float64Array {\n    // @ts-ignore\n    return new Float64Array(values || 6);\n}\n\n/**\n * Returns a new, uninitialized 3D axis-aligned bounding box.\n */\nexport function createAABB3Int16(values?: IntArrayParam): Int16Array {\n    // @ts-ignore\n    return new Int16Array(values || 6);\n}\n\n/**\n * Returns a new, uninitialized 2D axis-aligned bounding box.\n */\nexport function createAABB2(values?: FloatArrayParam): FloatArrayParam {\n    // @ts-ignore\n    return newFloatArray(values || 4);\n}\n\n/**\n * Returns a new, uninitialized 3D oriented bounding box (OBB).\n */\nexport function createOBB3(values?: FloatArrayParam): FloatArrayParam {\n    // @ts-ignore\n    return newFloatArray(values || 32);\n}\n\n/**\n * Returns a new, uninitialized 2D oriented bounding box (OBB).\n */\nexport function createOBB2(values?: FloatArrayParam): FloatArrayParam {\n    // @ts-ignore\n    return newFloatArray(values || 16);\n}\n\n/** Returns a new 3D bounding sphere */\nexport function createSphere3(\n    x: number,\n    y: number,\n    z: number,\n    r: number\n): FloatArrayParam {\n    return newFloatArray([x, y, z, r]);\n}\n\n/**\n * Transforms an createOBB3 by a 4x4 \n */\nexport function transformOBB3(\n    m: FloatArrayParam,\n    p: FloatArrayParam,\n    p2: FloatArrayParam = p\n): FloatArrayParam {\n    let i;\n    const len = p.length;\n\n    let x;\n    let y;\n    let z;\n\n    const m0 = m[0];\n    const m1 = m[1];\n    const m2 = m[2];\n    const m3 = m[3];\n    const m4 = m[4];\n    const m5 = m[5];\n    const m6 = m[6];\n    const m7 = m[7];\n    const m8 = m[8];\n    const m9 = m[9];\n    const m10 = m[10];\n    const m11 = m[11];\n    const m12 = m[12];\n    const m13 = m[13];\n    const m14 = m[14];\n    const m15 = m[15];\n\n    for (i = 0; i < len; i += 4) {\n        x = p[i + 0];\n        y = p[i + 1];\n        z = p[i + 2];\n\n        p2[i + 0] = m0 * x + m4 * y + m8 * z + m12;\n        p2[i + 1] = m1 * x + m5 * y + m9 * z + m13;\n        p2[i + 2] = m2 * x + m6 * y + m10 * z + m14;\n        p2[i + 3] = m3 * x + m7 * y + m11 * z + m15;\n    }\n\n    return p2;\n}\n\n\n/** Returns true if the first AABB2 contains the second AABB2.\n */\nexport function containsAABB2(\n    aabb1: FloatArrayParam,\n    aabb2: FloatArrayParam\n): boolean {\n    return aabb1[0] <= aabb2[0] &&\n        aabb2[3] <= aabb1[3] &&\n        aabb1[1] <= aabb2[1] &&\n        aabb1[2] <= aabb2[2];\n}\n\n/** Returns true if the first AABB3 contains the second AABB3.\n */\nexport function containsAABB3(\n    aabb1: FloatArrayParam,\n    aabb2: FloatArrayParam\n): boolean {\n    const result =\n        aabb1[0] <= aabb2[0] &&\n        aabb2[3] <= aabb1[3] &&\n        aabb1[1] <= aabb2[1] &&\n        aabb2[4] <= aabb1[4] &&\n        aabb1[2] <= aabb2[2] &&\n        aabb2[5] <= aabb1[5];\n    return result;\n}\n\n/**\n * Gets the diagonal size of an createAABB3 given as minima and maxima.\n */\nexport const getAABB3Diag: Function = (() => {\n    const min = newFloatArray(3);\n    const max = newFloatArray(3);\n    const tempVec3 = newFloatArray(3);\n    return (aabb: FloatArrayParam): number => {\n        min[0] = aabb[0];\n        min[1] = aabb[1];\n        min[2] = aabb[2];\n        max[0] = aabb[3];\n        max[1] = aabb[4];\n        max[2] = aabb[5];\n        subVec3(max, min, tempVec3);\n        return Math.abs(lenVec3(tempVec3));\n    };\n})();\n\n/**\n * Get a diagonal boundary size that is symmetrical about the given point.\n */\nexport const getAABB3DiagPoint = (() => {\n    const min = newFloatArray(3);\n    const max = newFloatArray(3);\n    const tempVec3 = newFloatArray(3);\n\n    return (aabb: FloatArrayParam, p: FloatArrayParam): number => {\n        min[0] = aabb[0];\n        min[1] = aabb[1];\n        min[2] = aabb[2];\n\n        max[0] = aabb[3];\n        max[1] = aabb[4];\n        max[2] = aabb[5];\n\n        const diagVec = subVec3(max, min, tempVec3);\n\n        const xneg = p[0] - aabb[0];\n        const xpos = aabb[3] - p[0];\n        const yneg = p[1] - aabb[1];\n        const ypos = aabb[4] - p[1];\n        const zneg = p[2] - aabb[2];\n        const zpos = aabb[5] - p[2];\n\n        diagVec[0] += xneg > xpos ? xneg : xpos;\n        diagVec[1] += yneg > ypos ? yneg : ypos;\n        diagVec[2] += zneg > zpos ? zneg : zpos;\n\n        return Math.abs(lenVec3(diagVec));\n    };\n})();\n\n/**\n * Gets the area of an AABB.\n */\nexport function getAABB3Area(aabb: FloatArrayParam): number {\n    const width = aabb[3] - aabb[0];\n    const height = aabb[4] - aabb[1];\n    const depth = aabb[5] - aabb[2];\n    return width * height * depth;\n}\n\n/**\n * Gets the center of an AABB.\n */\nexport function getAABB3Center(\n    aabb: FloatArrayParam,\n    dest: FloatArrayParam = createVec3()\n): FloatArrayParam {\n    dest[0] = (aabb[0] + aabb[3]) / 2;\n    dest[1] = (aabb[1] + aabb[4]) / 2;\n    dest[2] = (aabb[2] + aabb[5]) / 2;\n    return dest;\n}\n\n/**\n * Gets the center of a 2D AABB.\n */\nexport function getAABB2Center(\n    aabb: FloatArrayParam,\n    dest: FloatArrayParam = createVec2()\n): FloatArrayParam {\n    dest[0] = (aabb[2] + aabb[0]) / 2;\n    dest[1] = (aabb[3] + aabb[1]) / 2;\n    return dest;\n}\n\n/**\n * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n * Creates new AABB if none supplied.\n */\nexport function collapseAABB3(aabb: FloatArrayParam = createAABB3()): FloatArrayParam {\n    aabb[0] = MAX_DOUBLE;\n    aabb[1] = MAX_DOUBLE;\n    aabb[2] = MAX_DOUBLE;\n    aabb[3] = MIN_DOUBLE;\n    aabb[4] = MIN_DOUBLE;\n    aabb[5] = MIN_DOUBLE;\n    return aabb;\n}\n\n/**\n * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n * Creates new AABB if none supplied.\n */\nexport function collapseAABB3Int16(aabb: IntArrayParam = createAABB3Int16()): IntArrayParam {\n    aabb[0] = 65535;\n    aabb[1] = 65535;\n    aabb[2] = 65535;\n    aabb[3] = -65535;\n    aabb[4] = -65535;\n    aabb[5] = -65535;\n    return aabb;\n}\n\n/**\n * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n * an array of eight 3D positions, one for each corner of the boundary.\n *\n * @private\n */\nexport function AABB3ToOBB3(aabb: FloatArrayParam = createAABB3(), obb = createOBB3()): FloatArrayParam {\n    obb[0] = aabb[0];\n    obb[1] = aabb[1];\n    obb[2] = aabb[2];\n    obb[3] = 1;\n\n    obb[4] = aabb[3];\n    obb[5] = aabb[1];\n    obb[6] = aabb[2];\n    obb[7] = 1;\n\n    obb[8] = aabb[3];\n    obb[9] = aabb[4];\n    obb[10] = aabb[2];\n    obb[11] = 1;\n\n    obb[12] = aabb[0];\n    obb[13] = aabb[4];\n    obb[14] = aabb[2];\n    obb[15] = 1;\n\n    obb[16] = aabb[0];\n    obb[17] = aabb[1];\n    obb[18] = aabb[5];\n    obb[19] = 1;\n\n    obb[20] = aabb[3];\n    obb[21] = aabb[1];\n    obb[22] = aabb[5];\n    obb[23] = 1;\n\n    obb[24] = aabb[3];\n    obb[25] = aabb[4];\n    obb[26] = aabb[5];\n    obb[27] = 1;\n\n    obb[28] = aabb[0];\n    obb[29] = aabb[4];\n    obb[30] = aabb[5];\n    obb[31] = 1;\n\n    return obb;\n}\n\n/**\n * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n */\nexport function expandAABB3(aabb1: FloatArrayParam, aabb2: FloatArrayParam) {\n    if (aabb1[0] > aabb2[0]) {\n        aabb1[0] = aabb2[0];\n    }\n    if (aabb1[1] > aabb2[1]) {\n        aabb1[1] = aabb2[1];\n    }\n    if (aabb1[2] > aabb2[2]) {\n        aabb1[2] = aabb2[2];\n    }\n    if (aabb1[3] < aabb2[3]) {\n        aabb1[3] = aabb2[3];\n    }\n    if (aabb1[4] < aabb2[4]) {\n        aabb1[4] = aabb2[4];\n    }\n    if (aabb1[5] < aabb2[5]) {\n        aabb1[5] = aabb2[5];\n    }\n    return aabb1;\n}\n\n/**\n * Expands the first axis-aligned 2D boundary to enclose the second, if required.\n */\nexport function expandAABB2(aabb1: FloatArrayParam, aabb2: FloatArrayParam) {\n    if (aabb1[0] > aabb2[0]) {\n        aabb1[0] = aabb2[0];\n    }\n    if (aabb1[1] > aabb2[1]) {\n        aabb1[1] = aabb2[1];\n    }\n    if (aabb1[3] < aabb2[3]) {\n        aabb1[3] = aabb2[3];\n    }\n    if (aabb1[4] < aabb2[4]) {\n        aabb1[4] = aabb2[4];\n    }\n    return aabb1;\n}\n\n/**\n * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n */\nexport function expandAABB3Point3(aabb: FloatArrayParam, p: FloatArrayParam) {\n\n    if (aabb[0] > p[0]) {\n        aabb[0] = p[0];\n    }\n\n    if (aabb[1] > p[1]) {\n        aabb[1] = p[1];\n    }\n\n    if (aabb[2] > p[2]) {\n        aabb[2] = p[2];\n    }\n\n    if (aabb[3] < p[0]) {\n        aabb[3] = p[0];\n    }\n\n    if (aabb[4] < p[1]) {\n        aabb[4] = p[1];\n    }\n\n    if (aabb[5] < p[2]) {\n        aabb[5] = p[2];\n    }\n\n    return aabb;\n}\n\n/**\n * Expands an axis-aligned 2D boundary to enclose the given point, if needed.\n */\nexport function expandAABB2Point2(aabb: FloatArrayParam, p: FloatArrayParam) {\n\n    if (aabb[0] > p[0]) {\n        aabb[0] = p[0];\n    }\n\n    if (aabb[1] > p[1]) {\n        aabb[1] = p[1];\n    }\n\n    if (aabb[3] < p[0]) {\n        aabb[3] = p[0];\n    }\n\n    if (aabb[4] < p[1]) {\n        aabb[4] = p[1];\n    }\n\n    return aabb;\n}\n\n/**\n * Expands an axis-aligned 3D boundary to enclose the given points, if needed.\n */\nexport function expandAABB3Points3(aabb: FloatArrayParam, positions: FloatArrayParam): FloatArrayParam {\n    var x;\n    var y;\n    var z;\n    for (var i = 0, len = positions.length; i < len; i += 3) {\n        x = positions[i];\n        y = positions[i + 1];\n        z = positions[i + 2];\n        if (aabb[0] > x) {\n            aabb[0] = x;\n        }\n        if (aabb[1] > y) {\n            aabb[1] = y;\n        }\n        if (aabb[2] > z) {\n            aabb[2] = z;\n        }\n        if (aabb[3] < x) {\n            aabb[3] = x;\n        }\n        if (aabb[4] < y) {\n            aabb[4] = y;\n        }\n        if (aabb[5] < z) {\n            aabb[5] = z;\n        }\n    }\n    return aabb;\n}\n\n/**\n * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n * an array of eight 3D positions, one for each corner of the boundary.\n */\nexport function ABB3ToOBB3(\n    aabb: FloatArrayParam,\n    obb: FloatArrayParam = createOBB3()\n): FloatArrayParam {\n    obb[0] = aabb[0];\n    obb[1] = aabb[1];\n    obb[2] = aabb[2];\n    obb[3] = 1;\n\n    obb[4] = aabb[3];\n    obb[5] = aabb[1];\n    obb[6] = aabb[2];\n    obb[7] = 1;\n\n    obb[8] = aabb[3];\n    obb[9] = aabb[4];\n    obb[10] = aabb[2];\n    obb[11] = 1;\n\n    obb[12] = aabb[0];\n    obb[13] = aabb[4];\n    obb[14] = aabb[2];\n    obb[15] = 1;\n\n    obb[16] = aabb[0];\n    obb[17] = aabb[1];\n    obb[18] = aabb[5];\n    obb[19] = 1;\n\n    obb[20] = aabb[3];\n    obb[21] = aabb[1];\n    obb[22] = aabb[5];\n    obb[23] = 1;\n\n    obb[24] = aabb[3];\n    obb[25] = aabb[4];\n    obb[26] = aabb[5];\n    obb[27] = 1;\n\n    obb[28] = aabb[0];\n    obb[29] = aabb[4];\n    obb[30] = aabb[5];\n    obb[31] = 1;\n\n    return obb;\n}\n\n/**\n * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n */\nexport const positions3ToAABB3 = (() => {\n    const p = newFloatArray(3);\n\n    return (\n        positions: FloatArrayParam,\n        aabb: FloatArrayParam,\n        positionsDecompressMatrix: FloatArrayParam\n    ): FloatArrayParam => {\n        aabb = aabb || createAABB3();\n\n        let xmin = MAX_DOUBLE;\n        let ymin = MAX_DOUBLE;\n        let zmin = MAX_DOUBLE;\n        let xmax = MIN_DOUBLE;\n        let ymax = MIN_DOUBLE;\n        let zmax = MIN_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = positions.length; i < len; i += 3) {\n            if (positionsDecompressMatrix) {\n                p[0] = positions[i + 0];\n                p[1] = positions[i + 1];\n                p[2] = positions[i + 2];\n\n                decompressPoint3(p, positionsDecompressMatrix, p);\n\n                x = p[0];\n                y = p[1];\n                z = p[2];\n            } else {\n                x = positions[i + 0];\n                y = positions[i + 1];\n                z = positions[i + 2];\n            }\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    };\n})();\n\n/**\n * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n */\nexport function OBB3ToAABB3(\n    obb: FloatArrayParam,\n    aabb: FloatArrayParam = createAABB3()\n): FloatArrayParam {\n    let xmin = MAX_DOUBLE;\n    let ymin = MAX_DOUBLE;\n    let zmin = MAX_DOUBLE;\n    let xmax = MIN_DOUBLE;\n    let ymax = MIN_DOUBLE;\n    let zmax = MIN_DOUBLE;\n\n    let x;\n    let y;\n    let z;\n\n    for (let i = 0, len = obb.length; i < len; i += 4) {\n        x = obb[i + 0];\n        y = obb[i + 1];\n        z = obb[i + 2];\n\n        if (x < xmin) {\n            xmin = x;\n        }\n\n        if (y < ymin) {\n            ymin = y;\n        }\n\n        if (z < zmin) {\n            zmin = z;\n        }\n\n        if (x > xmax) {\n            xmax = x;\n        }\n\n        if (y > ymax) {\n            ymax = y;\n        }\n\n        if (z > zmax) {\n            zmax = z;\n        }\n    }\n\n    aabb[0] = xmin;\n    aabb[1] = ymin;\n    aabb[2] = zmin;\n    aabb[3] = xmax;\n    aabb[4] = ymax;\n    aabb[5] = zmax;\n\n    return aabb;\n}\n\n/**\n * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n */\nexport function points3ToAABB3(\n    points: number[][],\n    aabb: FloatArrayParam = createAABB3()\n): FloatArrayParam {\n    let xmin = MAX_DOUBLE;\n    let ymin = MAX_DOUBLE;\n    let zmin = MAX_DOUBLE;\n    let xmax = MIN_DOUBLE;\n    let ymax = MIN_DOUBLE;\n    let zmax = MIN_DOUBLE;\n\n    let x;\n    let y;\n    let z;\n\n    for (let i = 0, len = points.length; i < len; i++) {\n        x = points[i][0];\n        y = points[i][1];\n        z = points[i][2];\n\n        if (x < xmin) {\n            xmin = x;\n        }\n\n        if (y < ymin) {\n            ymin = y;\n        }\n\n        if (z < zmin) {\n            zmin = z;\n        }\n\n        if (x > xmax) {\n            xmax = x;\n        }\n\n        if (y > ymax) {\n            ymax = y;\n        }\n\n        if (z > zmax) {\n            zmax = z;\n        }\n    }\n\n    aabb[0] = xmin;\n    aabb[1] = ymin;\n    aabb[2] = zmin;\n    aabb[3] = xmax;\n    aabb[4] = ymax;\n    aabb[5] = zmax;\n\n    return aabb;\n}\n\n/**\n * Gets the 3D center of the given flat array of 3D positions.\n */\nexport function getPositions3Center(\n    positions: FloatArrayParam,\n    center: FloatArrayParam = createVec3()\n): FloatArrayParam {\n    let xCenter = 0;\n    let yCenter = 0;\n    let zCenter = 0;\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        xCenter += positions[i + 0];\n        yCenter += positions[i + 1];\n        zCenter += positions[i + 2];\n    }\n    const numPositions = positions.length / 3;\n    center[0] = xCenter / numPositions;\n    center[1] = yCenter / numPositions;\n    center[2] = zCenter / numPositions;\n    return center;\n}\n\n\n/**\n * A plane within a {@link Frustum3}.\n */\nexport class FrustumPlane3 {\n\n    public testVertex: FloatArrayParam;\n    public offset: number;\n    public normal: FloatArrayParam;\n\n    /**\n     * Creates a new frustum plane.\n     */\n    constructor() {\n        this.normal = createVec3();\n        this.offset = 0;\n        this.testVertex = createVec3();\n    }\n\n    /**\n     * Sets the position and direction of the frustum plane.\n     * @param nx\n     * @param ny\n     * @param nz\n     * @param offset\n     */\n    set(nx: number, ny: number, nz: number, offset: number) {\n        const s = 1.0 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n        this.normal[0] = nx * s;\n        this.normal[1] = ny * s;\n        this.normal[2] = nz * s;\n        this.offset = offset * s;\n        this.testVertex[0] = (this.normal[0] >= 0.0) ? 1 : 0;\n        this.testVertex[1] = (this.normal[1] >= 0.0) ? 1 : 0;\n        this.testVertex[2] = (this.normal[2] >= 0.0) ? 1 : 0;\n    }\n}\n\n/**\n * Intersection state in which first boundary is completely inside the second.\n */\nexport const INSIDE: number = 1;\n\n/**\n * Intersection state in which two boundaries partially intersect.\n */\nexport const INTERSECT: number = 2;\n\n/**\n * Intersection state in which two boundaries do not intersect.\n */\nexport const OUTSIDE: number = 3;\n\n/**\n * A 3D frustum defined as six planes.\n */\nexport class Frustum3 {\n\n    /**\n     * The six planes that comprise the frustum boundary.\n     */\n    public planes: FrustumPlane3[];\n\n    /**\n     * Creates a new FrustumProjection\n     */\n    constructor() {\n        this.planes = [\n            new FrustumPlane3(), new FrustumPlane3(), new FrustumPlane3(),\n            new FrustumPlane3(), new FrustumPlane3(), new FrustumPlane3()\n        ];\n    }\n}\n\n/**\n * Sets the extents of a frustum to the World-space volume defined by view and projection matrices.\n * Creates the frustum first if not given.\n */\nexport function setFrustum3(viewMat: FloatArrayParam, projMat: FloatArrayParam, frustum?: Frustum3) {\n    const m = mulMat4(projMat, viewMat, tempMat4a);\n    const m0 = m[0];\n    const m1 = m[1];\n    const m2 = m[2];\n    const m3 = m[3];\n    const m4 = m[4];\n    const m5 = m[5];\n    const m6 = m[6];\n    const m7 = m[7];\n    const m8 = m[8];\n    const m9 = m[9];\n    const m10 = m[10];\n    const m11 = m[11];\n    const m12 = m[12];\n    const m13 = m[13];\n    const m14 = m[14];\n    const m15 = m[15];\n    frustum = frustum || new Frustum3();\n    frustum.planes[0].set(m3 - m0, m7 - m4, m11 - m8, m15 - m12);\n    frustum.planes[1].set(m3 + m0, m7 + m4, m11 + m8, m15 + m12);\n    frustum.planes[2].set(m3 - m1, m7 - m5, m11 - m9, m15 - m13);\n    frustum.planes[3].set(m3 + m1, m7 + m5, m11 + m9, m15 + m13);\n    frustum.planes[4].set(m3 - m2, m7 - m6, m11 - m10, m15 - m14);\n    frustum.planes[5].set(m3 + m2, m7 + m6, m11 + m10, m15 + m14);\n    return frustum;\n}\n\n/**\n * Tests for intersection between a frustum and an axis-aligned 3D boundary.\n * @param frustum\n * @param aabb\n */\nexport function intersectFrustum3AABB3(frustum: Frustum3, aabb: FloatArrayParam): number {\n    let ret = INSIDE;\n    const min = tempVec3a;\n    const max = tempVec3b;\n    min[0] = aabb[0];\n    min[1] = aabb[1];\n    min[2] = aabb[2];\n    max[0] = aabb[3];\n    max[1] = aabb[4];\n    max[2] = aabb[5];\n    const bminmax = [min, max];\n    for (let i = 0; i < 6; ++i) {\n        const plane = frustum.planes[i];\n        if (((plane.normal[0] * bminmax[plane.testVertex[0]][0]) +\n            (plane.normal[1] * bminmax[plane.testVertex[1]][1]) +\n            (plane.normal[2] * bminmax[plane.testVertex[2]][2]) +\n            (plane.offset)) < 0.0) {\n            return OUTSIDE;\n        }\n        if (((plane.normal[0] * bminmax[1 - plane.testVertex[0]][0]) +\n            (plane.normal[1] * bminmax[1 - plane.testVertex[1]][1]) +\n            (plane.normal[2] * bminmax[1 - plane.testVertex[2]][2]) +\n            (plane.offset)) < 0.0) {\n            ret = INTERSECT;\n        }\n    }\n    return ret;\n}\n\n/**\n * Tests for intersection between two axis-aligned 3D boundaries.\n * @param aabb1\n * @param aabb2\n */\nexport function intersectAABB3s(aabb1: FloatArrayParam, aabb2: FloatArrayParam): number {\n\n    return INTERSECT;\n    // let ret = INSIDE;\n    // const min = tempVec3a;\n    // const max = tempVec3b;\n    // min[0] = aabb[0];\n    // min[1] = aabb[1];\n    // min[2] = aabb[2];\n    // max[0] = aabb[3];\n    // max[1] = aabb[4];\n    // max[2] = aabb[5];\n    // const bminmax = [min, max];\n    // for (let i = 0; i < 6; ++i) {\n    //     const plane = frustum.planes[i];\n    //     if (((plane.normal[0] * bminmax[plane.testVertex[0]][0]) +\n    //         (plane.normal[1] * bminmax[plane.testVertex[1]][1]) +\n    //         (plane.normal[2] * bminmax[plane.testVertex[2]][2]) +\n    //         (plane.offset)) < 0.0) {\n    //         return OUTSIDE;\n    //     }\n    //     if (((plane.normal[0] * bminmax[1 - plane.testVertex[0]][0]) +\n    //         (plane.normal[1] * bminmax[1 - plane.testVertex[1]][1]) +\n    //         (plane.normal[2] * bminmax[1 - plane.testVertex[2]][2]) +\n    //         (plane.offset)) < 0.0) {\n    //         ret = INTERSECT;\n    //     }\n    // }\n    // return ret;\n}\n\n\n/**\n * Tests if the given {@link @math/boundaries!Frustum3 | Frustum3} intersects the given {@link @xeokit/core/constants!TrianglesPrimitive | TrianglesPrimitive} geometry.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param frustum\n * @param positions\n * @param indices\n */\nexport function intersectFrustum3Triangles3(frustum: Frustum3, positions: FloatArrayParam, indices: IntArrayParam): boolean {\n    return true;\n}\n\n/**\n * Tests if the given {@link @math/boundaries!Frustum3 | Frustum3} intersects the given triangle primitive.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param frustum\n * @param a\n * @param b\n * @param c\n */\nexport function intersectFrustum3Triangle3(frustum: Frustum3, a: FloatArrayParam, b: FloatArrayParam, c: FloatArrayParam): boolean {\n    return true;\n}\n\n/**\n * Tests if the given {@link @math/boundaries!Frustum3 | Frustum3} intersects the given {@link @xeokit/core/constants!LinesPrimitive | LinesPrimitive} geometry.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param frustum\n * @param positions\n * @param indices\n */\nexport function intersectFrustum3Lines3(frustum: Frustum3, positions: FloatArrayParam, indices: IntArrayParam): boolean {\n    return true;\n}\n\n/**\n * Tests if the given {@link @math/boundaries!Frustum3 | Frustum3} intersects the given {@link @xeokit/core/constants!PointsPrimitive | PointsPrimitive} geometry.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param frustum\n * @param positions\n */\nexport function intersectFrustum3Positions3(frustum: Frustum3, positions: FloatArrayParam): boolean {\n    return true;\n}\n\n/**\n * Tests if the given {@link @math/boundaries!Frustum3 | Frustum3} intersects the given position.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param frustum\n * @param position\n */\nexport function intersectFrustum3Point3(frustum: Frustum3, position: FloatArrayParam): boolean {\n    return true;\n}\n\n/**\n * Tests if the given AABB intersects the given {@link @xeokit/core/constants!TrianglesPrimitive | TrianglesPrimitive} geometry.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param aabb\n * @param positions\n * @param indices\n */\nexport function intersectAABB3Triangles3(aabb: FloatArrayParam, positions: FloatArrayParam, indices: IntArrayParam): boolean {\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n        // if (aabbIntersectsTriangle(positions, indices[i], indices[i + 1], indices[i + 2], aabb)) {\n        //     return true;\n        // }\n    }\n    return false;\n}\n\n\n/**\n * Tests if the given AABB intersects the given {@link @xeokit/core/constants!LinesPrimitive | LinesPrimitive} geometry.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param aabb\n * @param positions\n * @param indices\n */\nexport function intersectAABB3Lines3(aabb: FloatArrayParam, positions: FloatArrayParam, indices: IntArrayParam) {\n    return false;\n}\n\n/**\n * Tests if the given AABB intersects the given {@link @xeokit/core/constants!PointsPrimitive | PointsPrimitive} vertex positions.\n *\n * Returns ```` true```` if intersection else ````false````.\n *\n * @param aabb\n * @param positions\n */\nexport function intersectAABB3Positions3(aabb: FloatArrayParam, positions: FloatArrayParam) {\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xmax = aabb[3];\n    const ymax = aabb[4];\n    const zmax = aabb[5];\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        const x = positions[i];\n        if (xmin <= x && x <= xmax) {\n            const y = positions[i + 1];\n            if (ymin <= y && y <= ymax) {\n                const z = positions[i + 2];\n                if (zmin <= z && z <= zmax) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Tets if the given 3D AABB contains the given 3D position.\n * @param aabb\n * @param p\n */\nexport function containsAABB3Point3(aabb: FloatArrayParam, p: FloatArrayParam) {\n    return (\n        aabb[0] <= p[0] && p[0] <= aabb[3] &&\n        aabb[1] <= p[1] && p[1] <= aabb[4] &&\n        aabb[2] <= p[2] && p[2] <= aabb[5]);\n}\n\n/**\n * Tets if the given 2D AABB contains the given 2D position.\n * @param aabb\n * @param p\n */\nexport function containsAABB2Point2(aabb: FloatArrayParam, p: FloatArrayParam) {\n    return (\n        aabb[0] <= p[0] && p[0] <= aabb[3] &&\n        aabb[1] <= p[1] && p[1] <= aabb[4]);\n}","import type {IntArrayParam} from \"@xeokit/math\";\nimport type {GeometryBucketParams} from \"./GeometryBucketParams\";\n\n/**\n * A geometry bucket within {@link @xeokit/scene!Geometry.geometryBuckets | Geometry.geometryBuckets}.\n *\n * See usage in:\n *\n * * [@xeokit/scene](/docs/modules/_xeokit_scene.html)\n * * [@xeokit/viewer](/docs/modules/_xeokit_viewer.html)\n */\nexport class GeometryBucket {\n\n    /**\n     * GeometryBucket's 3D vertex positions, quantized as 16-bit integers.\n     *\n     * Internally, the Viewer dequantizes these with {@link @xeokit/scene!Geometry.positionsDecompressMatrix}.\n     *\n     * Vertex positions are required for all primitive types.\n     */\n    positionsCompressed: IntArrayParam;\n\n    /**\n     * GeometryBucket's UV coordinates, quantized as 16-bit integers.\n     *\n     * Internally, the Viewer de-quantizes these with {@link @xeokit/scene!Geometry.uvsDecompressMatrix}.\n     */\n    uvsCompressed?: IntArrayParam;\n\n    /**\n     * GeometryBucket's vertex RGB colors, quantized as 8-bit integers.\n     */\n    colorsCompressed?: IntArrayParam;\n\n    /**\n     * GeometryBucket's primitive indices.\n     *\n     * This is either an array of 8-bit, 16-bit or 32-bit values.\n     */\n    indices?: IntArrayParam;\n\n    /**\n     * GeometryBucket's edge indices.\n     *\n     * This is either an array of 8-bit, 16-bit or 32-bit values.\n     */\n    edgeIndices?: IntArrayParam;\n\n    constructor(geometryBucketParams: GeometryBucketParams) {\n        this.positionsCompressed = geometryBucketParams.positionsCompressed;\n        this.uvsCompressed = geometryBucketParams.uvsCompressed;\n        this.colorsCompressed = geometryBucketParams.colorsCompressed;\n        this.indices = geometryBucketParams.indices;\n        this.edgeIndices = geometryBucketParams.edgeIndices;\n    }\n}","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {GeometryBucket} from \"./GeometryBucket\";\nimport type {GeometryCompressedParams} from \"./GeometryCompressedParams\";\nimport type {RendererGeometry} from \"./RendererGeometry\";\n\n/**\n * A geometry in a {@link SceneModel}.\n *\n * * Stored in {@link @xeokit/scene!SceneModel.geometries | SceneModel.geometries}\n * * Created with {@link @xeokit/scene!SceneModel.createGeometry | SceneModel.createGeometry}\n * and {@link @xeokit/scene!SceneModel.createGeometryCompressed | SceneModel.createGeometryCompressed}\n * * Referenced by {@link @xeokit/scene!SceneObject.geometry}\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class Geometry {\n\n    /**\n     * ID for the geometry.\n     */\n    id: string;\n\n    /**\n     * Primitive type.\n     *\n     * Possible values are {@link SolidPrimitive}, {@link SurfacePrimitive}, {@link LinesPrimitive}, {@link PointsPrimitive}\n     * and {@link TrianglesPrimitive}.\n     */\n    primitive: number;\n\n    /**\n     * Matrix to decompress {@link @xeokit/scene!GeometryBucketParams.positionsCompressed}.\n     */\n    positionsDecompressMatrix: FloatArrayParam;\n\n    /**\n     * Axis-aligned, non-quantized 3D boundary of the geometry's vertex positions.\n     */\n    aabb?: FloatArrayParam;\n\n    /**\n     * 4x4 matrix to de-quantize the geometry's UV coordinates, when UVs are provided.\n     */\n    uvsDecompressMatrix?: FloatArrayParam;\n\n    /**\n     * The geometry arrays, organized into buckets for optimal memory use.\n     *\n     * The bucketing strategy aims to reduce memory consumed by indices. There are three buckets, each with an indices array that\n     * requires a different number of bits for its values. The first bucket's indices contain 8-bit values in range [0...255],\n     * the second contains 16-bit values in range ````[256..65535]````, and the third contains 32-bit values in\n     * range ````[65536...2147483647]````. With this strategy, we avoid wasting storage bits on the 8-bit and 16-bit values.\n     *\n     * The buckets also partition the geometry positions and UVs, so that the indices are indexing positions and UVs\n     * that are local to their bucket. This further optimizes memory use, by reducing the values of large indices to small\n     * locally-offset values, which can reduce the number of bits they need.\n     */\n    geometryBuckets: GeometryBucket[];\n\n    /**\n     * Interface through which this Geometry can load any user-updated geometry arrays into the renderer.\n     *\n     * @internal\n     */\n    rendererGeometry: RendererGeometry | null;\n\n    constructor(params: GeometryCompressedParams) {\n        this.geometryBuckets = [];\n        for (let i = 0, len = params.geometryBuckets.length; i < len; i++) {\n            this.geometryBuckets[i] = new GeometryBucket(params.geometryBuckets[i]);\n        }\n        this.id = params.id;\n        this.positionsDecompressMatrix = params.positionsDecompressMatrix;\n        this.primitive = params.primitive;\n    }\n}","import type {SceneObject} from \"./SceneObject\";\nimport type {Mesh} from \"./Mesh\";\nimport {decompressPositions3} from \"@xeokit/compression\";\nimport {transformPositions3} from \"@xeokit/matrix\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {Geometry} from \"./Geometry\";\nimport type {GeometryBucket} from \"./GeometryBucket\";\nimport {LinesPrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\n\n/**\n * The {@link getSceneObjectGeometry} passes an instance of GeometryView to its callback\n * for each {@link GeometryBucket} it visits. The GeometryView provides the SceneObject, Mesh, Geometry and\n * GeometryBucket at the current state of iteration, along with accessors through which the caller can\n * get various resources that the GeometryView lazy-computes on-demand, such as decompressed vertex positions, World-space\n * vertex positons, and decompressed vertex UV coordinates.\n */\nexport interface GeometryView {\n\n    /**\n     * The current {@link SceneObject}.\n     */\n    object: SceneObject;\n\n    /**\n     * The current {@link Mesh}.\n     */\n    mesh: Mesh;\n\n    /**\n     * The current {@link Mesh | Mesh's} position in {@link SceneModel.meshes | SceneObject.meshes}.\n     */\n    meshIndex: number;\n\n    /**\n     * The current {@link Geometry}.\n     */\n    geometry: Geometry;\n\n    /**\n     * The current {@link GeometryBucket}.\n     */\n    geometryBucket: GeometryBucket;\n\n    /**\n     * The current {@link GeometryBucket | GeometryBucket's} position in {@link Geometry.geometryBuckets | Geometry.geometryBuckets }.\n     */\n    geometryBucketIndex: number;\n\n    /**\n     * The total number of {@link GeometryBucket | GeometryBuckets} within the current {@link SceneObject}..\n     */\n    readonly totalGeometryBuckets: number;\n\n    /**\n     * The number of primitives in the current {@link GeometryBucket}.\n     */\n    readonly numPrimitives: number;\n\n    /**\n     * The current 3D vertex positions, dequantized, as 32-bit floats.\n     */\n    readonly positionsDecompressed: FloatArrayParam;\n\n    /**\n     * The current 3D World-space vertex positions, dequantized and world-transformed, as 64-bit floats.\n     */\n    readonly positionsWorld: FloatArrayParam;\n\n    /**\n     * The current vertex UV coordinates, if any, dequantized to 32-bit floats.\n     */\n    readonly uvsDecompressed: FloatArrayParam;\n}\n\nclass GeometryViewImpl {\n\n    object: SceneObject | null;\n    mesh: Mesh | null;\n    meshIndex: number;\n    geometry: Geometry | null;\n    geometryBucket: GeometryBucket | null;\n    geometryBucketIndex: number;\n    #positionsDecompressed: Float32Array | null;\n    #positionsWorld: Float64Array | null;\n\n    constructor() {\n        this.object = null;\n        this.mesh = null;\n        this.meshIndex = 0;\n        this.geometry = null;\n        this.geometryBucket = null;\n        this.geometryBucketIndex = 0;\n        this.#positionsDecompressed = null;\n        this.#positionsWorld = null;\n    }\n\n    get totalGeometryBuckets() {\n        let totalGeometryBuckets = 0;\n        if (this.object) {\n            for (let i = 0, len = this.object.meshes.length; i < len; i++) {\n                totalGeometryBuckets += this.object.meshes[i].geometry.geometryBuckets.length;\n            }\n        }\n        return totalGeometryBuckets;\n    }\n\n    get numPrimitives() {\n        const primitiveType = (<Geometry>this.geometry).primitive;\n        const elementsPerPrimitiveType = (primitiveType === TrianglesPrimitive ? 3 : (primitiveType === LinesPrimitive ? 2 : 1));\n        return (<FloatArrayParam>(<GeometryBucket>this.geometryBucket).indices).length / elementsPerPrimitiveType;\n    }\n\n    get positionsDecompressed(): FloatArrayParam {\n        if (!this.#positionsDecompressed) {\n            this.#positionsDecompressed = new Float32Array((<GeometryBucket>this.geometryBucket).positionsCompressed.length);\n            decompressPositions3((<GeometryBucket>this.geometryBucket).positionsCompressed, (<Geometry>this.geometry).positionsDecompressMatrix, this.#positionsDecompressed);\n        }\n        return this.#positionsDecompressed;\n    }\n\n    get positionsWorld(): FloatArrayParam {\n        if (!this.#positionsWorld) {\n            const positionsDecompressed = this.positionsDecompressed;\n            this.#positionsWorld = new Float64Array(positionsDecompressed.length);\n            transformPositions3(positionsDecompressed, (<Mesh>this.mesh).matrix, this.#positionsWorld);\n        }\n        return this.#positionsWorld;\n    }\n\n    get uvsDecompressed(): FloatArrayParam | null{\n        return null;\n    }\n\n    reset() {\n        this.#positionsDecompressed = null;\n        this.#positionsWorld = null;\n    }\n}\n\nconst geometryView = new GeometryViewImpl();\n\n/**\n * Gets the uncompressed, World-space geometry of each {@link GeometryBucket} in each\n * {@link Geometry} in each {@link Mesh} in a {@link SceneObject}.\n *\n * If the callback returns ````true````, then this method immediately stops iterating and also returns ````true````.\n *\n * @param sceneObject\n * @param withEachGeometry\n */\nexport function getSceneObjectGeometry(sceneObject: SceneObject, withEachGeometry: (geometryView: GeometryView) => boolean): boolean {\n    geometryView.reset();\n    geometryView.object = sceneObject;\n    for (let i = 0, len = sceneObject.meshes.length; i < len; i++) {\n        const mesh = sceneObject.meshes[i];\n        geometryView.mesh = mesh;\n        geometryView.meshIndex = i;\n        const geometry = mesh.geometry;\n        geometryView.geometry = geometry;\n        for (let j = 0, lenj = geometry.geometryBuckets.length; j < lenj; j++) {\n            geometryView.geometryBucket = geometry.geometryBuckets[j];\n            geometryView.geometryBucketIndex = j;\n            if (withEachGeometry(<GeometryView>geometryView)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n","import type {Mesh} from \"./Mesh\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {RendererObject} from \"./RendererObject\";\nimport type {Scene} from \"./Scene\";\nimport type {SceneModel} from \"./SceneModel\";\nimport {collapseAABB3, createAABB3, expandAABB3Points3} from \"@xeokit/boundaries\";\nimport {getSceneObjectGeometry} from \"./getSceneObjectGeometry\";\n\n/**\n * An object in a {@link @xeokit/scene!SceneModel}.\n *\n * * Stored in {@link @xeokit/scene!SceneModel.objects | SceneModel.objects} and {@link @xeokit/scene!Scene.objects | Scene.objects}\n * * Created with {@link @xeokit/scene!SceneModel.createObject | SceneModel.createObject}\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class SceneObject {\n\n    /**\n     * The {@link SceneModel} that contains this SceneObject.\n     */\n    public readonly model: SceneModel;\n\n    /**\n     * Unique ID of this SceneObject.\n     *\n     * SceneObjects are stored by ID in {@link Scene.objects | Scene.objects} and {@link SceneModel.objects | SceneModel.objects}.\n     */\n    public readonly id: string;\n\n    /**\n     * The {@link Mesh | Meshes} belonging to this SceneObject.\n     */\n    public readonly meshes: Mesh[];\n\n    /**\n     * Optional layer ID for this SceneObject.\n     */\n    public readonly layerId?: string;\n\n    /**\n     *  Internal interface through which a {@link SceneObject} can load property updates into a renderer.\n     *\n     *  This is defined while the owner {@link SceneModel} has been added to a {@link @xeokit/viewer!Viewer | Viewer}.\n     *\n     * @internal\n     */\n    rendererObject: RendererObject | null;\n\n    #aabb: FloatArrayParam;\n    #aabbDirty: boolean;\n\n    /**\n     * @private\n     */\n    constructor(cfg: {\n        model: SceneModel;\n        meshes: Mesh[];\n        id: string;\n        layerId?: string;\n    }) {\n        this.id = cfg.id;\n        this.layerId = cfg.layerId;\n        this.meshes = cfg.meshes;\n        this.#aabb = createAABB3();\n        this.#aabbDirty = true;\n        this.rendererObject = null;\n    }\n\n    /**\n     * Gets the axis-aligned 3D World-space boundary of this SceneObject.\n     */\n    get aabb(): FloatArrayParam {\n        if (this.#aabbDirty) {\n            collapseAABB3(this.#aabb);\n            getSceneObjectGeometry(this, (geometryView) => {\n                expandAABB3Points3(this.#aabb, geometryView.positionsWorld);\n                return false;\n            });\n            this.#aabbDirty = false;\n        }\n        return this.#aabb;\n    }\n\n    /**\n     * @private\n     */\n    setAABBDirty() {\n        this.#aabbDirty = true;\n    }\n}\n","import type {Texture} from \"./Texture\";\nimport type {TextureSetParams} from \"./TextureSetParams\";\nimport type {RendererTextureSet} from \"./RendererTextureSet\";\n\n/**\n * A set of {@link Texture | Textures} in a {@link SceneModel}.\n *\n * * Stored in {@link @xeokit/scene!SceneModel.textureSets | SceneModel.textureSets}\n * * Created with {@link @xeokit/scene!SceneModel.createTextureSet | SceneModel.createTextureSet}\n * * Referenced by {@link Mesh.textureSet | Mesh.textureSet}\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class TextureSet {\n\n    /**\n     * The ID of this TextureSet.\n     */\n    id: string;\n\n    /**\n     * The color {@link Texture} in this set.\n     */\n    colorTexture?: Texture;\n\n    /**\n     * The metallic-roughness {@link Texture} in this set.\n     */\n    metallicRoughnessTexture?: Texture;\n\n    /**\n     * The occlusion {@link Texture} in this set.\n     */\n    occlusionTexture?: Texture;\n\n    /**\n     * The emissive {@link Texture} in this set.\n     */\n    emissiveTexture?: Texture;\n\n    /**\n     *  Internal interface through which a TextureSet can load property updates into a renderer.\n     *\n     *  This is defined while the owner {@link SceneModel} has been added to a {@link @xeokit/viewer!Viewer | Viewer}.\n     *\n     * @internal\n     */\n    rendererTextureSet: RendererTextureSet | null;\n\n    /**\n     * @private\n     */\n    constructor(textureSetParams: TextureSetParams,\n                textures: {\n                    emissiveTexture?: Texture;\n                    occlusionTexture?: Texture;\n                    metallicRoughnessTexture?: Texture;\n                    colorTexture?: Texture;\n                }) {\n\n        this.id = textureSetParams.id;\n        this.colorTexture = textures.colorTexture;\n        this.metallicRoughnessTexture = textures.metallicRoughnessTexture;\n        this.occlusionTexture = textures.occlusionTexture;\n        this.emissiveTexture = textures.emissiveTexture;\n        this.rendererTextureSet = null;\n    }\n}","import {\n    ClampToEdgeWrapping,\n    GIFMediaType,\n    JPEGMediaType,\n    LinearEncoding,\n    LinearFilter,\n    LinearMipmapLinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    MirroredRepeatWrapping,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    PNGMediaType,\n    RepeatWrapping,\n    sRGBEncoding\n} from \"@xeokit/constants\";\nimport type {FloatArrayParam} from \"@xeokit/math\";\nimport type {RendererTexture} from \"./RendererTexture\";\nimport type {TextureParams} from \"./TextureParams\";\nimport {createVec4} from \"@xeokit/matrix\";\n\n/**\n * A texture in a {@link SceneModel}.\n *\n * * Stored in {@link @xeokit/scene!SceneModel.textures | SceneModel.textures}\n * * Created with {@link @xeokit/scene!SceneModel.createTexture | SceneModel.createTexture}\n * * Referenced by {@link TextureSet.colorTexture | TextureSet.colorTexture},\n * {@link TextureSet.metallicRoughnessTexture | TextureSet.metallicRoughnessTexture},\n * {@link TextureSet.occlusionTexture | TextureSet.occlusionTexture} and {@link TextureSet.emissiveTexture | TextureSet.emissiveTexture}\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class Texture {\n\n    /**\n     *  Internal interface through which this {@link Texture} can load property updates into a renderer.\n     *\n     *  This is defined when the owner {@link SceneModel} has been added to a {@link @xeokit/viewer!Viewer | Viewer}.\n     *\n     * @internal\n     */\n    rendererTexture: RendererTexture | null;\n\n    /**\n     * ID for the texture.\n     */\n    id: string;\n\n    /**\n     * Path to an image file.\n     */\n    src?: string;\n\n    /**\n     * Image file data.\n     */\n    imageData?: any;\n\n    /**\n     * Transcoded texture data.\n     */\n    buffers?: ArrayBuffer[];\n\n    /**\n     * HTMLImage containing the texture image.\n     */\n    image?: HTMLImageElement;\n\n    /**\n     * Pixel height of the texture.\n     */\n    height: number;\n\n    /**\n     * Pixel width of the texture.\n     */\n    width: number;\n\n    /**\n     * True if the texture is compressed.\n     */\n    compressed: boolean;\n\n    /**\n     * Media type of this Texture.\n     *\n     * Supported values are {@link GIFMediaType}, {@link PNGMediaType} and {@link JPEGMediaType}.\n     *\n     * Ignored for compressed textures.\n     */\n    mediaType?: number;\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Supported values are {@link LinearFilter} and {@link NearestFilter}.\n     */\n    magFilter: number;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel. Supported values\n     * are {@link LinearMipmapLinearFilter}, {@link LinearMipMapNearestFilter},\n     * {@link NearestMipMapNearestFilter}, {@link NearestMipMapLinearFilter}\n     * and {@link LinearMipMapLinearFilter}.\n     *\n     * Ignored for compressed textures.\n     */\n    minFilter: number;\n\n    /**\n     * S wrapping mode.\n     *\n     * Supported values are {@link ClampToEdgeWrapping}, {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n     *\n     * Ignored for compressed textures.\n     */\n    wrapS: number;\n\n    /**\n     * T wrapping mode.\n     *\n     * Supported values are {@link ClampToEdgeWrapping}, {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n     *\n     * Ignored for compressed textures.\n     */\n    wrapT: number;\n\n    /**\n     * R wrapping mode.\n     *\n     * Supported values are {@link ClampToEdgeWrapping}, {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n     *\n     * Ignored for compressed textures.\n     */\n    wrapR: number;\n\n    /**\n     * Flips this Texture's source data along its vertical axis when ````true````.\n     */\n    flipY: boolean;\n\n    /**\n     * Texture encoding format.\n     *\n     * Supported values are {@link LinearEncoding} and {@link sRGBEncoding}.\n     */\n    encoding: number;\n\n    /**\n     * RGBA color to preload the texture with.\n     */\n    preloadColor: FloatArrayParam;\n\n    /**\n     * @private\n     */\n    channel: number;\n\n    /**\n     * @private\n     */\n    constructor(params: TextureParams) {\n        this.id = params.id;\n        this.imageData = params.imageData;\n        this.src = params.src;\n        this.mediaType = params.mediaType;\n        this.minFilter = params.minFilter || LinearMipMapNearestFilter;\n        this.magFilter = params.magFilter || LinearMipMapNearestFilter;\n        this.wrapS = params.wrapS || RepeatWrapping;\n        this.wrapT = params.wrapT || RepeatWrapping;\n        this.wrapR = params.wrapR || RepeatWrapping\n        this.encoding = params.encoding || LinearEncoding;\n        this.preloadColor = createVec4(params.preloadColor || [1, 1, 1, 1]);\n        this.channel = 0;\n        this.rendererTexture = null;\n    }\n}\n\n","import type {FloatArrayParam} from \"@xeokit/math\";\nimport {createMat4, createVec3, identityMat4} from \"@xeokit/matrix\";\nimport type {RendererMesh} from \"./RendererMesh\";\nimport type {Geometry} from \"./Geometry\";\nimport type {TextureSet} from \"./TextureSet\";\nimport type {SceneObject} from \"./SceneObject\";\n\n/**\n * A mesh in a {@link SceneModel}.\n *\n * * Stored in {@link @xeokit/scene!SceneModel.meshes | SceneModel.meshes}\n * * Created with {@link @xeokit/scene!SceneModel.createMesh | SceneModel.createMesh}\n * * Referenced by {@link @xeokit/scene!SceneModel.meshes | SceneObject.meshes}\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class Mesh {\n\n    /**\n     * Unique ID of this Mesh.\n     *\n     * Mesh is stored by this ID in {@link @xeokit/scene!SceneModel.meshes}.\n     */\n    id: string;\n\n    /**\n     * {@link @xeokit/scene!Geometry} used by this Mesh.\n     */\n    geometry: Geometry;\n\n    /**\n     * {@link @xeokit/scene!TextureSet} used by this Mesh.\n     */\n    textureSet?: TextureSet;\n\n    /**\n     *  Internal interface through which a {@link Mesh} can load property updates into a renderer.\n     *\n     *  This is defined when the owner {@link @xeokit/scene!SceneModel} has been added to a {@link @xeokit/viewer!Viewer | Viewer}.\n     *\n     * @internal\n     */\n    rendererMesh: RendererMesh | null;\n\n    /**\n     * The {@link @xeokit/scene!SceneObject} that uses this Mesh.\n     */\n    object: SceneObject | null;\n\n    #color: FloatArrayParam;\n    #matrix: FloatArrayParam;\n    #metallic: number;\n    #roughness: number;\n    #opacity: number;\n\n    /**\n     * @private\n     */\n    constructor(meshParams: {\n        id: string;\n        geometry: Geometry;\n        textureSet?: TextureSet;\n        matrix?: FloatArrayParam;\n        color?: FloatArrayParam;\n        opacity?: number;\n        roughness?: number;\n        metallic?: number;\n    }) {\n        this.id = meshParams.id;\n        this.#matrix = meshParams.matrix ? createMat4(meshParams.matrix) : identityMat4();\n        this.geometry = meshParams.geometry;\n        this.textureSet = meshParams.textureSet;\n        this.rendererMesh = null;\n\n        this.color = meshParams.color || createVec3([1, 1, 1]);\n        this.metallic = (meshParams.metallic !== null && meshParams.metallic !== undefined) ? meshParams.metallic : 0;\n        this.roughness = (meshParams.roughness !== null && meshParams.roughness !== undefined) ? meshParams.roughness : 1;\n        this.opacity = (meshParams.opacity !== undefined && meshParams.opacity !== null) ? meshParams.opacity : 1.0;\n    }\n\n    /**\n     * Gets the RGB color for this Mesh.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     */\n    get color(): FloatArrayParam {\n        return this.#color;\n    }\n\n    /**\n     * Sets the RGB color for this Mesh.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     */\n    set color(value: FloatArrayParam) {\n        let color = this.#color;\n        if (!color) {\n            color = this.#color = new Float32Array(4);\n            color[3] = 1;\n        }\n        if (value) {\n            color[0] = value[0];\n            color[1] = value[1];\n            color[2] = value[2];\n        } else {\n            color[0] = 1;\n            color[1] = 1;\n            color[2] = 1;\n        }\n        if (this.rendererMesh) {\n            this.rendererMesh.setColor(this.#color);\n        }\n    }\n\n    /**\n     * Gets this Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {FloatArrayParam}\n     */\n    get matrix(): FloatArrayParam {\n        return this.#matrix;\n    }\n\n    /**\n     * Updates this Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {FloatArrayParam}\n     */\n    set matrix(matrix: FloatArrayParam) {\n        if (matrix) {\n            // @ts-ignore\n            this.#matrix.set(matrix);\n        } else {\n            identityMat4(this.#matrix);\n        }\n        if (this.rendererMesh) {\n            this.rendererMesh.setMatrix(this.#matrix);\n        }\n        if (this.object) {\n            this.object.setAABBDirty();\n        }\n    }\n\n    /**\n     * Gets this Mesh's metallic factor.\n     *\n     * This is in the range ````[0..1]```` and indicates how metallic this Mesh is.\n     *\n     * ````1```` is metal, ````0```` is non-metal.\n     *\n     * Default value is ````1.0````.\n     */\n    get metallic(): number {\n        return this.#metallic;\n    }\n\n    /**\n     * Sets this Mesh's metallic factor.\n     *\n     * This is in the range ````[0..1]```` and indicates how metallic this Mesh is.\n     *\n     * ````1```` is metal, ````0```` is non-metal.\n     *\n     * Default value is ````1.0````.\n     */\n    set metallic(value: number) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this.#metallic === value) {\n            return;\n        }\n        this.#metallic = value;\n        if (this.rendererMesh) {\n            this.rendererMesh.setMetallic(this.#metallic);\n        }\n    }\n\n    /**\n     * Gets this Mesh's roughness factor.\n     *\n     * This factor is in the range ````[0..1]````, where ````0```` is fully smooth,````1```` is fully rough.\n     *\n     * Default value is ````1.0````.\n     */\n    get roughness(): number {\n        return this.#roughness;\n    }\n\n    /**\n     * Sets this Mesh's roughness factor.\n     *\n     * This factor is in the range ````[0..1]````, where ````0```` is fully smooth,````1```` is fully rough.\n     *\n     * Default value is ````1.0````.\n     */\n    set roughness(value: number) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this.#roughness === value) {\n            return;\n        }\n        this.#roughness = value;\n        if (this.rendererMesh) {\n            this.rendererMesh.setRoughness(this.#roughness);\n        }\n    }\n\n    /**\n     * Gets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]````.\n     */\n    get opacity(): number {\n        return this.#opacity;\n    }\n\n    /**\n     * Sets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]````.\n     */\n    set opacity(opacity: number) {\n        opacity = (opacity !== undefined && opacity !== null) ? opacity : 1.0;\n        if (this.#opacity === opacity) {\n            return;\n        }\n        this.#opacity = opacity;\n        if (this.rendererMesh) {\n            //       this.rendererMesh.setOpacity(this.#opacity);\n        }\n    }\n}\n","import {DEGTORAD, FloatArrayParam, IntArrayParam} from \"@xeokit/math\";\nimport {createVec3, cross3Vec3, dotVec3, normalizeVec3, subVec3} from \"@xeokit/matrix\";\nimport {decompressPoint3} from \"@xeokit/compression\";\n\nconst uniquePositions: number[] = [];\nconst indicesLookup: number[] = [];\nconst indicesReverseLookup: number[] = [];\nconst weldedIndices: number[] = [];\n\n// TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\nconst faces: { normal: number[]; }[] = [];\nlet numFaces = 0;\nconst compa = new Uint16Array(3);\nconst compb = new Uint16Array(3);\nconst compc = new Uint16Array(3);\nconst a = createVec3();\nconst b = createVec3();\nconst c = createVec3();\nconst cb = createVec3();\nconst ab = createVec3();\nconst cross = createVec3();\nconst normal = createVec3();\n\nfunction weldVertices(positions: FloatArrayParam, indices: IntArrayParam) {\n    const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    let vx;\n    let vy;\n    let vz;\n    let key;\n    const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    const precision = Math.pow(10, precisionPoints);\n    let i;\n    let len;\n    let lenUniquePositions = 0;\n    for (i = 0, len = positions.length; i < len; i += 3) {\n        vx = positions[i];\n        vy = positions[i + 1];\n        vz = positions[i + 2];\n        key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n        // @ts-ignore\n        if (positionsMap[key] === undefined) {\n            // @ts-ignore\n            positionsMap[key] = lenUniquePositions / 3;\n            uniquePositions[lenUniquePositions++] = vx;\n            uniquePositions[lenUniquePositions++] = vy;\n            uniquePositions[lenUniquePositions++] = vz;\n        }\n        // @ts-ignore\n        indicesLookup[i / 3] = positionsMap[key];\n    }\n    for (i = 0, len = indices.length; i < len; i++) {\n        weldedIndices[i] = indicesLookup[indices[i]];\n        indicesReverseLookup[weldedIndices[i]] = indices[i];\n    }\n}\n\nfunction buildFaces(numIndices: number, positionsDecompressMatrix: FloatArrayParam) {\n    numFaces = 0;\n    for (let i = 0, len = numIndices; i < len; i += 3) {\n        const ia = ((weldedIndices[i]) * 3);\n        const ib = ((weldedIndices[i + 1]) * 3);\n        const ic = ((weldedIndices[i + 2]) * 3);\n        if (positionsDecompressMatrix) {\n            compa[0] = uniquePositions[ia];\n            compa[1] = uniquePositions[ia + 1];\n            compa[2] = uniquePositions[ia + 2];\n            compb[0] = uniquePositions[ib];\n            compb[1] = uniquePositions[ib + 1];\n            compb[2] = uniquePositions[ib + 2];\n            compc[0] = uniquePositions[ic];\n            compc[1] = uniquePositions[ic + 1];\n            compc[2] = uniquePositions[ic + 2];\n            // Decode\n            decompressPoint3(compa, positionsDecompressMatrix, a);\n            decompressPoint3(compb, positionsDecompressMatrix, b);\n            decompressPoint3(compc, positionsDecompressMatrix, c);\n        } else {\n            a[0] = uniquePositions[ia];\n            a[1] = uniquePositions[ia + 1];\n            a[2] = uniquePositions[ia + 2];\n            b[0] = uniquePositions[ib];\n            b[1] = uniquePositions[ib + 1];\n            b[2] = uniquePositions[ib + 2];\n            c[0] = uniquePositions[ic];\n            c[1] = uniquePositions[ic + 1];\n            c[2] = uniquePositions[ic + 2];\n        }\n        subVec3(c, b, cb);\n        subVec3(a, b, ab);\n        cross3Vec3(cb, ab, cross);\n        normalizeVec3(cross, normal);\n        // @ts-ignore\n        const face = faces[numFaces] || (faces[numFaces] = {normal: createVec3()});\n        face.normal[0] = normal[0];\n        face.normal[1] = normal[1];\n        face.normal[2] = normal[2];\n        numFaces++;\n    }\n}\n\n\n/**\n * Builds edge connectivity indices from a 3D triangle mesh given as vertex positions and triangle indices\n * @private\n */\nexport function buildEdgeIndices(\n    positions: FloatArrayParam,\n    indices: IntArrayParam,\n    positionsDecompressMatrix: FloatArrayParam,\n    edgeThreshold: number): IntArrayParam {\n\n    weldVertices(positions, indices);\n    buildFaces(indices.length, positionsDecompressMatrix);\n\n    const edgeIndices = [];\n    const thresholdDot = Math.cos(DEGTORAD * edgeThreshold);\n    const edges = {};\n\n    let edge1;\n    let edge2;\n    let index1;\n    let index2;\n    let key;\n    let largeIndex = false;\n    let edge;\n    let normal1;\n    let normal2;\n    let dot;\n    let ia;\n    let ib;\n\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n        const faceIndex = i / 3;\n        for (let j = 0; j < 3; j++) {\n            edge1 = weldedIndices[i + j];\n            edge2 = weldedIndices[i + ((j + 1) % 3)];\n            index1 = Math.min(edge1, edge2);\n            index2 = Math.max(edge1, edge2);\n            key = index1 + \",\" + index2;\n            // @ts-ignore\n            if (edges[key] === undefined) {\n                // @ts-ignore\n                edges[key] = {\n                    index1: index1,\n                    index2: index2,\n                    face1: faceIndex,\n                    face2: undefined\n                };\n            } else {\n                // @ts-ignore\n                edges[key].face2 = faceIndex;\n            }\n        }\n    }\n\n    for (key in edges) {\n        // @ts-ignore\n        edge = edges[key];\n        // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n        if (edge.face2 !== undefined) {\n            normal1 = faces[edge.face1].normal;\n            normal2 = faces[edge.face2].normal;\n            dot = dotVec3(normal1, normal2);\n            if (dot > thresholdDot) {\n                continue;\n            }\n        }\n        ia = indicesReverseLookup[edge.index1];\n        ib = indicesReverseLookup[edge.index2];\n        if (!largeIndex && ia > 65535 || ib > 65535) {\n            largeIndex = true;\n        }\n        edgeIndices.push(ia);\n        edgeIndices.push(ib);\n    }\n\n    return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n}","/**\n * @author https://github.com/tmarti, with support from https://tribia.com/\n * @license MIT\n *\n * This file takes a geometry given by { positions, indices }, and returns\n * equivalent { positions, indices } arrays but which only contain unique\n * positions.\n *\n * The time is O(N logN) with the number of positions due to a pre-sorting\n * step, but is much more GC-friendly and actually faster than the classic O(N)\n * approach based in keeping a hash-based LUT to identify unique positions.\n */\n\nlet comparePositions: any = null;\n\n\n/**\n * This function obtains unique positions in the provided object\n * .positions array and calculates an index mapping, which is then\n * applied to the provided object .indices and .edgeindices.\n *\n * The input object items are not modified, and instead new set\n * of positions, indices and edgeIndices with the applied optimization\n * are returned.\n *\n * The algorithm, instead of being based in a hash-like LUT for\n * identifying unique positions, is based in pre-sorting the input\n * positions...\n *\n * (it's possible to define a _\"consistent ordering\"_ for the positions\n *  as positions are quantized and thus not suffer from float number\n *  comparison artifacts)\n *\n * ... so same positions are adjacent in the sorted array, and then\n * it's easy to scan linearly the sorted array. During the linear run,\n * we will know that we found a different position because the comparison\n * function will return != 0 between current and previous element.\n *\n * During this linear traversal of the array, a `unique counter` is used\n * in order to calculate the mapping between original indices and unique\n * indices.\n *\n * @param {*} mesh The input mesh to process, with `positions`, `indices` and `edgeIndices` keys.\n * @private\n * @returns An array with 3 elements: 0 => the uniquified positions; 1 and 2 => the remapped edges and edgeIndices arrays\n */\nexport function uniquifyPositions(mesh: any): [Uint16Array, Uint32Array, Uint32Array | undefined] {\n\n    let positionsCompressed = mesh.positionsCompressed;\n    let indices = mesh.indices;\n    let edgeIndices = mesh.edgeIndices;\n\n    setMaxNumberOfPositions(positionsCompressed.length / 3);\n\n    let seq = seqInit.slice(0, positionsCompressed.length / 3);\n    let remappings = seqInit.slice(0, positionsCompressed.length / 3);\n\n    comparePositions = positionsCompressed;\n\n    seq.sort(compareVertex);\n\n    let uniqueIdx = 0\n\n    remappings[seq[0]] = 0;\n\n    for (let i = 1, len = seq.length; i < len; i++) {\n        if (0 != compareVertex(seq[i], seq[i - 1])) {\n            uniqueIdx++;\n        }\n\n        remappings[seq[i]] = uniqueIdx;\n    }\n\n    const numUniquePositions = uniqueIdx + 1;\n\n    const uniquePositionsCompressed = new Uint16Array(numUniquePositions * 3);\n\n    uniqueIdx = 0\n\n    uniquePositionsCompressed [uniqueIdx * 3 + 0] = positionsCompressed [seq[0] * 3 + 0];\n    uniquePositionsCompressed [uniqueIdx * 3 + 1] = positionsCompressed [seq[0] * 3 + 1];\n    uniquePositionsCompressed [uniqueIdx * 3 + 2] = positionsCompressed [seq[0] * 3 + 2];\n\n    for (let i = 1, len = seq.length; i < len; i++) {\n        if (0 !== compareVertex(seq[i], seq[i - 1])) {\n            uniqueIdx++;\n\n            uniquePositionsCompressed [uniqueIdx * 3 + 0] = positionsCompressed [seq[i] * 3 + 0];\n            uniquePositionsCompressed [uniqueIdx * 3 + 1] = positionsCompressed [seq[i] * 3 + 1];\n            uniquePositionsCompressed [uniqueIdx * 3 + 2] = positionsCompressed [seq[i] * 3 + 2];\n        }\n\n        remappings[seq[i]] = uniqueIdx;\n    }\n\n    comparePositions = null;\n\n    let uniqueIndices = new Uint32Array(indices.length);\n\n    for (let i = 0, len = indices.length; i < len; i++) {\n        uniqueIndices[i] = remappings [indices[i]];\n    }\n\n    let uniqueEdgeIndices;\n\n    if (edgeIndices) {\n        uniqueEdgeIndices = new Uint32Array(edgeIndices.length);\n        for (let i = 0, len = edgeIndices.length; i < len; i++) {\n            uniqueEdgeIndices[i] = remappings [edgeIndices[i]];\n        }\n    }\n    return [\n        uniquePositionsCompressed,\n        uniqueIndices,\n        uniqueEdgeIndices\n    ];\n}\n\n\nfunction compareVertex(a: any, b: any) {\n    let res;\n\n    for (let i = 0; i < 3; i++) {\n        if (0 != (res = comparePositions[a * 3 + i] - comparePositions[b * 3 + i])) {\n            return res;\n        }\n    }\n\n    return 0;\n}\n\nlet seqInit: any = null;\n\nfunction setMaxNumberOfPositions(maxPositions: any) {\n    if (seqInit !== null && seqInit.length >= maxPositions) {\n        return;\n    }\n\n    seqInit = new Uint32Array(maxPositions);\n\n    for (let i = 0; i < maxPositions; i++) {\n        seqInit[i] = i;\n    }\n}\n\n","/**\n * @author https://github.com/tmarti, with support from https://tribia.com/\n * @license MIT\n **/\nimport type {IntArrayParam} from \"@xeokit/math\";\n\n\nconst MAX_RE_BUCKET_FAN_OUT = 8;\n\nlet bucketsForIndices: any = null;\n\nexport function rebucketPositions(\n    mesh: {\n        positionsCompressed: IntArrayParam,\n        indices: IntArrayParam,\n        edgeIndices?: IntArrayParam,\n    },\n    bitsPerBucket: any,\n    checkResult = false): {\n    positionsCompressed: IntArrayParam,\n    indices: IntArrayParam,\n    edgeIndices?: IntArrayParam\n}[] {\n\n    const positionsCompressed = (mesh.positionsCompressed || []);\n    const indices = preSortIndices(mesh.indices || [], bitsPerBucket);\n    const edgeIndices: any = [];//preSortEdgeIndices(mesh.edgeIndices || []);\n\n    /**\n     * Code adapted from https://stackoverflow.com/questions/22697936/binary-search-in-javascript\n     */\n    function edgeSearch(el0: any, el1: any) {\n        if (el0 > el1) {\n            let tmp = el0;\n            el0 = el1;\n            el1 = tmp;\n        }\n\n        function compare_fn(a: any, b: any) {\n            if (a != el0) {\n                return el0 - a;\n            }\n\n            if (b != el1) {\n                return el1 - b;\n            }\n\n            return 0;\n        }\n\n        var m = 0;\n        var n = (edgeIndices.length >> 1) - 1;\n        while (m <= n) {\n            var k = (n + m) >> 1;\n            var cmp = compare_fn(edgeIndices[k * 2], edgeIndices[k * 2 + 1]);\n            if (cmp > 0) {\n                m = k + 1;\n            } else if (cmp < 0) {\n                n = k - 1;\n            } else {\n                return k;\n                /**\n                 * Flat array of compressed integer vertex colors.\n                 *\n                 * Alternative to {@link @xeokit/scene!GeometryParams.colorsCompressed}.\n                 *\n                 * Ignored when {@link @xeokit/scene!GeometryParams.id} is defined.\n                 */\n            }\n        }\n        return -m - 1;\n    }\n\n    // console.log (edgeIndices);\n\n    // throw (e);\n\n    // console.log (`${mesh.edgeIndices.length / 2} edge indices`);\n    // console.log (`${edgeIndices.length / 2} edge indices sorted`);\n\n    const alreadyOutputEdgeIndices = new Int32Array(edgeIndices.length / 2);\n    alreadyOutputEdgeIndices.fill(0);\n\n    const numPositions = positionsCompressed.length / 3;\n\n    if (numPositions > ((1 << bitsPerBucket) * MAX_RE_BUCKET_FAN_OUT)) {\n        return [mesh];\n    }\n\n    const bucketIndicesRemap = new Int32Array(numPositions);\n    bucketIndicesRemap.fill(-1);\n\n    const buckets: any = [];\n\n    function addEmptyBucket() {\n        bucketIndicesRemap.fill(-1);\n\n        let newBucket: any = {\n            positionsCompressed: [],\n            indices: [],\n            edgeIndices: [],\n            maxNumPositions: (1 << bitsPerBucket) - bitsPerBucket,\n            numPositions: 0,\n            bucketNumber: buckets.length\n        };\n\n        buckets.push(newBucket);\n\n        return newBucket;\n    }\n\n    let currentBucket = addEmptyBucket();\n\n    // let currentBucket = 0;\n\n    let retVal = 0;\n\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n        let additonalPositionsInBucket = 0;\n\n        const ii0 = indices[i];\n        const ii1 = indices[i + 1];\n        const ii2 = indices[i + 2];\n\n        if (bucketIndicesRemap[ii0] == -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if (bucketIndicesRemap[ii1] == -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if (bucketIndicesRemap[ii2] == -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if ((additonalPositionsInBucket + currentBucket.numPositions) > currentBucket.maxNumPositions) {\n            currentBucket = addEmptyBucket();\n        }\n\n        if (currentBucket.bucketNumber > MAX_RE_BUCKET_FAN_OUT) {\n            return [mesh];\n        }\n\n        if (bucketIndicesRemap[ii0] == -1) {\n            bucketIndicesRemap[ii0] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3 + 2]);\n        }\n\n        if (bucketIndicesRemap[ii1] == -1) {\n            bucketIndicesRemap[ii1] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3 + 2]);\n        }\n\n        if (bucketIndicesRemap[ii2] == -1) {\n            bucketIndicesRemap[ii2] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3 + 2]);\n        }\n\n        currentBucket.indices.push(bucketIndicesRemap[ii0]);\n        currentBucket.indices.push(bucketIndicesRemap[ii1]);\n        currentBucket.indices.push(bucketIndicesRemap[ii2]);\n\n        // Check possible edge1\n        let edgeIndex;\n\n        if ((edgeIndex = edgeSearch(ii0, ii1)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] == 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n\n        if ((edgeIndex = edgeSearch(ii0, ii2)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] == 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n\n        if ((edgeIndex = edgeSearch(ii1, ii2)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] == 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n    }\n\n    const prevBytesPerIndex = bitsPerBucket / 8 * 2;\n    const newBytesPerIndex = bitsPerBucket / 8;\n\n    const originalSize = positionsCompressed.length * 2 + (indices.length + edgeIndices.length) * prevBytesPerIndex;\n\n    let newSize = 0;\n    let newPositions = -positionsCompressed.length / 3;\n\n    buckets.forEach((bucket: any) => {\n        newSize += bucket.positionsCompressed.length * 2 + (bucket.indices.length + bucket.edgeIndices.length) * newBytesPerIndex;\n        newPositions += bucket.positionsCompressed.length / 3;\n    });\n\n    if (newSize > originalSize) {\n        return [mesh];\n    }\n\n    // console.log (\"added positions \" + newPositions + \", buckets: \" + buckets.length);\n\n    if (checkResult) {\n        doCheckResult(buckets, mesh);\n    }\n\n    // return [ mesh ];\n\n    return buckets;\n}\n\nfunction compareBuckets(a: any, b: any) {\n    let aa = a * 3;\n    let bb = b * 3;\n    let aa1, aa2, aa3, bb1, bb2, bb3;\n    const minBucketA = Math.min(\n        aa1 = bucketsForIndices[aa],\n        aa2 = bucketsForIndices[aa + 1],\n        aa3 = bucketsForIndices[aa + 2]\n    );\n    const minBucketB = Math.min(\n        bb1 = bucketsForIndices[bb],\n        bb2 = bucketsForIndices[bb + 1],\n        bb3 = bucketsForIndices[bb + 2]\n    );\n    if (minBucketA != minBucketB) {\n        return minBucketA - minBucketB;\n    }\n    const maxBucketA = Math.max(\n        aa1,\n        aa2,\n        aa3,\n    );\n    const maxBucketB = Math.max(\n        bb1,\n        bb2,\n        bb3,\n    );\n    if (maxBucketA != maxBucketB) {\n        return maxBucketA - maxBucketB;\n    }\n    return 0;\n}\n\nfunction preSortIndices(indices: any, bitsPerBucket: any) {\n    let seq = new Int32Array(indices.length / 3);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        seq[i] = i;\n    }\n    bucketsForIndices = new Int32Array(indices.length);\n    for (let i = 0, len = indices.length; i < len; i++) {\n        bucketsForIndices[i] = indices[i] >> bitsPerBucket;\n    }\n    seq.sort(compareBuckets);\n    const sortedIndices = new Int32Array(indices.length);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        sortedIndices[i * 3 + 0] = indices[seq[i] * 3 + 0];\n        sortedIndices[i * 3 + 1] = indices[seq[i] * 3 + 1];\n        sortedIndices[i * 3 + 2] = indices[seq[i] * 3 + 2];\n    }\n    return sortedIndices;\n}\n\nlet compareEdgeIndices: any = null;\n\nfunction compareIndices(a: any, b: any) {\n    let retVal = compareEdgeIndices[a * 2] - compareEdgeIndices[b * 2];\n    if (retVal != 0) {\n        return retVal;\n    }\n    return compareEdgeIndices[a * 2 + 1] - compareEdgeIndices[b * 2 + 1];\n}\n\nfunction preSortEdgeIndices(edgeIndices: any): any {\n    if ((edgeIndices || []).length == 0) {\n        return [];\n    }\n    let seq = new Int32Array(edgeIndices.length / 2);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        seq[i] = i;\n    }\n    for (let i = 0, j = 0, len = edgeIndices.length; i < len; i += 2) {\n        if (edgeIndices[i] > edgeIndices[i + 1]) {\n            let tmp = edgeIndices[i];\n            edgeIndices[i] = edgeIndices[i + 1];\n            edgeIndices[i + 1] = tmp;\n        }\n    }\n    compareEdgeIndices = new Int32Array(edgeIndices);\n    seq.sort(compareIndices);\n    const sortedEdgeIndices = new Int32Array(edgeIndices.length);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        sortedEdgeIndices[i * 2 + 0] = edgeIndices[seq[i] * 2 + 0];\n        sortedEdgeIndices[i * 2 + 1] = edgeIndices[seq[i] * 2 + 1];\n    }\n    return sortedEdgeIndices;\n}\n\n\nfunction unbucket(buckets: any) {\n    let positionsCompressed: any = [];\n    let indices: any = [];\n    let edgeIndices: any = [];\n\n    let positionsBase = 0;\n\n    buckets.forEach((bucket: any) => {\n        bucket.positionsCompressed.forEach((coord: any) => {\n            positionsCompressed.push(coord);\n        });\n\n        bucket.indices.forEach((index: any) => {\n            indices.push(index + positionsBase);\n        });\n\n        bucket.edgeIndices.forEach((edgeIndex: any) => {\n            edgeIndices.push(edgeIndex + positionsBase);\n        });\n\n        positionsBase += positionsCompressed.length / 3;\n    });\n\n    return {\n        positionsCompressed,\n        indices,\n        edgeIndices\n    };\n}\n\nfunction doCheckResult(buckets: any, mesh: any) {\n    const meshDict: any = {};\n    const edgesDict: any = {};\n\n    let edgeIndicesCount = 0;\n\n    buckets.forEach((bucket: any) => {\n        let indices = bucket.indices;\n        let edgeIndices = bucket.edgeIndices;\n        let positionsCompressed = bucket.positionsCompressed;\n\n        for (var i = 0, len = indices.length; i < len; i += 3) {\n            var key = positionsCompressed[indices[i] * 3] + \"_\" + positionsCompressed[indices[i] * 3 + 1] + \"_\" + positionsCompressed[indices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 1] * 3] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 2] * 3] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 2];\n\n            meshDict[key] = true;\n        }\n\n        edgeIndicesCount += bucket.edgeIndices.length / 2;\n\n        for (var i = 0, len = edgeIndices.length; i < len; i += 2) {\n            var key = positionsCompressed[edgeIndices[i] * 3] + \"_\" + positionsCompressed[edgeIndices[i] * 3 + 1] + \"_\" + positionsCompressed[edgeIndices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[edgeIndices[i + 1] * 3] + \"_\" + positionsCompressed[edgeIndices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[edgeIndices[i + 1] * 3 + 2] + \"/\";\n\n            edgesDict[key] = true;\n        }\n    });\n\n    {\n        let indices = mesh.indices;\n        let edgeIndices = mesh.edgeIndices;\n        let positionsCompressed = mesh.positionsCompressed;\n\n        for (var i = 0, len = indices.length; i < len; i += 3) {\n            var key = positionsCompressed[indices[i] * 3] + \"_\" + positionsCompressed[indices[i] * 3 + 1] + \"_\" + positionsCompressed[indices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 1] * 3] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 2] * 3] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 2];\n\n            if (!(key in meshDict)) {\n                console.log(\"Not found \" + key);\n                throw \"Ohhhh!\";\n            }\n        }\n\n        //  for (var i = 0, len = edgeIndices.length; i < len; i+=2)\n        //  {\n        //      var key = positionsCompressed[edgeIndices[i]*3] + \"_\" + positionsCompressed[edgeIndices[i]*3+1] + \"_\" + positionsCompressed[edgeIndices[i]*3+2] + \"/\" +\n        //                positionsCompressed[edgeIndices[i+1]*3] + \"_\" + positionsCompressed[edgeIndices[i+1]*3+1] + \"_\" + positionsCompressed[edgeIndices[i+1]*3+2] + \"/\";\n\n        //      if (!(key in edgesDict)) {\n        //          var key2 = edgeIndices[i] + \"_\" + edgeIndices[i+1];\n\n        //          console.log (\"   - Not found \" + key);\n        //          console.log (\"   - Not found \" + key2);\n        //         //  throw \"Ohhhh2!\";\n        //      }\n        //  }\n    }\n}\n\n","\n\nconst isBoolean = x => typeof x === 'boolean';\nconst isFunction = x => typeof x === 'function';\nexport const isObject = x => x !== null && typeof x === 'object';\nexport const isPureObject = x => isObject(x) && x.constructor === {}.constructor;\nexport const isPromise = x => isObject(x) && isFunction(x.then);\nexport const isIterable = x => x && typeof x[Symbol.iterator] === 'function';\nexport const isAsyncIterable = x => x && typeof x[Symbol.asyncIterator] === 'function';\nexport const isIterator = x => x && isFunction(x.next);\nexport const isResponse = x => typeof Response !== 'undefined' && x instanceof Response || x && x.arrayBuffer && x.text && x.json;\nexport const isFile = x => typeof File !== 'undefined' && x instanceof File;\nexport const isBlob = x => typeof Blob !== 'undefined' && x instanceof Blob;\n\nexport const isBuffer = x => x && typeof x === 'object' && x.isBuffer;\nexport const isWritableDOMStream = x => isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);\nexport const isReadableDOMStream = x => typeof ReadableStream !== 'undefined' && x instanceof ReadableStream || isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader);\n\nexport const isWritableNodeStream = x => isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);\nexport const isReadableNodeStream = x => isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\nexport const isReadableStream = x => isReadableDOMStream(x) || isReadableNodeStream(x);\nexport const isWritableStream = x => isWritableDOMStream(x) || isWritableNodeStream(x);\n//# sourceMappingURL=is-type.js.map","\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\nexport function parseMIMEType(mimeString) {\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\n\nexport function parseMIMETypeFromURL(url) {\n  const matches = DATA_URL_PATTERN.exec(url);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}\n//# sourceMappingURL=mime-type-utils.js.map","import { isResponse, isBlob } from '../../javascript-utils/is-type';\nimport { parseMIMEType, parseMIMETypeFromURL } from './mime-type-utils';\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\nexport function getResourceUrlAndType(resource) {\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  return {\n    url: '',\n    type: ''\n  };\n}\n\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n//# sourceMappingURL=resource-utils.js.map","import { isResponse } from '../../javascript-utils/is-type';\nimport { getResourceContentLength, getResourceUrlAndType } from './resource-utils';\n\nexport async function makeResponse(resource) {\n  if (isResponse(resource)) {\n    return resource;\n  }\n\n  const headers = {};\n  const contentLength = getResourceContentLength(resource);\n  if (contentLength >= 0) {\n    headers['content-length'] = String(contentLength);\n  }\n\n  const {\n    url,\n    type\n  } = getResourceUrlAndType(resource);\n  if (type) {\n    headers['content-type'] = type;\n  }\n\n  const initialDataUrl = await getInitialDataUrl(resource);\n  if (initialDataUrl) {\n    headers['x-first-bytes'] = initialDataUrl;\n  }\n\n  if (typeof resource === 'string') {\n    resource = new TextEncoder().encode(resource);\n  }\n\n  const response = new Response(resource, {\n    headers\n  });\n  Object.defineProperty(response, 'url', {\n    value: url\n  });\n  return response;\n}\n\nexport async function checkResponse(response) {\n  if (!response.ok) {\n    const message = await getResponseError(response);\n    throw new Error(message);\n  }\n}\n\nexport function checkResponseSync(response) {\n  if (!response.ok) {\n    let message = \"\".concat(response.status, \" \").concat(response.statusText);\n    message = message.length > 60 ? \"\".concat(message.slice(0, 60), \"...\") : message;\n    throw new Error(message);\n  }\n}\n\nasync function getResponseError(response) {\n  let message = \"Failed to fetch resource \".concat(response.url, \" (\").concat(response.status, \"): \");\n  try {\n    const contentType = response.headers.get('Content-Type');\n    let text = response.statusText;\n    if (contentType.includes('application/json')) {\n      text += \" \".concat(await response.text());\n    }\n    message += text;\n    message = message.length > 60 ? \"\".concat(message.slice(0, 60), \"...\") : message;\n  } catch (error) {\n  }\n  return message;\n}\nasync function getInitialDataUrl(resource) {\n  const INITIAL_DATA_LENGTH = 5;\n  if (typeof resource === 'string') {\n    return \"data:,\".concat(resource.slice(0, INITIAL_DATA_LENGTH));\n  }\n  if (resource instanceof Blob) {\n    const blobSlice = resource.slice(0, 5);\n    return await new Promise(resolve => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        var _event$target;\n        return resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n      };\n      reader.readAsDataURL(blobSlice);\n    });\n  }\n  if (resource instanceof ArrayBuffer) {\n    const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n    const base64 = arrayBufferToBase64(slice);\n    return \"data:base64,\".concat(base64);\n  }\n  return null;\n}\n\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n//# sourceMappingURL=response-utils.js.map","import { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from '../utils/response-utils';\n\nexport async function fetchFile(url, options) {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n    let fetchOptions = options;\n    if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') {\n      fetchOptions = options.fetch;\n    }\n    return await fetch(url, fetchOptions);\n  }\n  return await makeResponse(url);\n}\n//# sourceMappingURL=fetch-file.js.map","import isElectron from './is-electron';\nexport default function isBrowser() {\n  const isNode = typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n  return !isNode || isElectron();\n}\nexport function isBrowserMainThread() {\n  return isBrowser() && typeof document !== 'undefined';\n}\n//# sourceMappingURL=is-browser.js.map","export default function isElectron(mockUserAgent) {\n  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n    return true;\n  }\n\n  if (typeof process !== 'undefined' && typeof process.versions === 'object' && Boolean(process.versions['electron'])) {\n    return true;\n  }\n\n  const realUserAgent = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;\n  const userAgent = mockUserAgent || realUserAgent;\n\n  if (userAgent && userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=is-electron.js.map","const globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document,\n  process: typeof process === 'object' && process\n};\nconst global_ = globalThis;\nconst self_ = globals.self || globals.window || globals.global;\nconst window_ = globals.window || globals.self || globals.global;\nconst document_ = globals.document || {};\nconst process_ = globals.process || {};\nconst console_ = console;\nexport { self_ as self, window_ as window, global_ as global, document_ as document, process_ as process, console_ as console };\n//# sourceMappingURL=globals.js.map","import checkIfBrowser from '../lib/is-browser';\nexport { self, window, global, document, process, console } from '../lib/globals';\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\nexport const isBrowser = checkIfBrowser();\n//# sourceMappingURL=globals.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction getStorage(type) {\n  try {\n    const storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport class LocalStorage {\n  constructor(id, defaultConfig) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  _loadConfiguration() {\n    let configuration = {};\n\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n\n    Object.assign(this.config, configuration);\n    return this;\n  }\n\n}\n//# sourceMappingURL=local-storage.js.map","export function formatTime(ms) {\n  let formatted;\n\n  if (ms < 10) {\n    formatted = \"\".concat(ms.toFixed(2), \"ms\");\n  } else if (ms < 100) {\n    formatted = \"\".concat(ms.toFixed(1), \"ms\");\n  } else if (ms < 1000) {\n    formatted = \"\".concat(ms.toFixed(0), \"ms\");\n  } else {\n    formatted = \"\".concat((ms / 1000).toFixed(2), \"s\");\n  }\n\n  return formatted;\n}\nexport function leftPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(' '.repeat(padLength)).concat(string);\n}\nexport function rightPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(string).concat(' '.repeat(padLength));\n}\nexport function formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\nfunction formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n\n    string += formatValue(v[i], opts);\n  }\n\n  const terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\n\nexport function formatImage(image, message, scale) {\n  let maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n  const style = ['font-size:1px;', \"padding:\".concat(Math.floor(height / 2), \"px \").concat(Math.floor(width / 2), \"px;\"), \"line-height:\".concat(height, \"px;\"), \"background:url(\".concat(imageUrl, \");\"), \"background-size:\".concat(width, \"px \").concat(height, \"px;\"), 'color:transparent;'].join('');\n  return [\"\".concat(message, \" %c+\"), style];\n}\n//# sourceMappingURL=formatters.js.map","import { isBrowser } from '@probe.gl/env';\nexport let COLOR;\n\n(function (COLOR) {\n  COLOR[COLOR[\"BLACK\"] = 30] = \"BLACK\";\n  COLOR[COLOR[\"RED\"] = 31] = \"RED\";\n  COLOR[COLOR[\"GREEN\"] = 32] = \"GREEN\";\n  COLOR[COLOR[\"YELLOW\"] = 33] = \"YELLOW\";\n  COLOR[COLOR[\"BLUE\"] = 34] = \"BLUE\";\n  COLOR[COLOR[\"MAGENTA\"] = 35] = \"MAGENTA\";\n  COLOR[COLOR[\"CYAN\"] = 36] = \"CYAN\";\n  COLOR[COLOR[\"WHITE\"] = 37] = \"WHITE\";\n  COLOR[COLOR[\"BRIGHT_BLACK\"] = 90] = \"BRIGHT_BLACK\";\n  COLOR[COLOR[\"BRIGHT_RED\"] = 91] = \"BRIGHT_RED\";\n  COLOR[COLOR[\"BRIGHT_GREEN\"] = 92] = \"BRIGHT_GREEN\";\n  COLOR[COLOR[\"BRIGHT_YELLOW\"] = 93] = \"BRIGHT_YELLOW\";\n  COLOR[COLOR[\"BRIGHT_BLUE\"] = 94] = \"BRIGHT_BLUE\";\n  COLOR[COLOR[\"BRIGHT_MAGENTA\"] = 95] = \"BRIGHT_MAGENTA\";\n  COLOR[COLOR[\"BRIGHT_CYAN\"] = 96] = \"BRIGHT_CYAN\";\n  COLOR[COLOR[\"BRIGHT_WHITE\"] = 97] = \"BRIGHT_WHITE\";\n})(COLOR || (COLOR = {}));\n\nfunction getColor(color) {\n  return typeof color === 'string' ? COLOR[color.toUpperCase()] || COLOR.WHITE : color;\n}\n\nexport function addColor(string, color, background) {\n  if (!isBrowser && typeof string === 'string') {\n    if (color) {\n      color = getColor(color);\n      string = \"\\x1B[\".concat(color, \"m\").concat(string, \"\\x1B[39m\");\n    }\n\n    if (background) {\n      color = getColor(background);\n      string = \"\\x1B[\".concat(background + 10, \"m\").concat(string, \"\\x1B[49m\");\n    }\n  }\n\n  return string;\n}\n//# sourceMappingURL=color.js.map","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n//# sourceMappingURL=assert.js.map","import { window, process, isBrowser } from '@probe.gl/env';\nexport function getHiResTimestamp() {\n  let timestamp;\n\n  if (isBrowser && 'performance' in window) {\n    var _window$performance, _window$performance$n;\n\n    timestamp = window === null || window === void 0 ? void 0 : (_window$performance = window.performance) === null || _window$performance === void 0 ? void 0 : (_window$performance$n = _window$performance.now) === null || _window$performance$n === void 0 ? void 0 : _window$performance$n.call(_window$performance);\n  } else if ('hrtime' in process) {\n    var _process$hrtime;\n\n    const timeParts = process === null || process === void 0 ? void 0 : (_process$hrtime = process.hrtime) === null || _process$hrtime === void 0 ? void 0 : _process$hrtime.call(process);\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n//# sourceMappingURL=hi-res-timestamp.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { VERSION, isBrowser } from '@probe.gl/env';\nimport { LocalStorage } from './utils/local-storage';\nimport { formatImage, formatTime, leftPad } from './utils/formatters';\nimport { addColor } from './utils/color';\nimport { autobind } from './utils/autobind';\nimport assert from './utils/assert';\nimport { getHiResTimestamp } from './utils/hi-res-timestamp';\nconst originalConsole = {\n  debug: isBrowser ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\nconst DEFAULT_SETTINGS = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {}\n\nconst cache = {};\nconst ONCE = {\n  once: true\n};\nexport class Log {\n  constructor() {\n    let {\n      id\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      id: ''\n    };\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"VERSION\", VERSION);\n\n    _defineProperty(this, \"_startTs\", getHiResTimestamp());\n\n    _defineProperty(this, \"_deltaTs\", getHiResTimestamp());\n\n    _defineProperty(this, \"_storage\", void 0);\n\n    _defineProperty(this, \"userData\", {});\n\n    _defineProperty(this, \"LOG_THROTTLE_TIMEOUT\", 0);\n\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage(\"__probe-\".concat(this.id, \"__\"), DEFAULT_SETTINGS);\n    this.timeStamp(\"\".concat(this.id, \" started\"));\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel) {\n    this.setLevel(newLevel);\n  }\n\n  get level() {\n    return this.getLevel();\n  }\n\n  isEnabled() {\n    return this._storage.config.enabled;\n  }\n\n  getLevel() {\n    return this._storage.config.level;\n  }\n\n  getTotal() {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  getDelta() {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  set priority(newPriority) {\n    this.level = newPriority;\n  }\n\n  get priority() {\n    return this.level;\n  }\n\n  getPriority() {\n    return this.level;\n  }\n\n  enable() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    this._storage.setConfiguration({\n      enabled\n    });\n\n    return this;\n  }\n\n  setLevel(level) {\n    this._storage.setConfiguration({\n      level\n    });\n\n    return this;\n  }\n\n  get(setting) {\n    return this._storage.config[setting];\n  }\n\n  set(setting, value) {\n    this._storage.setConfiguration({\n      [setting]: value\n    });\n  }\n\n  settings() {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  assert(condition, message) {\n    assert(condition, message);\n  }\n\n  warn(message) {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  error(message) {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  deprecated(oldUsage, newUsage) {\n    return this.warn(\"`\".concat(oldUsage, \"` is deprecated and will be removed in a later version. Use `\").concat(newUsage, \"` instead\"));\n  }\n\n  removed(oldUsage, newUsage) {\n    return this.error(\"`\".concat(oldUsage, \"` has been removed. Use `\").concat(newUsage, \"` instead\"));\n  }\n\n  probe(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  log(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  info(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  once(logLevel, message) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);\n  }\n\n  table(logLevel, table, columns) {\n    if (table) {\n      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {\n        tag: getTableHeader(table)\n      });\n    }\n\n    return noop;\n  }\n\n  image(_ref) {\n    let {\n      logLevel,\n      priority,\n      image,\n      message = '',\n      scale = 1\n    } = _ref;\n\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n\n    return isBrowser ? logImageInBrowser({\n      image,\n      message,\n      scale\n    }) : logImageInNode({\n      image,\n      message,\n      scale\n    });\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);\n  }\n\n  timeStamp(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      collapsed: false\n    };\n    const options = normalizeArguments({\n      logLevel,\n      message,\n      opts\n    });\n    const {\n      collapsed\n    } = opts;\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.group(logLevel, message, Object.assign({}, opts, {\n      collapsed: true\n    }));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  withGroup(logLevel, message, func) {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace() {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  _shouldLog(logLevel) {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(logLevel, message, method, args, opts) {\n    if (this._shouldLog(logLevel)) {\n      opts = normalizeArguments({\n        logLevel,\n        message,\n        args,\n        opts\n      });\n      method = method || opts.method;\n      assert(method);\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      this._deltaTs = getHiResTimestamp();\n      const tag = opts.tag || opts.message;\n\n      if (opts.once) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      message = decorateMessage(this.id, opts.message, opts);\n      return method.bind(console, message, ...opts.args);\n    }\n\n    return noop;\n  }\n\n}\n\n_defineProperty(Log, \"VERSION\", VERSION);\n\nfunction normalizeLogLevel(logLevel) {\n  if (!logLevel) {\n    return 0;\n  }\n\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n  return resolvedLevel;\n}\n\nexport function normalizeArguments(opts) {\n  const {\n    logLevel,\n    message\n  } = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n  const args = opts.args ? Array.from(opts.args) : [];\n\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n\n  const messageType = typeof opts.message;\n  assert(messageType === 'string' || messageType === 'object');\n  return Object.assign(opts, {\n    args\n  }, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? \"\".concat(id, \": \").concat(time, \"  \").concat(message) : \"\".concat(id, \": \").concat(message);\n    message = addColor(message, opts.color, opts.background);\n  }\n\n  return message;\n}\n\nfunction logImageInNode(_ref2) {\n  let {\n    image,\n    message = '',\n    scale = 1\n  } = _ref2;\n  console.warn('removed');\n  return noop;\n}\n\nfunction logImageInBrowser(_ref3) {\n  let {\n    image,\n    message = '',\n    scale = 1\n  } = _ref3;\n\n  if (typeof image === 'string') {\n    const img = new Image();\n\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n\n    img.src = image;\n    return noop;\n  }\n\n  const element = image.nodeName || '';\n\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n\n    img.onload = () => console.log(...formatImage(img, message, scale));\n\n    img.src = image.toDataURL();\n    return noop;\n  }\n\n  return noop;\n}\n\nfunction getTableHeader(table) {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n\n  return 'empty';\n}\n//# sourceMappingURL=log.js.map","export function autobind(obj) {\n  let predefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['constructor'];\n  const proto = Object.getPrototypeOf(obj);\n  const propNames = Object.getOwnPropertyNames(proto);\n\n  for (const key of propNames) {\n    if (typeof obj[key] === 'function') {\n      if (!predefined.find(name => key === name)) {\n        obj[key] = obj[key].bind(obj);\n      }\n    }\n  }\n}\n//# sourceMappingURL=autobind.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Log } from '@probe.gl/log';\nexport const probeLog = new Log({\n  id: 'loaders.gl'\n});\n\nexport class NullLog {\n  log() {\n    return () => {};\n  }\n  info() {\n    return () => {};\n  }\n  warn() {\n    return () => {};\n  }\n  error() {\n    return () => {};\n  }\n}\n\nexport class ConsoleLog {\n  constructor() {\n    _defineProperty(this, \"console\", void 0);\n    this.console = console;\n  }\n\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return this.console.log.bind(this.console, ...args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.console.info.bind(this.console, ...args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this.console.warn.bind(this.console, ...args);\n  }\n  error() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return this.console.error.bind(this.console, ...args);\n  }\n}\n//# sourceMappingURL=loggers.js.map","import { isBrowser } from '@loaders.gl/loader-utils';\nimport { ConsoleLog } from './loggers';\nexport const DEFAULT_LOADER_OPTIONS = {\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(),\n\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true,\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: isBrowser,\n  _nodeWorkers: false,\n  _workerType: '',\n\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false,\n  transforms: []\n};\nexport const REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\n//# sourceMappingURL=option-defaults.js.map","import { isPureObject, isObject } from '../../javascript-utils/is-type';\nimport { fetchFile } from '../fetch/fetch-file';\nimport { probeLog, NullLog } from './loggers';\nimport { DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS } from './option-defaults';\n\nexport function getGlobalLoaderState() {\n  globalThis.loaders = globalThis.loaders || {};\n  const {\n    loaders\n  } = globalThis;\n\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\nexport const getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  state.globalOptions = state.globalOptions || {\n    ...DEFAULT_LOADER_OPTIONS\n  };\n  return state.globalOptions;\n};\n\nexport function setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\nexport function normalizeOptions(options, loader, loaders, url) {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\nexport function getFetchFunction(options, context) {\n  const globalOptions = getGlobalLoaderOptions();\n  const fetchOptions = options || globalOptions;\n\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  if (isObject(fetchOptions.fetch)) {\n    return url => fetchFile(url, fetchOptions);\n  }\n\n  if (context !== null && context !== void 0 && context.fetch) {\n    return context === null || context === void 0 ? void 0 : context.fetch;\n  }\n\n  return fetchFile;\n}\n\nfunction validateOptions(options, loaders) {\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    const idOptions = options && options[loader.id] || {};\n\n    const loaderOptions = loader.options && loader.options[loader.id] || {};\n    const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};\n\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\nfunction validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? \"\".concat(id, \".\") : '';\n  for (const key in options) {\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      if (key in deprecatedOptions) {\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' no longer supported, use '\").concat(deprecatedOptions[key], \"'\"))();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' not recognized. \").concat(suggestion))();\n      }\n    }\n  }\n}\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n    }\n  }\n  return bestSuggestion;\n}\nfunction normalizeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n  const mergedOptions = {\n    ...loaderDefaultOptions\n  };\n  addUrlOptions(mergedOptions, url);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n//# sourceMappingURL=option-utils.js.map","import { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  var _loader;\n  if (!loader) {\n    return false;\n  }\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n  const hasExtensions = Array.isArray((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.extensions);\n\n  return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n  var _loader2, _loader3;\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {\n        ...loader.options,\n        ...options\n      }\n    };\n  }\n\n  if ((_loader2 = loader) !== null && _loader2 !== void 0 && _loader2.parseTextSync || (_loader3 = loader) !== null && _loader3 !== void 0 && _loader3.parseText) {\n    loader.text = true;\n  }\n  if (!loader.text) {\n    loader.binary = true;\n  }\n  return loader;\n}\n//# sourceMappingURL=normalize-loader.js.map","import { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getGlobalLoaderState } from '../loader-utils/option-utils';\n\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\n\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n//# sourceMappingURL=register-loaders.js.map","\nimport { Log } from '@probe.gl/log';\nexport const log = new Log({\n  id: 'loaders.gl'\n});\n//# sourceMappingURL=log.js.map","import { compareArrayBuffers, path } from '@loaders.gl/loader-utils';\nimport { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { log } from '../utils/log';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { getRegisteredLoaders } from './register-loaders';\nimport { isBlob } from '../../javascript-utils/is-type';\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\nexport async function selectLoader(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  let loader = selectLoaderSync(data, loaders, {\n    ...options,\n    nothrow: true\n  }, context);\n  if (loader) {\n    return loader;\n  }\n\n  if (isBlob(data)) {\n    data = await data.slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n  return loader;\n}\n\nexport function selectLoaderSync(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  if (loaders && !Array.isArray(loaders)) {\n    return normalizeLoader(loaders);\n  }\n\n  let candidateLoaders = [];\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  if (!(options !== null && options !== void 0 && options.ignoreRegisteredLoaders)) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  normalizeLoaders(candidateLoaders);\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n  return loader;\n}\n\nfunction selectLoaderInternal(data, loaders, options, context) {\n  const {\n    url,\n    type\n  } = getResourceUrlAndType(data);\n  const testUrl = url || (context === null || context === void 0 ? void 0 : context.url);\n  let loader = null;\n  let reason = '';\n\n  if (options !== null && options !== void 0 && options.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.mimeType);\n    reason = \"match forced by supplied MIME type \".concat(options === null || options === void 0 ? void 0 : options.mimeType);\n  }\n\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? \"matched url \".concat(testUrl) : '');\n\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? \"matched MIME type \".concat(type) : '');\n\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? \"matched initial data \".concat(getFirstCharacters(data)) : '');\n\n  loader = loader || findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.fallbackMimeType);\n  reason = reason || (loader ? \"matched fallback MIME type \".concat(type) : '');\n  if (reason) {\n    var _loader;\n    log.log(1, \"selectLoader selected \".concat((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.name, \": \").concat(reason, \".\"));\n  }\n  return loader;\n}\n\nfunction validHTTPResponse(data) {\n  if (data instanceof Response) {\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getNoValidLoaderMessage(data) {\n  const {\n    url,\n    type\n  } = getResourceUrlAndType(data);\n  let message = 'No valid loader found (';\n  message += url ? \"\".concat(path.filename(url), \", \") : 'no url provided, ';\n  message += \"MIME type: \".concat(type ? \"\\\"\".concat(type, \"\\\"\") : 'not provided', \", \");\n  const firstCharacters = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? \" first bytes: \\\"\".concat(firstCharacters, \"\\\"\") : 'first bytes: not available';\n  message += ')';\n  return message;\n}\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\nfunction findLoaderByUrl(loaders, url) {\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    if (mimeType === \"application/x.\".concat(loader.id)) {\n      return loader;\n    }\n  }\n  return null;\n}\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n  }\n\n  return null;\n}\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => data.startsWith(test));\n}\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => testBinary(data, byteOffset, loader, test));\n}\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n    case 'string':\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n    default:\n      return false;\n  }\n}\nfunction getFirstCharacters(data) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n//# sourceMappingURL=select-loader.js.map","\n\nexport function filename(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\n\nexport function dirname(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\n\nexport function join() {\n  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n    parts[_key] = arguments[_key];\n  }\n  const separator = '/';\n  parts = parts.map((part, index) => {\n    if (index) {\n      part = part.replace(new RegExp(\"^\".concat(separator)), '');\n    }\n    if (index !== parts.length - 1) {\n      part = part.replace(new RegExp(\"\".concat(separator, \"$\")), '');\n    }\n    return part;\n  });\n  return parts.join(separator);\n}\n//# sourceMappingURL=path.js.map","const DEFAULT_CHUNK_SIZE = 256 * 1024;\n\nexport function* makeStringIterator(string, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    yield textEncoder.encode(chunk);\n  }\n}\n//# sourceMappingURL=make-string-iterator.js.map","const DEFAULT_CHUNK_SIZE = 256 * 1024;\n\nexport function* makeArrayBufferIterator(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    chunkSize = DEFAULT_CHUNK_SIZE\n  } = options;\n  let byteOffset = 0;\n  while (byteOffset < arrayBuffer.byteLength) {\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n//# sourceMappingURL=make-array-buffer-iterator.js.map","const DEFAULT_CHUNK_SIZE = 1024 * 1024;\n\nexport async function* makeBlobIterator(blob, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n    offset = end;\n    yield chunk;\n  }\n}\n//# sourceMappingURL=make-blob-iterator.js.map","import { isBrowser, toArrayBuffer } from '@loaders.gl/loader-utils';\nexport function makeStreamIterator(stream, options) {\n  return isBrowser ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);\n}\n\nasync function* makeBrowserStreamIterator(stream, options) {\n\n  const reader = stream.getReader();\n  let nextBatchPromise;\n  try {\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      if (options !== null && options !== void 0 && options._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      const {\n        done,\n        value\n      } = await currentBatchPromise;\n      if (done) {\n        return;\n      }\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    reader.releaseLock();\n  }\n}\n\nasync function* makeNodeStreamIterator(stream, options) {\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk);\n  }\n}\n//# sourceMappingURL=make-stream-iterator.js.map","import { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterators/make-iterator/make-iterator';\nimport { checkResponse, makeResponse } from '../utils/response-utils';\nconst ERR_DATA = 'Cannot convert supplied data type';\n\nexport function getArrayBufferOrStringFromDataSync(data, loader, options) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n  if (isBuffer(data)) {\n    data = data.buffer;\n  }\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n    let arrayBuffer = data.buffer;\n\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n  throw new Error(ERR_DATA);\n}\n\nexport async function getArrayBufferOrStringFromData(data, loader, options) {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader, options);\n  }\n\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n  if (isReadableStream(data)) {\n    data = makeIterator(data, options);\n  }\n  if (isIterable(data) || isAsyncIterable(data)) {\n    return concatenateArrayBuffersAsync(data);\n  }\n  throw new Error(ERR_DATA);\n}\nexport async function getAsyncIterableFromData(data, options) {\n  if (isIterator(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    const body = await response.body;\n    return makeIterator(body, options);\n  }\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data, options);\n  }\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n  return getIterableFromData(data);\n}\nexport async function getReadableStream(data) {\n  if (isReadableStream(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  return response.body;\n}\n\nfunction getIterableFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return function* oneChunk() {\n      yield data.buffer;\n    }();\n  }\n  if (data instanceof ArrayBuffer) {\n    return function* oneChunk() {\n      yield data;\n    }();\n  }\n  if (isIterator(data)) {\n    return data;\n  }\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n  throw new Error(ERR_DATA);\n}\n//# sourceMappingURL=get-data.js.map","import { assert, validateWorkerVersion } from '@loaders.gl/worker-utils';\nimport { parseWithWorker, canParseWithWorker } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { isResponse } from '../../javascript-utils/is-type';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromData } from '../loader-utils/get-data';\nimport { getLoaderContext, getLoadersFromContext } from '../loader-utils/loader-context';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  assert(!context || typeof context === 'object');\n\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n  data = await data;\n  options = options || {};\n\n  const {\n    url\n  } = getResourceUrlAndType(data);\n\n  const typedLoaders = loaders;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = await selectLoader(data, candidateLoaders, options);\n  if (!loader) {\n    return null;\n  }\n\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  context = getLoaderContext({\n    url,\n    parse,\n    loaders: candidateLoaders\n  }, options, context);\n  return await parseWithLoader(loader, data, options, context);\n}\n\nasync function parseWithLoader(loader, data, options, context) {\n  validateWorkerVersion(loader);\n  if (isResponse(data)) {\n    const response = data;\n    const {\n      ok,\n      redirected,\n      status,\n      statusText,\n      type,\n      url\n    } = response;\n    const headers = Object.fromEntries(response.headers.entries());\n    context.response = {\n      headers,\n      ok,\n      redirected,\n      status,\n      statusText,\n      type,\n      url\n    };\n  }\n  data = await getArrayBufferOrStringFromData(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (canParseWithWorker(loader, options)) {\n    return await parseWithWorker(loader, data, options, context, parse);\n  }\n\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  assert(!loader.parseSync);\n\n  throw new Error(\"\".concat(loader.id, \" loader - no parser found and worker is disabled\"));\n}\n//# sourceMappingURL=parse.js.map","import { getFetchFunction } from './option-utils';\n\nexport function getLoaderContext(context, options) {\n  let previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (previousContext) {\n    return previousContext;\n  }\n  const resolvedContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n  return resolvedContext;\n}\n\nexport function getLoadersFromContext(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n//# sourceMappingURL=loader-context.js.map","import { assert } from '../env-utils/assert';\nimport { VERSION } from '../env-utils/version';\n\nexport function validateWorkerVersion(worker) {\n  let coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  assert(worker, 'no worker provided');\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n//# sourceMappingURL=validate-worker-version.js.map","import { makeStringIterator } from './make-string-iterator';\nimport { makeArrayBufferIterator } from './make-array-buffer-iterator';\nimport { makeBlobIterator } from './make-blob-iterator';\nimport { makeStreamIterator } from './make-stream-iterator';\nimport { isBlob, isReadableStream, isResponse } from '../../javascript-utils/is-type';\n\nexport function makeIterator(data, options) {\n  if (typeof data === 'string') {\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if (isBlob(data)) {\n    return makeBlobIterator(data, options);\n  }\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data, options);\n  }\n  if (isResponse(data)) {\n    const response = data;\n    return makeStreamIterator(response.body, options);\n  }\n  throw new Error('makeIterator');\n}\n//# sourceMappingURL=make-iterator.js.map","import { concatenateArrayBuffers } from '../binary-utils/array-buffer-utils';\n\nexport async function forEach(iterator, visitor) {\n  while (true) {\n    const {\n      done,\n      value\n    } = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\nexport async function concatenateArrayBuffersAsync(asyncIterator) {\n  const arrayBuffers = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\nexport async function concatenateStringsAsync(asyncIterator) {\n  const strings = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n//# sourceMappingURL=async-iteration.js.map","import { canEncodeWithWorker } from '@loaders.gl/loader-utils';\nimport { processOnWorker } from '@loaders.gl/worker-utils';\nimport { concatenateArrayBuffers, resolvePath } from '@loaders.gl/loader-utils';\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { writeFile } from '../fetch/write-file';\nimport { fetchFile } from '../fetch/fetch-file';\nimport { getLoaderOptions } from './loader-options';\n\nexport async function encode(data, writer, options) {\n  const globalOptions = getLoaderOptions();\n  options = {\n    ...globalOptions,\n    ...options\n  };\n  if (canEncodeWithWorker(writer, options)) {\n    return await processOnWorker(writer, data, options);\n  }\n\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n  if (writer.encodeInBatches) {\n    const batches = encodeInBatches(data, writer, options);\n\n    const chunks = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    return concatenateArrayBuffers(...chunks);\n  }\n  if (!isBrowser && writer.encodeURLtoURL) {\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n    const tmpOutputFilename = getTemporaryFilename('output');\n    const outputFilename = await encodeURLtoURL(tmpInputFilename, tmpOutputFilename, writer, options);\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n  throw new Error('Writer could not encode data');\n}\n\nexport function encodeSync(data, writer, options) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\nexport async function encodeText(data, writer, options) {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n  throw new Error('Writer could not encode data as text');\n}\n\nexport function encodeInBatches(data, writer, options) {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  throw new Error('Writer could not encode data in batches');\n}\n\nexport async function encodeURLtoURL(inputUrl, outputUrl, writer, options) {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\nfunction getIterator(data) {\n  const dataIterator = [{\n    table: data,\n    start: 0,\n    end: data.length\n  }];\n  return dataIterator;\n}\n\nfunction getTemporaryFilename(filename) {\n  return \"/tmp/\".concat(filename);\n}\n//# sourceMappingURL=encode.js.map","import { WorkerFarm } from '@loaders.gl/worker-utils';\nimport { isBrowser } from '../env-utils/globals';\n\nexport function canEncodeWithWorker(writer, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  if (!isBrowser && !(options !== null && options !== void 0 && options._nodeWorkers)) {\n    return false;\n  }\n  return writer.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\n//# sourceMappingURL=encode-with-worker.js.map","\nimport { isBrowser, assert, resolvePath } from '@loaders.gl/loader-utils';\nimport { fs, toBuffer } from '@loaders.gl/loader-utils';\nexport async function writeFile(filePath, arrayBufferOrString, options) {\n  filePath = resolvePath(filePath);\n  if (!isBrowser) {\n    await fs.writeFile(filePath, toBuffer(arrayBufferOrString), {\n      flag: 'w'\n    });\n  }\n  assert(false);\n}\nexport function writeFileSync(filePath, arrayBufferOrString, options) {\n  filePath = resolvePath(filePath);\n  if (!isBrowser) {\n    fs.writeFileSync(filePath, toBuffer(arrayBufferOrString), {\n      flag: 'w'\n    });\n  }\n  assert(false);\n}\n//# sourceMappingURL=write-file.js.map","import {KTX2BasisWriter} from \"@loaders.gl/textures\";\nimport {ImageLoader} from '@loaders.gl/images';\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport {Component, EventEmitter, SDKError} from \"@xeokit/core\";\nimport {\n    LinesPrimitive,\n    PointsPrimitive,\n    SolidPrimitive,\n    SurfacePrimitive,\n    TrianglesPrimitive\n} from \"@xeokit/constants\";\nimport {createAABB3} from \"@xeokit/boundaries\";\n\nimport {Geometry} from \"./Geometry\";\nimport {SceneObject} from \"./SceneObject\";\nimport {TextureSet} from \"./TextureSet\";\nimport {Texture} from \"./Texture\";\nimport {Mesh} from \"./Mesh\";\nimport type {RendererModel} from \"./RendererModel\";\nimport type {TransformParams} from \"./TransformParams\";\nimport type {TextureSetParams} from \"./TextureSetParams\";\nimport type {GeometryParams} from \"./GeometryParams\";\nimport type {GeometryCompressedParams} from \"./GeometryCompressedParams\";\nimport type {MeshParams} from \"./MeshParams\";\nimport type {SceneObjectParams} from \"./SceneObjectParams\";\nimport type {TextureParams} from \"./TextureParams\";\nimport {compressGeometryParams} from \"./compressGeometryParams\";\nimport {encode, load} from \"@loaders.gl/core\";\nimport type {SceneModelParams} from \"./SceneModelParams\";\nimport type {Scene} from \"./Scene\";\n\n// XKT texture types\n\nconst COLOR_TEXTURE = 0;\nconst METALLIC_ROUGHNESS_TEXTURE = 1;\nconst NORMALS_TEXTURE = 2;\nconst EMISSIVE_TEXTURE = 3;\nconst OCCLUSION_TEXTURE = 4;\n\n// KTX2 encoding options for each texture type\n\nconst TEXTURE_ENCODING_OPTIONS: {\n    [key: string]: any\n} = {}\n\nTEXTURE_ENCODING_OPTIONS[COLOR_TEXTURE] = {\n    useSRGB: true,\n    qualityLevel: 50,\n    encodeUASTC: true,\n    mipmaps: true\n};\n\nTEXTURE_ENCODING_OPTIONS[EMISSIVE_TEXTURE] = {\n    useSRGB: true,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\n\nTEXTURE_ENCODING_OPTIONS[METALLIC_ROUGHNESS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 50,\n    mipmaps: true // Needed for GGX roughness shading\n};\n\nTEXTURE_ENCODING_OPTIONS[NORMALS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\n\nTEXTURE_ENCODING_OPTIONS[OCCLUSION_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\n\n/**\n * xeokit Geometry and Materials Model.\n *\n * * A representation of a model's geometry and materials within a {@link Scene}.\n * * Contains {@link SceneObject | SceneObjects}, {@link Mesh | Meshes}, {@link Geometry | Geometries} and {@link Texture | Textures}.\n * * Compresses textures using [Basis](/docs/pages/GLOSSARY.html#basis)\n * * Compresses geometry using [bucketing](/docs/pages/GLOSSARY.html#geometry-bucketing) and [quantization](/docs/pages/GLOSSARY.html#geometry-quantization)\n * * Viewable in the Browser with {@link @xeokit/viewer!Viewer}\n * * Importable from various model file formats, using {@link @xeokit/gltf!loadGLTF}, {@link @xeokit/las!loadLAS}, {@link @xeokit/cityjson!loadCityJSON}, {@link @xeokit/xkt!loadXKT} (etc)\n * * Exportable to XKT format using {@link @xeokit/xkt!saveXKT}\n * * Programmatically buildable using builder methods\n *\n * See {@link \"@xeokit/scene\"} for usage.\n */\nexport class SceneModel extends Component {\n\n    /**\n     * The {@link Scene} that contains this SceneModel.\n     */\n    public readonly scene: Scene;\n\n    /**\n     * Unique ID of this SceneModel.\n     *\n     * SceneModel are stored against this ID in {@link Scene.models}.\n     */\n    declare public readonly id: string;\n\n    /**\n     * If we want to view this SceneModel with a {@link @xeokit/viewer}, an\n     * optional ID of a {@link @xeokit/viewer!ViewLayer | ViewLayer} to view it in.\n     */\n    public readonly layerId?: string;\n\n    /**\n     * Indicates if this SceneModel has already been built.\n     *\n     * * Set ````true```` by {@link SceneModel.build | SceneModel.build}.\n     * * Subscribe to updates using {@link SceneModel.onBuilt | SceneModel.onBuilt} and {@link Scene.onModelCreated | Scene.onModelCreated}.\n     * * Don't create anything more in this SceneModel once it's built.\n     */\n    public built: boolean;\n\n    /**\n     * Indicates if this SceneModel has been destroyed.\n     *\n     * * Set ````true```` by {@link SceneModel.destroy | SceneModel.destroy}.\n     * * Don't create anything more in this SceneModel once it's destroyed.\n     */\n    declare readonly destroyed: boolean;\n\n    /**\n     * The edge threshold for automatic [edge primitive generation](/docs/pages/GLOSSARY.html#geometry-edge-generation).\n     */\n    public readonly edgeThreshold: number;\n\n    /**\n     * {@link @xeokit/scene!Geometry | Geometries} within this SceneModel, each mapped to {@link @xeokit/scene!Geometry.id | Geometry.id}.\n     *\n     * * Created by {@link SceneModel.createGeometry | SceneModel.createGeometry}.\n     */\n    public readonly geometries: { [key: string]: Geometry };\n\n    /**\n     * {@link Texture | Textures} within this SceneModel, each mapped to {@link Texture.id | Texture.id}.\n     *\n     * * Created by {@link SceneModel.createTexture | SceneModel.createTexture}.\n     * * Compressed asynchronously in {@link SceneModel.build | SceneModel.build}.\n     */\n    public readonly textures: { [key: string]: Texture };\n\n    /**\n     * {@link TextureSet | TextureSets} within this SceneModel, each mapped to {@link TextureSet.id | TextureSet.id}.\n     *\n     * * Created by {@link SceneModel.createTextureSet | SceneModel.createTextureSet}.\n     */\n    public readonly textureSets: { [key: string]: TextureSet };\n\n    /**\n     * {@link Mesh | Meshes} within this SceneModel, each mapped to {@link Mesh.id | Mesh.id}.\n     *\n     * * Created by {@link SceneModel.createMesh | SceneModel.createMesh}.\n     */\n    public readonly meshes: { [key: string]: Mesh };\n\n    /**\n     * {@link SceneObject | SceneObjects} within this SceneModel, each mapped to {@link SceneObject.id | SceneObject.id}.\n     *\n     * * Created by {@link SceneModel.createObject | SceneModel.createObject}.\n     */\n    readonly objects: { [key: string]: SceneObject };\n\n    /**\n     * The axis-aligned 3D World-space boundary of this SceneModel.\n     *\n     * * Created by {@link SceneModel.build | SceneModel.build}.\n     */\n    public readonly aabb: Float64Array;\n\n    /**\n     * Emits an event when this {@link @xeokit/scene!SceneModel | SceneModel} has been built.\n     *\n     * * Triggered by {@link SceneModel.build | SceneModel.build}.\n     *\n     * @event onBuilt\n     */\n    public readonly onBuilt: EventEmitter<SceneModel, null>;\n\n    /**\n     * Emits an event when this {@link @xeokit/scene!SceneModel | SceneModel} has been destroyed.\n     *\n     * * Triggered by {@link SceneModel.destroy | SceneModel.destroy}.\n     *\n     * @event\n     */\n    declare public readonly onDestroyed: EventEmitter<SceneModel, null>;\n\n    /**\n     *  Internal interface through which a SceneModel can load property updates into a renderer.\n     *\n     * @internal\n     */\n    public rendererModel: RendererModel | null;\n\n\n    #texturesList: Texture[];\n    #numObjects: number;\n    #meshUsedByObject: { [key: string]: boolean };\n\n    /**\n     * @private\n     */\n    constructor(scene: Scene, sceneModelParams: SceneModelParams) {\n        super(scene, {\n            id: sceneModelParams.id\n        });\n\n        this.scene = scene;\n\n        this.onBuilt = new EventEmitter(new EventDispatcher<SceneModel, null>());\n        this.onDestroyed = new EventEmitter(new EventDispatcher<SceneModel, null>());\n\n        this.#numObjects = 0;\n        this.#meshUsedByObject = {};\n\n        this.id = sceneModelParams.id || \"default\";\n        this.layerId = sceneModelParams.layerId;\n        this.edgeThreshold = 10;\n        this.geometries = {};\n        this.textures = {};\n        this.#texturesList = [];\n        this.textureSets = {};\n        this.meshes = {};\n        this.objects = {};\n        this.aabb = createAABB3();\n        this.built = false;\n        this.rendererModel = null;\n\n        this.fromJSON(sceneModelParams);\n    }\n\n    /**\n     * Adds components to this SceneModel.\n     *\n     * See {@link \"@xeokit/scene\"} for usage.\n     *\n     * @param sceneModelParams\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this SceneModel has already been built.\n     * * If this SceneModel has already been destroyed.\n     * * A duplicate component ({@link SceneObject}, {@link Mesh}, {@link Geometry}, {@link Texture} etc.) was already created within this SceneModel.\n     */\n    fromJSON(sceneModelParams: SceneModelParams): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to add components to SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to add components to SceneModel - SceneModel already built\");\n        }\n        if (sceneModelParams.geometries) {\n            for (let i = 0, len = sceneModelParams.geometries.length; i < len; i++) {\n                this.createGeometry(sceneModelParams.geometries[i]);\n            }\n        }\n        if (sceneModelParams.textures) {\n            for (let i = 0, len = sceneModelParams.textures.length; i < len; i++) {\n                this.createTexture(sceneModelParams.textures[i]);\n            }\n        }\n        if (sceneModelParams.textureSets) {\n            for (let i = 0, len = sceneModelParams.textureSets.length; i < len; i++) {\n                this.createTextureSet(sceneModelParams.textureSets[i]);\n            }\n        }\n        if (sceneModelParams.meshes) {\n            for (let i = 0, len = sceneModelParams.meshes.length; i < len; i++) {\n                this.createMesh(sceneModelParams.meshes[i]);\n            }\n        }\n        if (sceneModelParams.objects) {\n            for (let i = 0, len = sceneModelParams.objects.length; i < len; i++) {\n                this.createObject(sceneModelParams.objects[i]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new {@link Transform} within this SceneModel.\n     *\n     * * Stores the new {@link Transform} in {@link SceneModel.transforms | SceneModel.transforms}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const spinningTransform = sceneModel.createTransform({\n     *      id: \"spinningTransform\",\n     *      rotation: [0, 10, 0]\n     * });\n     *\n     * const spinningTransformAgain = sceneModel.transforms[\"spinningTransform\"];\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param transformParams Transform creation parameters.\n     * @returns *{Transform}*\n     * * On success\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If SceneModel has already been built or destroyed.\n     */\n    createTransform(transformParams: TransformParams): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create Transform in SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create Transform in SceneModel - SceneModel already built\");\n        }\n        //...\n    }\n\n    /**\n     * Creates a new {@link Texture} within this SceneModel.\n     *\n     * * Stores the new {@link Texture} in {@link SceneModel.textures | SceneModel.textures}.\n     * * Textures are compressed asynchronously by {@link SceneModel.build | SceneModel.build}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const texture = sceneModel.createTexture({\n     *      id: \"myColorTexture\",\n     *      src: // Path to JPEG, PNG, KTX2,\n     *      image: // HTMLImageElement,\n     *      buffers: // ArrayBuffer[] containing KTX2 MIP levels\n     *      preloadColor: [1,0,0,1],\n     *      flipY: false,\n     *      encoding: LinearEncoding, // @xeokit/core/constants\n     *      magFilter: LinearFilter,\n     *      minFilter: LinearFilter,\n     *      wrapR: ClampToEdgeWrapping,\n     *      wrapS: ClampToEdgeWrapping,\n     *      wrapT: ClampToEdgeWrapping,\n     * });\n     *\n     * const textureAgain = sceneModel.textures[\"myColorTexture\"];\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param textureParams - Texture creation parameters.\n     * @returns *{@link Texture}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If SceneModel has already been built or destroyed.\n     * * Invalid TextureParams were given.\n     * * Texture with given ID already exists in this Scene.\n     */\n    createTexture(textureParams: TextureParams): Texture | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create Texture in SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create Texture in SceneModel - SceneModel already built\");\n        }\n        if (!textureParams.imageData && !textureParams.src && !textureParams.buffers) {\n            return new SDKError(\"Failed to create Texture in SceneModel - Parameter expected: textureParams.imageData, textureParams.src or textureParams.buffers\");\n        }\n        if (this.textures[textureParams.id]) {\n            return new SDKError(`Failed to create Texture in SceneModel - Texture already exists with this ID: ${textureParams.id}`);\n        }\n        if (textureParams.src) {\n            const fileExt = textureParams.src.split('.').pop();\n            // if (fileExt !== \"jpg\" && fileExt !== \"jpeg\" && fileExt !== \"png\") {\n            //     console.error(`Model does not support image files with extension '${fileExt}' - won't create texture '${textureParams.id}`);\n            //     return;\n            // }\n        }\n        const texture = new Texture(textureParams);\n        this.textures[textureParams.id] = texture;\n        this.#texturesList.push(texture);\n        return texture;\n    }\n\n    /**\n     * Creates a new {@link TextureSet} within this SceneModel.\n     *\n     * * Stores the new {@link TextureSet} in {@link SceneModel.textureSets | SceneModel.textureSets}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const textureSet = sceneModel.createTextureSet({\n     *      id: \"myTextureSet\",\n     *      colorTextureId: \"myColorTexture\"\n     * });\n     *\n     * const textureSetAgain = sceneModel.textureSets[\"myTextureSet\"];\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param textureSetParams TextureSet creation parameters.\n     *\n     * @returns *{@link TextureSet}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If SceneModel has already been built or destroyed.\n     * * Invalid TextureSetParams were given.\n     * * TextureSet with given ID already exists in this SceneModel.\n     * * One or more of the given Textures could not be found in this SceneModel.\n     */\n    createTextureSet(textureSetParams: TextureSetParams): TextureSet | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create TextureSet in SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create TextureSet in SceneModel - SceneModel already built\");\n        }\n        if (this.textureSets[textureSetParams.id]) {\n            return new SDKError(`Failed to create TextureSet in SceneModel - TextureSet already exists with this ID: ${textureSetParams.id}`);\n        }\n        let colorTexture;\n        if (textureSetParams.colorTextureId !== undefined && textureSetParams.colorTextureId !== null) {\n            colorTexture = this.textures[textureSetParams.colorTextureId];\n            if (!colorTexture) {\n                return new SDKError(`Failed to create TextureSet in SceneModel - Texture not found: ${textureSetParams.colorTextureId} - ensure that you create it first with createTexture()`);\n            }\n            colorTexture.channel = COLOR_TEXTURE;\n        }\n        let metallicRoughnessTexture;\n        if (textureSetParams.metallicRoughnessTextureId !== undefined && textureSetParams.metallicRoughnessTextureId !== null) {\n            metallicRoughnessTexture = this.textures[textureSetParams.metallicRoughnessTextureId];\n            if (!metallicRoughnessTexture) {\n                return new SDKError(`Failed to create TextureSet in SceneModel - Texture not found: ${textureSetParams.metallicRoughnessTextureId} - ensure that you create it first with createTexture()`);\n            }\n            metallicRoughnessTexture.channel = METALLIC_ROUGHNESS_TEXTURE;\n        }\n        let normalsTexture;\n        if (textureSetParams.normalsTextureId !== undefined && textureSetParams.normalsTextureId !== null) {\n            normalsTexture = this.textures[textureSetParams.normalsTextureId];\n            if (!normalsTexture) {\n                return new SDKError(`Failed to create TextureSet in SceneModel - Texture not found: ${textureSetParams.normalsTextureId} - ensure that you create it first with createTexture()`);\n            }\n            normalsTexture.channel = NORMALS_TEXTURE;\n        }\n        let emissiveTexture;\n        if (textureSetParams.emissiveTextureId !== undefined && textureSetParams.emissiveTextureId !== null) {\n            emissiveTexture = this.textures[textureSetParams.emissiveTextureId];\n            if (!emissiveTexture) {\n                return new SDKError(`Failed to create TextureSet in SceneModel - Texture not found: ${textureSetParams.emissiveTextureId} - ensure that you create it first with createTexture()`);\n            }\n            emissiveTexture.channel = EMISSIVE_TEXTURE;\n        }\n        let occlusionTexture;\n        if (textureSetParams.occlusionTextureId !== undefined && textureSetParams.occlusionTextureId !== null) {\n            occlusionTexture = this.textures[textureSetParams.occlusionTextureId];\n            if (!occlusionTexture) {\n                return new SDKError(`Failed to create TextureSet in SceneModel - Texture not found: ${textureSetParams.occlusionTextureId} - ensure that you create it first with createTexture()`);\n            }\n            occlusionTexture.channel = OCCLUSION_TEXTURE;\n        }\n        const textureSet = new TextureSet(textureSetParams, {\n            emissiveTexture,\n            occlusionTexture,\n            metallicRoughnessTexture,\n            colorTexture\n        });\n        this.textureSets[textureSetParams.id] = textureSet;\n        return textureSet;\n    }\n\n    /**\n     * Creates a new {@link @xeokit/scene!Geometry} within this SceneModel, from non-compressed geometry parameters.\n     *\n     * * Stores the new {@link Geometry} in {@link SceneModel.geometries | SceneModel.geometries}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const boxGeometry = sceneModel.createGeometry({\n     *      id: \"boxGeometry\",\n     *      primitive: TrianglesPrimitive, // @xeokit/core/constants\n     *      positions: [\n     *          1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, // v0-v1-v2-v3 front\n     *          1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, // v0-v3-v4-v1 right\n     *          1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, // v0-v1-v6-v1 top\n     *          -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, // v1-v6-v7-v2 left\n     *          -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1,// v7-v4-v3-v2 bottom\n     *          1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1 // v4-v7-v6-v1 back\n     *      ],\n     *      indices: [\n     *          0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,\n     *          16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n     *      ]\n     *  });\n     *\n     * if (boxGeometry instanceof SDKError) {\n     *     console.log(boxGeometry.message);\n     * } else {\n     *      const boxGeometryAgain = sceneModel.geometries[\"boxGeometry\"];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param geometryParams Non-compressed geometry parameters.\n     * @returns *{Geometry}*\n     *  * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this SceneModel has already been destroyed.\n     * * If this SceneModel has already been built.\n     * * Invalid GeometryParams were given.\n     * * Geometry of given ID already exists in this SceneModel.\n     * * Unsupported primitive type given.\n     * * Mandatory vertex positions were not given. Vertex positions are mandatory for all primitive types.\n     * * Mandatory indices were not given for primitive type that is not {@link PointsPrimitive}. Indices are mandatory for all primitive types except PointsPrimitive.\n     * * Indices out of range of vertex positions.\n     * * Indices out of range of vertex UVs.\n     * * Mismatch between given quantities of vertex positions and UVs.\n     */\n    createGeometry(geometryParams: GeometryParams): Geometry | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create Geometry in SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create Geometry in SceneModel - SceneModel already built\");\n        }\n        if (!geometryParams) {\n            return new SDKError(\"Failed to create Geometry in SceneModel - Parameters expected: geometryParams\");\n        }\n        if (geometryParams.id === null || geometryParams.id === undefined) {\n            return new SDKError(\"Failed to create Geometry in SceneModel - Parameter expected: geometryParams.id\");\n        }\n        const geometryId = geometryParams.id;\n        if (this.geometries[geometryId]) {\n            return new SDKError(`Failed to create Geometry in SceneModel - Geometry with this ID already created: ${geometryId}`);\n        }\n        const primitive = geometryParams.primitive;\n        if (primitive !== PointsPrimitive && primitive !== LinesPrimitive && primitive !== TrianglesPrimitive && primitive !== SolidPrimitive && primitive !== SurfacePrimitive) {\n            return new SDKError(`Failed to create Geometry in SceneModel - Unsupported value for geometryParams.primitive: '${primitive}' - supported values are PointsPrimitive, LinesPrimitive, TrianglesPrimitive, SolidPrimitive and SurfacePrimitive`);\n        }\n        if (!geometryParams.positions) {\n            return new SDKError(\"Failed to create Geometry in SceneModel - Param expected: geometryParams.positions\");\n        }\n        if (!geometryParams.indices && primitive !== PointsPrimitive) {\n            return new SDKError(`Failed to create Geometry in SceneModel - Param expected: geometryParams.indices (required for primitive type)`);\n        }\n        if (geometryParams.uvs) {\n            if (geometryParams.uvs.length / 2 !== geometryParams.positions.length / 3) {\n                return new SDKError(\"Failed to create Geometry in SceneModel - mismatch between given quantities of vertex positions and UVs\");\n            }\n        }\n        if (geometryParams.indices) {\n            const lastPositionsIdx = geometryParams.positions.length / 3;\n            for (let i = 0, len = geometryParams.indices.length; i < len; i++) {\n                const idx = geometryParams.indices[i];\n                if (idx < 0 || idx >= lastPositionsIdx) {\n                    return new SDKError(\"Failed to create Geometry in SceneModel - indices out of range of vertex positions\");\n                }\n                if (geometryParams.uvs) {\n                    const lastUVsIdx = geometryParams.uvs.length / 2;\n                    if (idx < 0 || idx >= lastUVsIdx) {\n                        return new SDKError(\"Failed to create Geometry in SceneModel - indices out of range of vertex UVs\");\n                    }\n                }\n            }\n        }\n        const geometry = new Geometry(<GeometryCompressedParams>compressGeometryParams(geometryParams));\n        this.geometries[geometryId] = geometry;\n        return geometry;\n    }\n\n    /**\n     * Creates a new {@link @xeokit/scene!Geometry} within this SceneModel, from pre-compressed geometry parameters.\n     *\n     * * Stores the new {@link Geometry} in {@link SceneModel.geometries | SceneModel.geometries}.\n     * * Use {@link @xeokit/compression!compressGeometryParams} to pre-compress {@link @xeokit/scene!GeometryParams|GeometryParams} into {@link @xeokit/scene!GeometryCompressedParams|GeometryCompressedParams}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const boxGeometry = sceneModel.createGeometryCompressed({\n     *      id: \"boxGeometry\",\n     *      primitive: TrianglesPrimitive, // @xeokit/core/constants\n     *      positionsDecompressMatrix: [\n     *          0.00003052270125906143, 0, 0, 0,\n     *          0, 0.00003052270125906143, 0, 0,\n     *          0, 0, 0.00003052270125906143, 0,\n     *          -1, -1, -1, 1\n     *      ],\n     *      geometryBuckets: [\n     *          {\n     *              positionsCompressed: [\n     *                  65525, 65525, 65525, 0, 65525, 65525, 0, 0,\n     *                  65525, 65525, 0, 65525, 65525, 0, 0, 65525,\n     *                  65525, 0, 0, 65525, 0, 0, 0, 0\n     *              ],\n     *              indices: [\n     *                  0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6,\n     *                  0, 6, 1, 1, 6, 7, 1, 7, 2, 7, 4, 3, 7, 3, 2,\n     *                  4, 7, 6, 4, 6, 5\n     *              ]\n     *          }\n     *      ]\n     * });\n     *\n     * if (boxGeometry instanceof SDKError) {\n     *     console.log(boxGeometry.message);\n     * } else {\n     *      const boxGeometryAgain = sceneModel.geometries[\"boxGeometry\"];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param geometryCompressedParams Pre-compressed geometry parameters.\n     * @returns *{Geometry}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this SceneModel has already been destroyed.\n     * * If this SceneModel has already been built.\n     * * Invalid GeometryParams were given.\n     * * Geometry of given ID already exists in this SceneModel.\n     * * Unsupported primitive type given.\n     * * Mandatory vertex positions were not given. Vertex positions are mandatory for all primitive types.\n     * * Mandatory indices were not given for primitive type that is not {@link PointsPrimitive}. Indices are mandatory for all primitive types except PointsPrimitive.\n     * * Indices out of range of vertex positions.\n     * * Indices out of range of vertex UVs.\n     * * Mismatch between given quantities of vertex positions and UVs.\n     */\n    createGeometryCompressed(geometryCompressedParams: GeometryCompressedParams): Geometry | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to add compressed Geometry to SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to add compressed Geometry to SceneModel - SceneModel already built\");\n        }\n        if (!geometryCompressedParams) {\n            return new SDKError(\"Failed to add compressed Geometry to SceneModel - Parameters expected: geometryCompressedParams\");\n        }\n        const geometryId = geometryCompressedParams.id;\n        if (this.geometries[geometryId]) {\n            return new SDKError(`Failed to add compressed Geometry to SceneModel - Geometry with this ID already created: ${geometryId}`);\n        }\n        const primitive = geometryCompressedParams.primitive;\n        if (primitive !== PointsPrimitive && primitive !== LinesPrimitive && primitive !== TrianglesPrimitive && primitive !== SolidPrimitive && primitive !== SurfacePrimitive) {\n            return new SDKError(`Failed to add compressed Geometry to SceneModel - Unsupported value for geometryCompressedParams.primitive: '${primitive}' - supported values are PointsPrimitive, LinesPrimitive, TrianglesPrimitive, SolidPrimitive and SurfacePrimitive`);\n        }\n        const geometry = new Geometry(geometryCompressedParams);\n        this.geometries[geometryId] = geometry;\n        return geometry;\n    }\n\n    /**\n     * Creates a new {@link Mesh} within this SceneModel.\n     *\n     * * Stores the new {@link Mesh} in {@link SceneModel.meshes | SceneModel.meshes}.\n     * * A {@link Mesh} can be owned by one {@link SceneObject}, which can own multiple {@link Mesh}es.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const redBoxMesh = sceneModel.createMesh({\n     *      id: \"redBoxMesh\",\n     *      geometryId: \"boxGeometry\",\n     *      textureSetId: \"myTextureSet\",\n     *      position: [-4, -6, -4],\n     *      scale: [1, 3, 1],\n     *      rotation: [0, 0, 0],\n     *      color: [1, 0.3, 0.3]\n     * });\n     *\n     * if (redBoxMesh instanceof SDKError) {\n     *      console.log(redBoxMesh.message);\n     * } else {\n     *      const redBoxMeshAgain = sceneModel.meshes[\"redBoxMesh\"];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param meshParams Pre-compressed mesh parameters.\n     * @returns *{Mesh}*\n     *  * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this SceneModel has already been destroyed.\n     * * If this SceneModel has already been built.\n     * * Invalid MeshParams were given.\n     * * Mesh of given ID already exists in this SceneModel.\n     * * Specified Geometry could not be found in this SceneModel.\n     * * Specified TextureSet could not be found in this SceneModel.\n     */\n    createMesh(meshParams: MeshParams): Mesh | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create Mesh in SceneModel - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create Mesh in SceneModel - SceneModel already built\");\n        }\n        if (this.meshes[meshParams.id]) {\n            return new SDKError(`Failed to create Mesh in SceneModel - Mesh already exists with this ID: ${meshParams.id}`);\n        }\n        const geometry = this.geometries[meshParams.geometryId];\n        if (!geometry) {\n            return new SDKError(`Failed to create Mesh in SceneModel - Geometry not found: ${meshParams.geometryId}`);\n        }\n        const textureSet = meshParams.textureSetId ? this.textureSets[meshParams.textureSetId] : undefined;\n        if (meshParams.textureSetId && !textureSet) {\n            return new SDKError(`Failed to create Mesh in SceneModel - TextureSet not found: ${meshParams.textureSetId}`);\n        }\n\n        // geometry.numInstances++;\n        // let matrix = meshParams.matrix;\n        // if (!matrix) {\n        //     const position = meshParams.position;\n        //     const scale = meshParams.scale;\n        //     const rotation = meshParams.rotation;\n        //     if (position || scale || rotation) {\n        //         matrix = identityMat4();\n        //         const quaternion = eulerToQuat(rotation || [0, 0, 0], \"XYZ\", identityQuat());\n        //         composeMat4(position || [0, 0, 0], quaternion, scale || [1, 1, 1], matrix)\n        //     } else {\n        //         matrix = identityMat4();\n        //     }\n        // }\n        // const meshIndex = this.meshesList.length;\n\n        const mesh = new Mesh({\n            id: meshParams.id,\n            geometry,\n            textureSet,\n            matrix: meshParams.matrix,\n            color: meshParams.color,\n            opacity: meshParams.opacity,\n            roughness: meshParams.roughness,\n            metallic: meshParams.metallic\n        });\n        this.meshes[meshParams.id] = mesh;\n        return mesh;\n    }\n\n    /**\n     * Creates a new {@link SceneObject}.\n     *\n     * * Stores the new {@link SceneObject} in {@link SceneModel.objects | SceneModel.objects} and {@link Scene.objects | Scene.objects}.\n     * * Fires an event via {@link Scene.onObjectCreated | Scene.onObjectCreated}.\n     * * Each {@link Mesh} is allowed to belong to one SceneObject.\n     * * SceneObject IDs must be unique within the SceneModel's {@link Scene}.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * const redBoxObject = sceneModel.createObject({\n     *     id: \"redBoxObject\",\n     *     meshIds: [\"redBoxMesh\"]\n     * });\n     *\n     * if (redBoxObject instanceof SDKError) {\n     *      console.log(redBoxObject.message);\n     * } else {\n     *      const redBoxObjectAgain = sceneModel.objects[\"redBoxObject\"];\n     *      const redBoxObjectOnceMore = scene.objects[\"redBoxObject\"];\n     * }\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @param objectParams SceneObject parameters.\n     * @returns *{SceneObject}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * If this SceneModel has already been destroyed.\n     * * If this SceneModel has already been built.\n     * * Invalid ObjectParams were given.\n     * * SceneObject of given ID already exists in this SceneModel's Scene. Note that SceneObject IDs must be unique within the Scene.\n     * * No Meshes were specified.\n     * * One or more of the specified Meshes already belong to another SceneObject in this SceneModel.\n     * * Specified Meshes could not be found in this SceneModel.\n     */\n    createObject(objectParams: SceneObjectParams): SceneObject | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Failed to create SceneObject - SceneModel already destroyed\");\n        }\n        if (this.built) {\n            return new SDKError(\"Failed to create SceneObject SceneModel already built\");\n        }\n        if (objectParams.meshIds.length === 0) {\n            return new SDKError(\"Failed to create SceneObject - no meshes specified\");\n        }\n        if (this.scene.objects[objectParams.id]) {\n            return new SDKError(`Failed to create SceneObject - SceneObject already exists in Scene: ${objectParams.id}`);\n        }\n        const meshIds = objectParams.meshIds;\n        const meshes = [];\n        for (let meshIdIdx = 0, meshIdLen = meshIds.length; meshIdIdx < meshIdLen; meshIdIdx++) {\n            const meshId = meshIds[meshIdIdx];\n            const mesh = this.meshes[meshId];\n            if (!mesh) {\n                return new SDKError(`Failed to create SceneObject - Mesh not found: ${meshId}`);\n            }\n            if (this.#meshUsedByObject[meshId]) {\n                return new SDKError(`Failed to create SceneObject - Mesh ${meshId} already belongs to another SceneObject`);\n            }\n            meshes.push(mesh);\n            this.#meshUsedByObject[mesh.id] = true;\n        }\n        const sceneObject = new SceneObject({\n            id: objectParams.id,\n            layerId: objectParams.layerId || this.layerId,\n            model: this,\n            meshes\n        });\n        for (let i = 0, len = meshes.length; i < len; i++) {\n            const mesh = meshes[i];\n            mesh.object = sceneObject;\n        }\n        this.#numObjects++;\n        this.objects[objectParams.id] = sceneObject;\n        return sceneObject;\n    }\n\n    /**\n     * Finalizes this SceneModel, readying it for use.\n     *\n     * * Fires an event via {@link SceneModel.onBuilt | SceneModel.onBuilt} and {@link Scene.onModelCreated | SceneModel.onCreated}, to indicate to subscribers that\n     * the SceneModel is complete and ready to use.\n     * * Sets {@link SceneModel.built | SceneModel.built} ````true````.\n     * * You can only call this method once on a SceneModel.\n     * * The SceneModel must have at least one {@link SceneObject}.\n     * * Once built, no more components can be created in a SceneModel.\n     *\n     * ### Usage\n     *\n     * ````javascript\n     * sceneMode.onBuilt.subscribe(()=>{\n     *     // Our SceneModel is built and ready to use\n     * });\n     *\n     * myScene.onModelCreated.subscribe((sceneModel)=>{\n     *     // Another way to subscribe to SceneModel readiness\n     * });\n     *\n     * mySceneModel.build().then((result) => { // Asynchronous (texture compression etc).\n     *      if (result instanceof SDKError) {\n     *          console.log(result.message);\n     *      }  else {\n     *          // Now we can do things with our SceneModel\n     *      }\n     * }).catch(sdkError) {// SDKError\n     *     console.log(sdkError.message);\n     * };\n     * ````\n     *\n     * See {@link \"@xeokit/scene\"} for more usage info.\n     *\n     * @throws *{@link @xeokit/core!SDKError}*\n     * * If SceneModel has already been built or destroyed.\n     * * If no SceneObjects were created in this SceneModel.\n     */\n    async build(): Promise<SceneModel> {\n        return new Promise<SceneModel>((resolve) => {\n            if (this.destroyed) {\n                throw new SDKError(\"Failed to build SceneModel - SceneModel already destroyed\");\n            }\n            if (this.built) {\n                throw new SDKError(\"Failed to build SceneModel - SceneModel already built\");\n            }\n            this.#removeUnusedTextures();\n            this.#compressTextures().then(() => {\n                this.built = true;\n                this.onBuilt.dispatch(this, null);\n                resolve(this);\n            }).catch((e) => {\n                throw e;\n            });\n        });\n    }\n\n    #removeUnusedTextures() {\n        // let texturesList = [];\n        // const textures = {};\n        // for (let i = 0, leni = this.texturesList.length; i < leni; i++) {\n        //     const texture = this.texturesList[i];\n        //     if (texture.channel !== null) {\n        //         texture.textureIndex = texturesList.length;\n        //         texturesList.push(texture);\n        //         textures[texture.id] = texture;\n        //     }\n        // }\n        // this.texturesList = texturesList;\n        // this.textures = textures;\n    }\n\n    #compressTextures(): Promise<any> {\n        let countTextures = this.#texturesList.length;\n        return new Promise<void>((resolve) => {\n            if (countTextures === 0) {\n                resolve();\n                return;\n            }\n            for (let i = 0, leni = this.#texturesList.length; i < leni; i++) {\n                const texture = this.#texturesList[i];\n                const encodingOptions = TEXTURE_ENCODING_OPTIONS[texture.channel] || {};\n                if (texture.src) {  // Texture created with SceneModel#createTexture({ src: ... })\n                    const src = texture.src;\n                    const fileExt = src.split('.').pop();\n                    switch (fileExt) {\n                        case \"jpeg\":\n                        case \"jpg\":\n                        case \"png\":\n\n                            load(src, ImageLoader, {\n                                image: {\n                                    type: \"data\"\n                                }\n                            }).then((imageData) => {\n                                if (texture.compressed) {\n                                    encode(imageData, KTX2BasisWriter, encodingOptions).then((encodedData) => {\n                                        const encodedImageData = new Uint8Array(encodedData);\n                                        texture.imageData = encodedImageData;\n                                        if (--countTextures <= 0) {\n                                            resolve();\n                                        }\n                                    }).catch((err) => {\n                                        return new SDKError(`Failed to compress texture: ${err}`);\n                                    });\n                                } else {\n                                    texture.imageData = new Uint8Array(1);\n                                    if (--countTextures <= 0) {\n                                        resolve();\n                                    }\n                                }\n                            }).catch((err) => {\n                                return new SDKError(`Failed to load texture image: ${err}`);\n                            });\n                            break;\n                        default:\n                            if (--countTextures <= 0) {\n                                resolve();\n                            }\n                            break;\n                    }\n                }\n                if (texture.imageData) {// Texture created with SceneModel#createTexture({ imageData: ... })\n                    if (texture.compressed) {\n                        encode(texture.imageData, KTX2BasisWriter, encodingOptions)\n                            .then((encodedImageData) => {\n                                texture.imageData = new Uint8Array(encodedImageData);\n                                if (--countTextures <= 0) {\n                                    resolve();\n                                }\n                            }).catch((err) => {\n                            return new SDKError(`Failed to compress texture: ${err}`);\n                        });\n                    } else {\n                        texture.imageData = new Uint8Array(1);\n                        if (--countTextures <= 0) {\n                            resolve();\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n","import {createMat4} from \"@xeokit/matrix\";\nimport {collapseAABB3, expandAABB3Points3} from \"@xeokit/boundaries\";\nimport {SolidPrimitive, SurfacePrimitive, TrianglesPrimitive} from \"@xeokit/constants\";\nimport {quantizePositions3} from \"@xeokit/compression\";\n\nimport {buildEdgeIndices} from \"./buildEdgeIndices\";\nimport {uniquifyPositions} from \"./calculateUniquePositions\";\nimport {rebucketPositions} from \"./rebucketPositions\";\nimport type {GeometryParams} from \"./GeometryParams\";\nimport type {GeometryCompressedParams} from \"./GeometryCompressedParams\";\nimport type {IntArrayParam} from \"@xeokit/math\";\n\n/**\n * Compresses a {@link @xeokit/scene!GeometryParams | GeometryParams} into a {@link @xeokit/scene!GeometryCompressedParams | GeometryCompressedParams}.\n *\n * See {@link @xeokit/scene} for usage examples.\n *\n * @param geometryParams Uncompressed geometry params.\n * @returns Compressed geometry params.\n */\nexport function compressGeometryParams(geometryParams: GeometryParams): GeometryCompressedParams {\n    const positionsDecompressMatrix = createMat4();\n    const aabb = collapseAABB3();\n    expandAABB3Points3(aabb, geometryParams.positions);\n    const positionsCompressed = quantizePositions3(geometryParams.positions, aabb, positionsDecompressMatrix);\n    const edgeIndices = (geometryParams.primitive === SolidPrimitive || geometryParams.primitive === SurfacePrimitive || geometryParams.primitive === TrianglesPrimitive) && geometryParams.indices\n        ? buildEdgeIndices(positionsCompressed, geometryParams.indices, positionsDecompressMatrix, 10)\n        : null;\n    let uniquePositionsCompressed: IntArrayParam;\n    let uniqueIndices: Uint32Array;\n    let uniqueEdgeIndices: Uint32Array | undefined;\n    [\n        uniquePositionsCompressed,\n        uniqueIndices,\n        uniqueEdgeIndices\n    ] = uniquifyPositions({\n        positionsCompressed,\n        uvs: geometryParams.uvs,\n        indices: geometryParams.indices,\n        edgeIndices: edgeIndices\n    });\n    const numUniquePositions = uniquePositionsCompressed.length / 3;\n    const geometryBuckets = <{\n        positionsCompressed: IntArrayParam,\n        indices: IntArrayParam,\n        edgeIndices: IntArrayParam\n    }[]>rebucketPositions({\n        positionsCompressed: uniquePositionsCompressed,\n        indices: uniqueIndices,\n        edgeIndices: uniqueEdgeIndices,\n    }, (numUniquePositions > (1 << 16)) ? 16 : 8);\n    return { // Assume that closed triangle mesh is decomposed into open surfaces\n        id: geometryParams.id,\n        primitive: (geometryParams.primitive === SolidPrimitive && geometryBuckets.length > 1) ? TrianglesPrimitive : geometryParams.primitive,\n        aabb,\n        positionsDecompressMatrix,\n        uvsDecompressMatrix: undefined,\n        geometryBuckets\n    };\n}","import { isBlob } from '../../javascript-utils/is-type';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parse } from './parse';\n\nexport async function load(url, loaders, options, context) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n\n  const fetch = getFetchFunction(options);\n\n  let data = url;\n  if (typeof url === 'string') {\n    data = await fetch(url);\n  }\n\n  if (isBlob(url)) {\n    data = await fetch(url);\n  }\n\n  return await parse(data, loaders, options);\n}\n//# sourceMappingURL=load.js.map","import {Component, EventEmitter, SDKError} from \"@xeokit/core\";\nimport {FloatArrayParam, MAX_DOUBLE, MIN_DOUBLE} from \"@xeokit/math\";\nimport {EventDispatcher} from \"strongly-typed-events\";\nimport {SceneModel} from \"./SceneModel\";\nimport type {SceneObject} from \"./SceneObject\";\nimport type {SceneModelParams} from \"./SceneModelParams\";\nimport {createAABB3} from \"@xeokit/boundaries\";\n\n/**\n * A scene representation.\n *\n * A Scene is a container of {@link SceneModel | SceneModels} and {@link SceneObject | SceneObjects}.\n */\nexport class Scene extends Component {\n\n    /**\n     * The {@link @xeokit/scene!SceneModel | SceneModels} belonging to this Scene, each keyed to\n     * its {@link @xeokit/scene!SceneModel.id | SceneModel.id}.\n     */\n    public readonly models: { [key: string]: SceneModel };\n\n    /**\n     * The {@link SceneObject | SceneObjects} in this Scene, mapped to {@link SceneObject.id | SceneObject.id}.\n     */\n    public readonly objects: { [key: string]: SceneObject };\n\n    /**\n     * Emits an event each time a {@link SceneModel} is created in this Scene.\n     *\n     * @event\n     */\n    public readonly onModelCreated: EventEmitter<Scene, SceneModel>;\n\n    /**\n     * Emits an event each time a {@link SceneModel} is destroyed in this Scene.\n     *\n     * @event\n     */\n    public readonly onModelDestroyed: EventEmitter<Scene, SceneModel>;\n\n    #onModelBuilts: { [key: string]: any };\n    #onModelDestroys: { [key: string]: any };\n    #center: Float64Array;\n    #aabbDirty: boolean;\n    #aabb: Float64Array;\n\n    /**\n     * Creates a new Scene.\n     *\n     * See {@link \"@xeokit/scene\"} for usage.\n     */\n    constructor() {\n\n        super(null, {});\n\n        this.#aabb = createAABB3();\n        this.#aabbDirty = true;\n\n        this.models = {};\n        this.objects = {};\n\n        this.#onModelBuilts = {};\n        this.#onModelDestroys = {};\n        this.onModelCreated = new EventEmitter(new EventDispatcher<Scene, SceneModel>());\n        this.onModelDestroyed = new EventEmitter(new EventDispatcher<Scene, SceneModel>());\n    }\n\n    /**\n     * Gets the collective World-space 3D center of all the {@link SceneModel | SceneModels} in this Scene.\n     */\n    get center(): Float64Array {\n        if (this.#aabbDirty) {\n            const aabb = this.aabb; // Lazy-build\n            this.#center[0] = (aabb[0] + aabb[3]) / 2;\n            this.#center[1] = (aabb[1] + aabb[4]) / 2;\n            this.#center[2] = (aabb[2] + aabb[5]) / 2;\n        }\n        return this.#center;\n    }\n\n    /**\n     * Gets the collective World-space 3D [axis-aligned boundary](/docs/pages/GLOSSARY.html#aabb) of all the {@link SceneModel | SceneModels} in this Scene.\n     *\n     * The boundary will be of the form ````[xMin, yMin, zMin, xMax, yMax, zMax]````.\n     */\n    get aabb(): FloatArrayParam {\n        if (this.#aabbDirty) {\n            let xmin = MAX_DOUBLE;\n            let ymin = MAX_DOUBLE;\n            let zmin = MAX_DOUBLE;\n            let xmax = MIN_DOUBLE;\n            let ymax = MIN_DOUBLE;\n            let zmax = MIN_DOUBLE;\n            let aabb;\n            const objects = this.objects;\n            let valid = false;\n            for (const objectId in objects) {\n                if (objects.hasOwnProperty(objectId)) {\n                    const object = objects[objectId];\n                    // if (object.collidable === false) {\n                    //     continue;\n                    // }\n                    aabb = object.aabb;\n                    if (aabb[0] < xmin) {\n                        xmin = aabb[0];\n                    }\n                    if (aabb[1] < ymin) {\n                        ymin = aabb[1];\n                    }\n                    if (aabb[2] < zmin) {\n                        zmin = aabb[2];\n                    }\n                    if (aabb[3] > xmax) {\n                        xmax = aabb[3];\n                    }\n                    if (aabb[4] > ymax) {\n                        ymax = aabb[4];\n                    }\n                    if (aabb[5] > zmax) {\n                        zmax = aabb[5];\n                    }\n                    valid = true;\n                }\n            }\n            if (!valid) {\n                xmin = -100;\n                ymin = -100;\n                zmin = -100;\n                xmax = 100;\n                ymax = 100;\n                zmax = 100;\n            }\n            this.#aabb[0] = xmin;\n            this.#aabb[1] = ymin;\n            this.#aabb[2] = zmin;\n            this.#aabb[3] = xmax;\n            this.#aabb[4] = ymax;\n            this.#aabb[5] = zmax;\n            this.#aabbDirty = false;\n        }\n        return this.#aabb;\n    }\n\n    /**\n     * Creates a new {@link @xeokit/scene!SceneModel} in this Scene.\n     *\n     * Remember to call {@link SceneModel.build | SceneModel.build} when you've finished building or loading the SceneModel. That will\n     * fire events via {@link Scene.onModelCreated | Scene.onModelCreated} and {@link SceneModel.onBuilt | SceneModel.onBuilt}, to\n     * indicate to any subscribers that the SceneModel is built and ready for use.\n     *\n     * See {@link \"@xeokit/scene\"} for more details on usage.\n     *\n     * @param  sceneModelParams Creation parameters for the new {@link @xeokit/scene!SceneModel}.\n     * @returns *{@link SceneModel}*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Scene has already been destroyed.\n     * * A SceneModel with the given ID already exists in this Scene.\n     */\n    createModel(sceneModelParams: SceneModelParams): SceneModel | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Scene already destroyed\");\n        }\n        const id = sceneModelParams.id;\n        if (this.models[id]) {\n            return new SDKError(`SceneModel already created in this Scene: ${id}`);\n        }\n        const sceneModel = new SceneModel(this, sceneModelParams);\n        this.models[id] = sceneModel;\n        sceneModel.onDestroyed.one(() => { // SceneModel#destroy() called\n            delete this.models[sceneModel.id];\n            this.#deregisterObjects(sceneModel);\n            this.onModelDestroyed.dispatch(this, sceneModel);\n        });\n        sceneModel.onBuilt.one(() => { // SceneModel#build() called\n            this.#registerObjects(sceneModel);\n            this.onModelCreated.dispatch(this, sceneModel);\n        });\n        return sceneModel;\n    }\n\n    /**\n     * @private\n     */\n    setAABBDirty() {\n        if (!this.#aabbDirty) {\n            this.#aabbDirty = true;\n            //this.events.fire(\"aabb\", true);\n        }\n    }\n\n    /**\n     * Destroys all contained {@link SceneModel | SceneModels}.\n     *\n     * * Fires {@link Scene.onModelDestroyed | Scene.onModelDestroyed} and {@link SceneModel.onDestroyed | SceneModel.onDestroyed}\n     * for each existing SceneModel in this Scene.\n     *\n     * See {@link \"@xeokit/scene\"} for usage.\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Scene has already been destroyed.\n     */\n    clear(): void | SDKError {\n        if (this.destroyed) {\n            return new SDKError(\"Scene already destroyed\");\n        }\n        for (let id in this.models) {\n            this.models[id].destroy();\n        }\n    }\n\n    /**\n     * Destroys this Scene and all contained {@link SceneModel | SceneModels}.\n     *\n     * * Fires {@link Scene.onModelDestroyed | Scene.onModelDestroyed} and {@link SceneModel.onDestroyed | SceneModel.onDestroyed}\n     * for each existing SceneModels in this Data.\n     * * Unsubscribes all subscribers to {@link Scene.onModelCreated | Scene.onModelCreated}, {@link Scene.onModelDestroyed | Scene.onModelDestroyed}, {@link SceneModel.onDestroyed | SceneModel.onDestroyed}\n     *\n     * See {@link \"@xeokit/scene\"} for usage.\n     *\n     * @returns *void*\n     * * On success.\n     * @returns *{@link @xeokit/core!SDKError}*\n     * * This Scene has already been destroyed.\n     */\n    destroy(): void | SDKError {\n        this.clear();\n        this.onModelCreated.clear();\n        this.onModelDestroyed.clear();\n        super.destroy();\n    }\n\n    #registerObjects(model: SceneModel) {\n        const objects = model.objects;\n        for (let id in objects) {\n            const object = objects[id];\n            this.objects[object.id] = <SceneObject>object;\n        }\n        this.#aabbDirty = true;\n    }\n\n    #deregisterObjects(model: SceneModel) {\n        const objects = model.objects;\n        for (let id in objects) {\n            const object = objects[id];\n            delete this.objects[object.id];\n        }\n        this.#aabbDirty = true;\n    }\n}","var i,a=1e3,t=1001,e=((i={})[1e3]=\"BasicEntity\",i[1001]=\"BasicAggregation\",i),g={BasicEntity:1e3,BasicAggregation:1001};export{t as BasicAggregation,a as BasicEntity,g as typeCodes,e as typeNames};\n//# sourceMappingURL=index.es.map\n","var n,i=2001,e=2e3,t=2001,r=2002,l=2003,u=2004,a=2005,o=2006,d=2007,g=2008,B=2009,s=2010,T=2011,y=2012,c=2013,C=2014,R=2015,m=2016,I=2017,v=2018,F=2019,P=2020,S=2021,p=2022,w=2023,O=2024,E=2025,b=2026,j=2027,U=2028,W=2029,f=2030,h=2031,q=((n={})[2e3]=\"Bridge\",n[2001]=\"BridgePart\",n[2002]=\"BridgeInstallation\",n[2003]=\"BridgeConstructiveElement\",n[2004]=\"BridgeRoom\",n[2005]=\"BridgeFurniture\",n[2006]=\"Building\",n[2007]=\"BuildingPart\",n[2008]=\"BuildingInstallation\",n[2009]=\"BuildingConstructiveElement\",n[2010]=\"BuildingFurniture\",n[2011]=\"BuildingStorey\",n[2012]=\"BuildingRoom\",n[2013]=\"BuildingUnit\",n[2014]=\"CityFurniture\",n[2015]=\"CityObjectGroup\",n[2016]=\"LandUse\",n[2017]=\"OtherConstruction\",n[2018]=\"PlantCover\",n[2019]=\"SolitaryVegetationObject\",n[2020]=\"TINRelief\",n[2021]=\"TransportationSquare\",n[2022]=\"Railway\",n[w]=\"Road\",n[2024]=\"Tunnel\",n[2025]=\"TunnelPart\",n[2026]=\"TunnelInstallation\",n[2027]=\"TunnelInstallation\",n[2028]=\"TunnelHollowSpace\",n[2029]=\"TunnelFurniture\",n[2030]=\"WaterBody\",n[2031]=\"Waterway\",n),G={Bridge:2e3,BridgePart:2001,BridgeInstallation:2002,BridgeConstructiveElement:2003,BridgeRoom:2004,BridgeFurniture:2005,Building:2006,BuildingPart:2007,BuildingInstallation:2008,BuildingConstructiveElement:2009,BuildingFurniture:2010,BuildingStorey:2011,BuildingRoom:2012,BuildingUnit:2013,CityFurniture:2014,CityObjectGroup:2015,LandUse:2016,OtherConstruction:2017,PlantCover:2018,SolitaryVegetationObject:2019,TINRelief:2020,TransportationSquare:2021,Railway:2022,Road:w,Tunnel:2024,TunnelPart:2025,TunnelInstallation:b,TunnelConstructiveElement:b,TunnelHollowSpace:2028,TunnelFurniture:2029,WaterBody:2030,Waterway:2031};export{i as BasicAggregation,e as Bridge,l as BridgeConstructiveElement,a as BridgeFurniture,r as BridgeInstallation,t as BridgePart,u as BridgeRoom,o as Building,B as BuildingConstructiveElement,s as BuildingFurniture,g as BuildingInstallation,d as BuildingPart,y as BuildingRoom,T as BuildingStorey,c as BuildingUnit,C as CityFurniture,R as CityObjectGroup,m as LandUse,I as OtherConstruction,v as PlantCover,p as Railway,w as Road,F as SolitaryVegetationObject,P as TINRelief,S as TransportationSquare,O as Tunnel,j as TunnelConstructiveElement,W as TunnelFurniture,U as TunnelHollowSpace,b as TunnelInstallation,E as TunnelPart,f as WaterBody,h as Waterway,G as typeCodes,q as typeNames};\n//# sourceMappingURL=index.es.map\n","/** @private */\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n                // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n                // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n        (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n        (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n        (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n            intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n            (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\nexport {earcut};","import {\n    createVec2,\n    createVec3,\n    cross3Vec3,\n    dotVec3,\n    lenVec3,\n    mulVec3Scalar,\n    normalizeVec3,\n    subVec3\n} from \"@xeokit/matrix\";\nimport type {SceneModel} from \"@xeokit/scene\";\nimport type {DataModel} from \"@xeokit/data\";\n// @ts-ignore\nimport {earcut} from './earcut';\nimport {TrianglesPrimitive} from \"@xeokit/constants\";\nimport {BasicAggregation} from \"@xeokit/basictypes\";\nimport {typeCodes} from \"@xeokit/cityjsontypes_1_1_3\";\nimport {SDKError} from \"@xeokit/core\";\n\nconst tempVec2a = createVec2();\nconst tempVec3a = createVec3();\nconst tempVec3b = createVec3();\nconst tempVec3c = createVec3();\n\n/**\n * Loads CityJSON into a {@link @xeokit/scene!SceneModel | SceneModel} and/or a {@link @xeokit/data!DataModel | DataModel}.\n *\n * * Expects {@link @xeokit/scene!SceneModel.built | SceneModel.built} and {@link @xeokit/scene!SceneModel.destroyed | SceneModel.destroyed} to be ````false````\n * * Does not call {@link @xeokit/scene!SceneModel.build | SceneModel.build} - we call that ourselves, when we have finished building the SceneModel\n *\n * See {@link \"@xeokit/cityjson\"} for usage.\n *\n * @param params - Loading parameters.\n * @param params.fileData - CityJSON file data.\n * @param params.sceneModel - SceneModel to load into.\n * @param params.dataModel - DataModel to load into.\n * @param options - CityJSON loading options\n * @param options.rotateX - True to rotate the model about the X-axis. Default is false.\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has already been built.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has already been built.\n * @returns {Promise} Resolves when CityJSON has been loaded into the SceneModel and/or DataModel.\n */\nexport function loadCityJSON(params: {\n                                 fileData: any,\n                                 sceneModel: SceneModel,\n                                 dataModel?: DataModel\n                             },\n                             options: {\n                                 rotateX?: boolean;\n                             } = {\n                                 rotateX: false\n                             }): Promise<any> {\n    if (params.sceneModel) {\n        if (params.sceneModel.destroyed) {\n            throw new SDKError(\"SceneModel already destroyed\");\n        }\n        if (params.sceneModel.built) {\n            throw new SDKError(\"SceneModel already built\");\n        }\n    }\n    if (params.dataModel) {\n        if (params.dataModel.destroyed) {\n            throw new SDKError(\"DataModel already destroyed\");\n        }\n        if (params.dataModel.built) {\n            throw new SDKError(\"DataModel already built\");\n        }\n    }\n    return new Promise<void>(function (resolve, reject) {\n        const fileData = params.fileData;\n        const ctx = {\n            fileData,\n            vertices: (fileData.transform && params.sceneModel)\n                ? transformVertices(fileData.vertices, fileData.transform, options.rotateX)\n                : fileData.vertices,\n            sceneModel: params.sceneModel,\n            dataModel: params.dataModel,\n            nextId: 0\n        };\n        parseCityJSON(ctx);\n        resolve();\n    });\n}\n\nfunction transformVertices(vertices: any, transform: any, rotateX: boolean) {\n    const transformedVertices = [];\n    const scale = transform.scale || createVec3([1, 1, 1]);\n    const translate = transform.translate || createVec3([0, 0, 0]);\n    for (let i = 0, j = 0; i < vertices.length; i++, j += 3) {\n        const x = (vertices[i][0] * scale[0]) + translate[0];\n        const y = (vertices[i][1] * scale[1]) + translate[1];\n        const z = (vertices[i][2] * scale[2]) + translate[2];\n        if (rotateX) {\n            transformedVertices.push([x, z, y]);\n        } else {\n            transformedVertices.push([x, y, z]);\n        }\n    }\n    return transformedVertices;\n}\n\nfunction parseCityJSON(ctx: any) {\n    const fileData = ctx.fileData;\n    const cityObjects = fileData.CityObjects;\n    for (const objectId in cityObjects) {\n        parseCityObject(ctx, cityObjects[objectId], objectId);\n    }\n    if (ctx.dataModel) {\n        for (const objectId in cityObjects) {\n            parseRelationship(ctx, cityObjects[objectId], objectId);\n        }\n    }\n}\n\nfunction parseCityObject(ctx: any, cityObject: any, objectId: any) {\n    if (ctx.dataModel) {\n        ctx.dataModel.createObject({\n            id: objectId,\n            name: cityObject.type + \" : \" + objectId,\n            type: typeCodes[cityObject.type] | 0,\n            parent: cityObject.parents ? cityObject.parents[0] : null\n        });\n    }\n    if (ctx.sceneModel) {\n        if (!(cityObject.geometry && cityObject.geometry.length > 0)) {\n            return;\n        }\n        const meshIds: string | any[] = [];\n        for (let i = 0, len = cityObject.geometry.length; i < len; i++) {\n            const geometry = cityObject.geometry[i];\n            let objectMaterial;\n            let surfaceMaterials;\n            const appearance = ctx.fileData.appearance;\n            if (appearance) {\n                const materials = appearance.materials;\n                if (materials) {\n                    const geometryMaterial = geometry.material;\n                    if (geometryMaterial) {\n                        const themeIds = Object.keys(geometryMaterial);\n                        if (themeIds.length > 0) {\n                            const themeId = themeIds[0];\n                            const theme = geometryMaterial[themeId];\n                            if (theme.value !== undefined) {\n                                objectMaterial = materials[theme.value];\n                            } else {\n                                const values = theme.values;\n                                if (values) {\n                                    surfaceMaterials = [];\n                                    for (let j = 0, lenj = values.length; j < lenj; j++) {\n                                        const value = values[i];\n                                        const surfaceMaterial = materials[value];\n                                        surfaceMaterials.push(surfaceMaterial);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (surfaceMaterials) {\n                parseGeometrySurfacesWithOwnMaterials(ctx, geometry, surfaceMaterials, meshIds);\n            } else {\n                parseGeometrySurfacesWithSharedMaterial(ctx, geometry, objectMaterial, meshIds);\n            }\n        }\n        if (meshIds.length > 0) {\n            ctx.sceneModel.createObject({\n                id: objectId,\n                meshIds: meshIds\n            });\n        }\n    }\n}\n\nfunction parseRelationship(ctx: any, cityObject: any, objectId: any) {\n    if (cityObject.parents) {\n        ctx.dataModel.createRelationship({\n            relatingObjectId: cityObject.parents[0],\n            relatedObjectId: objectId,\n            type: BasicAggregation\n        });\n    }\n}\n\nfunction parseGeometrySurfacesWithOwnMaterials(ctx: any, geometry: any, surfaceMaterials: any, meshIds: any) {\n    const geomType = geometry.type;\n    switch (geomType) {\n        case \"MultiPoint\":\n            break;\n        case \"MultiLineString\":\n            break;\n        case \"MultiSurface\":\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            break;\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            }\n            break;\n        case \"MultiSolid\":\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n                }\n            }\n            break;\n        case \"GeometryInstance\":\n            break;\n    }\n}\n\nfunction parseSurfacesWithOwnMaterials(ctx: any, surfaceMaterials: any, surfaces: any, meshIds: any) {\n    const vertices = ctx.vertices;\n    const sceneModel = ctx.sceneModel;\n    for (let i = 0; i < surfaces.length; i++) {\n        const surface = surfaces[i];\n        const surfaceMaterial = surfaceMaterials[i] || {diffuseColor: [0.8, 0.8, 0.8], transparency: 1.0};\n        const face = [];\n        const holes = [];\n        const sharedIndices:any[] = [];\n        const geometryCfg:any = {\n            positions: [],\n            indices: []\n        };\n        for (let j = 0; j < surface.length; j++) {\n            if (face.length > 0) {\n                holes.push(face.length);\n            }\n            const newFace = extractLocalIndices(ctx, surface[j], sharedIndices, geometryCfg);\n            face.push(...newFace);\n        }\n        if (face.length === 3) { // Triangle\n            geometryCfg.indices.push(face[0]);\n            geometryCfg.indices.push(face[1]);\n            geometryCfg.indices.push(face[2]);\n        } else if (face.length > 3) { // Polygon\n            // Prepare to triangulate\n            const pList = [];\n            for (let k = 0; k < face.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[face[k]]][0],\n                    y: vertices[sharedIndices[face[k]]][1],\n                    z: vertices[sharedIndices[face[k]]][2]\n                });\n            }\n            const normal = getNormalOfPositions(pList, createVec3());\n            // Convert to 2D\n            let pv = [];\n            for (let k = 0; k < pList.length; k++) {\n                to2D(pList[k], normal, tempVec2a);\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n            // Triangulate\n            const tr = earcut(pv, holes, 2);\n            // Create triangles\n            for (let k = 0; k < tr.length; k += 3) {\n                geometryCfg.indices.unshift(face[tr[k]]);\n                geometryCfg.indices.unshift(face[tr[k + 1]]);\n                geometryCfg.indices.unshift(face[tr[k + 2]]);\n            }\n        }\n        const geometryId = \"\" + ctx.nextId++;\n        sceneModel.createGeometry({\n            id: geometryId,\n            primitive: TrianglesPrimitive,\n            positions: geometryCfg.positions,\n            indices: geometryCfg.indices\n        });\n        const meshId = \"\" + ctx.nextId++;\n        sceneModel.createMesh({\n            id: meshId,\n            geometryId,\n            color: (surfaceMaterial && surfaceMaterial.diffuseColor) ? surfaceMaterial.diffuseColor : [0.8, 0.8, 0.8],\n            opacity: (surfaceMaterial && surfaceMaterial.transparency !== undefined) ? (1.0 - surfaceMaterial.transparency) : 1.0\n        });\n        meshIds.push(meshId);\n    }\n}\n\nfunction parseGeometrySurfacesWithSharedMaterial(ctx: any, geometry: any, objectMaterial: any, meshIds: any) {\n    const sceneModel = ctx.sceneModel;\n    const sharedIndices :any= [];\n    const geometryCfg :any= {\n        positions: [],\n        indices: []\n    };\n    const geomType = geometry.type;\n    switch (geomType) {\n        case \"MultiPoint\":\n            break;\n        case \"MultiLineString\":\n            break;\n        case \"MultiSurface\":\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            break;\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            }\n            break;\n        case \"MultiSolid\":\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n                }\n            }\n            break;\n        case \"GeometryInstance\":\n            break;\n    }\n    if (geometryCfg.positions.length > 0 && geometryCfg.indices.length > 0) {\n        const geometryId = \"\" + ctx.nextId++;\n        sceneModel.createGeometry({\n            id: geometryId,\n            primitive: TrianglesPrimitive,\n            positions: geometryCfg.positions,\n            indices: geometryCfg.indices\n        });\n        const meshId = \"\" + ctx.nextId++;\n        sceneModel.createMesh({\n            id: meshId,\n            geometryId,\n            color: (objectMaterial && objectMaterial.diffuseColor) ? objectMaterial.diffuseColor : [0.8, 0.8, 0.8],\n            opacity: 1.0\n        });\n        meshIds.push(meshId);\n    }\n}\n\nfunction parseSurfacesWithSharedMaterial(ctx: any, surfaces: any, sharedIndices: any, primitiveCfg: any) {\n    const vertices = ctx.vertices;\n    for (let i = 0; i < surfaces.length; i++) {\n        let boundary = [];\n        let holes = [];\n        for (let j = 0; j < surfaces[i].length; j++) {\n            if (boundary.length > 0) {\n                holes.push(boundary.length);\n            }\n            const newBoundary = extractLocalIndices(ctx, surfaces[i][j], sharedIndices, primitiveCfg);\n            boundary.push(...newBoundary);\n        }\n        if (boundary.length === 3) { // Triangle\n            primitiveCfg.indices.push(boundary[0]);\n            primitiveCfg.indices.push(boundary[1]);\n            primitiveCfg.indices.push(boundary[2]);\n        } else if (boundary.length > 3) { // Polygon\n            let pList = [];\n            for (let k = 0; k < boundary.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[boundary[k]]][0],\n                    y: vertices[sharedIndices[boundary[k]]][1],\n                    z: vertices[sharedIndices[boundary[k]]][2]\n                });\n            }\n            const normal = getNormalOfPositions(pList, createVec3());\n            let pv = [];\n            for (let k = 0; k < pList.length; k++) {\n                to2D(pList[k], normal, tempVec2a);\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n            const tr = earcut(pv, holes, 2);\n            for (let k = 0; k < tr.length; k += 3) {\n                primitiveCfg.indices.unshift(boundary[tr[k]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 1]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 2]]);\n            }\n        }\n    }\n}\n\nfunction extractLocalIndices(ctx: any, boundary: any, sharedIndices: any, geometryCfg: any) {\n    const vertices = ctx.vertices;\n    const newBoundary = []\n    for (let i = 0, len = boundary.length; i < len; i++) {\n        const index = boundary[i];\n        if (sharedIndices.includes(index)) {\n            const vertexIndex = sharedIndices.indexOf(index);\n            newBoundary.push(vertexIndex);\n        } else {\n            geometryCfg.positions.push(vertices[index][0]);\n            geometryCfg.positions.push(vertices[index][1]);\n            geometryCfg.positions.push(vertices[index][2]);\n            newBoundary.push(sharedIndices.length);\n            sharedIndices.push(index);\n        }\n    }\n    return newBoundary\n}\n\nfunction getNormalOfPositions(positions: any, normal: any) {\n    for (let i = 0; i < positions.length; i++) {\n        let nexti = i + 1;\n        if (nexti === positions.length) {\n            nexti = 0;\n        }\n        normal[0] += ((positions[i].y - positions[nexti].y) * (positions[i].z + positions[nexti].z));\n        normal[1] += ((positions[i].z - positions[nexti].z) * (positions[i].x + positions[nexti].x));\n        normal[2] += ((positions[i].x - positions[nexti].x) * (positions[i].y + positions[nexti].y));\n    }\n    return normalizeVec3(normal);\n}\n\nfunction to2D(_p: any, _n: any, re: any) {\n    const p = tempVec3a;\n    const n = tempVec3b;\n    const x3 = tempVec3c;\n    p[0] = _p.x;\n    p[1] = _p.y;\n    p[2] = _p.z;\n    n[0] = _n.x;\n    n[1] = _n.y;\n    n[2] = _n.z;\n    x3[0] = 1.1;\n    x3[1] = 1.1;\n    x3[2] = 1.1;\n    const dist = lenVec3(subVec3(x3, n));\n    if (dist < 0.01) {\n        x3[0] += 1.0;\n        x3[1] += 2.0;\n        x3[2] += 3.0;\n    }\n    const dot = dotVec3(x3, n);\n    const tmp2 = mulVec3Scalar(n, dot, createVec3());\n    x3[0] -= tmp2[0];\n    x3[1] -= tmp2[1];\n    x3[2] -= tmp2[2];\n    normalizeVec3(x3);\n    const y3 = cross3Vec3(n, x3, createVec3());\n    const x = dotVec3(p, x3);\n    const y = dotVec3(p, y3);\n    re[0] = x;\n    re[1] = y;\n}","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import {Data} from \"@xeokit/data\";\nimport {Scene} from \"@xeokit/scene\";\nimport {SDKError} from \"@xeokit/core\";\nimport {loadCityJSON} from \"@xeokit/cityjson\";\nimport {saveXKT} from \"@xeokit/xkt\";\n\nconst commander = require('commander');\nconst npmPackage = require('./package.json');\nconst fs = require('fs');\n\nconst program = new commander.Command();\n\nprogram.version(npmPackage.version, '-v, --version');\n\nprogram\n    .option('-i, --input [file]', 'path to input CityJSON file')\n    .option('-o, --output [file]', 'path to output XKT file');\n\nprogram.on('--help', () => {\n    console.log(`\\n\\nXKT version: 10`);\n});\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\n\nif (options.input === undefined) {\n    console.error('[cityjson2xkt] Error: please specify a path to a CityJSON input file (-i).');\n    program.help();\n    process.exit(1);\n}\n\nif (options.output === undefined) {\n    console.error('[cityjson2xkt] Error: please specify output XKT file path (-o).');\n    program.help();\n    process.exit(1);\n}\n\nfunction log(msg: string) {\n    if (options.log) {\n        console.log(msg);\n    }\n}\n\nasync function main() {\n\n    log(`[cityjson2xkt] Running cityjson2xkt v${npmPackage.version}...`);\n    log(`[cityjson2xkt] Reading CityJSON file ${options.input}...`);\n\n    let fileData;\n\n    try {\n        fileData = fs.readFileSync(options.input);\n    } catch (err) {\n        console.error(`[cityjson2xkt] Error reading CityJSON file: ${err}`);\n        process.exit(1);\n    }\n\n    const data = new Data();\n\n    const dataModel = data.createModel({\n        id: \"foo\"\n    });\n\n    if (dataModel instanceof SDKError) {\n        console.error(`[cityjson2xkt] Error converting CityJSON file: ${dataModel.message}`);\n        process.exit(1);\n    } else {\n        const scene = new Scene();\n        const sceneModel = scene.createModel({\n            id: \"foo\"\n        });\n        if (sceneModel instanceof SDKError) {\n            console.error(`[cityjson2xkt] Error converting CityJSON file: ${sceneModel.message}`);\n            process.exit(1);\n        } else {\n            loadCityJSON({fileData, dataModel, sceneModel}).then(() => {\n                sceneModel.build().then(() => {\n                    dataModel.build();\n                    const xktArrayBuffer = saveXKT({dataModel, sceneModel});\n                    const outputDir = getBasePath(options.output).trim();\n                    if (outputDir !== \"\" && !fs.existsSync(outputDir)) {\n                        fs.mkdirSync(outputDir, {recursive: true});\n                    }\n                    fs.writeFileSync(options.output, Buffer.from(xktArrayBuffer));\n                    log(`[cityjson2xkt] Created XKT file: ${options.output}`);\n                    process.exit(0);\n                }).catch((err) => {\n                    console.error(`[cityjson2xkt] Error converting CityJSON file: ${err}`);\n                    process.exit(1);\n                });\n            }).catch((err) => {\n                console.error(`[cityjson2xkt] Error converting CityJSON file: ${err}`);\n                process.exit(1);\n            });\n        }\n    }\n}\n\nfunction getBasePath(src: string) {\n    const i = src.lastIndexOf(\"/\");\n    return (i !== 0) ? src.substring(0, i + 1) : \"\";\n}\n\nmain().catch(err => {\n    console.error('Error:', err);\n    process.exit(1);\n});","import type {DataModel} from \"@xeokit/data\";\nimport type {SceneModel} from \"@xeokit/scene\";\nimport {deflateXKT} from \"./deflateXKT\";\nimport {modelToXKT} from \"./modelToXKT\";\nimport {packXKT} from \"./packXKT\";\nimport {SDKError} from \"@xeokit/core\";\n\n\n/**\n * Exports a {@link @xeokit/scene!SceneModel | SceneModel} and/or a {@link @xeokit/data!DataModel} to an ArrayBuffer\n * containing XKT file data.\n *\n * See {@link @xeokit/xkt} for usage.\n *\n * See {@link XKTData} for insights into the structure of an XKT file.\n *\n * @param params\n * @param params.sceneModel - The SceneModel to export to XKT.\n * @param params.dataModel - Optional DataModel to export to XKT.\n * @returns The XKT file data in an ArrayBuffer.\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the SceneModel has not yet been built.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has already been destroyed.\n * @returns {@link @xeokit/core!SDKError} If the DataModel has not yet been built.\n */\nexport function saveXKT(params: {\n    sceneModel: SceneModel,\n    dataModel?: DataModel\n}): ArrayBuffer {\n    if (params.sceneModel.destroyed) {\n        throw new SDKError(\"SceneModel already destroyed\");\n    }\n    if (!params.sceneModel.built) {\n        throw new SDKError(\"SceneModel not yet built\");\n    }\n    if (params.dataModel) {\n        if (params.dataModel.destroyed) {\n            throw new SDKError(\"DataModel already destroyed\");\n        }\n        if (!params.dataModel.built) {\n            throw new SDKError(\"DataModel not yet built\");\n        }\n    }\n    return packXKT(deflateXKT(modelToXKT({\n        sceneModel: params.sceneModel,\n        dataModel: params.dataModel\n    })));\n}","import type {XKTDataDeflated} from \"./XKTDataDeflated\";\nimport type {XKTData} from \"./XKTData\";\nimport * as pako from \"pako\";\n\n/**\n * @private\n */\nexport function deflateXKT(xktData: XKTData, metaModelJSON?: any): XKTDataDeflated {\n    let metaModelBytes;\n    if (metaModelJSON) {\n        const deflatedJSON = deflateJSON(metaModelJSON);\n        metaModelBytes = pako.deflate(deflatedJSON)\n    } else {\n        const deflatedJSON = deflateJSON([\"{}\"]);\n        metaModelBytes = pako.deflate(deflatedJSON)\n    }\n    return <XKTDataDeflated>{\n        metadata: metaModelBytes,\n        textureData: pako.deflate(xktData.textureData.buffer),\n        eachTextureDataPortion: pako.deflate(xktData.eachTextureDataPortion.buffer),\n        eachTextureAttributes: pako.deflate(xktData.eachTextureAttributes.buffer),\n        positions: pako.deflate(xktData.positions.buffer),\n        colors: pako.deflate(xktData.colors.buffer),\n        uvs: pako.deflate(xktData.uvs.buffer),\n        indices8Bit: pako.deflate(xktData.indices8Bit.buffer),\n        indices16Bit: pako.deflate(xktData.indices16Bit.buffer),\n        indices32Bit: pako.deflate(xktData.indices32Bit.buffer),\n        edgeIndices8Bit: pako.deflate(xktData.edgeIndices8Bit.buffer),\n        edgeIndices16Bit: pako.deflate(xktData.edgeIndices16Bit.buffer),\n        edgeIndices32Bit: pako.deflate(xktData.edgeIndices32Bit.buffer),\n        eachTextureSetTextures: pako.deflate(xktData.eachTextureSetTextures.buffer),\n        decodeMatrices: pako.deflate(xktData.decodeMatrices.buffer),\n        eachBucketPositionsPortion: pako.deflate(xktData.eachBucketPositionsPortion.buffer),\n        eachBucketColorsPortion: pako.deflate(xktData.eachBucketColorsPortion.buffer),\n        eachBucketUVsPortion: pako.deflate(xktData.eachBucketUVsPortion.buffer),\n        eachBucketIndicesPortion: pako.deflate(xktData.eachBucketIndicesPortion.buffer),\n        eachBucketEdgeIndicesPortion: pako.deflate(xktData.eachBucketEdgeIndicesPortion.buffer),\n        eachBucketIndicesBitness: pako.deflate(xktData.eachBucketIndicesBitness.buffer),\n        eachGeometryPrimitiveType: pako.deflate(xktData.eachGeometryPrimitiveType.buffer),\n        eachGeometryBucketPortion: pako.deflate(xktData.eachGeometryBucketPortion.buffer),\n        eachGeometryDecodeMatricesPortion: pako.deflate(xktData.eachGeometryDecodeMatricesPortion.buffer),\n        matrices: pako.deflate(xktData.matrices.buffer),\n        eachMeshGeometriesPortion: pako.deflate(xktData.eachMeshGeometriesPortion.buffer),\n        eachMeshMatricesPortion: pako.deflate(xktData.eachMeshMatricesPortion.buffer),\n        eachMeshTextureSet: pako.deflate(xktData.eachMeshTextureSet.buffer),\n        eachMeshMaterialAttributes: pako.deflate(xktData.eachMeshMaterialAttributes.buffer),\n        eachObjectId: pako.deflate(JSON.stringify(xktData.eachObjectId)\n            .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n                return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n            })),\n        eachObjectMeshesPortion: pako.deflate(xktData.eachObjectMeshesPortion.buffer)\n    };\n}\n\nfunction deflateJSON(strings: string[]): string {\n    return JSON.stringify(strings)\n        .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n            return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n        });\n}\n","import {XKT_INFO} from \"./XKT_INFO\";\nimport type {XKTData} from \"./XKTData\";\nimport type {SceneModel} from \"@xeokit/scene\";\nimport type {DataModel} from \"@xeokit/data\";\nimport {ClampToEdgeWrapping, LinearMipmapLinearFilter} from \"@xeokit/constants\";\n\nconst XKT_VERSION = XKT_INFO.xktVersion;\nconst NUM_TEXTURE_ATTRIBUTES = 9;\nconst NUM_MATERIAL_ATTRIBUTES = 6;\n\n/**\n * @private\n */\nexport function modelToXKT(params: {\n    sceneModel: SceneModel,\n    dataModel?: DataModel\n}): XKTData {\n\n    const sceneModel = params.sceneModel;\n    const dataModel = params.dataModel;\n\n    const geometriesList = Object.values(sceneModel.geometries);\n    const texturesList = Object.values(sceneModel.textures);\n    const textureSetsList = Object.values(sceneModel.textureSets);\n    const meshesList = Object.values(sceneModel.meshes);\n    const objectsList = Object.values(sceneModel.objects);\n\n    const numGeometries = geometriesList.length;\n    const numTextures = texturesList.length;\n    const numTextureSets = textureSetsList.length;\n    const numMeshes = meshesList.length;\n    const numObjects = objectsList.length;\n\n    let lenBuckets = 0;\n    let lenPositions = 0;\n    let lenColors = 0;\n    let lenUVs = 0;\n    let lenIndices8Bit = 0;\n    let lenIndices16Bit = 0;\n    let lenIndices32Bit = 0;\n    let lenEdgeIndices8Bit = 0;\n    let lenEdgeIndices16Bit = 0;\n    let lenEdgeIndices32Bit = 0;\n    let lenMatrices = 0;\n    let lenTextures = 0;\n    let lenDecodeMatrices = 0;\n\n    const geometryIndices: { [key: string]: number } = {};\n    const textureIndices: { [key: string]: number } = {};\n    const textureSetIndices: { [key: string]: number } = {};\n    const meshIndices: { [key: string]: number } = {};\n\n    for (let geometryIndex = 0; geometryIndex < numGeometries; geometryIndex++) {\n        const geometry = geometriesList [geometryIndex];\n        const geometryBuckets = geometry.geometryBuckets;\n        lenBuckets += geometryBuckets.length;\n        for (let i = 0, len = geometryBuckets.length; i < len; i++) {\n            const geometryBucket = geometryBuckets[i];\n            if (geometryBucket.positionsCompressed) {\n                const numPositions = geometryBucket.positionsCompressed.length / 3;\n                lenPositions += geometryBucket.positionsCompressed.length;\n                if (geometryBucket.indices) {\n                    if (numPositions <= (1 << 8)) {\n                        lenIndices8Bit += geometryBucket.indices.length;\n                    } else if (numPositions <= (1 << 16)) {\n                        lenIndices16Bit += geometryBucket.indices.length;\n                    } else {\n                        lenIndices32Bit += geometryBucket.indices.length;\n                    }\n                }\n                if (geometryBucket.edgeIndices) {\n                    if (numPositions <= (1 << 8)) {\n                        lenEdgeIndices8Bit += geometryBucket.edgeIndices.length;\n                    } else if (numPositions <= (1 << 16)) {\n                        lenEdgeIndices16Bit += geometryBucket.edgeIndices.length;\n                    } else {\n                        lenEdgeIndices32Bit += geometryBucket.edgeIndices.length;\n                    }\n                }\n                if (geometryBucket.uvsCompressed) {\n                    lenUVs += geometryBucket.uvsCompressed.length;\n                }\n            }\n        }\n    }\n\n    for (let textureIndex = 0; textureIndex < numTextures; textureIndex++) {\n        const texture = texturesList[textureIndex];\n        const imageData = texture.imageData;\n        lenTextures += imageData.byteLength;\n    }\n\n    lenDecodeMatrices = numGeometries * 16;\n\n    const xktData: XKTData = {\n        metadata: dataModel ? dataModel.getJSON() : {},\n        textureData: new Uint8Array(lenTextures), // All textures\n        eachTextureDataPortion: new Uint32Array(numTextures), // For each texture, an index to its first element in textureData\n        eachTextureAttributes: new Uint16Array(numTextures * NUM_TEXTURE_ATTRIBUTES),\n        positions: new Uint16Array(lenPositions), // All geometry arrays\n        colors: new Uint8Array(lenColors),\n        uvs: new Float32Array(lenUVs),\n        indices8Bit: new Uint8Array(lenIndices8Bit),\n        indices16Bit: new Uint16Array(lenIndices16Bit),\n        indices32Bit: new Uint32Array(lenIndices32Bit),\n        edgeIndices8Bit: new Uint8Array(lenEdgeIndices8Bit),\n        edgeIndices16Bit: new Uint16Array(lenEdgeIndices16Bit),\n        edgeIndices32Bit: new Uint32Array(lenEdgeIndices32Bit),\n        eachTextureSetTextures: new Int32Array(numTextureSets * 5), // For each texture set, a set of five Texture indices [color, metal/roughness,normals,emissive,occlusion]; each index has value -1 if no texture\n        decodeMatrices: new Float32Array(lenDecodeMatrices), // TODO\n        eachBucketPositionsPortion: new Uint32Array(lenBuckets), // For each geometry, an index to its first element in xktData.positions. Every primitive type has positions.\n        eachBucketColorsPortion: new Uint32Array(lenBuckets), // For each geometry, an index to its first element in xktData.colors. If the next geometry has the same index, then this geometry has no colors.\n        eachBucketUVsPortion: new Uint32Array(lenBuckets), // For each geometry, an index to its first element in xktData.uvs. If the next geometry has the same index, then this geometry has no UVs.\n        eachBucketIndicesPortion: new Uint32Array(lenBuckets), // For each geometry, an index to its first element in xktData.indices. If the next geometry has the same index, then this geometry has no indices.\n        eachBucketEdgeIndicesPortion: new Uint32Array(lenBuckets), // For each geometry, an index to its first element in xktData.edgeIndices. If the next geometry has the same index, then this geometry has no edge indices.\n        eachBucketIndicesBitness: new Uint8Array(lenBuckets), // TODO\n        eachGeometryPrimitiveType: new Uint8Array(numGeometries), // Primitive type for each geometry (0=solid triangles, 1=surface triangles, 2=lines, 3=points)\n        eachGeometryBucketPortion: new Uint32Array(numGeometries), // TODO\n        eachGeometryDecodeMatricesPortion: new Uint32Array(numGeometries), // Positions dequantization matrices\n        matrices: new Float32Array(lenMatrices), // Modeling matrices\n        eachMeshGeometriesPortion: new Uint32Array(numMeshes), // For each mesh, an index into the eachGeometry* arrays\n        eachMeshMatricesPortion: new Uint32Array(numMeshes), // For each mesh that shares its geometry, an index to its first element in xktData.matrices, to indicate the modeling matrix that transforms the shared geometry Local-space vertex positions. This is ignored for meshes that don't share geometries, because the vertex positions of non-shared geometries are pre-transformed into World-space.\n        eachMeshTextureSet: new Uint32Array(numMeshes), // For each mesh, the index of its texture set in xktData.eachTextureSetTextures; this array contains signed integers so that we can use -1 to indicate when a mesh has no texture set\n        eachMeshMaterialAttributes: new Uint8Array(numMeshes * NUM_MATERIAL_ATTRIBUTES), // For each mesh, an RGBA integer color of format [0..255, 0..255, 0..255, 0..255], and PBR metallic and roughness factors, of format [0..255, 0..255]\n        eachObjectId: [], // For each object, an ID string\n        eachObjectMeshesPortion: new Uint32Array(numObjects) // For each object, the index of the first element of meshes used by the object\n    };\n\n    let countBuckets = 0;\n    let countPositions = 0;\n    let countColors = 0;\n    let countUVs = 0;\n    let countIndices8Bit = 0;\n    let countIndices16Bit = 0;\n    let countIndices32Bit = 0;\n    let countEdgeIndices8Bit = 0;\n    let countEdgeIndices16Bit = 0;\n    let countEdgeIndices32Bit = 0;\n    let countDecodeMatrices = 0;\n\n    // Geometries and buckets\n\n    let geometryIndex = 0;\n\n    for (let geometryId in sceneModel.geometries) {\n\n        const geometry = sceneModel.geometries[geometryId];\n        const geometryBuckets = geometry.geometryBuckets;\n\n        xktData.eachGeometryPrimitiveType [geometryIndex] = geometry.primitive;\n        xktData.eachGeometryBucketPortion [geometryIndex] = countBuckets;\n        xktData.eachGeometryDecodeMatricesPortion [geometryIndex] = countDecodeMatrices;\n\n        xktData.decodeMatrices.set(geometry.positionsDecompressMatrix, countDecodeMatrices); // TODO: only add decode matrix if different from what's already added\n        countDecodeMatrices += 16;\n\n        for (let i = 0, len = geometryBuckets.length; i < len; i++) {\n\n            const geometryBucket = geometryBuckets[i];\n            const lenBucketPositions = geometryBucket.positionsCompressed.length;\n            const numBucketPositions = lenBucketPositions / 3;\n            const bucketIndicesBitness: number = (numBucketPositions <= (1 << 8)) ? 0 : ((numBucketPositions <= (1 << 16)) ? 1 : 2);\n\n            xktData.eachBucketPositionsPortion [countBuckets] = countPositions;\n            xktData.eachBucketColorsPortion [countBuckets] = countColors;\n            xktData.eachBucketUVsPortion [countBuckets] = countUVs;\n            xktData.eachBucketIndicesBitness [countBuckets] = bucketIndicesBitness;\n\n            xktData.positions.set(geometryBucket.positionsCompressed, countPositions);\n            countPositions += geometryBucket.positionsCompressed.length;\n\n            if (geometryBucket.indices) {\n                switch (bucketIndicesBitness) {\n                    case 0:\n                        xktData.indices8Bit.set(geometryBucket.indices, countIndices8Bit);\n                        xktData.eachBucketIndicesPortion [geometryIndex] = countIndices8Bit;\n                        countIndices8Bit += geometryBucket.indices.length;\n                        break;\n                    case 1:\n                        xktData.indices16Bit.set(geometryBucket.indices, countIndices16Bit);\n                        xktData.eachBucketIndicesPortion [geometryIndex] = countIndices16Bit;\n                        countIndices16Bit += geometryBucket.indices.length;\n                        break;\n                    case 2:\n                        xktData.indices32Bit.set(geometryBucket.indices, countIndices32Bit);\n                        xktData.eachBucketIndicesPortion [geometryIndex] = countIndices32Bit;\n                        countIndices32Bit += geometryBucket.indices.length;\n                        break;\n                }\n            }\n\n            if (geometryBucket.edgeIndices) {\n                switch (bucketIndicesBitness) {\n                    case 0:\n                        xktData.edgeIndices8Bit.set(geometryBucket.edgeIndices, countEdgeIndices8Bit);\n                        xktData.eachBucketEdgeIndicesPortion [geometryIndex] = countEdgeIndices8Bit;\n                        countEdgeIndices8Bit += geometryBucket.edgeIndices.length;\n                        break;\n                    case 1:\n                        xktData.edgeIndices16Bit.set(geometryBucket.edgeIndices, countEdgeIndices16Bit);\n                        xktData.eachBucketEdgeIndicesPortion [geometryIndex] = countEdgeIndices16Bit;\n                        countEdgeIndices16Bit += geometryBucket.edgeIndices.length;\n                        break;\n                    case 2:\n                        xktData.edgeIndices32Bit.set(geometryBucket.edgeIndices, countEdgeIndices32Bit);\n                        xktData.eachBucketEdgeIndicesPortion [geometryIndex] = countEdgeIndices32Bit;\n                        countEdgeIndices32Bit += geometryBucket.edgeIndices.length;\n                        break;\n                }\n            }\n\n            if (geometryBucket.colorsCompressed) {\n                xktData.colors.set(geometryBucket.colorsCompressed, countColors);\n                countColors += geometryBucket.colorsCompressed.length;\n            }\n\n            if (geometryBucket.uvsCompressed) {\n                xktData.uvs.set(geometryBucket.uvsCompressed, countUVs);\n                countUVs += geometryBucket.uvsCompressed.length;\n            }\n\n            countBuckets++;\n        }\n\n        geometryIndices[geometry.id] = geometryIndex;\n        geometryIndex++;\n    }\n\n    // Textures\n\n    for (let textureIndex = 0, numTextures = texturesList.length, portionIdx = 0; textureIndex < numTextures; textureIndex++) {\n\n        const texture = texturesList[textureIndex];\n        const imageData = texture.imageData;\n\n        xktData.textureData.set(imageData, portionIdx);\n        xktData.eachTextureDataPortion[textureIndex] = portionIdx;\n\n        portionIdx += imageData.byteLength;\n\n        let textureAttrIdx = textureIndex * NUM_TEXTURE_ATTRIBUTES;\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.compressed ? 1 : 0;\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.mediaType || 0; // GIFMediaType | PNGMediaType | JPEGMediaType\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.width;\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.height;\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.minFilter || LinearMipmapLinearFilter; // LinearMipmapLinearFilter | LinearMipMapNearestFilter | NearestMipMapNearestFilter | NearestMipMapLinearFilter | LinearMipMapLinearFilter\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.magFilter || LinearMipmapLinearFilter; // LinearFilter | NearestFilter\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.wrapS || ClampToEdgeWrapping; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.wrapT || ClampToEdgeWrapping; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        xktData.eachTextureAttributes[textureAttrIdx++] = texture.wrapR || ClampToEdgeWrapping; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n\n        textureIndices[texture.id] = textureIndex;\n    }\n\n    // Texture sets\n\n    for (let textureSetIndex = 0, numTextureSets = textureSetsList.length, eachTextureSetTexturesIndex = 0; textureSetIndex < numTextureSets; textureSetIndex++) {\n        const textureSet = textureSetsList[textureSetIndex];\n        xktData.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.colorTexture ? textureIndices[textureSet.colorTexture.id] : -1; // Color map\n        xktData.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.metallicRoughnessTexture ? textureIndices[textureSet.metallicRoughnessTexture.id] : -1; // Metal/rough map\n        xktData.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.emissiveTexture ? textureIndices[textureSet.emissiveTexture.id] : -1; // Emissive map\n        xktData.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.occlusionTexture ? textureIndices[textureSet.occlusionTexture.id] : -1; // Occlusion map\n\n        textureSetIndices[textureSet.id] = textureSetIndex;\n    }\n\n    // Meshes and objects\n\n    let eachMeshMaterialAttributesIndex = 0;\n    let matricesIndex = 0;\n    let countMeshes = 0;\n\n    for (let objectIndex = 0; objectIndex < numObjects; objectIndex++) {\n\n        const object = objectsList[objectIndex];\n        const numObjectMeshes = object.meshes.length;\n\n        xktData.eachObjectId[objectIndex] = object.id;\n        xktData.eachObjectMeshesPortion[objectIndex] = countMeshes;\n\n        for (let meshIndex = 0; meshIndex < numObjectMeshes; meshIndex++) {\n\n            const mesh = object.meshes[meshIndex];\n\n            xktData.eachMeshGeometriesPortion [meshIndex] = geometryIndices[mesh.geometry.id];\n\n            xktData.eachMeshMatricesPortion [meshIndex] = matricesIndex;\n            xktData.matrices.set(mesh.matrix, matricesIndex); // TODO: only add matrix if different from what's already added\n            matricesIndex += 16;\n\n            xktData.eachMeshTextureSet[meshIndex] = mesh.textureSet ? textureSetIndices[mesh.textureSet.id] : -1;\n\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[0] * 255); // Color RGB\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[1] * 255);\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[2] * 255);\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.opacity * 255); // Opacity\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.metallic * 255); // Metallic\n            xktData.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.roughness * 255); // Roughness\n        }\n\n        countMeshes += numObjectMeshes;\n    }\n\n    return xktData;\n}\n","import type {XKTDataDeflated} from \"./XKTDataDeflated\";\nimport {XKT_INFO} from \"./XKT_INFO\";\n\n/**\n * @private\n */\nexport function packXKT(deflatedData: XKTDataDeflated): ArrayBuffer {\n    return toArrayBuffer(<Buffer[]>[\n        deflatedData.metadata,\n        deflatedData.textureData,\n        deflatedData.eachTextureDataPortion,\n        deflatedData.eachTextureAttributes,\n        deflatedData.positions,\n        deflatedData.colors,\n        deflatedData.uvs,\n        deflatedData.indices8Bit,\n        deflatedData.indices16Bit,\n        deflatedData.indices32Bit,\n        deflatedData.edgeIndices8Bit,\n        deflatedData.edgeIndices16Bit,\n        deflatedData.edgeIndices32Bit,\n        deflatedData.eachTextureSetTextures,\n        deflatedData.decodeMatrices,\n        deflatedData.eachBucketPositionsPortion,\n        deflatedData.eachBucketColorsPortion,\n        deflatedData.eachBucketUVsPortion,\n        deflatedData.eachBucketIndicesPortion,\n        deflatedData.eachBucketEdgeIndicesPortion,\n        deflatedData.eachBucketIndicesBitness,\n        deflatedData.eachGeometryPrimitiveType,\n        deflatedData.eachGeometryBucketPortion,\n        deflatedData.eachGeometryDecodeMatricesPortion,\n        deflatedData.matrices,\n        deflatedData.eachMeshGeometriesPortion,\n        deflatedData.eachMeshMatricesPortion,\n        deflatedData.eachMeshTextureSet,\n        deflatedData.eachMeshMaterialAttributes,\n        deflatedData.eachObjectId,\n        deflatedData.eachObjectMeshesPortion\n    ]);\n}\n\nfunction toArrayBuffer(elements: Buffer[]): ArrayBuffer {\n    const indexData = new Uint32Array(elements.length + 2);\n    indexData[0] = XKT_INFO.xktVersion;\n    indexData [1] = elements.length;  // Stored Data 1.1: number of stored elements\n    let dataLen = 0;    // Stored Data 1.2: length of stored elements\n    for (let i = 0, len = elements.length; i < len; i++) {\n        const element = elements[i];\n        const elementsize = element.length;\n        indexData[i + 2] = elementsize;\n        dataLen += elementsize;\n    }\n    const indexBuf = new Uint8Array(indexData.buffer);\n    const dataArray = new Uint8Array(indexBuf.length + dataLen);\n    dataArray.set(indexBuf);\n    let offset = indexBuf.length;\n    for (let i = 0, len = elements.length; i < len; i++) {     // Stored Data 2: the elements themselves\n        const element = elements[i];\n        dataArray.set(element, offset);\n        offset += element.length;\n    }\n    return dataArray.buffer;\n}","/**\n * Provides info on the XKT generated by xeokit-convert.\n *\n * See {@link @xeokit/xkt} for usage.\n */\nexport const XKT_INFO = {\n\n    /**\n     * The XKT version generated by xeokit-convert.\n     *\n     * @property xktVersion\n     * @type {number}\n     */\n    xktVersion: 11\n};"],"names":["Property","propertySet","propertyCfg","this","name","value","type","valueType","description","PropertySet","dataModel","propertySetCfg","models","id","originalSystemId","properties","i","len","length","property","push","DataObject","data","model","propertySets","relating","related","Relationship","relatingObject","relatedObject","_destroyed","_classPrivateFieldLooseKey","_removeObjectFromModels","DataModel","_Component","dataModelParams","options","_this","call","Object","defineProperty","_assertThisInitialized","_removeObjectFromModels2","projectId","revisionId","author","createdAt","creatingApplication","schema","objects","rootObjects","objectsByType","relationships","typeCounts","onBuilt","built","writable","EventEmitter","EventDispatcher","_classPrivateFieldLooseBase","fromJSON","_inheritsLoose","_proto","prototype","destroyed","SDKError","createPropertySet","createObject","createRelationship","dataObjectParams","dataObject","undefined","propertySetIds","propertySetId","onObjectCreated","dispatch","relationshipParams","relatingObjectId","relatedObjectId","relation","build","getJSON","_dataModelParams$prop","propertySetParams","_dataModelParams$obje","object","objectParams","_objectParams$propert","_dataModelParams$rela","relationship","destroy","onObjectDestroyed","relations","list","j","lenj","clear","Component","splice","Data","onModelCreated","onModelDestroyed","createModel","_this2","onDestroyed","one","getObjectIdsByType","keys","searchObjects","searchParams","includeObjects","arrayToMap","excludeObjects","includeRelating","excludeRelating","visit","depth","includeObject","includeStart","resultObjectIds","resultObjects","resultCallback","includeRelation","startObjectId","startObject","array","map","r","Float64Array","n","Number","MAX_SAFE_INTEGER","t","assert","condition","message","Error","isBrowser","Boolean","process","String","browser","version","exec","globals","self","window","global","document","global_","isWorker","importScripts","isMobile","orientation","_typeof","obj","Symbol","iterator","constructor","_defineProperty","key","arg","input","hint","prim","toPrimitive","res","TypeError","toPropertyKey","enumerable","configurable","WorkerJob","jobName","workerThread","result","Promise","resolve","reject","_resolve","_reject","postMessage","payload","source","done","isRunning","error","Worker","terminate","workerURLCache","Map","getLoadableWorkerURLFromSource","workerSource","blob","Blob","URL","createObjectURL","getTransferList","recursive","arguments","transfers","transfersSet","Set","isTransferable","add","buffer","ArrayBuffer","isView","Array","from","MessagePort","ImageBitmap","OffscreenCanvas","getTransferListForWriter","clone","assign","forEach","RegExp","NOOP","WorkerThread","static","NodeWorker","props","url","onMessage","onError","console","log","worker","_createBrowserWorker","_createNodeWorker","terminated","transferList","_getErrorFromErrorEvent","event","concat","lineno","colno","_loadableURL","workerURL","get","startsWith","set","getLoadableWorkerURL","onmessage","onerror","onmessageerror","includes","eval","on","code","WorkerPool","isSupported","setProps","idleQueue","isDestroyed","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","async","job","startPromise","onStart","jobQueue","_startQueuedJob","_getAvailableWorker","queuedJob","shift","backlog","returnWorkerToQueue","count","_getMaxConcurrency","toLowerCase","DEFAULT_PROPS","WorkerFarm","_workerFarm","workerPools","workerPool","values","_getWorkerPoolProps","getWorkerPool","NPM_TAG","VERSION","getWorkerURL","workerOptions","workerFile","workerUrl","_workerType","module","versionTag","processOnWorker","context","warning","getWorkerName","workerFarm","getWorkerFarm","workerPoolProps","startJob","bind","transferableOptions","warn","loadLibraryPromises","loadLibrary","libraryUrl","moduleName","library","modules","CDN","getLibraryUrl","endsWith","response","fetch","arrayBuffer","node","node.requireFromFile","scriptSource","script","createElement","appendChild","createTextNode","e","text","body","loadLibraryFromString","loadLibraryFromFile","parseWithWorker","loader","parseOnMainThread","JSON","parse","stringify","concatenateArrayBuffers","_len","sources","_key","sourceArrays","source2","Uint8Array","byteLength","reduce","typedArray","offset","sourceArray","pathPrefix","fileAliases","resolvePath","filename","alias","replace","toArrayBuffer","isBuffer","node.toArrayBuffer","byteOffset","slice","TextEncoder","encode","_toArrayBuffer","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","loadBasisEncoderPromise","KTX2BasisWriter","extensions","useSRGB","qualityLevel","encodeUASTC","mipmaps","image","BasisEncoder","basisEncoder","BASIS_ENCODER","wasmBinary","all","globalThis","BASIS","BasisEncoderModule","then","BasisFile","KTX2File","initializeBasis","initializeBasisEncoderModule","loadBasisEncoder","loadBasisEncoderModule","basisFileData","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","subarray","delete","_parseImageNode","IMAGE_SUPPORTED","Image","IMAGE_BITMAP_SUPPORTED","NODE_IMAGE_SUPPORTED","DATA_SUPPORTED","SVG_DATA_URL_PATTERN","SVG_URL_PATTERN","isSVG","test","getBlob","parseToImage","blobOrDataUrl","xmlText","TextDecoder","decode","unescape","encodeURIComponent","btoa","getBlobOrSVGDataUrl","webkitURL","objectUrl","src","onload","err","loadToImage","revokeObjectURL","EMPTY_OBJECT","imagebitmapOptionsSupported","BIG_ENDIAN","LITTLE_ENDIAN","getBinaryImageMetadata","binaryData","dataView","toDataView","getUint32","mimeType","getPngMetadata","getUint16","getUint8","tableMarkers","sofMarkers","getJpegMarkers","marker","has","getJpegMetadata","getGifMetadata","getBmpMetadata","DataView","ImageLoader","mimeTypes","imageType","getDefaultImageType","isImageTypeSupported","getLoadableImageType","imagebitmapOptions","imagebitmap","isEmptyObject","createImageBitmap","safeCreateImageBitmap","parseToImageBitmap","parseToNodeImage","format","getImageTypeOrNull","getImageType","canvas","getContext","drawImage","getImageData","tests","he","ie","je","ke","le","v","h","FloatArrayClass","M","s","Z","p","J","u","a","o","c","Q","Math","sqrt","O","_","cn","qn","translate","createMat4","scale","decompressPoint3","position","decompressMatrix","dest","createAABB3","collapseAABB3","aabb","MAX_DOUBLE","MIN_DOUBLE","expandAABB3Points3","positions","x","y","z","GeometryBucket","geometryBucketParams","positionsCompressed","uvsCompressed","colorsCompressed","indices","edgeIndices","Geometry","params","primitive","positionsDecompressMatrix","uvsDecompressMatrix","geometryBuckets","rendererGeometry","_positionsDecompressed","_positionsWorld","GeometryViewImpl","mesh","meshIndex","geometry","geometryBucket","geometryBucketIndex","reset","_createClass","totalGeometryBuckets","meshes","primitiveType","TrianglesPrimitive","LinesPrimitive","Float32Array","decompressPositions3","positionsDecompressed","f","l","d","q","X","Y","b","g","w","transformPositions3","matrix","geometryView","_aabb","_aabbDirty","SceneObject","cfg","layerId","rendererObject","setAABBDirty","sceneObject","withEachGeometry","getSceneObjectGeometry","positionsWorld","TextureSet","textureSetParams","textures","colorTexture","metallicRoughnessTexture","occlusionTexture","emissiveTexture","rendererTextureSet","Texture","rendererTexture","imageData","buffers","compressed","mediaType","magFilter","minFilter","wrapS","wrapT","wrapR","flipY","encoding","preloadColor","channel","RepeatWrapping","createVec4","_color","_matrix","_metallic","_roughness","_opacity","Mesh","meshParams","textureSet","rendererMesh","identityMat4","color","createVec3","metallic","roughness","opacity","setColor","setMatrix","setMetallic","setRoughness","uniquePositions","indicesLookup","indicesReverseLookup","weldedIndices","faces","numFaces","compa","Uint16Array","compb","compc","cb","ab","cross","normal","comparePositions","compareVertex","seqInit","bucketsForIndices","compareBuckets","aa1","aa2","aa3","bb1","bb2","bb3","aa","bb","minBucketA","min","minBucketB","maxBucketA","max","maxBucketB","isFunction","isObject","isPureObject","isIterable","isAsyncIterable","asyncIterator","isResponse","Response","json","isBlob","isReadableStream","ReadableStream","tee","cancel","getReader","isReadableDOMStream","read","pipe","isBoolean","readable","isReadableNodeStream","DATA_URL_PATTERN","MIME_TYPE_PATTERN","parseMIMEType","mimeString","matches","parseMIMETypeFromURL","QUERY_STRING_PATTERN","getResourceUrlAndType","resource","stripQueryString","headers","makeResponse","contentLength","size","getResourceContentLength","initialDataUrl","blobSlice","reader","FileReader","_event$target","target","readAsDataURL","base64","binary","bytes","fromCharCode","arrayBufferToBase64","getInitialDataUrl","fetchFile","fetchOptions","mockUserAgent","versions","realUserAgent","navigator","userAgent","indexOf","isElectron","window_","process_","__VERSION__","checkIfBrowser","LocalStorage","defaultConfig","storage","setItem","removeItem","getStorage","config","_loadConfiguration","getConfiguration","setConfiguration","configuration","serialized","serializedConfiguration","getItem","formatImage","maxWidth","imageUrl","style","floor","join","COLOR","getColor","toUpperCase","WHITE","getHiResTimestamp","timestamp","_window$performance","_window$performance$n","performance","now","_process$hrtime","timeParts","hrtime","Date","originalConsole","debug","info","DEFAULT_SETTINGS","enabled","level","noop","cache","ONCE","once","Log","userData","_storage","timeStamp","predefined","proto","getPrototypeOf","propNames","getOwnPropertyNames","find","autobind","seal","newLevel","setLevel","getLevel","isEnabled","getTotal","_startTs","toPrecision","getDelta","_deltaTs","priority","newPriority","getPriority","enable","setting","settings","table","_getLogFunction","deprecated","oldUsage","newUsage","removed","probe","logLevel","time","args","columns","tag","getTableHeader","_ref","_shouldLog","_ref3","img","element","nodeName","toDataURL","logImageInBrowser","timeEnd","group","opts","collapsed","normalizeArguments","method","groupCollapsed","groupEnd","withGroup","func","trace","normalizeLogLevel","total","delta","string","padLength","repeat","leftPad","ms","formatted","toFixed","formatTime","background","decorateMessage","resolvedLevel","isFinite","unshift","messageType","title","probeLog","NullLog","DEFAULT_LOADER_OPTIONS","nothrow","_len2","_key2","_len3","_key3","_len4","_key4","_nodeWorkers","limit","_limitMB","batchSize","batchDebounceMs","metadata","transforms","REMOVED_LOADER_OPTIONS","throws","dataType","uri","mode","credentials","redirect","referrer","referrerPolicy","integrity","keepalive","signal","getGlobalLoaderState","loaders","_state","getGlobalLoaderOptions","state","globalOptions","getFetchFunction","validateOptionsObject","defaultOptions","deprecatedOptions","loaderName","prefix","isSubOptions","suggestion","findSimilarOption","optionKey","lowerCaseOptionKey","bestSuggestion","lowerCaseKey","mergeNestedFields","mergedOptions","isLoaderObject","_loader","isArray","normalizeLoader","_loader2","_loader3","parseTextSync","parseText","getGlobalLoaderRegistry","loaderRegistry","EXT_PATTERN","selectLoaderSync","validHTTPResponse","candidateLoaders","ignoreRegisteredLoaders","normalizeLoaders","testUrl","reason","findLoaderByMIMEType","match","extension","loaderExtension","findLoaderByExtension","findLoaderByUrl","testDataAgainstText","testDataAgainstBinary","findLoaderByInitialBytes","getFirstCharacters","fallbackMimeType","selectLoaderInternal","getNoValidLoaderMessage","status","slashIndex","lastIndexOf","substr","path.filename","firstCharacters","testText","some","arrayBuffer1","arrayBuffer2","array1","array2","compareArrayBuffers","getMagicString","testBinary","magic","DEFAULT_CHUNK_SIZE","makeStreamIterator","stream","nextBatchPromise","currentBatchPromise","_streamReadAhead","releaseLock","makeBrowserStreamIterator","chunk","makeNodeStreamIterator","ERR_DATA","contextLoaders","getLoadersFromContext","selectLoader","previousContext","resolvedContext","getLoaderContext","validateOptions","baseUri","addUrlOptions","normalizeOptionsInternal","normalizeOptions","ok","redirected","statusText","fromEntries","entries","isArrayBuffer","getArrayBufferOrStringFromDataSync","contentType","getResponseError","checkResponse","chunkSize","textEncoder","chunkLength","makeStringIterator","chunkByteLength","makeArrayBufferIterator","end","makeBlobIterator","makeIterator","arrayBuffers","concatenateArrayBuffersAsync","getArrayBufferOrStringFromData","canParseWithWorker","parseSync","parseWithLoader","writer","canEncodeWithWorker","getLoaderOptions","encodeSync","encodeText","encodeInBatches","batches","dataIterator","start","getIterator","chunks","batch","encodeURLtoURL","tmpInputFilename","getTemporaryFilename","filePath","arrayBufferOrString","fs.writeFile","flag","writeFile","tmpOutputFilename","outputFilename","inputUrl","outputUrl","TEXTURE_ENCODING_OPTIONS","_texturesList","_numObjects","_meshUsedByObject","_removeUnusedTextures","_compressTextures","SceneModel","scene","sceneModelParams","_compressTextures2","_removeUnusedTextures2","edgeThreshold","geometries","textureSets","rendererModel","createGeometry","createTexture","createTextureSet","createMesh","createTransform","transformParams","textureParams","split","pop","texture","normalsTexture","colorTextureId","metallicRoughnessTextureId","normalsTextureId","emissiveTextureId","occlusionTextureId","geometryParams","geometryId","PointsPrimitive","SolidPrimitive","SurfacePrimitive","uvs","lastPositionsIdx","idx","uniquePositionsCompressed","lenPositions","xmin","ymin","zmin","xwid","ywid","zwid","maxInt","xMultiplier","yMultiplier","zMultiplier","verify","num","translationMat4v","scalingMat4v","A","F","m","C","k","B","D","mulMat4","quantizePositions3","vx","vy","vz","positionsMap","precision","pow","lenUniquePositions","round","weldVertices","numIndices","ia","ib","ic","subVec3","cross3Vec3","normalizeVec3","face","buildFaces","edge1","edge2","index1","index2","edge","thresholdDot","cos","edges","largeIndex","faceIndex","face1","face2","dotVec3","Uint32Array","buildEdgeIndices","_uniquifyPositions","maxPositions","setMaxNumberOfPositions","seq","remappings","sort","uniqueIdx","uniqueEdgeIndices","uniqueIndices","uniquifyPositions","bitsPerBucket","checkResult","Int32Array","sortedIndices","preSortIndices","edgeSearch","el0","el1","tmp","compare_fn","cmp","alreadyOutputEdgeIndices","fill","numPositions","bucketIndicesRemap","buckets","addEmptyBucket","newBucket","maxNumPositions","bucketNumber","currentBucket","additonalPositionsInBucket","ii0","ii1","ii2","edgeIndex","newBytesPerIndex","originalSize","newSize","bucket","meshDict","doCheckResult","rebucketPositions","compressGeometryParams","createGeometryCompressed","geometryCompressedParams","textureSetId","meshIds","meshIdIdx","meshIdLen","meshId","_this3","countTextures","_loop","encodingOptions","load","encodedData","encodedImageData","leni","_onModelBuilts","_onModelDestroys","_center","_registerObjects","_deregisterObjects","Scene","_deregisterObjects2","_registerObjects2","sceneModel","xmax","ymax","zmax","valid","objectId","hasOwnProperty","earcut","holeIndices","dim","minX","minY","maxX","maxY","invSize","hasHoles","outerLen","outerNode","linkedList","triangles","next","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","equals","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","minZ","maxZ","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","qx","Infinity","tan","mx","my","tanMin","abs","sectorContainsSector","findHoleBridge","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","a2","Node","b2","an","bp","sum","deviation","polygonArea","trianglesArea","flatten","vertices","holes","dimensions","holeIndex","G","Bridge","BridgePart","BridgeInstallation","BridgeConstructiveElement","BridgeRoom","BridgeFurniture","Building","BuildingPart","BuildingInstallation","BuildingConstructiveElement","BuildingFurniture","BuildingStorey","BuildingRoom","BuildingUnit","CityFurniture","CityObjectGroup","LandUse","OtherConstruction","PlantCover","SolitaryVegetationObject","TINRelief","TransportationSquare","Railway","Road","Tunnel","TunnelPart","TunnelInstallation","TunnelConstructiveElement","TunnelHollowSpace","TunnelFurniture","WaterBody","Waterway","tempVec2a","createVec2","tempVec3a","tempVec3b","tempVec3c","transformVertices","transform","rotateX","transformedVertices","parseCityObject","ctx","cityObject","typeCodes","parent","parents","objectMaterial","surfaceMaterials","appearance","fileData","materials","geometryMaterial","material","themeIds","theme","parseGeometrySurfacesWithOwnMaterials","parseGeometrySurfacesWithSharedMaterial","parseRelationship","parseSurfacesWithOwnMaterials","boundaries","shells","solids","surfaces","surface","surfaceMaterial","diffuseColor","transparency","sharedIndices","geometryCfg","newFace","extractLocalIndices","apply","pList","getNormalOfPositions","pv","to2D","tr","nextId","parseSurfacesWithSharedMaterial","primitiveCfg","boundary","newBoundary","index","vertexIndex","nexti","_p","_n","re","x3","lenVec3","tmp2","mulVec3Scalar","y3","zero$1","buf","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","D_CODES$1","_dist_code","_length_code","MAX_MATCH$1","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","tree","bi_reverse","gen_codes","bl_count","next_code","MAX_BITS$1","bits","init_block","LITERALS$1","dyn_ltree","dyn_dtree","bl_tree","END_BLOCK","opt_len","static_len","sym_next","bi_windup","smaller","_n2","_m2","pqdownheap","heap","heap_len","compress_block","ltree","dtree","lc","extra","sx","sym_buf","build_tree","desc","stree","heap_max","base","xbits","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","_tr_stored_block$1","stored_len","trees","_tr_init","LENGTH_CODES$1","L_CODES$1","tr_static_init","l_desc","d_desc","bl_desc","_tr_stored_block","_tr_flush_block","opt_lenb","static_lenb","max_blindex","strm","data_type","block_mask","detect_data_type","BL_CODES$1","build_bl_tree","strategy","lcodes","dcodes","blcodes","rank","send_all_trees","_tr_tally","sym_end","_tr_align","STATIC_TREES","bi_flush","adler32_1","adler","pos","s1","s2","crcTable","makeTable","crc32_1","crc","messages","constants$2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","Z_NO_FLUSH$2","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$2","MAX_MATCH","MIN_LOOKAHEAD","INIT_STATE","BUSY_STATE","FINISH_STATE","errorCode","msg","zero","slide_hash","wsize","w_size","hash_size","head","HASH","hash_shift","hash_mask","flush_pending","avail_out","output","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","avail_in","next_in","wrap","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","_w_size","more","str","window_size","insert","ins_h","deflate_stored","flush","left","have","min_block","pending_buf_size","used","high_water","deflate_fast","hash_head","bflush","match_length","max_lazy_match","MIN_MATCH","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","configuration_table","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","HEAP_SIZE","MAX_BITS","lit_bufsize","deflateStateCheck","deflateResetKeep","deflateReset","ret","lm_init","deflateInit2","windowBits","memLevel","deflate_1$2","deflateInit","deflateSetHeader","deflate","old_flush","header","level_flags","hcrc","comment","os","beg","copy","gzhead_extra","val","charCodeAt","bstate","deflate_huff","deflate_rle","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","deflateInfo","_has","common","flattenChunks","STR_APPLY_UIA_OK","__","_utf8len","strings","string2buf","c2","m_pos","str_len","buf_len","buf2string","out","utf16buf","c_len","buf2binstring","utf8border","zstream","toString$1","toString","Z_NO_FLUSH$1","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFLATED$1","Deflate$1","opt","raw","gzip","ended","dict","_dict_set","deflate$1","deflator","flush_mode","_flush_mode","onData","onEnd","deflate_1$1","Deflate","deflateRaw","constants","BAD$1","inffast","_in","_out","dmax","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","top","dolen","dodist","sane","lbase","lext","dbase","dext","inftrees","lens","lens_index","codes","table_index","work","incr","low","mask","sym","root","curr","drop","huff","MAXBITS","offs","here_bits","here_op","here_val","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","HEAD","DICT","TYPE","TYPEDO","COPY_","LEN_","LEN","CHECK","BAD","zswap32","InflateState","havedict","flags","check","wbits","ncode","nlen","ndist","lendyn","distdyn","back","was","inflateStateCheck","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","lenfix","distfix","virgin","fixedtables","updatewindow","inflate_1$2","inflateInit","inflate","put","last_bits","last_op","last_val","hbuf","order","inf_leave","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","dictid","inflateInfo","gzheader","Inflate$1","to","last_avail_out","next_out_utf8","utf8str","deflate_1","commander","require","npmPackage","fs","program","Command","option","argv","help","exit","readFileSync","cityObjects","CityObjects","parseCityJSON","loadCityJSON","xktArrayBuffer","xktData","lenDecodeMatrices","geometriesList","texturesList","textureSetsList","meshesList","objectsList","numGeometries","numTextures","numTextureSets","numMeshes","numObjects","lenBuckets","lenUVs","lenIndices8Bit","lenIndices16Bit","lenIndices32Bit","lenEdgeIndices8Bit","lenEdgeIndices16Bit","lenEdgeIndices32Bit","lenTextures","geometryIndices","textureIndices","textureSetIndices","geometryIndex","textureIndex","textureData","eachTextureDataPortion","eachTextureAttributes","colors","indices8Bit","indices16Bit","indices32Bit","edgeIndices8Bit","edgeIndices16Bit","edgeIndices32Bit","eachTextureSetTextures","decodeMatrices","eachBucketPositionsPortion","eachBucketColorsPortion","eachBucketUVsPortion","eachBucketIndicesPortion","eachBucketEdgeIndicesPortion","eachBucketIndicesBitness","eachGeometryPrimitiveType","eachGeometryBucketPortion","eachGeometryDecodeMatricesPortion","matrices","eachMeshGeometriesPortion","eachMeshMatricesPortion","eachMeshTextureSet","eachMeshMaterialAttributes","eachObjectId","eachObjectMeshesPortion","countBuckets","countPositions","countColors","countUVs","countIndices8Bit","countIndices16Bit","countIndices32Bit","countEdgeIndices8Bit","countEdgeIndices16Bit","countEdgeIndices32Bit","countDecodeMatrices","numBucketPositions","bucketIndicesBitness","portionIdx","textureAttrIdx","ClampToEdgeWrapping","textureSetIndex","eachTextureSetTexturesIndex","eachMeshMaterialAttributesIndex","matricesIndex","countMeshes","objectIndex","numObjectMeshes","modelToXKT","deflatedJSON","chr","elements","indexData","dataLen","elementsize","indexBuf","dataArray","deflatedData","pako","saveXKT","outputDir","substring","getBasePath","trim","existsSync","mkdirSync","writeFileSync","Buffer","main"],"mappings":"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"}