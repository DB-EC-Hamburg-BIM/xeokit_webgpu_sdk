{"version":3,"file":"index.modern.mjs","sources":["../src/IFCViewer.ts"],"sourcesContent":["import {View, Viewer, ViewLayer} from \"@xeokit/viewer\";\nimport {WebGLRenderer} from \"@xeokit/webglrenderer\";\nimport {KTX2TextureTranscoder} from \"@xeokit/ktx2\";\nimport {loadXKT, saveXKT} from \"@xeokit/xkt\";\nimport {CameraControl} from \"@xeokit/cameracontrol\";\nimport {BCFViewpoint, loadBCFViewpoint, saveBCFViewpoint} from \"@xeokit/bcf\";\nimport {LocaleService} from \"@xeokit/locale\";\nimport {Data} from \"@xeokit/data\";\nimport {Scene} from \"@xeokit/scene\";\nimport {SDKError} from \"@xeokit/core\";\nimport {createSceneObjectsKdTree3, SceneObjectsKdTree3} from \"@xeokit/kdtree3\";\n//import {Picker} from \"@xeokit/collision/pick\";\n\n/**\n * Minimal proof-of-concept IFC model viewer built from various xeokit SDK components.\n *\n * Demonstrates how the SDK components are designed to be used together in our applications.\n *\n * See {@link \"@xeokit/ifcviewer\"} for usage.\n */\nexport class IFCViewer {\n\n    /**\n     * The actual xeokit viewer.\n     */\n    readonly viewer: Viewer;\n\n    /**\n     * Scene representation.\n     */\n    readonly scene: Scene;\n\n    /**\n     * Semantic data model.\n     */\n    readonly data: Data;\n\n    /**\n     * Controls camera with user input.\n     */\n    readonly cameraControl: CameraControl;\n\n    /**\n     * An independently-configurable view.\n     */\n    readonly view: View;\n\n    /**\n     * Provides locale-specific string translations.\n     */\n    readonly localeService: LocaleService;\n\n    /**\n     * View layer that contains model objects.\n     */\n    readonly modelsLayer: ViewLayer;\n\n    /**\n     * View layer that contains background objects.\n     */\n    readonly backgroundLayer: ViewLayer;\n\n    /**\n     * HTML tree view to navigate scene objects.\n     */\n   // readonly treeView: TreeView;\n\n    /**\n     * Select objects and primitives using rays and boundaries.\n     *\n     * Use this with {@link IFCViewer.objectsKdTree3}.\n     */\n    //readonly picker: Picker;\n\n    #objectsKdTree3: SceneObjectsKdTree3 | null;\n\n    /**\n     * Creates an IFC model viewer.\n     *\n     * @param cfg\n     */\n    constructor(cfg: {\n        canvasElement: HTMLCanvasElement;\n    }) {\n\n        this.localeService = new LocaleService({});\n\n        this.scene = new Scene();\n\n        this.data = new Data();\n\n        this.viewer = new Viewer({\n            id: \"myViewer\",\n            renderer: new WebGLRenderer({\n                textureTranscoder: new KTX2TextureTranscoder({\n                    //  transcoderPath: \"./../dist/basis/\" // Optional, path to BasisU transcoder module\n                })\n            }),\n            scene: this.scene\n        });\n\n        const view = this.viewer.createView({\n            canvasElement: cfg.canvasElement\n        });\n\n        if (view instanceof SDKError) {\n            throw view;\n        } else {\n            this.view = view;\n        }\n\n        this.modelsLayer = this.view.createLayer({\n            id: \"models\"\n        });\n\n        this.backgroundLayer = this.view.createLayer({\n            id: \"background\"\n        });\n\n        this.cameraControl = new CameraControl(this.view, {});\n\n        // this.treeView = new TreeView({\n        //     view: this.view,\n        //     data: this.data,\n        //     containerElement: document.getElementById(\"myTreeViewContainer\"),\n        //     hierarchy: TreeView.GroupsHierarchy,\n        //     linkType: IfcRelAggregates,\n        //     groupTypes: [IfcBuilding, IfcBuildingStorey]\n        // });\n\n        this.#objectsKdTree3 = null;\n\n        this.scene.onModelCreated.subscribe(() => {\n            this.#objectsKdTree3 = null;\n        });\n\n        this.scene.onModelDestroyed.subscribe(() => {\n            this.#objectsKdTree3 = null;\n        });\n\n      //  this.picker = new Picker();\n    }\n\n    /**\n     * 3D spatial index for scene objects.\n     *\n     * Use this with {@link IFCViewer.picker}.\n     */\n    get objectsKdTree3() {\n        if (this.#objectsKdTree3 === null) {\n            this.#objectsKdTree3 = createSceneObjectsKdTree3(Object.values(this.scene.objects));\n        }\n        return this.#objectsKdTree3;\n    }\n\n    /**\n     * Loads an IFC model.\n     *\n     * @param cfg\n     */\n    loadModel(cfg: { id: string, src: string }): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const {id, src} = cfg;\n            if (this.scene.models[id]) {\n                reject(`Model with this ID is already loaded: \"${cfg.id}\"`);\n                return;\n            }\n            fetch(src)\n                .then(response => {\n                    if (response.ok) {\n                        response.arrayBuffer()\n                            .then(async data => {\n                                const dataModel = this.data.createModel({id});\n                                if (dataModel instanceof SDKError) {\n                                    reject(dataModel.message);\n                                    return;\n                                }\n                                const sceneModel = this.scene.createModel({\n                                    id,\n                                    layerId: this.modelsLayer.id\n                                });\n                                if (sceneModel instanceof SDKError) {\n                                    dataModel.destroy();\n                                    reject(sceneModel.message);\n                                    return;\n                                }\n                                await loadXKT({data, sceneModel, dataModel});\n                                await sceneModel.build();\n                                dataModel.build();\n                                resolve();\n                            });\n                    }\n                });\n        });\n    }\n\n    /**\n     * Unloads a model.\n     *\n     * @param id\n     */\n    unloadModel(id: string) {\n        const sceneModel = this.scene.models[id];\n        if (sceneModel) {\n            sceneModel.destroy();\n        }\n        const dataModel = this.data.models[id];\n        if (dataModel) {\n            dataModel.destroy();\n        }\n    }\n\n    /**\n     * Saves a model.\n     *\n     * @param id\n     */\n    saveModel(id: string): ArrayBuffer {\n        const sceneModel = this.scene.models[id];\n        if (!sceneModel) {\n            throw new Error(`Model not found: '$id'`);\n        }\n        const dataModel = this.data.models[id];\n        return saveXKT({\n            sceneModel,\n            dataModel\n        });\n    }\n\n    /**\n     * Unloads all models.\n     */\n    clearModels() {\n        this.data.clear();\n        this.scene.clear();\n    }\n\n    /**\n     * Loads a BCF viewpoint.\n     *\n     * @param bcfViewpoint\n     */\n    loadBCF(bcfViewpoint: BCFViewpoint) {\n        loadBCFViewpoint({\n            bcfViewpoint,\n            view: this.view,\n            includeLayerIds: [\n                this.modelsLayer.id\n            ]\n        });\n    }\n\n    /**\n     * Saves a BCF viewpoint.\n     */\n    saveBCF(): BCFViewpoint {\n        return saveBCFViewpoint({\n            view: this.view,\n            includeLayerIds: [\n                this.modelsLayer.id\n            ]\n        });\n    }\n}"],"names":["_objectsKdTree","_classPrivateFieldLooseKey","IFCViewer","constructor","cfg","this","viewer","scene","data","cameraControl","view","localeService","modelsLayer","backgroundLayer","Object","defineProperty","writable","value","LocaleService","Scene","Data","Viewer","id","renderer","WebGLRenderer","textureTranscoder","KTX2TextureTranscoder","createView","canvasElement","SDKError","createLayer","CameraControl","_classPrivateFieldLooseBase","onModelCreated","subscribe","onModelDestroyed","objectsKdTree3","createSceneObjectsKdTree3","values","objects","loadModel","_this","Promise","resolve","reject","src","models","fetch","then","response","ok","arrayBuffer","async","dataModel","createModel","message","sceneModel","layerId","destroy","loadXKT","build","unloadModel","saveModel","Error","saveXKT","clearModels","clear","loadBCF","bcfViewpoint","loadBCFViewpoint","includeLayerIds","saveBCF","saveBCFViewpoint"],"mappings":"8tBAU+E,IAAAA,eAAAC,0BAUlEC,EA6DTC,YAAYC,GAEXC,KA1DQC,YAKAC,EAAAA,KAAAA,kBAKAC,UAAI,EAAAH,KAKJI,mBAKAC,EAAAA,KAAAA,iBAKAC,mBAAa,EAAAN,KAKbO,iBAKAC,EAAAA,KAAAA,qBAAeC,EAAAA,OAAAC,eAAAV,KAAAL,EAAAgB,CAAAA,YAAAC,WAAA,IAyBpBZ,KAAKM,cAAgB,IAAIO,EAAc,CAAA,GAEvCb,KAAKE,MAAQ,IAAIY,EAEjBd,KAAKG,KAAO,IAAIY,EAEhBf,KAAKC,OAAS,IAAIe,EAAO,CACrBC,GAAI,WACJC,SAAU,IAAIC,EAAc,CACxBC,kBAAmB,IAAIC,EAAsB,MAIjDnB,MAAOF,KAAKE,QAGhB,MAAMG,EAAOL,KAAKC,OAAOqB,WAAW,CAChCC,cAAexB,EAAIwB,gBAGvB,GAAIlB,aAAgBmB,EAChB,MAAMnB,EAENL,KAAKK,KAAOA,EAGhBL,KAAKO,YAAcP,KAAKK,KAAKoB,YAAY,CACrCR,GAAI,WAGRjB,KAAKQ,gBAAkBR,KAAKK,KAAKoB,YAAY,CACzCR,GAAI,eAGRjB,KAAKI,cAAgB,IAAIsB,EAAc1B,KAAKK,KAAM,IAWlDsB,OAAIhC,GAAAA,GAAmB,KAEvBK,KAAKE,MAAM0B,eAAeC,UAAU,KAChCF,EAAA3B,KAAIL,GAAAA,GAAmB,IAAA,GAG3BK,KAAKE,MAAM4B,iBAAiBD,UAAU,KAClCF,EAAI3B,KAAAL,GAAAA,GAAmB,IAC3B,EAGJ,CAOIoC,qBAIA,OAH6B,OAAzBJ,EAAA3B,KAAIL,GAAAA,KACJgC,EAAI3B,KAAAL,GAAAA,GAAmBqC,EAA0BvB,OAAOwB,OAAOjC,KAAKE,MAAMgC,WAE9EP,EAAO3B,KAAIL,GAAAA,EACf,CAOAwC,UAAUpC,GAAgCqC,IAAAA,OACtC,OAAO,IAAIC,QAAc,CAACC,EAASC,KAC/B,MAAMtB,GAACA,EAAEuB,IAAEA,GAAOzC,EACdC,KAAKE,MAAMuC,OAAOxB,GAClBsB,EAAiD,0CAAAxC,EAAIkB,OAGzDyB,MAAMF,GACDG,KAAKC,IACEA,EAASC,IACTD,EAASE,cACJH,KAAKI,eAAM5C,GACR,MAAM6C,EAAYZ,EAAKjC,KAAK8C,YAAY,CAAChC,OACzC,GAAI+B,aAAqBxB,EAErB,YADAe,EAAOS,EAAUE,SAGrB,MAAMC,EAAaf,EAAKlC,MAAM+C,YAAY,CACtChC,KACAmC,QAAShB,EAAK7B,YAAYU,KAE9B,GAAIkC,aAAsB3B,EAGtB,OAFAwB,EAAUK,eACVd,EAAOY,EAAWD,eAGhBI,EAAQ,CAACnD,OAAMgD,aAAYH,oBAC3BG,EAAWI,QACjBP,EAAUO,QACVjB,GACJ,EACP,EACJ,EAEb,CAOAkB,YAAYvC,GACR,MAAMkC,EAAanD,KAAKE,MAAMuC,OAAOxB,GACjCkC,GACAA,EAAWE,UAEf,MAAML,EAAYhD,KAAKG,KAAKsC,OAAOxB,GAC/B+B,GACAA,EAAUK,SAElB,CAOAI,UAAUxC,GACN,MAAMkC,EAAanD,KAAKE,MAAMuC,OAAOxB,GACrC,IAAKkC,EACD,MAAU,IAAAO,MAAM,0BAGpB,OAAOC,EAAQ,CACXR,aACAH,UAHchD,KAAKG,KAAKsC,OAAOxB,IAKvC,CAKA2C,cACI5D,KAAKG,KAAK0D,QACV7D,KAAKE,MAAM2D,OACf,CAOAC,QAAQC,GACJC,EAAiB,CACbD,eACA1D,KAAML,KAAKK,KACX4D,gBAAiB,CACbjE,KAAKO,YAAYU,KAG7B,CAKAiD,UACI,OAAOC,EAAiB,CACpB9D,KAAML,KAAKK,KACX4D,gBAAiB,CACbjE,KAAKO,YAAYU,KAG7B"}