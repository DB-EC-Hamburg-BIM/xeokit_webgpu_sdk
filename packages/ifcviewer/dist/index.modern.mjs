import{Viewer as e}from"@xeokit/viewer";import{WebGLRenderer as t}from"@xeokit/webglrenderer";import{KTX2TextureTranscoder as i}from"@xeokit/ktx2";import{loadXKT as o,saveXKT as r}from"@xeokit/xkt";import{CameraControl as s}from"@xeokit/cameracontrol";import{loadBCFViewpoint as a,saveBCFViewpoint as d}from"@xeokit/bcf";import{LocaleService as n}from"@xeokit/locale";import{Data as c}from"@xeokit/data";import{Scene as l}from"@xeokit/scene";import{SDKError as h}from"@xeokit/core";import{createSceneObjectsKdTree3 as m}from"@xeokit/kdtree3";var v=0;function w(e){return"__private_"+v+++"_"+e}function u(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var f=/*#__PURE__*/w("objectsKdTree3");class y{constructor(o){this.viewer=void 0,this.scene=void 0,this.data=void 0,this.cameraControl=void 0,this.view=void 0,this.localeService=void 0,this.modelsLayer=void 0,this.backgroundLayer=void 0,Object.defineProperty(this,f,{writable:!0,value:void 0}),this.localeService=new n({}),this.scene=new l,this.data=new c,this.viewer=new e({id:"myViewer",renderer:new t({textureTranscoder:new i({})}),scene:this.scene});const r=this.viewer.createView({canvasElement:o.canvasElement});if(r instanceof h)throw r;this.view=r,this.modelsLayer=this.view.createLayer({id:"models"}),this.backgroundLayer=this.view.createLayer({id:"background"}),this.cameraControl=new s(this.view,{}),u(this,f)[f]=null,this.scene.onModelCreated.subscribe(()=>{u(this,f)[f]=null}),this.scene.onModelDestroyed.subscribe(()=>{u(this,f)[f]=null})}get objectsKdTree3(){return null===u(this,f)[f]&&(u(this,f)[f]=m(Object.values(this.scene.objects))),u(this,f)[f]}loadModel(e){var t=this;return new Promise((i,r)=>{const{id:s,src:a}=e;this.scene.models[s]?r(`Model with this ID is already loaded: "${e.id}"`):fetch(a).then(e=>{e.ok&&e.arrayBuffer().then(async function(e){const a=t.data.createModel({id:s});if(a instanceof h)return void r(a.message);const d=t.scene.createModel({id:s,layerId:t.modelsLayer.id});if(d instanceof h)return a.destroy(),void r(d.message);await o({data:e,sceneModel:d,dataModel:a}),await d.build(),a.build(),i()})})})}unloadModel(e){const t=this.scene.models[e];t&&t.destroy();const i=this.data.models[e];i&&i.destroy()}saveModel(e){const t=this.scene.models[e];if(!t)throw new Error("Model not found: '$id'");return r({sceneModel:t,dataModel:this.data.models[e]})}clearModels(){this.data.clear(),this.scene.clear()}loadBCF(e){a({bcfViewpoint:e,view:this.view,includeLayerIds:[this.modelsLayer.id]})}saveBCF(){return d({view:this.view,includeLayerIds:[this.modelsLayer.id]})}}export{y as IFCViewer};
//# sourceMappingURL=index.modern.mjs.map
