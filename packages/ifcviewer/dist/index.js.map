{"version":3,"file":"index.js","sources":["../src/IFCViewer.ts"],"sourcesContent":["import {View, Viewer, ViewLayer} from \"@xeokit/viewer\";\nimport {WebGLRenderer} from \"@xeokit/webglrenderer\";\nimport {KTX2TextureTranscoder} from \"@xeokit/ktx2\";\nimport {loadXKT, saveXKT} from \"@xeokit/xkt\";\nimport {CameraControl} from \"@xeokit/cameracontrol\";\nimport {BCFViewpoint, loadBCFViewpoint, saveBCFViewpoint} from \"@xeokit/bcf\";\nimport {LocaleService} from \"@xeokit/locale\";\nimport {Data} from \"@xeokit/data\";\nimport {Scene} from \"@xeokit/scene\";\nimport {SDKError} from \"@xeokit/core\";\nimport {createSceneObjectsKdTree3, SceneObjectsKdTree3} from \"@xeokit/kdtree3\";\n//import {Picker} from \"@xeokit/collision/pick\";\n\n/**\n * Minimal proof-of-concept IFC model viewer built from various xeokit SDK components.\n *\n * Demonstrates how the SDK components are designed to be used together in our applications.\n *\n * See {@link \"@xeokit/ifcviewer\"} for usage.\n */\nexport class IFCViewer {\n\n    /**\n     * The actual xeokit viewer.\n     */\n    readonly viewer: Viewer;\n\n    /**\n     * Scene representation.\n     */\n    readonly scene: Scene;\n\n    /**\n     * Semantic data model.\n     */\n    readonly data: Data;\n\n    /**\n     * Controls camera with user input.\n     */\n    readonly cameraControl: CameraControl;\n\n    /**\n     * An independently-configurable view.\n     */\n    readonly view: View;\n\n    /**\n     * Provides locale-specific string translations.\n     */\n    readonly localeService: LocaleService;\n\n    /**\n     * View layer that contains model objects.\n     */\n    readonly modelsLayer: ViewLayer;\n\n    /**\n     * View layer that contains background objects.\n     */\n    readonly backgroundLayer: ViewLayer;\n\n    /**\n     * HTML tree view to navigate scene objects.\n     */\n   // readonly treeView: TreeView;\n\n    /**\n     * Select objects and primitives using rays and boundaries.\n     *\n     * Use this with {@link IFCViewer.objectsKdTree3}.\n     */\n    //readonly picker: Picker;\n\n    #objectsKdTree3: SceneObjectsKdTree3 | null;\n\n    /**\n     * Creates an IFC model viewer.\n     *\n     * @param cfg\n     */\n    constructor(cfg: {\n        canvasElement: HTMLCanvasElement;\n    }) {\n\n        this.localeService = new LocaleService({});\n\n        this.scene = new Scene();\n\n        this.data = new Data();\n\n        this.viewer = new Viewer({\n            id: \"myViewer\",\n            renderer: new WebGLRenderer({\n                textureTranscoder: new KTX2TextureTranscoder({\n                    //  transcoderPath: \"./../dist/basis/\" // Optional, path to BasisU transcoder module\n                })\n            }),\n            scene: this.scene\n        });\n\n        const view = this.viewer.createView({\n            canvasElement: cfg.canvasElement\n        });\n\n        if (view instanceof SDKError) {\n            throw view;\n        } else {\n            this.view = view;\n        }\n\n        this.modelsLayer = this.view.createLayer({\n            id: \"models\"\n        });\n\n        this.backgroundLayer = this.view.createLayer({\n            id: \"background\"\n        });\n\n        this.cameraControl = new CameraControl(this.view, {});\n\n        // this.treeView = new TreeView({\n        //     view: this.view,\n        //     data: this.data,\n        //     containerElement: document.getElementById(\"myTreeViewContainer\"),\n        //     hierarchy: TreeView.GroupsHierarchy,\n        //     linkType: IfcRelAggregates,\n        //     groupTypes: [IfcBuilding, IfcBuildingStorey]\n        // });\n\n        this.#objectsKdTree3 = null;\n\n        this.scene.onModelCreated.subscribe(() => {\n            this.#objectsKdTree3 = null;\n        });\n\n        this.scene.onModelDestroyed.subscribe(() => {\n            this.#objectsKdTree3 = null;\n        });\n\n      //  this.picker = new Picker();\n    }\n\n    /**\n     * 3D spatial index for scene objects.\n     *\n     * Use this with {@link IFCViewer.picker}.\n     */\n    get objectsKdTree3() {\n        if (this.#objectsKdTree3 === null) {\n            this.#objectsKdTree3 = createSceneObjectsKdTree3(Object.values(this.scene.objects));\n        }\n        return this.#objectsKdTree3;\n    }\n\n    /**\n     * Loads an IFC model.\n     *\n     * @param cfg\n     */\n    loadModel(cfg: { id: string, src: string }): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const {id, src} = cfg;\n            if (this.scene.models[id]) {\n                reject(`Model with this ID is already loaded: \"${cfg.id}\"`);\n                return;\n            }\n            fetch(src)\n                .then(response => {\n                    if (response.ok) {\n                        response.arrayBuffer()\n                            .then(async data => {\n                                const dataModel = this.data.createModel({id});\n                                if (dataModel instanceof SDKError) {\n                                    reject(dataModel.message);\n                                    return;\n                                }\n                                const sceneModel = this.scene.createModel({\n                                    id,\n                                    layerId: this.modelsLayer.id\n                                });\n                                if (sceneModel instanceof SDKError) {\n                                    dataModel.destroy();\n                                    reject(sceneModel.message);\n                                    return;\n                                }\n                                await loadXKT({data, sceneModel, dataModel});\n                                await sceneModel.build();\n                                dataModel.build();\n                                resolve();\n                            });\n                    }\n                });\n        });\n    }\n\n    /**\n     * Unloads a model.\n     *\n     * @param id\n     */\n    unloadModel(id: string) {\n        const sceneModel = this.scene.models[id];\n        if (sceneModel) {\n            sceneModel.destroy();\n        }\n        const dataModel = this.data.models[id];\n        if (dataModel) {\n            dataModel.destroy();\n        }\n    }\n\n    /**\n     * Saves a model.\n     *\n     * @param id\n     */\n    saveModel(id: string): ArrayBuffer {\n        const sceneModel = this.scene.models[id];\n        if (!sceneModel) {\n            throw new Error(`Model not found: '$id'`);\n        }\n        const dataModel = this.data.models[id];\n        return saveXKT({\n            sceneModel,\n            dataModel\n        });\n    }\n\n    /**\n     * Unloads all models.\n     */\n    clearModels() {\n        this.data.clear();\n        this.scene.clear();\n    }\n\n    /**\n     * Loads a BCF viewpoint.\n     *\n     * @param bcfViewpoint\n     */\n    loadBCF(bcfViewpoint: BCFViewpoint) {\n        loadBCFViewpoint({\n            bcfViewpoint,\n            view: this.view,\n            includeLayerIds: [\n                this.modelsLayer.id\n            ]\n        });\n    }\n\n    /**\n     * Saves a BCF viewpoint.\n     */\n    saveBCF(): BCFViewpoint {\n        return saveBCFViewpoint({\n            view: this.view,\n            includeLayerIds: [\n                this.modelsLayer.id\n            ]\n        });\n    }\n}"],"names":["_objectsKdTree","_classPrivateFieldLooseKey","IFCViewer","cfg","_this","viewer","this","scene","data","cameraControl","view","localeService","modelsLayer","backgroundLayer","Object","defineProperty","writable","value","LocaleService","Scene","Data","Viewer","id","renderer","WebGLRenderer","textureTranscoder","KTX2TextureTranscoder","createView","canvasElement","SDKError","createLayer","CameraControl","_classPrivateFieldLooseBase","onModelCreated","subscribe","onModelDestroyed","_proto","prototype","loadModel","_this2","Promise","resolve","reject","src","models","fetch","then","response","ok","arrayBuffer","dataModel","createModel","message","sceneModel","layerId","destroy","loadXKT","build","e","unloadModel","saveModel","Error","saveXKT","clearModels","clear","loadBCF","bcfViewpoint","loadBCFViewpoint","includeLayerIds","saveBCF","saveBCFViewpoint","key","get","createSceneObjectsKdTree3","values","objects"],"mappings":"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"}